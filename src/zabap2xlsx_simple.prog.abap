*--------------------------------------------------------------------*
* https://github.com/kkayacan/abap2xlsx-simple
*--------------------------------------------------------------------*

*--------------------------------------------------------------------*
* DATA ELEMENTS
*--------------------------------------------------------------------*
TYPES: zexcel_creator                 TYPE c LENGTH 80,
       zexcel_title                   TYPE c LENGTH 80,
       zexcel_subject                 TYPE c LENGTH 80,
       zexcel_description             TYPE c LENGTH 80,
       zexcel_keywords                TYPE c LENGTH 80,
       zexcel_category                TYPE c LENGTH 80,
       zexcel_company                 TYPE c LENGTH 80,
       zexcel_application             TYPE c LENGTH 80,
       zexcel_docsecurity             TYPE n LENGTH 1,
       zexcel_scalecrop               TYPE flag,
       zexcel_appversion              TYPE c LENGTH 7,
       zexcel_book_protection         TYPE xfeld,
       zexcel_aes_password            TYPE c LENGTH 50,
       zexcel_style_color_argb        TYPE c LENGTH 8,
       zexcel_revisionspassword       TYPE c LENGTH 80,
       zexcel_workbookpassword        TYPE c LENGTH 80,
       zexcel_cell_column_alpha       TYPE c LENGTH 3,
       zexcel_cell_row                TYPE i,
       zexcel_sheet_hidden            TYPE flag,
       zexcel_sheet_showzeros         TYPE xfeld,
       zexcel_cell_style              TYPE uuid,
       zexcel_sheet_zoomscale         TYPE int2,
       zexcel_sheet_summary           TYPE i,
       zexcel_sheet_selected          TYPE flag,
       zexcel_sheet_protection_bool   TYPE c LENGTH 1, "1:True, 0:False
       zexcel_sheet_protection        TYPE xfeld,
       zexcel_break                   TYPE int1,
       zexcel_print_gridlines         TYPE flag,
       zexcel_cell_column             TYPE i,
       zexcel_cell_value              TYPE string,
       zexcel_cell_formula            TYPE string,
       zexcel_cell_coords             TYPE string,
       zexcel_cell_data_type          TYPE string,
       zexcel_sheet_orienatation      TYPE c LENGTH 20,
       zexcel_sheet_paper_size        TYPE int1,
       zexcel_style_color_indexed     TYPE i,
       zexcel_style_color_theme       TYPE i,
       zexcel_style_color_tint        TYPE cd0fltp,
       zexcel_style_font_scheme       TYPE c LENGTH 20,
       zexcel_dec_8_2                 TYPE dec6_2,
       zexcel_show_gridlines          TYPE flag,
       zexcel_conditional_type        TYPE c LENGTH 10,
       zexcel_condition_rule_iconset  TYPE c LENGTH 20,
       zexcel_condition_operator      TYPE c LENGTH 20,
       zexcel_condition_rule          TYPE c LENGTH 20,
       zexcel_conditional_show_value  TYPE c LENGTH 1, "1:True, 0:False
       zexcel_style_formula           TYPE string,
       zexcel_conditional_value       TYPE string,
       zexcel_color                   TYPE c LENGTH 8,
       zexcel_style_priority          TYPE i,
       zexcel_data_val_error_style    TYPE c LENGTH 20,
       zexcel_data_val_operator       TYPE c LENGTH 20,
       zexcel_data_val_type           TYPE c LENGTH 20,
       zexcel_validation_formula1     TYPE string,
       zexcel_range_name              TYPE string,
       zexcel_range_guid              TYPE uuid,
       zexcel_sheet_title             TYPE c LENGTH 31,
       zexcel_range_value             TYPE string,
       zexcel_table_style             TYPE string,
       zexcel_table_totals_function   TYPE string,
       zexcel_style_font_family       TYPE int1,
       zexcel_style_font_name         TYPE c LENGTH 255,
       zexcel_style_font_size         TYPE int1,
       zexcel_style_font_underline    TYPE c LENGTH 20,
       zexcel_fill_type               TYPE c LENGTH 20,
       zexcel_rotation                TYPE i,
       zexcel_border                  TYPE c LENGTH 20,
       zexcel_diagonal                TYPE int1,
       zexcel_alignment               TYPE c LENGTH 20,
       zexcel_text_rotation           TYPE int1,
       zexcel_indent                  TYPE int1,
       zexcel_number_format           TYPE string,
       zexcel_cell_protection         TYPE c LENGTH 1, "1:Locked, 0:Unlocked
       zexcel_locked                  TYPE xfeld,
       zexcel_hidden                  TYPE xfeld,
       zexcel_active_worksheet        TYPE int1,
       zexcel_drawing_type            TYPE c LENGTH 5, "image, chart
       zexcel_pwd_hash                TYPE n2_raw2,
       zexcel_show_rowcolheader       TYPE flag,
       zexcel_graph_type              TYPE int1,
       zexcel_drawing_anchor          TYPE c LENGTH 3, "ABS:Absolute position, ONE:One-cell anchor, TWO:Two-cell anchor
       zexcel_worksheets_name         TYPE c LENGTH 80,
       zexcel_style_color_component   TYPE c LENGTH 2,
       zexcel_converter_option_filter TYPE c LENGTH 1, "'':Option not converted, X:Option Converted, -:Option applied converted
       zexcel_converter_option_subtot TYPE c LENGTH 1, "'':Option not converted, X:Option Converted, -:Option applied converted
       zexcel_converter_option_hidenc TYPE c LENGTH 1, "'':Option not converted, X:Option Converted, -:Option applied converted
       zexcel_converter_option_hidehd TYPE c LENGTH 1, "'':Option not converted, X:Option Converted, -:Option applied converted
       zexcel_pane_type               TYPE string,
       zexcel_pane_state              TYPE string.

*--------------------------------------------------------------------*
* DEFERRED CLASS DEFINITONS
*--------------------------------------------------------------------*
CLASS: zcl_excel                    DEFINITION DEFERRED,
       zcl_excel_drawing            DEFINITION DEFERRED,
       zcl_excel_worksheet          DEFINITION DEFERRED,
       zcl_excel_theme              DEFINITION DEFERRED,
       zcl_excel_theme_color_scheme DEFINITION DEFERRED.

*--------------------------------------------------------------------*
* STRUCTURES
*--------------------------------------------------------------------*
TYPES: BEGIN OF zexcel_s_cell_data,
         cell_row     TYPE  zexcel_cell_row,
         cell_column  TYPE  zexcel_cell_column,
         cell_value   TYPE  zexcel_cell_value,
         cell_formula TYPE  zexcel_cell_formula,
         cell_coords  TYPE  zexcel_cell_coords,
         cell_style   TYPE  zexcel_cell_style,
         data_type    TYPE  zexcel_cell_data_type,
       END OF zexcel_s_cell_data.

TYPES: BEGIN OF zexcel_s_style_color,
         rgb     TYPE  zexcel_style_color_argb,
         indexed TYPE  zexcel_style_color_indexed,
         theme   TYPE  zexcel_style_color_theme,
         tint    TYPE  zexcel_style_color_tint,
       END OF zexcel_s_style_color.

TYPES: BEGIN OF zexcel_s_style_font,
         bold           TYPE  flag,
         italic         TYPE  flag,
         underline      TYPE  flag,
         underline_mode TYPE  char20,
         strikethrough  TYPE  flag,
         size           TYPE  int1,
         color          TYPE  zexcel_s_style_color,
         name           TYPE  char255,
         family         TYPE  int1,
         scheme         TYPE  zexcel_style_font_scheme,
       END OF zexcel_s_style_font.

TYPES: BEGIN OF zexcel_s_worksheet_head_foot,
         left_value   TYPE  dstring,
         left_font    TYPE  zexcel_s_style_font,
         center_value TYPE  dstring,
         center_font  TYPE  zexcel_s_style_font,
         right_value  TYPE  dstring,
         right_font   TYPE  zexcel_s_style_font,
         left_image   TYPE REF TO zcl_excel_drawing,
         right_image  TYPE REF TO zcl_excel_drawing,
         center_image TYPE REF TO zcl_excel_drawing,
       END OF zexcel_s_worksheet_head_foot.

TYPES: BEGIN OF zexcel_s_sheet_style,
         guid TYPE zexcel_cell_style,
       END OF zexcel_s_sheet_style.

TYPES: BEGIN OF zexcel_s_tabcolor,
         rgb TYPE zexcel_style_color_argb,
       END OF zexcel_s_tabcolor.

TYPES: BEGIN OF zexcel_conditional_cellis,
         formula    TYPE zexcel_style_formula,
         formula2   TYPE zexcel_style_formula,
         operator   TYPE zexcel_condition_operator,
         cell_style TYPE zexcel_cell_style,
       END OF zexcel_conditional_cellis.

TYPES: BEGIN OF zexcel_conditional_colorscale,
         cfvo1_type  TYPE  zexcel_conditional_type,
         cfvo1_value TYPE  zexcel_conditional_value,
         cfvo2_type  TYPE  zexcel_conditional_type,
         cfvo2_value TYPE  zexcel_conditional_value,
         cfvo3_type  TYPE  zexcel_conditional_type,
         cfvo3_value TYPE  zexcel_conditional_value,
         colorrgb1   TYPE  zexcel_color,
         colorrgb2   TYPE  zexcel_color,
         colorrgb3   TYPE  zexcel_color,
       END OF zexcel_conditional_colorscale.

TYPES: BEGIN OF zexcel_conditional_databar,
         cfvo1_type  TYPE  zexcel_conditional_type,
         cfvo1_value TYPE  zexcel_conditional_value,
         cfvo2_type  TYPE  zexcel_conditional_type,
         cfvo2_value TYPE  zexcel_conditional_value,
         colorrgb    TYPE  zexcel_color,
       END OF zexcel_conditional_databar.

TYPES: BEGIN OF zexcel_conditional_expression,
         formula    TYPE  zexcel_style_formula,
         cell_style TYPE  zexcel_cell_style,
       END OF zexcel_conditional_expression.

TYPES: BEGIN OF zexcel_conditional_iconset,
         iconset     TYPE  zexcel_condition_rule_iconset,
         cfvo1_type  TYPE  zexcel_conditional_type,
         cfvo1_value TYPE  zexcel_conditional_value,
         cfvo2_type  TYPE  zexcel_conditional_type,
         cfvo2_value TYPE  zexcel_conditional_value,
         cfvo3_type  TYPE  zexcel_conditional_type,
         cfvo3_value TYPE  zexcel_conditional_value,
         cfvo4_type  TYPE  zexcel_conditional_type,
         cfvo4_value TYPE  zexcel_conditional_value,
         cfvo5_type  TYPE  zexcel_conditional_type,
         cfvo5_value TYPE  zexcel_conditional_value,
         showvalue   TYPE  zexcel_conditional_show_value,
       END OF zexcel_conditional_iconset.

TYPES: BEGIN OF zexcel_conditional_top10,
         topxx_count TYPE  int4,
         percent     TYPE  flag,
         bottom      TYPE  flag,
         cell_style  TYPE  zexcel_cell_style,
       END OF zexcel_conditional_top10.

TYPES: BEGIN OF zexcel_conditional_above_avg,
         above_average      TYPE  flag,
         equal_average      TYPE  flag,
         standard_deviation TYPE  num1,
         cell_style         TYPE  zexcel_cell_style,
       END OF zexcel_conditional_above_avg.

TYPES: BEGIN OF zexcel_s_fieldcatalog,
         tabname         TYPE  tabname,
         fieldname       TYPE  fieldname,
         position        TYPE  tabfdpos,
         scrtext_s       TYPE  scrtext_s,
         scrtext_m       TYPE  scrtext_m,
         scrtext_l       TYPE  scrtext_l,
         dynpfld         TYPE  dynprofld,
         style           TYPE  zexcel_cell_style,
         style_header    TYPE  zexcel_cell_style,
         style_total     TYPE  zexcel_cell_style,
         style_cond      TYPE  zexcel_cell_style,
         totals_function TYPE  zexcel_table_totals_function,
         formula         TYPE  flag,
         abap_type       TYPE c LENGTH 1,
       END OF zexcel_s_fieldcatalog.

TYPES: BEGIN OF zexcel_s_table_settings,
         table_style         TYPE  zexcel_table_style,
         table_name          TYPE  dstring,
         top_left_column     TYPE  zexcel_cell_column_alpha,
         top_left_row        TYPE  zexcel_cell_row,
         show_row_stripes    TYPE  flag,
         show_column_stripes TYPE  flag,
         bottom_right_column TYPE  zexcel_cell_column_alpha,
         bottom_right_row    TYPE  zexcel_cell_row,
         nofilters           TYPE  flag,
       END OF zexcel_s_table_settings.

TYPES: BEGIN OF zexcel_s_cstyle_font,
         bold           TYPE  flag,
         color          TYPE  zexcel_s_style_color,
         family         TYPE  zexcel_style_font_family,
         italic         TYPE  flag,
         name           TYPE  zexcel_style_font_name,
         scheme         TYPE  zexcel_style_font_scheme,
         size           TYPE  zexcel_style_font_size,
         strikethrough  TYPE  flag,
         underline      TYPE  flag,
         underline_mode TYPE  zexcel_style_font_underline,
       END OF zexcel_s_cstyle_font.

TYPES: BEGIN OF zexcel_s_cstylex_gradtype,
         type      TYPE  flag,
         degree    TYPE  flag,
         bottom    TYPE  flag,
         left      TYPE  flag,
         top       TYPE  flag,
         right     TYPE  flag,
         position1 TYPE  flag,
         position2 TYPE  flag,
         position3 TYPE  flag,
       END OF zexcel_s_cstylex_gradtype.

TYPES: BEGIN OF zexcel_s_cstyle_fill,
         filltype TYPE  zexcel_fill_type,
         rotation TYPE  zexcel_rotation,
         fgcolor  TYPE  zexcel_s_style_color,
         bgcolor  TYPE  zexcel_s_style_color,
         gradtype TYPE  zexcel_s_cstylex_gradtype,
       END OF zexcel_s_cstyle_fill.

TYPES: BEGIN OF zexcel_s_cstyle_border,
         border_style TYPE  zexcel_border,
         border_color TYPE  zexcel_s_style_color,
       END OF zexcel_s_cstyle_border.

TYPES: BEGIN OF zexcel_s_cstyle_borders,
         allborders    TYPE  zexcel_s_cstyle_border,
         diagonal      TYPE  zexcel_s_cstyle_border,
         diagonal_mode TYPE  zexcel_diagonal,
         down          TYPE  zexcel_s_cstyle_border,
         left          TYPE  zexcel_s_cstyle_border,
         right         TYPE  zexcel_s_cstyle_border,
         top           TYPE  zexcel_s_cstyle_border,
       END OF zexcel_s_cstyle_borders.

TYPES: BEGIN OF zexcel_s_cstyle_alignment,
         horizontal   TYPE  zexcel_alignment,
         vertical     TYPE  zexcel_alignment,
         textrotation TYPE  zexcel_text_rotation,
         wraptext     TYPE  flag,
         shrinktofit  TYPE  flag,
         indent       TYPE  zexcel_indent,
       END OF zexcel_s_cstyle_alignment.

TYPES: BEGIN OF zexcel_s_cstyle_number_format,
         format_code TYPE  zexcel_number_format,
       END OF zexcel_s_cstyle_number_format.

TYPES: BEGIN OF zexcel_s_cstyle_protection,
         hidden TYPE  zexcel_cell_protection,
         locked TYPE  zexcel_cell_protection,
       END OF zexcel_s_cstyle_protection.

TYPES: BEGIN OF zexcel_s_cstyle_complete,
         font          TYPE  zexcel_s_cstyle_font,
         fill          TYPE  zexcel_s_cstyle_fill,
         borders       TYPE  zexcel_s_cstyle_borders,
         alignment     TYPE  zexcel_s_cstyle_alignment,
         number_format TYPE  zexcel_s_cstyle_number_format,
         protection    TYPE  zexcel_s_cstyle_protection,
       END OF zexcel_s_cstyle_complete.

TYPES: BEGIN OF zexcel_s_cstylex_color,
         rgb     TYPE  flag,
         indexed TYPE  flag,
         theme   TYPE  flag,
         tint    TYPE  flag,
       END OF zexcel_s_cstylex_color.

TYPES: BEGIN OF zexcel_s_cstylex_font,
         bold           TYPE  flag,
         color          TYPE  zexcel_s_cstylex_color,
         family         TYPE  flag,
         italic         TYPE  flag,
         name           TYPE  flag,
         scheme         TYPE  flag,
         size           TYPE  flag,
         strikethrough  TYPE  flag,
         underline      TYPE  flag,
         underline_mode TYPE  flag,
       END OF zexcel_s_cstylex_font.

TYPES: BEGIN OF zexcel_s_cstylex_fill,
         filltype TYPE  flag,
         rotation TYPE  flag,
         fgcolor  TYPE  zexcel_s_cstylex_color,
         bgcolor  TYPE  zexcel_s_cstylex_color,
         gradtype TYPE  zexcel_s_cstylex_gradtype,
       END OF zexcel_s_cstylex_fill.

TYPES: BEGIN OF zexcel_s_cstylex_border,
         border_style TYPE  flag,
         border_color TYPE  zexcel_s_cstylex_color,
       END OF zexcel_s_cstylex_border.

TYPES: BEGIN OF zexcel_s_cstylex_borders,
         allborders    TYPE  zexcel_s_cstylex_border,
         diagonal      TYPE  zexcel_s_cstylex_border,
         diagonal_mode TYPE  flag,
         down          TYPE  zexcel_s_cstylex_border,
         left          TYPE  zexcel_s_cstylex_border,
         right         TYPE  zexcel_s_cstylex_border,
         top           TYPE  zexcel_s_cstylex_border,
       END OF zexcel_s_cstylex_borders.

TYPES: BEGIN OF zexcel_s_cstylex_alignment,
         horizontal   TYPE  flag,
         vertical     TYPE  flag,
         textrotation TYPE  flag,
         wraptext     TYPE  flag,
         shrinktofit  TYPE  flag,
         indent       TYPE  flag,
       END OF zexcel_s_cstylex_alignment.

TYPES: BEGIN OF zexcel_s_cstylex_number_format,
         format_code TYPE  flag,
       END OF zexcel_s_cstylex_number_format.

TYPES: BEGIN OF zexcel_s_cstylex_protection,
         hidden TYPE  flag,
         locked TYPE  flag,
       END OF zexcel_s_cstylex_protection.

TYPES: BEGIN OF zexcel_s_cstylex_complete,
         font          TYPE  zexcel_s_cstylex_font,
         fill          TYPE  zexcel_s_cstylex_fill,
         borders       TYPE  zexcel_s_cstylex_borders,
         alignment     TYPE  zexcel_s_cstylex_alignment,
         number_format TYPE  zexcel_s_cstylex_number_format,
         protection    TYPE  zexcel_s_cstylex_protection,
       END OF zexcel_s_cstylex_complete.

TYPES: BEGIN OF zexcel_s_gradient_type,
         type      TYPE  zexcel_fill_type,
         degree    TYPE  char3,
         bottom    TYPE  char3,
         left      TYPE  char3,
         top       TYPE  char3,
         right     TYPE  char3,
         position1 TYPE  char3,
         position2 TYPE  char3,
         position3 TYPE  char3,
       END OF zexcel_s_gradient_type.

TYPES: BEGIN OF zexcel_s_style_fill,
         filltype TYPE  zexcel_fill_type,
         rotation TYPE  zexcel_rotation,
         fgcolor  TYPE  zexcel_s_style_color,
         bgcolor  TYPE  zexcel_s_style_color,
         gradtype TYPE  zexcel_s_gradient_type,
       END OF zexcel_s_style_fill.

TYPES: BEGIN OF zexcel_s_style_border,
         left_color     TYPE  zexcel_s_style_color,
         left_style     TYPE  zexcel_border,
         right_color    TYPE  zexcel_s_style_color,
         right_style    TYPE  zexcel_border,
         top_color      TYPE  zexcel_s_style_color,
         top_style      TYPE  zexcel_border,
         bottom_color   TYPE  zexcel_s_style_color,
         bottom_style   TYPE  zexcel_border,
         diagonal_color TYPE  zexcel_s_style_color,
         diagonal_style TYPE  zexcel_border,
         diagonalup     TYPE  int1,
         diagonaldown   TYPE  int1,
       END OF zexcel_s_style_border.

TYPES: BEGIN OF zexcel_s_style_alignment,
         horizontal   TYPE  zexcel_alignment,
         vertical     TYPE  zexcel_alignment,
         textrotation TYPE  zexcel_text_rotation,
         wraptext     TYPE  flag,
         shrinktofit  TYPE  flag,
         indent       TYPE  zexcel_indent,
       END OF zexcel_s_style_alignment.

TYPES: BEGIN OF zexcel_s_style_numfmt,
         numfmt TYPE  zexcel_number_format,
       END OF zexcel_s_style_numfmt.

TYPES: BEGIN OF zexcel_s_style_protection,
         locked TYPE  zexcel_locked,
         hidden TYPE  zexcel_hidden,
       END OF zexcel_s_style_protection.

TYPES: BEGIN OF zexcel_s_drawings,
         drawing TYPE REF TO zcl_excel_drawing,
       END OF zexcel_s_drawings.

TYPES: BEGIN OF zexcel_s_autofilter_area,
         row_start TYPE  zexcel_cell_row,
         col_start TYPE  zexcel_cell_column,
         row_end   TYPE  zexcel_cell_row,
         col_end   TYPE  zexcel_cell_column,
       END OF zexcel_s_autofilter_area.

TYPES: BEGIN OF zexcel_s_autofilter_values,
         column TYPE  zexcel_cell_column,
         value  TYPE  zexcel_cell_value,
       END OF zexcel_s_autofilter_values.

TYPES: BEGIN OF zexcel_drawing_location,
         col        TYPE  int4,
         col_offset TYPE  int4,
         row        TYPE  int4,
         row_offset TYPE  int4,
       END OF zexcel_drawing_location.

TYPES: BEGIN OF zexcel_drawing_size,
         width  TYPE  int4,
         height TYPE  int4,
       END OF zexcel_drawing_size.

TYPES: BEGIN OF zexcel_drawing_position,
         anchor TYPE  zexcel_drawing_anchor,
         from   TYPE  zexcel_drawing_location,
         to     TYPE  zexcel_drawing_location,
         size   TYPE  zexcel_drawing_size,
       END OF zexcel_drawing_position.

TYPES: BEGIN OF zexcel_s_stylemapping,
         dynamic_style_guid TYPE  zexcel_cell_style,
         complete_style     TYPE  zexcel_s_cstyle_complete,
         complete_stylex    TYPE  zexcel_s_cstylex_complete,
         guid               TYPE  zexcel_cell_style,
         added_to_iterator  TYPE  flag,
       END OF zexcel_s_stylemapping.

TYPES: BEGIN OF zexcel_s_styles_cond_mapping,
         guid  TYPE  guid_16,
         style TYPE  int4,
         dxf   TYPE  int4,
       END OF zexcel_s_styles_cond_mapping.

TYPES: BEGIN OF zexcel_s_converter_option,
         filter TYPE  zexcel_converter_option_filter,
         subtot TYPE  zexcel_converter_option_subtot,
         hidenc TYPE  zexcel_converter_option_hidenc,
         hidehd TYPE  zexcel_converter_option_hidehd,
       END OF zexcel_s_converter_option.

TYPES: BEGIN OF zexcel_s_converter_fcat,
         tabname         TYPE  tabname,
         fieldname       TYPE  fieldname,
         columnname      TYPE  fieldname,
         position        TYPE  tabfdpos,
         inttype         TYPE  inttype,
         decimals        TYPE  int1,
         scrtext_s       TYPE  scrtext_s,
         scrtext_m       TYPE  scrtext_m,
         scrtext_l       TYPE  scrtext_l,
         totals_function TYPE  zexcel_table_totals_function,
         fix_column      TYPE  flag,
         alignment       TYPE  zexcel_alignment,
         is_optimized    TYPE  flag,
         is_hidden       TYPE  flag,
         is_collapsed    TYPE  flag,
         is_subtotalled  TYPE  flag,
         sort_level      TYPE  int4,
         style_hdr       TYPE  zexcel_cell_style,
         style_normal    TYPE  zexcel_cell_style,
         style_stripped  TYPE  zexcel_cell_style,
         style_total     TYPE  zexcel_cell_style,
         style_subtotal  TYPE  zexcel_cell_style,
         col_id          TYPE  lvc_colid,
         convexit        TYPE  convexit,
       END OF zexcel_s_converter_fcat.

TYPES: BEGIN OF zexcel_s_converter_layo,
         is_stripped        TYPE  flag,
         is_fixed           TYPE  flag,
         max_subtotal_level TYPE  int4,
       END OF zexcel_s_converter_layo.

TYPES: BEGIN OF zexcel_s_converter_col,
         rownumber  TYPE  zexcel_cell_row,
         columnname TYPE  fieldname,
         fontcolor  TYPE  zexcel_style_color_argb,
         fillcolor  TYPE  zexcel_style_color_argb,
         nokeycol   TYPE  lvc_nokeyc,
       END OF zexcel_s_converter_col.

TYPES: BEGIN OF zexcel_s_converter_fil,
         rownumber  TYPE  zexcel_cell_row,
         columnname TYPE  fieldname,
       END OF zexcel_s_converter_fil.

TYPES: BEGIN OF zexcel_pane,
         ysplit      TYPE  zexcel_cell_row,
         xsplit      TYPE  zexcel_cell_row,
         topleftcell TYPE  zexcel_cell_coords,
         activepane  TYPE  zexcel_pane_type,
         state       TYPE  zexcel_pane_state,
       END OF zexcel_pane.

TYPES: BEGIN OF zexcel_s_shared_string,
         string_no    TYPE  int4,
         string_value TYPE  zexcel_cell_value,
         string_type  TYPE  zexcel_cell_data_type,
       END OF zexcel_s_shared_string.

TYPES: BEGIN OF zexcel_s_styles_mapping,
         guid  TYPE  guid_16,
         style TYPE  int4,
       END OF zexcel_s_styles_mapping.

TYPES: BEGIN OF zexcel_s_cellxfs,
         numfmtid          TYPE  int4,
         fontid            TYPE  int4,
         fillid            TYPE  int4,
         borderid          TYPE  int4,
         xfid              TYPE  int4,
         alignmentid       TYPE  int4,
         protectionid      TYPE  int4,
         applynumberformat TYPE  int4,
         applyfont         TYPE  int4,
         applyfill         TYPE  int4,
         applyborder       TYPE  int4,
         applyalignment    TYPE  int4,
         applyprotection   TYPE  int4,
       END OF zexcel_s_cellxfs.

*--------------------------------------------------------------------*
* TABLE TYPES
*--------------------------------------------------------------------*
TYPES: zexcel_t_style_color_argb    TYPE STANDARD TABLE OF zexcel_style_color_argb      WITH DEFAULT KEY,
       zexcel_t_cell_data           TYPE SORTED   TABLE OF zexcel_s_cell_data
                                                                    WITH UNIQUE KEY cell_row cell_column,
       zexcel_t_sheet_style         TYPE STANDARD TABLE OF zexcel_s_sheet_style         WITH DEFAULT KEY,
       zexcel_t_fieldcatalog        TYPE STANDARD TABLE OF zexcel_s_fieldcatalog        WITH DEFAULT KEY,
       zexcel_t_drawings            TYPE STANDARD TABLE OF zexcel_s_drawings            WITH DEFAULT KEY,
       zexcel_t_autofilter_values   TYPE STANDARD TABLE OF zexcel_s_autofilter_values   WITH DEFAULT KEY,
       zexcel_t_stylemapping1       TYPE HASHED   TABLE OF zexcel_s_stylemapping
                                       WITH UNIQUE KEY dynamic_style_guid complete_stylex complete_style,
       zexcel_t_stylemapping2       TYPE HASHED   TABLE OF zexcel_s_stylemapping
                                                                                    WITH UNIQUE KEY guid,
       zexcel_t_styles_cond_mapping TYPE STANDARD TABLE OF zexcel_s_styles_cond_mapping WITH DEFAULT KEY,
       zexcel_t_converter_fcat      TYPE STANDARD TABLE OF zexcel_s_converter_fcat      WITH DEFAULT KEY,
       zexcel_t_converter_col       TYPE HASHED   TABLE OF zexcel_s_converter_col
                                                                    WITH UNIQUE KEY rownumber columnname,
       zexcel_t_converter_fil       TYPE HASHED   TABLE OF zexcel_s_converter_fil
                                                                    WITH UNIQUE KEY rownumber columnname,
       zexcel_t_shared_string       TYPE SORTED   TABLE OF zexcel_s_shared_string
                                                                        WITH NON-UNIQUE KEY string_value,
       zexcel_t_styles_mapping      TYPE STANDARD TABLE OF zexcel_s_styles_mapping      WITH DEFAULT KEY,
       zexcel_t_cellxfs             TYPE STANDARD TABLE OF zexcel_s_cellxfs
                       WITH NON-UNIQUE KEY numfmtid fontid fillid borderid xfid alignmentid protectionid
                        applynumberformat applyfont applyfill applyborder applyalignment applyprotection,
       zexcel_t_style_font          TYPE STANDARD TABLE OF zexcel_s_style_font
                                  WITH NON-UNIQUE KEY bold italic underline underline_mode strikethrough
                                                                           size color name family scheme,
       zexcel_t_style_fill          TYPE STANDARD TABLE OF zexcel_s_style_fill
                                          WITH NON-UNIQUE KEY filltype rotation fgcolor bgcolor gradtype,
       zexcel_t_cell_data_unsorted  TYPE STANDARD TABLE OF zexcel_s_cell_data           WITH DEFAULT KEY,
       zexcel_t_style_border        TYPE STANDARD TABLE OF zexcel_s_style_border
                   WITH NON-UNIQUE KEY left_color left_style right_color right_style top_color top_style
                         bottom_color bottom_style diagonal_color diagonal_style diagonalup diagonaldown,
       zexcel_t_style_numfmt        TYPE STANDARD TABLE OF zexcel_s_style_numfmt
                                                                              WITH NON-UNIQUE KEY numfmt,
       zexcel_t_style_protection    TYPE STANDARD TABLE OF zexcel_s_style_protection
                                                                       WITH NON-UNIQUE KEY locked hidden,
       zexcel_t_style_alignment     TYPE STANDARD TABLE OF zexcel_s_style_alignment
                        WITH NON-UNIQUE KEY horizontal vertical textrotation wraptext shrinktofit indent.

*--------------------------------------------------------------------*
* EXCEPTION CLASS DEFINITONS
*--------------------------------------------------------------------*
CLASS zcx_excel DEFINITION
  INHERITING FROM cx_static_check
  CREATE PUBLIC .

*"* public components of class ZCX_EXCEL
*"* do not include other source files here!!!
*"* protected components of class ZCX_EXCEL
*"* do not include other source files here!!!
*"* protected components of class ZCX_EXCEL
*"* do not include other source files here!!!
  PUBLIC SECTION.

    CONSTANTS zcx_excel TYPE sotr_conc VALUE '028C0ED2B5601ED78EB6F3368B1E4F9B'. "##NO_TEXT
    DATA error TYPE string .
    DATA syst_at_raise TYPE syst .

    METHODS constructor
      IMPORTING
        !textid        LIKE textid OPTIONAL
        !previous      LIKE previous OPTIONAL
        !error         TYPE string OPTIONAL
        !syst_at_raise TYPE syst OPTIONAL .
    CLASS-METHODS raise_text
      IMPORTING
        !iv_text TYPE clike
      RAISING
        zcx_excel .
    CLASS-METHODS raise_symsg
      RAISING
        zcx_excel .

    METHODS if_message~get_longtext
         REDEFINITION .
    METHODS if_message~get_text
         REDEFINITION .
  PROTECTED SECTION.
*"* private components of class ZCX_EXCEL
*"* do not include other source files here!!!
  PRIVATE SECTION.
ENDCLASS.

*--------------------------------------------------------------------*
* INTERFACES
*--------------------------------------------------------------------*
INTERFACE zif_excel_book_properties.


  DATA creator TYPE zexcel_creator .
  DATA lastmodifiedby TYPE zexcel_creator .
  DATA created TYPE timestampl .
  DATA modified TYPE timestampl .
  DATA title TYPE zexcel_title .
  DATA subject TYPE zexcel_subject .
  DATA description TYPE zexcel_description .
  DATA keywords TYPE zexcel_keywords .
  DATA category TYPE zexcel_category .
  DATA company TYPE zexcel_company .
  DATA application TYPE zexcel_application .
  DATA docsecurity TYPE zexcel_docsecurity .
  DATA scalecrop TYPE zexcel_scalecrop .
  DATA linksuptodate TYPE flag .
  DATA shareddoc TYPE flag .
  DATA hyperlinkschanged TYPE flag .
  DATA appversion TYPE zexcel_appversion .

  METHODS initialize .
ENDINTERFACE.

INTERFACE zif_excel_book_protection.


  CONSTANTS c_locked TYPE zexcel_book_protection VALUE '1'. "#EC NOTEXT
  CONSTANTS c_protected TYPE zexcel_book_protection VALUE 'X'. "#EC NOTEXT
  CONSTANTS c_unlocked TYPE zexcel_book_protection VALUE '0'. "#EC NOTEXT
  CONSTANTS c_unprotected TYPE zexcel_book_protection VALUE ''. "#EC NOTEXT
  DATA lockrevision TYPE zexcel_book_protection .
  DATA lockstructure TYPE zexcel_book_protection .
  DATA lockwindows TYPE zexcel_book_protection .
  DATA protected TYPE zexcel_book_protection .
  DATA revisionspassword TYPE zexcel_aes_password .
  DATA workbookpassword TYPE zexcel_aes_password .

  METHODS initialize .
ENDINTERFACE.

INTERFACE zif_excel_book_vba_project.


  DATA vbaproject TYPE xstring READ-ONLY .
  DATA codename TYPE string READ-ONLY .
  DATA codename_pr TYPE string READ-ONLY .

  METHODS set_vbaproject
    IMPORTING
      !ip_vbaproject TYPE xstring .
  METHODS set_codename
    IMPORTING
      !ip_codename TYPE string .
  METHODS set_codename_pr
    IMPORTING
      !ip_codename_pr TYPE string .
ENDINTERFACE.

INTERFACE zif_excel_sheet_printsettings.


  CONSTANTS gcv_print_title_name TYPE string VALUE '_xlnm.Print_Titles'. "#EC NOTEXT

  METHODS set_print_repeat_columns
    IMPORTING
      !iv_columns_from TYPE zexcel_cell_column_alpha
      !iv_columns_to   TYPE zexcel_cell_column_alpha
    RAISING
      zcx_excel .
  METHODS set_print_repeat_rows
    IMPORTING
      !iv_rows_from TYPE zexcel_cell_row
      !iv_rows_to   TYPE zexcel_cell_row
    RAISING
      zcx_excel .
  METHODS get_print_repeat_columns
    EXPORTING
      !ev_columns_from TYPE zexcel_cell_column_alpha
      !ev_columns_to   TYPE zexcel_cell_column_alpha .
  METHODS get_print_repeat_rows
    EXPORTING
      !ev_rows_from TYPE zexcel_cell_row
      !ev_rows_to   TYPE zexcel_cell_row .
  METHODS clear_print_repeat_columns .
  METHODS clear_print_repeat_rows .
ENDINTERFACE.

INTERFACE zif_excel_sheet_properties.


  CONSTANTS c_hidden TYPE zexcel_sheet_hidden VALUE 'X'.    "#EC NOTEXT
  CONSTANTS c_veryhidden TYPE zexcel_sheet_hidden VALUE '2'. "#EC NOTEXT
  CONSTANTS c_hidezero TYPE zexcel_sheet_showzeros VALUE ''. "#EC NOTEXT
  CONSTANTS c_showzero TYPE zexcel_sheet_showzeros VALUE 'X'. "#EC NOTEXT
  CONSTANTS c_visible TYPE zexcel_sheet_hidden VALUE ''.    "#EC NOTEXT
  DATA hidden TYPE zexcel_sheet_hidden .
  DATA show_zeros TYPE zexcel_sheet_showzeros .
  DATA style TYPE zexcel_cell_style .
  DATA zoomscale TYPE zexcel_sheet_zoomscale .
  DATA zoomscale_normal TYPE zexcel_sheet_zoomscale .
  DATA zoomscale_pagelayoutview TYPE zexcel_sheet_zoomscale .
  DATA zoomscale_sheetlayoutview TYPE zexcel_sheet_zoomscale .
  DATA summarybelow TYPE zexcel_sheet_summary .
  CONSTANTS c_below_on TYPE zexcel_sheet_summary VALUE 1.   "#EC NOTEXT
  CONSTANTS c_below_off TYPE zexcel_sheet_summary VALUE 0.  "#EC NOTEXT
  DATA summaryright TYPE zexcel_sheet_summary .
  CONSTANTS c_right_on TYPE zexcel_sheet_summary VALUE 1.   "#EC NOTEXT
  CONSTANTS c_right_off TYPE zexcel_sheet_summary VALUE 0.  "#EC NOTEXT
  DATA selected TYPE zexcel_sheet_selected .
  CONSTANTS c_selected TYPE zexcel_sheet_selected VALUE 'X'. "#EC NOTEXT
  DATA hide_columns_from TYPE zexcel_cell_column_alpha .

  METHODS initialize .
  METHODS get_style
    RETURNING
      VALUE(ep_style) TYPE zexcel_cell_style .
  METHODS set_style
    IMPORTING
      !ip_style TYPE zexcel_cell_style .
ENDINTERFACE.

INTERFACE zif_excel_sheet_protection.


  DATA auto_filter TYPE zexcel_sheet_protection_bool .
  CONSTANTS c_active TYPE zexcel_sheet_protection_bool VALUE '1'. "#EC NOTEXT
  CONSTANTS c_noactive TYPE zexcel_sheet_protection_bool VALUE '0'. "#EC NOTEXT
  CONSTANTS c_protected TYPE zexcel_sheet_protection VALUE 'X'. "#EC NOTEXT
  CONSTANTS c_unprotected TYPE zexcel_sheet_protection VALUE ''. "#EC NOTEXT
  DATA delete_columns TYPE zexcel_sheet_protection_bool .
  DATA delete_rows TYPE zexcel_sheet_protection_bool .
  DATA format_cells TYPE zexcel_sheet_protection_bool .
  DATA format_columns TYPE zexcel_sheet_protection_bool .
  DATA format_rows TYPE zexcel_sheet_protection_bool .
  DATA insert_columns TYPE zexcel_sheet_protection_bool .
  DATA insert_hyperlinks TYPE zexcel_sheet_protection_bool .
  DATA insert_rows TYPE zexcel_sheet_protection_bool .
  DATA objects TYPE zexcel_sheet_protection_bool .
  DATA password TYPE zexcel_aes_password .
  DATA pivot_tables TYPE zexcel_sheet_protection_bool .
  DATA protected TYPE zexcel_sheet_protection .
  DATA scenarios TYPE zexcel_sheet_protection_bool .
  DATA select_locked_cells TYPE zexcel_sheet_protection_bool .
  DATA select_unlocked_cells TYPE zexcel_sheet_protection_bool .
  DATA sheet TYPE zexcel_sheet_protection_bool .
  DATA sort TYPE zexcel_sheet_protection_bool .

  METHODS initialize .
ENDINTERFACE.

INTERFACE zif_excel_sheet_vba_project.


  DATA vbaproject TYPE xstring READ-ONLY .
  DATA codename TYPE string READ-ONLY .
  DATA codename_pr TYPE string READ-ONLY .

  METHODS set_codename
    IMPORTING
      !ip_codename TYPE string .
  METHODS set_codename_pr
    IMPORTING
      !ip_codename_pr TYPE string .
ENDINTERFACE.

INTERFACE zif_excel_reader.


  METHODS load_file
    IMPORTING
      !i_filename             TYPE csequence
      !i_use_alternate_zip    TYPE seoclsname DEFAULT space
      !i_from_applserver      TYPE sybatch DEFAULT sy-batch
      !iv_zcl_excel_classname TYPE clike OPTIONAL
    RETURNING
      VALUE(r_excel)          TYPE REF TO zcl_excel
    RAISING
      zcx_excel .
  METHODS load
    IMPORTING
      !i_excel2007            TYPE xstring
      !i_use_alternate_zip    TYPE seoclsname DEFAULT space
      !iv_zcl_excel_classname TYPE clike OPTIONAL
    RETURNING
      VALUE(r_excel)          TYPE REF TO zcl_excel
    RAISING
      zcx_excel .
ENDINTERFACE.

INTERFACE zif_excel_converter.


  METHODS can_convert_object
    IMPORTING
      !io_object TYPE REF TO object
    RAISING
      zcx_excel .
  METHODS create_fieldcatalog
    IMPORTING
      !is_option       TYPE zexcel_s_converter_option
      !io_object       TYPE REF TO object
      !it_table        TYPE STANDARD TABLE
    EXPORTING
      !es_layout       TYPE zexcel_s_converter_layo
      !et_fieldcatalog TYPE zexcel_t_converter_fcat
      !eo_table        TYPE REF TO data
      !et_colors       TYPE zexcel_t_converter_col
      !et_filter       TYPE zexcel_t_converter_fil
    RAISING
      zcx_excel .
ENDINTERFACE.

INTERFACE zif_excel_writer.


  METHODS write_file
    IMPORTING
      !io_excel      TYPE REF TO zcl_excel
    RETURNING
      VALUE(ep_file) TYPE xstring .
ENDINTERFACE.

*--------------------------------------------------------------------*
* CLASS DEFINITIONS
*--------------------------------------------------------------------*
CLASS zcl_excel_legacy_palette DEFINITION
  CREATE PUBLIC .

  PUBLIC SECTION.
*"* public components of class ZCL_EXCEL_LEGACY_PALETTE
*"* do not include other source files here!!!
    TYPE-POOLS abap .

    METHODS constructor .
    METHODS is_modified
      RETURNING
        VALUE(ep_modified) TYPE abap_bool .
    METHODS get_color
      IMPORTING
        !ip_index       TYPE i
      RETURNING
        VALUE(ep_color) TYPE zexcel_style_color_argb
      RAISING
        zcx_excel .
    METHODS get_colors
      RETURNING
        VALUE(ep_colors) TYPE zexcel_t_style_color_argb .
    METHODS set_color
      IMPORTING
        !ip_index TYPE i
        !ip_color TYPE zexcel_style_color_argb
      RAISING
        zcx_excel .
  PROTECTED SECTION.
*"* protected components of class ZCL_EXCEL_LEGACY_PALETTE
*"* do not include other source files here!!!
  PRIVATE SECTION.

*"* private components of class ZCL_EXCEL_LEGACY_PALETTE
*"* do not include other source files here!!!
    DATA modified TYPE abap_bool VALUE abap_false. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA colors TYPE zexcel_t_style_color_argb .
ENDCLASS.

CLASS zcl_excel_security DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_SECURITY
*"* do not include other source files here!!!
  PUBLIC SECTION.
    TYPE-POOLS abap .

    DATA lockrevision TYPE flag .
    DATA lockstructure TYPE flag .
    DATA lockwindows TYPE flag .
    DATA revisionspassword TYPE zexcel_revisionspassword .
    DATA workbookpassword TYPE zexcel_workbookpassword .

    METHODS is_security_enabled
      RETURNING
        VALUE(ep_security_enabled) TYPE flag .
*"* protected components of class ZABAP_EXCEL_SECURITY
*"* do not include other source files here!!!
*"* protected components of class ZABAP_EXCEL_SECURITY
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZABAP_EXCEL_SECURITY
*"* do not include other source files here!!!
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_excel_sheet_setup DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
*"* public components of class ZCL_EXCEL_SHEET_SETUP
*"* do not include other source files here!!!
    TYPE-POOLS abap .

    DATA black_and_white TYPE flag .
    DATA cell_comments TYPE stringval .
    DATA copies TYPE int2 .
    CONSTANTS c_break_column TYPE zexcel_break VALUE 2.     "#EC NOTEXT
    CONSTANTS c_break_none TYPE zexcel_break VALUE 0.       "#EC NOTEXT
    CONSTANTS c_break_row TYPE zexcel_break VALUE 1.        "#EC NOTEXT
    CONSTANTS c_cc_as_displayed TYPE string VALUE 'asDisplayed'. "#EC NOTEXT
    CONSTANTS c_cc_at_end TYPE string VALUE 'atEnd'.        "#EC NOTEXT
    CONSTANTS c_cc_none TYPE string VALUE 'none'.           "#EC NOTEXT
    CONSTANTS c_ord_downthenover TYPE string VALUE 'downThenOver'. "#EC NOTEXT
    CONSTANTS c_ord_overthendown TYPE string VALUE 'overThenDown'. "#EC NOTEXT
    CONSTANTS c_orientation_default TYPE zexcel_sheet_orienatation VALUE 'default'. "#EC NOTEXT
    CONSTANTS c_orientation_landscape TYPE zexcel_sheet_orienatation VALUE 'landscape'. "#EC NOTEXT
    CONSTANTS c_orientation_portrait TYPE zexcel_sheet_orienatation VALUE 'portrait'. "#EC NOTEXT
    CONSTANTS c_papersize_6_3_4_envelope TYPE zexcel_sheet_paper_size VALUE 38. "#EC NOTEXT
    CONSTANTS c_papersize_a2_paper TYPE zexcel_sheet_paper_size VALUE 64. "#EC NOTEXT
    CONSTANTS c_papersize_a3 TYPE zexcel_sheet_paper_size VALUE 8. "#EC NOTEXT
    CONSTANTS c_papersize_a3_extra_paper TYPE zexcel_sheet_paper_size VALUE 61. "#EC NOTEXT
    CONSTANTS c_papersize_a3_extra_tv_paper TYPE zexcel_sheet_paper_size VALUE 66. "#EC NOTEXT
    CONSTANTS c_papersize_a3_tv_paper TYPE zexcel_sheet_paper_size VALUE 65. "#EC NOTEXT
    CONSTANTS c_papersize_a4 TYPE zexcel_sheet_paper_size VALUE 9. "#EC NOTEXT
    CONSTANTS c_papersize_a4_extra_paper TYPE zexcel_sheet_paper_size VALUE 51. "#EC NOTEXT
    CONSTANTS c_papersize_a4_plus_paper TYPE zexcel_sheet_paper_size VALUE 58. "#EC NOTEXT
    CONSTANTS c_papersize_a4_small TYPE zexcel_sheet_paper_size VALUE 10. "#EC NOTEXT
    CONSTANTS c_papersize_a4_tv_paper TYPE zexcel_sheet_paper_size VALUE 53. "#EC NOTEXT
    CONSTANTS c_papersize_a5 TYPE zexcel_sheet_paper_size VALUE 11. "#EC NOTEXT
    CONSTANTS c_papersize_a5_extra_paper TYPE zexcel_sheet_paper_size VALUE 62. "#EC NOTEXT
    CONSTANTS c_papersize_a5_tv_paper TYPE zexcel_sheet_paper_size VALUE 59. "#EC NOTEXT
    CONSTANTS c_papersize_b4 TYPE zexcel_sheet_paper_size VALUE 12. "#EC NOTEXT
    CONSTANTS c_papersize_b4_envelope TYPE zexcel_sheet_paper_size VALUE 33. "#EC NOTEXT
    CONSTANTS c_papersize_b5 TYPE zexcel_sheet_paper_size VALUE 13. "#EC NOTEXT
    CONSTANTS c_papersize_b5_envelope TYPE zexcel_sheet_paper_size VALUE 34. "#EC NOTEXT
    CONSTANTS c_papersize_b6_envelope TYPE zexcel_sheet_paper_size VALUE 35. "#EC NOTEXT
    CONSTANTS c_papersize_c TYPE zexcel_sheet_paper_size VALUE 24. "#EC NOTEXT
    CONSTANTS c_papersize_c3_envelope TYPE zexcel_sheet_paper_size VALUE 29. "#EC NOTEXT
    CONSTANTS c_papersize_c4_envelope TYPE zexcel_sheet_paper_size VALUE 30. "#EC NOTEXT
    CONSTANTS c_papersize_c5_envelope TYPE zexcel_sheet_paper_size VALUE 28. "#EC NOTEXT
    CONSTANTS c_papersize_c65_envelope TYPE zexcel_sheet_paper_size VALUE 32. "#EC NOTEXT
    CONSTANTS c_papersize_c6_envelope TYPE zexcel_sheet_paper_size VALUE 31. "#EC NOTEXT
    CONSTANTS c_papersize_d TYPE zexcel_sheet_paper_size VALUE 25. "#EC NOTEXT
    CONSTANTS c_papersize_de_leg_fanfold TYPE zexcel_sheet_paper_size VALUE 41. "#EC NOTEXT
    CONSTANTS c_papersize_de_std_fanfold TYPE zexcel_sheet_paper_size VALUE 40. "#EC NOTEXT
    CONSTANTS c_papersize_dl_envelope TYPE zexcel_sheet_paper_size VALUE 27. "#EC NOTEXT
    CONSTANTS c_papersize_e TYPE zexcel_sheet_paper_size VALUE 26. "#EC NOTEXT
    CONSTANTS c_papersize_executive TYPE zexcel_sheet_paper_size VALUE 7. "#EC NOTEXT
    CONSTANTS c_papersize_folio TYPE zexcel_sheet_paper_size VALUE 14. "#EC NOTEXT
    CONSTANTS c_papersize_invite_envelope TYPE zexcel_sheet_paper_size VALUE 47. "#EC NOTEXT
    CONSTANTS c_papersize_iso_b4 TYPE zexcel_sheet_paper_size VALUE 42. "#EC NOTEXT
    CONSTANTS c_papersize_iso_b5_extra_paper TYPE zexcel_sheet_paper_size VALUE 63. "#EC NOTEXT
    CONSTANTS c_papersize_italy_envelope TYPE zexcel_sheet_paper_size VALUE 36. "#EC NOTEXT
    CONSTANTS c_papersize_jis_b5_tv_paper TYPE zexcel_sheet_paper_size VALUE 60. "#EC NOTEXT
    CONSTANTS c_papersize_jpn_dbl_postcard TYPE zexcel_sheet_paper_size VALUE 43. "#EC NOTEXT
    CONSTANTS c_papersize_ledger TYPE zexcel_sheet_paper_size VALUE 4. "#EC NOTEXT
    CONSTANTS c_papersize_legal TYPE zexcel_sheet_paper_size VALUE 5. "#EC NOTEXT
    CONSTANTS c_papersize_legal_extra_paper TYPE zexcel_sheet_paper_size VALUE 49. "#EC NOTEXT
    CONSTANTS c_papersize_letter TYPE zexcel_sheet_paper_size VALUE 1. "#EC NOTEXT
    CONSTANTS c_papersize_letter_extra_paper TYPE zexcel_sheet_paper_size VALUE 48. "#EC NOTEXT
    CONSTANTS c_papersize_letter_extv_paper TYPE zexcel_sheet_paper_size VALUE 54. "#EC NOTEXT
    CONSTANTS c_papersize_letter_plus_paper TYPE zexcel_sheet_paper_size VALUE 57. "#EC NOTEXT
    CONSTANTS c_papersize_letter_small TYPE zexcel_sheet_paper_size VALUE 2. "#EC NOTEXT
    CONSTANTS c_papersize_letter_tv_paper TYPE zexcel_sheet_paper_size VALUE 52. "#EC NOTEXT
    CONSTANTS c_papersize_monarch_envelope TYPE zexcel_sheet_paper_size VALUE 37. "#EC NOTEXT
    CONSTANTS c_papersize_no10_envelope TYPE zexcel_sheet_paper_size VALUE 20. "#EC NOTEXT
    CONSTANTS c_papersize_no11_envelope TYPE zexcel_sheet_paper_size VALUE 21. "#EC NOTEXT
    CONSTANTS c_papersize_no12_envelope TYPE zexcel_sheet_paper_size VALUE 22. "#EC NOTEXT
    CONSTANTS c_papersize_no14_envelope TYPE zexcel_sheet_paper_size VALUE 23. "#EC NOTEXT
    CONSTANTS c_papersize_no9_envelope TYPE zexcel_sheet_paper_size VALUE 19. "#EC NOTEXT
    CONSTANTS c_papersize_note TYPE zexcel_sheet_paper_size VALUE 18. "#EC NOTEXT
    CONSTANTS c_papersize_quarto TYPE zexcel_sheet_paper_size VALUE 15. "#EC NOTEXT
    CONSTANTS c_papersize_standard_1 TYPE zexcel_sheet_paper_size VALUE 16. "#EC NOTEXT
    CONSTANTS c_papersize_standard_2 TYPE zexcel_sheet_paper_size VALUE 17. "#EC NOTEXT
    CONSTANTS c_papersize_standard_paper_1 TYPE zexcel_sheet_paper_size VALUE 44. "#EC NOTEXT
    CONSTANTS c_papersize_standard_paper_2 TYPE zexcel_sheet_paper_size VALUE 45. "#EC NOTEXT
    CONSTANTS c_papersize_standard_paper_3 TYPE zexcel_sheet_paper_size VALUE 46. "#EC NOTEXT
    CONSTANTS c_papersize_statement TYPE zexcel_sheet_paper_size VALUE 6. "#EC NOTEXT
    CONSTANTS c_papersize_supera_a4_paper TYPE zexcel_sheet_paper_size VALUE 55. "#EC NOTEXT
    CONSTANTS c_papersize_superb_a3_paper TYPE zexcel_sheet_paper_size VALUE 56. "#EC NOTEXT
    CONSTANTS c_papersize_tabloid TYPE zexcel_sheet_paper_size VALUE 3. "#EC NOTEXT
    CONSTANTS c_papersize_tabl_extra_paper TYPE zexcel_sheet_paper_size VALUE 50. "#EC NOTEXT
    CONSTANTS c_papersize_us_std_fanfold TYPE zexcel_sheet_paper_size VALUE 39. "#EC NOTEXT
    CONSTANTS c_pe_blank TYPE string VALUE 'blank'.         "#EC NOTEXT
    CONSTANTS c_pe_dash TYPE string VALUE 'dash'.           "#EC NOTEXT
    CONSTANTS c_pe_displayed TYPE string VALUE 'displayed'. "#EC NOTEXT
    CONSTANTS c_pe_na TYPE string VALUE 'NA'.               "#EC NOTEXT
    DATA diff_oddeven_headerfooter TYPE flag .
    DATA draft TYPE flag .
    DATA errors TYPE stringval .
    DATA even_footer TYPE zexcel_s_worksheet_head_foot .
    DATA even_header TYPE zexcel_s_worksheet_head_foot .
    DATA first_page_number TYPE int2 .
    DATA fit_to_height TYPE int2 .
    DATA fit_to_page TYPE flag .
    DATA fit_to_width TYPE int2 .
    DATA horizontal_centered TYPE flag .
    DATA horizontal_dpi TYPE int2 .
    DATA margin_bottom TYPE zexcel_dec_8_2 .
    DATA margin_footer TYPE zexcel_dec_8_2 .
    DATA margin_header TYPE zexcel_dec_8_2 .
    DATA margin_left TYPE zexcel_dec_8_2 .
    DATA margin_right TYPE zexcel_dec_8_2 .
    DATA margin_top TYPE zexcel_dec_8_2 .
    DATA odd_footer TYPE zexcel_s_worksheet_head_foot .
    DATA odd_header TYPE zexcel_s_worksheet_head_foot .
    DATA orientation TYPE zexcel_sheet_orienatation .
    DATA page_order TYPE string .
    DATA paper_height TYPE string .
    DATA paper_size TYPE int2 .
    DATA paper_width TYPE string .
    DATA scale TYPE int2 .
    DATA use_first_page_num TYPE flag .
    DATA use_printer_defaults TYPE flag .
    DATA vertical_centered TYPE flag .
    DATA vertical_dpi TYPE int2 .

    METHODS constructor .
    METHODS set_page_margins
      IMPORTING
        !ip_bottom TYPE float OPTIONAL
        !ip_footer TYPE float OPTIONAL
        !ip_header TYPE float OPTIONAL
        !ip_left   TYPE float OPTIONAL
        !ip_right  TYPE float OPTIONAL
        !ip_top    TYPE float OPTIONAL
        !ip_unit   TYPE csequence DEFAULT 'in' .
    METHODS set_header_footer
      IMPORTING
        !ip_odd_header  TYPE zexcel_s_worksheet_head_foot OPTIONAL
        !ip_odd_footer  TYPE zexcel_s_worksheet_head_foot OPTIONAL
        !ip_even_header TYPE zexcel_s_worksheet_head_foot OPTIONAL
        !ip_even_footer TYPE zexcel_s_worksheet_head_foot OPTIONAL .
    METHODS get_header_footer_string
      EXPORTING
        !ep_odd_header  TYPE string
        !ep_odd_footer  TYPE string
        !ep_even_header TYPE string
        !ep_even_footer TYPE string .
    METHODS get_header_footer
      EXPORTING
        !ep_odd_header  TYPE zexcel_s_worksheet_head_foot
        !ep_odd_footer  TYPE zexcel_s_worksheet_head_foot
        !ep_even_header TYPE zexcel_s_worksheet_head_foot
        !ep_even_footer TYPE zexcel_s_worksheet_head_foot .
  PROTECTED SECTION.

*"* protected components of class ZCL_EXCEL_SHEET_SETUP
*"* do not include other source files here!!!
    METHODS process_header_footer
      IMPORTING
        !ip_header                 TYPE zexcel_s_worksheet_head_foot
        !ip_side                   TYPE string
      RETURNING
        VALUE(rv_processed_string) TYPE string .
  PRIVATE SECTION.
*"* private components of class ZCL_EXCEL_SHEET_SETUP
*"* do not include other source files here!!!
ENDCLASS.

CLASS zcl_excel_comment DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    TYPE-POOLS abap .

    METHODS constructor .
    METHODS get_name
      RETURNING
        VALUE(r_name) TYPE string .
    METHODS get_index
      RETURNING
        VALUE(rp_index) TYPE string .
    METHODS get_ref
      RETURNING
        VALUE(rp_ref) TYPE string .
    METHODS get_text
      RETURNING
        VALUE(rp_text) TYPE string .
    METHODS set_text
      IMPORTING
        !ip_text TYPE string
        !ip_ref  TYPE string OPTIONAL .
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA index TYPE string .
    DATA ref TYPE string .
    DATA text TYPE string .
ENDCLASS.

CLASS zcl_excel_column DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_COLUMN
*"* do not include other source files here!!!
  PUBLIC SECTION.
    TYPE-POOLS abap .

    METHODS constructor
      IMPORTING
        !ip_index     TYPE zexcel_cell_column_alpha
        !ip_worksheet TYPE REF TO zcl_excel_worksheet
        !ip_excel     TYPE REF TO zcl_excel .
    METHODS get_auto_size
      RETURNING
        VALUE(r_auto_size) TYPE abap_bool .
    METHODS get_collapsed
      RETURNING
        VALUE(r_collapsed) TYPE abap_bool .
    METHODS get_column_index
      RETURNING
        VALUE(r_column_index) TYPE int4 .
    METHODS get_outline_level
      RETURNING
        VALUE(r_outline_level) TYPE int4 .
    METHODS get_visible
      RETURNING
        VALUE(r_visible) TYPE abap_bool .
    METHODS get_width
      RETURNING
        VALUE(r_width) TYPE float .
    METHODS get_xf_index
      RETURNING
        VALUE(r_xf_index) TYPE int4 .
    METHODS set_auto_size
      IMPORTING
        !ip_auto_size    TYPE abap_bool
      RETURNING
        VALUE(io_column) TYPE REF TO zcl_excel_column .
    METHODS set_collapsed
      IMPORTING
        !ip_collapsed    TYPE abap_bool
      RETURNING
        VALUE(io_column) TYPE REF TO zcl_excel_column .
    METHODS set_column_index
      IMPORTING
        !ip_index        TYPE zexcel_cell_column_alpha
      RETURNING
        VALUE(io_column) TYPE REF TO zcl_excel_column .
    METHODS set_outline_level
      IMPORTING
        !ip_outline_level TYPE int4 .
    METHODS set_visible
      IMPORTING
        !ip_visible      TYPE abap_bool
      RETURNING
        VALUE(io_column) TYPE REF TO zcl_excel_column .
    METHODS set_width
      IMPORTING
        !ip_width        TYPE simple
      RETURNING
        VALUE(io_column) TYPE REF TO zcl_excel_column
      RAISING
        zcx_excel .
    METHODS set_xf_index
      IMPORTING
        !ip_xf_index     TYPE int4
      RETURNING
        VALUE(io_column) TYPE REF TO zcl_excel_column .
    METHODS set_column_style_by_guid
      IMPORTING
        !ip_style_guid TYPE zexcel_cell_style
      RAISING
        zcx_excel .
    METHODS get_column_style_guid
      RETURNING
        VALUE(ep_style_guid) TYPE zexcel_cell_style
      RAISING
        zcx_excel .
*"* protected components of class ZCL_EXCEL_COLUMN
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZCL_EXCEL_COLUMN
*"* do not include other source files here!!!
  PRIVATE SECTION.

    DATA column_index TYPE int4 .
    DATA width TYPE float .
    DATA auto_size TYPE abap_bool .
    DATA visible TYPE abap_bool .
    DATA outline_level TYPE int4 .
    DATA collapsed TYPE abap_bool .
    DATA xf_index TYPE int4 .
    DATA style_guid TYPE zexcel_cell_style .
    DATA excel TYPE REF TO zcl_excel .
    DATA worksheet TYPE REF TO zcl_excel_worksheet .
ENDCLASS.

CLASS zcl_excel_style_cond DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
*    CLASS zcl_excel_style_conditional DEFINITION LOAD .

*"* public components of class ZCL_EXCEL_STYLE_COND
*"* do not include other source files here!!!
    CONSTANTS c_cfvo_type_formula TYPE zexcel_conditional_type VALUE 'formula'. "#EC NOTEXT
    CONSTANTS c_cfvo_type_max TYPE zexcel_conditional_type VALUE 'max'. "#EC NOTEXT
    CONSTANTS c_cfvo_type_min TYPE zexcel_conditional_type VALUE 'min'. "#EC NOTEXT
    CONSTANTS c_cfvo_type_number TYPE zexcel_conditional_type VALUE 'num'. "#EC NOTEXT
    CONSTANTS c_cfvo_type_percent TYPE zexcel_conditional_type VALUE 'percent'. "#EC NOTEXT
    CONSTANTS c_cfvo_type_percentile TYPE zexcel_conditional_type VALUE 'percentile'. "#EC NOTEXT
    CONSTANTS c_iconset_3arrows TYPE zexcel_condition_rule_iconset VALUE '3Arrows'. "#EC NOTEXT
    CONSTANTS c_iconset_3arrowsgray TYPE zexcel_condition_rule_iconset VALUE '3ArrowsGray'. "#EC NOTEXT
    CONSTANTS c_iconset_3flags TYPE zexcel_condition_rule_iconset VALUE '3Flags'. "#EC NOTEXT
    CONSTANTS c_iconset_3signs TYPE zexcel_condition_rule_iconset VALUE '3Signs'. "#EC NOTEXT
    CONSTANTS c_iconset_3symbols TYPE zexcel_condition_rule_iconset VALUE '3Symbols'. "#EC NOTEXT
    CONSTANTS c_iconset_3symbols2 TYPE zexcel_condition_rule_iconset VALUE '3Symbols2'. "#EC NOTEXT
    CONSTANTS c_iconset_3trafficlights TYPE zexcel_condition_rule_iconset VALUE ''. "#EC NOTEXT
    CONSTANTS c_iconset_3trafficlights2 TYPE zexcel_condition_rule_iconset VALUE '3TrafficLights2'. "#EC NOTEXT
    CONSTANTS c_iconset_4arrows TYPE zexcel_condition_rule_iconset VALUE '4Arrows'. "#EC NOTEXT
    CONSTANTS c_iconset_4arrowsgray TYPE zexcel_condition_rule_iconset VALUE '4ArrowsGray'. "#EC NOTEXT
    CONSTANTS c_iconset_4rating TYPE zexcel_condition_rule_iconset VALUE '4Rating'. "#EC NOTEXT
    CONSTANTS c_iconset_4redtoblack TYPE zexcel_condition_rule_iconset VALUE '4RedToBlack'. "#EC NOTEXT
    CONSTANTS c_iconset_4trafficlights TYPE zexcel_condition_rule_iconset VALUE '4TrafficLights'. "#EC NOTEXT
    CONSTANTS c_iconset_5arrows TYPE zexcel_condition_rule_iconset VALUE '5Arrows'. "#EC NOTEXT
    CONSTANTS c_iconset_5arrowsgray TYPE zexcel_condition_rule_iconset VALUE '5ArrowsGray'. "#EC NOTEXT
    CONSTANTS c_iconset_5quarters TYPE zexcel_condition_rule_iconset VALUE '5Quarters'. "#EC NOTEXT
    CONSTANTS c_iconset_5rating TYPE zexcel_condition_rule_iconset VALUE '5Rating'. "#EC NOTEXT
    CONSTANTS c_operator_beginswith TYPE zexcel_condition_operator VALUE 'beginsWith'. "#EC NOTEXT
    CONSTANTS c_operator_between TYPE zexcel_condition_operator VALUE 'between'. "#EC NOTEXT
    CONSTANTS c_operator_containstext TYPE zexcel_condition_operator VALUE 'containsText'. "#EC NOTEXT
    CONSTANTS c_operator_endswith TYPE zexcel_condition_operator VALUE 'endsWith'. "#EC NOTEXT
    CONSTANTS c_operator_equal TYPE zexcel_condition_operator VALUE 'equal'. "#EC NOTEXT
    CONSTANTS c_operator_greaterthan TYPE zexcel_condition_operator VALUE 'greaterThan'. "#EC NOTEXT
    CONSTANTS c_operator_greaterthanorequal TYPE zexcel_condition_operator VALUE 'greaterThanOrEqual'. "#EC NOTEXT
    CONSTANTS c_operator_lessthan TYPE zexcel_condition_operator VALUE 'lessThan'. "#EC NOTEXT
    CONSTANTS c_operator_lessthanorequal TYPE zexcel_condition_operator VALUE 'lessThanOrEqual'. "#EC NOTEXT
    CONSTANTS c_operator_none TYPE zexcel_condition_operator VALUE ''. "#EC NOTEXT
    CONSTANTS c_operator_notcontains TYPE zexcel_condition_operator VALUE 'notContains'. "#EC NOTEXT
    CONSTANTS c_operator_notequal TYPE zexcel_condition_operator VALUE 'notEqual'. "#EC NOTEXT
    CONSTANTS c_rule_cellis TYPE zexcel_condition_rule VALUE 'cellIs'. "#EC NOTEXT
    CONSTANTS c_rule_containstext TYPE zexcel_condition_rule VALUE 'containsText'. "#EC NOTEXT
    CONSTANTS c_rule_databar TYPE zexcel_condition_rule VALUE 'dataBar'. "#EC NOTEXT
    CONSTANTS c_rule_expression TYPE zexcel_condition_rule VALUE 'expression'. "#EC NOTEXT
    CONSTANTS c_rule_iconset TYPE zexcel_condition_rule VALUE 'iconSet'. "#EC NOTEXT
    CONSTANTS c_rule_colorscale TYPE zexcel_condition_rule VALUE 'colorScale'. "#EC NOTEXT
    CONSTANTS c_rule_none TYPE zexcel_condition_rule VALUE 'none'. "#EC NOTEXT
    CONSTANTS c_rule_top10 TYPE zexcel_condition_rule VALUE 'top10'. "#EC NOTEXT
    CONSTANTS c_rule_above_average TYPE zexcel_condition_rule VALUE 'aboveAverage'. "#EC NOTEXT
    CONSTANTS c_showvalue_false TYPE zexcel_conditional_show_value VALUE 0. "#EC NOTEXT
    CONSTANTS c_showvalue_true TYPE zexcel_conditional_show_value VALUE 1. "#EC NOTEXT
    DATA mode_cellis TYPE zexcel_conditional_cellis .
    DATA mode_colorscale TYPE zexcel_conditional_colorscale .
    DATA mode_databar TYPE zexcel_conditional_databar .
    DATA mode_expression TYPE zexcel_conditional_expression .
    DATA mode_iconset TYPE zexcel_conditional_iconset .
    DATA mode_top10 TYPE zexcel_conditional_top10 .
    DATA mode_above_average TYPE zexcel_conditional_above_avg .
    DATA priority TYPE zexcel_style_priority VALUE 1. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA rule TYPE zexcel_condition_rule .

    METHODS constructor
      IMPORTING
        !ip_guid TYPE zexcel_cell_style OPTIONAL .
    METHODS get_dimension_range
      RETURNING
        VALUE(ep_dimension_range) TYPE string .
    METHODS set_range
      IMPORTING
        !ip_start_row    TYPE zexcel_cell_row
        !ip_start_column TYPE zexcel_cell_column_alpha
        !ip_stop_row     TYPE zexcel_cell_row
        !ip_stop_column  TYPE zexcel_cell_column_alpha
      RAISING
        zcx_excel .
    METHODS add_range
      IMPORTING
        !ip_start_row    TYPE zexcel_cell_row
        !ip_start_column TYPE zexcel_cell_column_alpha
        !ip_stop_row     TYPE zexcel_cell_row
        !ip_stop_column  TYPE zexcel_cell_column_alpha
      RAISING
        zcx_excel .
    CLASS-METHODS factory_cond_style_iconset
      IMPORTING
        !io_worksheet        TYPE REF TO zcl_excel_worksheet
        !iv_icon_type        TYPE zexcel_condition_rule_iconset DEFAULT c_iconset_3trafficlights2
        !iv_cfvo1_type       TYPE zexcel_conditional_type DEFAULT c_cfvo_type_percent
        !iv_cfvo1_value      TYPE zexcel_conditional_value OPTIONAL
        !iv_cfvo2_type       TYPE zexcel_conditional_type DEFAULT c_cfvo_type_percent
        !iv_cfvo2_value      TYPE zexcel_conditional_value OPTIONAL
        !iv_cfvo3_type       TYPE zexcel_conditional_type DEFAULT c_cfvo_type_percent
        !iv_cfvo3_value      TYPE zexcel_conditional_value OPTIONAL
        !iv_cfvo4_type       TYPE zexcel_conditional_type DEFAULT c_cfvo_type_percent
        !iv_cfvo4_value      TYPE zexcel_conditional_value OPTIONAL
        !iv_cfvo5_type       TYPE zexcel_conditional_type DEFAULT c_cfvo_type_percent
        !iv_cfvo5_value      TYPE zexcel_conditional_value OPTIONAL
        !iv_showvalue        TYPE zexcel_conditional_show_value DEFAULT zcl_excel_style_cond=>c_showvalue_true
      RETURNING
        VALUE(eo_style_cond) TYPE REF TO zcl_excel_style_cond .
    METHODS get_guid
      RETURNING
        VALUE(ep_guid) TYPE zexcel_cell_style .
*"* protected components of class ZABAP_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
*"* protected components of class ZABAP_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA mv_rule_range TYPE string .
    DATA guid TYPE zexcel_cell_style .
ENDCLASS.

CLASS zcl_excel_data_validation DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
*"* public components of class ZCL_EXCEL_DATA_VALIDATION
*"* do not include other source files here!!!
    TYPE-POOLS abap .

    DATA errorstyle TYPE zexcel_data_val_error_style .
    DATA operator TYPE zexcel_data_val_operator .
    DATA allowblank TYPE flag VALUE 'X'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA cell_column TYPE zexcel_cell_column_alpha .
    DATA cell_column_to TYPE zexcel_cell_column_alpha .
    DATA cell_row TYPE zexcel_cell_row .
    DATA cell_row_to TYPE zexcel_cell_row .
    CONSTANTS c_type_custom TYPE zexcel_data_val_type VALUE 'custom'. "#EC NOTEXT
    CONSTANTS c_type_list TYPE zexcel_data_val_type VALUE 'list'. "#EC NOTEXT
    DATA showerrormessage TYPE flag VALUE 'X'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA showinputmessage TYPE flag VALUE 'X'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA type TYPE zexcel_data_val_type .
    DATA formula1 TYPE zexcel_validation_formula1 .
    DATA formula2 TYPE zexcel_validation_formula1 .
    CONSTANTS c_type_none TYPE zexcel_data_val_type VALUE 'none'. "#EC NOTEXT
    CONSTANTS c_type_date TYPE zexcel_data_val_type VALUE 'date'. "#EC NOTEXT
    CONSTANTS c_type_decimal TYPE zexcel_data_val_type VALUE 'decimal'. "#EC NOTEXT
    CONSTANTS c_type_textlength TYPE zexcel_data_val_type VALUE 'textLength'. "#EC NOTEXT
    CONSTANTS c_type_time TYPE zexcel_data_val_type VALUE 'time'. "#EC NOTEXT
    CONSTANTS c_type_whole TYPE zexcel_data_val_type VALUE 'whole'. "#EC NOTEXT
    CONSTANTS c_style_stop TYPE zexcel_data_val_error_style VALUE 'stop'. "#EC NOTEXT
    CONSTANTS c_style_warning TYPE zexcel_data_val_error_style VALUE 'warning'. "#EC NOTEXT
    CONSTANTS c_style_information TYPE zexcel_data_val_error_style VALUE 'information'. "#EC NOTEXT
    CONSTANTS c_operator_between TYPE zexcel_data_val_operator VALUE 'between'. "#EC NOTEXT
    CONSTANTS c_operator_equal TYPE zexcel_data_val_operator VALUE 'equal'. "#EC NOTEXT
    CONSTANTS c_operator_greaterthan TYPE zexcel_data_val_operator VALUE 'greaterThan'. "#EC NOTEXT
    CONSTANTS c_operator_greaterthanorequal TYPE zexcel_data_val_operator VALUE 'greaterThanOrEqual'. "#EC NOTEXT
    CONSTANTS c_operator_lessthan TYPE zexcel_data_val_operator VALUE 'lessThan'. "#EC NOTEXT
    CONSTANTS c_operator_lessthanorequal TYPE zexcel_data_val_operator VALUE 'lessThanOrEqual'. "#EC NOTEXT
    CONSTANTS c_operator_notbetween TYPE zexcel_data_val_operator VALUE 'notBetween'. "#EC NOTEXT
    CONSTANTS c_operator_notequal TYPE zexcel_data_val_operator VALUE 'notEqual'. "#EC NOTEXT
    DATA showdropdown TYPE flag .
    DATA errortitle TYPE string .
    DATA error TYPE string .
    DATA prompttitle TYPE string .
    DATA prompt TYPE string .

    METHODS constructor .
*"* protected components of class ZCL_EXCEL_DATA_VALIDATION
*"* do not include other source files here!!!
*"* protected components of class ZCL_EXCEL_DATA_VALIDATION
*"* do not include other source files here!!!
  PROTECTED SECTION.
  PRIVATE SECTION.
*"* private components of class ZCL_EXCEL_DATA_VALIDATION
*"* do not include other source files here!!!
ENDCLASS.

CLASS zcl_excel_range DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_RANGE
*"* do not include other source files here!!!
  PUBLIC SECTION.

    CONSTANTS gcv_print_title_name TYPE string VALUE '_xlnm.Print_Titles'. "#EC NOTEXT
    DATA name TYPE zexcel_range_name .
    DATA guid TYPE zexcel_range_guid .

    METHODS get_guid
      RETURNING
        VALUE(ep_guid) TYPE zexcel_range_guid .
    METHODS set_value
      IMPORTING
        !ip_sheet_name   TYPE zexcel_sheet_title
        !ip_start_row    TYPE zexcel_cell_row
        !ip_start_column TYPE zexcel_cell_column_alpha
        !ip_stop_row     TYPE zexcel_cell_row
        !ip_stop_column  TYPE zexcel_cell_column_alpha .
    METHODS get_value
      RETURNING
        VALUE(ep_value) TYPE zexcel_range_value .
    METHODS set_range_value
      IMPORTING
        !ip_value TYPE zexcel_range_value .
*"* protected components of class ZABAP_EXCEL_WORKSHEET
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZCL_EXCEL_RANGE
*"* do not include other source files here!!!
  PRIVATE SECTION.

    DATA value TYPE zexcel_range_value .
ENDCLASS.

CLASS zcl_excel_row DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_ROW
*"* do not include other source files here!!!
  PUBLIC SECTION.
    TYPE-POOLS abap .

    METHODS constructor
      IMPORTING
        !ip_index TYPE int4 DEFAULT 0 .
    METHODS get_collapsed
      IMPORTING
        !io_worksheet      TYPE REF TO zcl_excel_worksheet OPTIONAL
      RETURNING
        VALUE(r_collapsed) TYPE boolean .
    METHODS get_outline_level
      IMPORTING
        !io_worksheet          TYPE REF TO zcl_excel_worksheet OPTIONAL
      RETURNING
        VALUE(r_outline_level) TYPE int4 .
    METHODS get_row_height
      RETURNING
        VALUE(r_row_height) TYPE float .
    METHODS get_row_index
      RETURNING
        VALUE(r_row_index) TYPE int4 .
    METHODS get_visible
      IMPORTING
        !io_worksheet    TYPE REF TO zcl_excel_worksheet OPTIONAL
      RETURNING
        VALUE(r_visible) TYPE boolean .
    METHODS get_xf_index
      RETURNING
        VALUE(r_xf_index) TYPE int4 .
    METHODS set_collapsed
      IMPORTING
        !ip_collapsed TYPE boolean .
    METHODS set_outline_level
      IMPORTING
        !ip_outline_level TYPE int4
      RAISING
        zcx_excel .
    METHODS set_row_height
      IMPORTING
        !ip_row_height TYPE simple
      RAISING
        zcx_excel .
    METHODS set_row_index
      IMPORTING
        !ip_index TYPE int4 .
    METHODS set_visible
      IMPORTING
        !ip_visible TYPE boolean .
    METHODS set_xf_index
      IMPORTING
        !ip_xf_index TYPE int4 .
*"* protected components of class ZCL_EXCEL_ROW
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZCL_EXCEL_ROW
*"* do not include other source files here!!!
  PRIVATE SECTION.

    DATA row_index TYPE int4 .
    DATA row_height TYPE float .
    DATA visible TYPE boolean .
    DATA outline_level TYPE int4 VALUE 0. "#EC NOTEXT .  .  .  .  .  .  .  .  . " .
    DATA collapsed TYPE boolean .
    DATA xf_index TYPE int4 .
ENDCLASS.

CLASS zcl_excel_style_font DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
*"* public components of class ZCL_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
    TYPE-POOLS abap .

    DATA bold TYPE flag .
    DATA color TYPE zexcel_s_style_color .
    CONSTANTS c_family_decorative TYPE zexcel_style_font_family VALUE 5. "#EC NOTEXT
    CONSTANTS c_family_modern TYPE zexcel_style_font_family VALUE 3. "#EC NOTEXT
    CONSTANTS c_family_none TYPE zexcel_style_font_family VALUE 0. "#EC NOTEXT
    CONSTANTS c_family_roman TYPE zexcel_style_font_family VALUE 1. "#EC NOTEXT
    CONSTANTS c_family_script TYPE zexcel_style_font_family VALUE 4. "#EC NOTEXT
    CONSTANTS c_family_swiss TYPE zexcel_style_font_family VALUE 2. "#EC NOTEXT
    CONSTANTS c_name_arial TYPE zexcel_style_font_name VALUE 'Arial'. "#EC NOTEXT
    CONSTANTS c_name_calibri TYPE zexcel_style_font_name VALUE 'Calibri'. "#EC NOTEXT
    CONSTANTS c_name_cambria TYPE zexcel_style_font_name VALUE 'Cambria'. "#EC NOTEXT
    CONSTANTS c_name_roman TYPE zexcel_style_font_name VALUE 'Times New Roman'. "#EC NOTEXT
    CONSTANTS c_scheme_major TYPE zexcel_style_font_scheme VALUE 'major'. "#EC NOTEXT
    CONSTANTS c_scheme_none TYPE zexcel_style_font_scheme VALUE ''. "#EC NOTEXT
    CONSTANTS c_scheme_minor TYPE zexcel_style_font_scheme VALUE 'minor'. "#EC NOTEXT
    CONSTANTS c_underline_double TYPE zexcel_style_font_underline VALUE 'double'. "#EC NOTEXT
    CONSTANTS c_underline_doubleaccounting TYPE zexcel_style_font_underline VALUE 'doubleAccounting'. "#EC NOTEXT
    CONSTANTS c_underline_none TYPE zexcel_style_font_underline VALUE 'none'. "#EC NOTEXT
    CONSTANTS c_underline_single TYPE zexcel_style_font_underline VALUE 'single'. "#EC NOTEXT
    CONSTANTS c_underline_singleaccounting TYPE zexcel_style_font_underline VALUE 'singleAccounting'. "#EC NOTEXT
    DATA family TYPE zexcel_style_font_family VALUE 2. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA italic TYPE flag .
    DATA name TYPE zexcel_style_font_name VALUE 'Calibri'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA scheme TYPE zexcel_style_font_scheme VALUE 'minor'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA size TYPE zexcel_style_font_size VALUE 11. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA strikethrough TYPE flag .
    DATA underline TYPE flag .
    DATA underline_mode TYPE zexcel_style_font_underline .

    METHODS constructor .
    METHODS get_structure
      RETURNING
        VALUE(es_font) TYPE zexcel_s_style_font .
    METHODS calculate_text_width
      IMPORTING
        !i_text        TYPE zexcel_cell_value
      RETURNING
        VALUE(r_width) TYPE i .
*"* protected components of class ZCL_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
*"* protected components of class ZCL_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
  PROTECTED SECTION.
  PRIVATE SECTION.
*"* private components of class ZCL_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
ENDCLASS.

CLASS zcl_excel_style_fill DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    TYPE-POOLS abap .

*"* public components of class ZCL_EXCEL_STYLE_FILL
*"* do not include other source files here!!!
    CONSTANTS c_fill_none TYPE zexcel_fill_type VALUE 'none'. "#EC NOTEXT
    CONSTANTS c_fill_solid TYPE zexcel_fill_type VALUE 'solid'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_linear TYPE zexcel_fill_type VALUE 'linear'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_path TYPE zexcel_fill_type VALUE 'path'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_darkdown TYPE zexcel_fill_type VALUE 'darkDown'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_darkgray TYPE zexcel_fill_type VALUE 'darkGray'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_darkgrid TYPE zexcel_fill_type VALUE 'darkGrid'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_darkhorizontal TYPE zexcel_fill_type VALUE 'darkHorizontal'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_darktrellis TYPE zexcel_fill_type VALUE 'darkTrellis'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_darkup TYPE zexcel_fill_type VALUE 'darkUp'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_darkvertical TYPE zexcel_fill_type VALUE 'darkVertical'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_gray0625 TYPE zexcel_fill_type VALUE 'gray0625'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_gray125 TYPE zexcel_fill_type VALUE 'gray125'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_lightdown TYPE zexcel_fill_type VALUE 'lightDown'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_lightgray TYPE zexcel_fill_type VALUE 'lightGray'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_lightgrid TYPE zexcel_fill_type VALUE 'lightGrid'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_lighthorizontal TYPE zexcel_fill_type VALUE 'lightHorizontal'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_lighttrellis TYPE zexcel_fill_type VALUE 'lightTrellis'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_lightup TYPE zexcel_fill_type VALUE 'lightUp'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_lightvertical TYPE zexcel_fill_type VALUE 'lightVertical'. "#EC NOTEXT
    CONSTANTS c_fill_pattern_mediumgray TYPE zexcel_fill_type VALUE 'mediumGray'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_horizontal90 TYPE zexcel_fill_type VALUE 'horizontal90'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_horizontal270 TYPE zexcel_fill_type VALUE 'horizontal270'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_horizontalb TYPE zexcel_fill_type VALUE 'horizontalb'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_vertical TYPE zexcel_fill_type VALUE 'vertical'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_fromcenter TYPE zexcel_fill_type VALUE 'fromCenter'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_diagonal45 TYPE zexcel_fill_type VALUE 'diagonal45'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_diagonal45b TYPE zexcel_fill_type VALUE 'diagonal45b'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_diagonal135 TYPE zexcel_fill_type VALUE 'diagonal135'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_diagonal135b TYPE zexcel_fill_type VALUE 'diagonal135b'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_cornerlt TYPE zexcel_fill_type VALUE 'cornerLT'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_cornerlb TYPE zexcel_fill_type VALUE 'cornerLB'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_cornerrt TYPE zexcel_fill_type VALUE 'cornerRT'. "#EC NOTEXT
    CONSTANTS c_fill_gradient_cornerrb TYPE zexcel_fill_type VALUE 'cornerRB'. "#EC NOTEXT
    DATA gradtype TYPE zexcel_s_gradient_type .
    DATA filltype TYPE zexcel_fill_type .
    DATA rotation TYPE zexcel_rotation .
    DATA fgcolor TYPE zexcel_s_style_color .
    DATA bgcolor TYPE zexcel_s_style_color .

    METHODS constructor .
    METHODS get_structure
      RETURNING
        VALUE(es_fill) TYPE zexcel_s_style_fill .
*"* protected components of class ZABAP_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZCL_EXCEL_STYLE_FILL
*"* do not include other source files here!!!
  PRIVATE SECTION.

    METHODS build_gradient .
    METHODS check_filltype_is_gradient
      RETURNING
        VALUE(rv_is_gradient) TYPE abap_bool .
ENDCLASS.

CLASS zcl_excel_style_border DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

*"* public components of class ZCL_EXCEL_STYLE_BORDER
*"* do not include other source files here!!!
    DATA border_style TYPE zexcel_border .
    DATA border_color TYPE zexcel_s_style_color .
    CONSTANTS c_border_none TYPE zexcel_border VALUE 'none'. "#EC NOTEXT
    CONSTANTS c_border_dashdot TYPE zexcel_border VALUE 'dashDot'. "#EC NOTEXT
    CONSTANTS c_border_dashdotdot TYPE zexcel_border VALUE 'dashDotDot'. "#EC NOTEXT
    CONSTANTS c_border_dashed TYPE zexcel_border VALUE 'dashed'. "#EC NOTEXT
    CONSTANTS c_border_dotted TYPE zexcel_border VALUE 'dotted'. "#EC NOTEXT
    CONSTANTS c_border_double TYPE zexcel_border VALUE 'double'. "#EC NOTEXT
    CONSTANTS c_border_hair TYPE zexcel_border VALUE 'hair'. "#EC NOTEXT
    CONSTANTS c_border_medium TYPE zexcel_border VALUE 'medium'. "#EC NOTEXT
    CONSTANTS c_border_mediumdashdot TYPE zexcel_border VALUE 'mediumDashDot'. "#EC NOTEXT
    CONSTANTS c_border_mediumdashdotdot TYPE zexcel_border VALUE 'mediumDashDotDot'. "#EC NOTEXT
    CONSTANTS c_border_mediumdashed TYPE zexcel_border VALUE 'mediumDashed'. "#EC NOTEXT
    CONSTANTS c_border_slantdashdot TYPE zexcel_border VALUE 'slantDashDot'. "#EC NOTEXT
    CONSTANTS c_border_thick TYPE zexcel_border VALUE 'thick'. "#EC NOTEXT
    CONSTANTS c_border_thin TYPE zexcel_border VALUE 'thin'. "#EC NOTEXT

    METHODS constructor .
*"* protected components of class ZABAP_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
*"* protected components of class ZABAP_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZCL_EXCEL_STYLE_BORDER
*"* do not include other source files here!!!
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_excel_style_borders DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_STYLE_BORDERS
*"* do not include other source files here!!!
  PUBLIC SECTION.

    DATA allborders TYPE REF TO zcl_excel_style_border .
    CONSTANTS c_diagonal_both TYPE zexcel_diagonal VALUE 3. "#EC NOTEXT
    CONSTANTS c_diagonal_down TYPE zexcel_diagonal VALUE 2. "#EC NOTEXT
    CONSTANTS c_diagonal_none TYPE zexcel_diagonal VALUE 0. "#EC NOTEXT
    CONSTANTS c_diagonal_up TYPE zexcel_diagonal VALUE 1.   "#EC NOTEXT
    DATA diagonal TYPE REF TO zcl_excel_style_border .
    DATA diagonal_mode TYPE zexcel_diagonal .
    DATA down TYPE REF TO zcl_excel_style_border .
    DATA left TYPE REF TO zcl_excel_style_border .
    DATA right TYPE REF TO zcl_excel_style_border .
    DATA top TYPE REF TO zcl_excel_style_border .

    METHODS get_structure
      RETURNING
        VALUE(es_fill) TYPE zexcel_s_style_border .
*"* protected components of class ZABAP_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
*"* protected components of class ZABAP_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZCL_EXCEL_STYLE_BORDERS
*"* do not include other source files here!!!
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_excel_style_alignment DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_STYLE_ALIGNMENT
*"* do not include other source files here!!!
  PUBLIC SECTION.
    TYPE-POOLS abap .

    CONSTANTS c_horizontal_general TYPE zexcel_alignment VALUE 'general'. "#EC NOTEXT
    CONSTANTS c_horizontal_left TYPE zexcel_alignment VALUE 'left'. "#EC NOTEXT
    CONSTANTS c_horizontal_right TYPE zexcel_alignment VALUE 'right'. "#EC NOTEXT
    CONSTANTS c_horizontal_center TYPE zexcel_alignment VALUE 'center'. "#EC NOTEXT
    CONSTANTS c_horizontal_center_continuous TYPE zexcel_alignment VALUE 'centerContinuous'. "#EC NOTEXT
    CONSTANTS c_horizontal_justify TYPE zexcel_alignment VALUE 'justify'. "#EC NOTEXT
    CONSTANTS c_vertical_bottom TYPE zexcel_alignment VALUE 'bottom'. "#EC NOTEXT
    CONSTANTS c_vertical_top TYPE zexcel_alignment VALUE 'top'. "#EC NOTEXT
    CONSTANTS c_vertical_center TYPE zexcel_alignment VALUE 'center'. "#EC NOTEXT
    CONSTANTS c_vertical_justify TYPE zexcel_alignment VALUE 'justify'. "#EC NOTEXT
    DATA horizontal TYPE zexcel_alignment .
    DATA vertical TYPE zexcel_alignment .
    DATA textrotation TYPE zexcel_text_rotation VALUE 0. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA wraptext TYPE flag .
    DATA shrinktofit TYPE flag .
    DATA indent TYPE zexcel_indent VALUE 0. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .

    METHODS constructor .
    METHODS get_structure
      RETURNING
        VALUE(es_alignment) TYPE zexcel_s_style_alignment .
*"* protected components of class ZABAP_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
*"* protected components of class ZABAP_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZCL_EXCEL_STYLE_ALIGNMENT
*"* do not include other source files here!!!
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_excel_style_number_format DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      BEGIN OF t_num_format,
        id     TYPE string,
        format TYPE REF TO zcl_excel_style_number_format,
      END OF t_num_format .
    TYPES:
      t_num_formats TYPE HASHED TABLE OF t_num_format WITH UNIQUE KEY id .

*"* public components of class ZCL_EXCEL_STYLE_NUMBER_FORMAT
*"* do not include other source files here!!!
    CONSTANTS c_format_numc_std TYPE zexcel_number_format VALUE 'STD_NDEC'. "#EC NOTEXT
    CONSTANTS c_format_date_std TYPE zexcel_number_format VALUE 'STD_DATE'. "#EC NOTEXT
    CONSTANTS c_format_currency_eur_simple TYPE zexcel_number_format VALUE '[$EUR ]#,##0.00_-'. "#EC NOTEXT
    CONSTANTS c_format_currency_usd TYPE zexcel_number_format VALUE '$#,##0_-'. "#EC NOTEXT
    CONSTANTS c_format_currency_usd_simple TYPE zexcel_number_format VALUE '"$"#,##0.00_-'. "#EC NOTEXT
    CONSTANTS c_format_currency_simple TYPE zexcel_number_format VALUE '$#,##0_);($#,##0)'. "#EC NOTEXT
    CONSTANTS c_format_currency_simple_red TYPE zexcel_number_format VALUE '$#,##0_);[Red]($#,##0)'. "#EC NOTEXT
    CONSTANTS c_format_currency_simple2 TYPE zexcel_number_format VALUE '$#,##0.00_);($#,##0.00)'. "#EC NOTEXT
    CONSTANTS c_format_currency_simple_red2 TYPE zexcel_number_format VALUE '$#,##0.00_);[Red]($#,##0.00)'. "#EC NOTEXT
    CONSTANTS c_format_date_datetime TYPE zexcel_number_format VALUE 'd/m/y h:mm'. "#EC NOTEXT
    CONSTANTS c_format_date_ddmmyyyy TYPE zexcel_number_format VALUE 'dd/mm/yy'. "#EC NOTEXT
    CONSTANTS c_format_date_ddmmyyyydot TYPE zexcel_number_format VALUE 'dd\.mm\.yyyy'. "#EC NOTEXT
    CONSTANTS c_format_date_dmminus TYPE zexcel_number_format VALUE 'd-m'. "#EC NOTEXT
    CONSTANTS c_format_date_dmyminus TYPE zexcel_number_format VALUE 'd-m-y'. "#EC NOTEXT
    CONSTANTS c_format_date_dmyslash TYPE zexcel_number_format VALUE 'd/m/y'. "#EC NOTEXT
    CONSTANTS c_format_date_myminus TYPE zexcel_number_format VALUE 'm-y'. "#EC NOTEXT
    CONSTANTS c_format_date_time1 TYPE zexcel_number_format VALUE 'h:mm AM/PM'. "#EC NOTEXT
    CONSTANTS c_format_date_time2 TYPE zexcel_number_format VALUE 'h:mm:ss AM/PM'. "#EC NOTEXT
    CONSTANTS c_format_date_time3 TYPE zexcel_number_format VALUE 'h:mm'. "#EC NOTEXT
    CONSTANTS c_format_date_time4 TYPE zexcel_number_format VALUE 'h:mm:ss'. "#EC NOTEXT
    CONSTANTS c_format_date_time5 TYPE zexcel_number_format VALUE 'mm:ss'. "#EC NOTEXT
    CONSTANTS c_format_date_time6 TYPE zexcel_number_format VALUE 'h:mm:ss'. "#EC NOTEXT
    CONSTANTS c_format_date_time7 TYPE zexcel_number_format VALUE 'i:s.S'. "#EC NOTEXT
    CONSTANTS c_format_date_time8 TYPE zexcel_number_format VALUE 'h:mm:ss@'. "#EC NOTEXT
    CONSTANTS c_format_date_xlsx14 TYPE zexcel_number_format VALUE 'mm-dd-yy'. "#EC NOTEXT
    CONSTANTS c_format_date_xlsx15 TYPE zexcel_number_format VALUE 'd-mmm-yy'. "#EC NOTEXT
    CONSTANTS c_format_date_xlsx16 TYPE zexcel_number_format VALUE 'd-mmm'. "#EC NOTEXT
    CONSTANTS c_format_date_xlsx17 TYPE zexcel_number_format VALUE 'mmm-yy'. "#EC NOTEXT
    CONSTANTS c_format_date_xlsx22 TYPE zexcel_number_format VALUE 'm/d/yy h:mm'. "#EC NOTEXT
    CONSTANTS c_format_date_yymmdd TYPE zexcel_number_format VALUE 'yymmdd'. "#EC NOTEXT
    CONSTANTS c_format_date_yymmddminus TYPE zexcel_number_format VALUE 'yy-mm-dd'. "#EC NOTEXT
    CONSTANTS c_format_date_yymmddslash TYPE zexcel_number_format VALUE 'yy/mm/dd'. "#EC NOTEXT
    CONSTANTS c_format_date_yyyymmdd TYPE zexcel_number_format VALUE 'yyyymmdd'. "#EC NOTEXT
    CONSTANTS c_format_date_yyyymmddminus TYPE zexcel_number_format VALUE 'yyyy-mm-dd'. "#EC NOTEXT
    CONSTANTS c_format_date_yyyymmddslash TYPE zexcel_number_format VALUE 'yyyy/mm/dd'. "#EC NOTEXT
    CONSTANTS c_format_date_xlsx45 TYPE zexcel_number_format VALUE 'mm:ss'. "#EC NOTEXT
    CONSTANTS c_format_date_xlsx46 TYPE zexcel_number_format VALUE '[h]:mm:ss'. "#EC NOTEXT
    CONSTANTS c_format_date_xlsx47 TYPE zexcel_number_format VALUE 'mm:ss.0'. "#EC NOTEXT
    CONSTANTS c_format_general TYPE zexcel_number_format VALUE ''. "#EC NOTEXT
    CONSTANTS c_format_number TYPE zexcel_number_format VALUE '0'. "#EC NOTEXT
    CONSTANTS c_format_number_00 TYPE zexcel_number_format VALUE '0.00'. "#EC NOTEXT
    CONSTANTS c_format_number_comma_sep0 TYPE zexcel_number_format VALUE '#,##0'. "#EC NOTEXT
    CONSTANTS c_format_number_comma_sep1 TYPE zexcel_number_format VALUE '#,##0.00'. "#EC NOTEXT
    CONSTANTS c_format_number_comma_sep2 TYPE zexcel_number_format VALUE '#,##0.00_-'. "#EC NOTEXT
    CONSTANTS c_format_percentage TYPE zexcel_number_format VALUE '0%'. "#EC NOTEXT
    CONSTANTS c_format_percentage_00 TYPE zexcel_number_format VALUE '0.00%'. "#EC NOTEXT
    CONSTANTS c_format_text TYPE zexcel_number_format VALUE '@'. "#EC NOTEXT
    CONSTANTS c_format_fraction_1 TYPE zexcel_number_format VALUE '# ?/?'. "#EC NOTEXT
    CONSTANTS c_format_fraction_2 TYPE zexcel_number_format VALUE '# ??/??'. "#EC NOTEXT
    CONSTANTS c_format_scientific TYPE zexcel_number_format VALUE '0.00E+00'. "#EC NOTEXT
    CONSTANTS c_format_special_01 TYPE zexcel_number_format VALUE '##0.0E+0'. "#EC NOTEXT
    DATA format_code TYPE zexcel_number_format .
    CLASS-DATA mt_built_in_num_formats TYPE t_num_formats READ-ONLY .
    CONSTANTS c_format_xlsx37 TYPE zexcel_number_format VALUE '#,##0_);(#,##0)'. "#EC NOTEXT
    CONSTANTS c_format_xlsx38 TYPE zexcel_number_format VALUE '#,##0_);[Red](#,##0)'. "#EC NOTEXT
    CONSTANTS c_format_xlsx39 TYPE zexcel_number_format VALUE '#,##0.00_);(#,##0.00)'. "#EC NOTEXT
    CONSTANTS c_format_xlsx40 TYPE zexcel_number_format VALUE '#,##0.00_);[Red](#,##0.00)'. "#EC NOTEXT
    CONSTANTS c_format_xlsx41 TYPE zexcel_number_format VALUE '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)'. "#EC NOTEXT
    CONSTANTS c_format_xlsx42 TYPE zexcel_number_format VALUE '_($* #,##0_);_($* (#,##0);_($* "-"_);_(@_)'. "#EC NOTEXT
    CONSTANTS c_format_xlsx43 TYPE zexcel_number_format VALUE '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)'. "#EC NOTEXT
    CONSTANTS c_format_xlsx44 TYPE zexcel_number_format VALUE '_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)'. "#EC NOTEXT
    CONSTANTS c_format_currency_gbp_simple TYPE zexcel_number_format VALUE '[$£-809]#,##0.00'. "#EC NOTEXT
    CONSTANTS c_format_currency_pln_simple TYPE zexcel_number_format VALUE '#,##0.00\ "zł"'. "#EC NOTEXT

    CLASS-METHODS class_constructor .
    METHODS constructor .
    METHODS get_structure
      RETURNING
        VALUE(ep_number_format) TYPE zexcel_s_style_numfmt .
*"* protected components of class ZABAP_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
*"* protected components of class ZABAP_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
  PROTECTED SECTION.
  PRIVATE SECTION.
*"* private components of class ZCL_EXCEL_STYLE_NUMBER_FORMAT
*"* do not include other source files here!!!
ENDCLASS.

CLASS zcl_excel_style_protection DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_STYLE_PROTECTION
*"* do not include other source files here!!!
  PUBLIC SECTION.

    CONSTANTS c_protection_hidden TYPE zexcel_cell_protection VALUE '1'. "#EC NOTEXT
    CONSTANTS c_protection_locked TYPE zexcel_cell_protection VALUE '1'. "#EC NOTEXT
    CONSTANTS c_protection_unhidden TYPE zexcel_cell_protection VALUE '0'. "#EC NOTEXT
    CONSTANTS c_protection_unlocked TYPE zexcel_cell_protection VALUE '0'. "#EC NOTEXT
    DATA hidden TYPE zexcel_cell_protection .
    DATA locked TYPE zexcel_cell_protection .

    METHODS constructor .
    METHODS get_structure
      RETURNING
        VALUE(ep_protection) TYPE zexcel_s_style_protection .
*"* protected components of class ZABAP_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
*"* protected components of class ZABAP_EXCEL_STYLE_FONT
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZCL_EXCEL_STYLE_PROTECTION
*"* do not include other source files here!!!
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_excel_style DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_STYLE
*"* do not include other source files here!!!
  PUBLIC SECTION.

    DATA font TYPE REF TO zcl_excel_style_font .
    DATA fill TYPE REF TO zcl_excel_style_fill .
    DATA borders TYPE REF TO zcl_excel_style_borders .
    DATA alignment TYPE REF TO zcl_excel_style_alignment .
    DATA number_format TYPE REF TO zcl_excel_style_number_format .
    DATA protection TYPE REF TO zcl_excel_style_protection .

    METHODS constructor
      IMPORTING
        !ip_guid TYPE zexcel_cell_style OPTIONAL .
    METHODS get_guid
      RETURNING
        VALUE(ep_guid) TYPE zexcel_cell_style .
*"* protected components of class ZABAP_EXCEL_STYLE
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZCL_EXCEL_STYLE
*"* do not include other source files here!!!
  PRIVATE SECTION.

    DATA guid TYPE zexcel_cell_style .
ENDCLASS.

CLASS zcl_excel_columns DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_COLUMNS
*"* do not include other source files here!!!
  PUBLIC SECTION.
    TYPES:
      BEGIN OF mty_s_hashed_column,
        column_index TYPE int4,
        column       TYPE REF TO zcl_excel_column,
      END OF mty_s_hashed_column ,
      mty_ts_hasehd_column TYPE HASHED TABLE OF mty_s_hashed_column WITH UNIQUE KEY column_index.

    METHODS add
      IMPORTING
        !io_column TYPE REF TO zcl_excel_column .
    METHODS clear .
    METHODS constructor .
    METHODS get
      IMPORTING
        !ip_index        TYPE i
      RETURNING
        VALUE(eo_column) TYPE REF TO zcl_excel_column .
    METHODS get_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS is_empty
      RETURNING
        VALUE(is_empty) TYPE flag .
    METHODS remove
      IMPORTING
        !io_column TYPE REF TO zcl_excel_column .
    METHODS size
      RETURNING
        VALUE(ep_size) TYPE i .
*"* protected components of class ZABAP_EXCEL_WORKSHEETS
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZABAP_EXCEL_RANGES
*"* do not include other source files here!!!
  PRIVATE SECTION.

    DATA columns TYPE REF TO cl_object_collection .
    DATA columns_hasehd TYPE mty_ts_hasehd_column .
ENDCLASS.

CLASS zcl_excel_comments DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    METHODS add
      IMPORTING
        !ip_comment TYPE REF TO zcl_excel_comment .
    METHODS include
      IMPORTING
        !ip_comment TYPE REF TO zcl_excel_comment .
    METHODS clear .
    METHODS constructor .
    METHODS get
      IMPORTING
        !ip_index         TYPE zexcel_active_worksheet
      RETURNING
        VALUE(eo_comment) TYPE REF TO zcl_excel_comment .
    METHODS get_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS is_empty
      RETURNING
        VALUE(is_empty) TYPE flag .
    METHODS remove
      IMPORTING
        !ip_comment TYPE REF TO zcl_excel_comment .
    METHODS size
      RETURNING
        VALUE(ep_size) TYPE i .
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA comments TYPE REF TO cl_object_collection .
ENDCLASS.

CLASS zcl_excel_graph DEFINITION
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
*"* public components of class ZCL_EXCEL_GRAPH
*"* do not include other source files here!!!
      BEGIN OF s_style,
        c14style TYPE i,
        cstyle   TYPE i,
      END OF s_style .
    TYPES:
      BEGIN OF s_series,
        idx              TYPE i,
        order            TYPE i,
        invertifnegative TYPE string,
        symbol           TYPE string,
        smooth           TYPE string,
        lbl              TYPE string,
        ref              TYPE string,
        sername          TYPE string,
      END OF s_series .
    TYPES:
      t_series TYPE STANDARD TABLE OF s_series .
    TYPES:
      BEGIN OF s_pagemargins,
        b      TYPE string,
        l      TYPE string,
        r      TYPE string,
        t      TYPE string,
        header TYPE string,
        footer TYPE string,
      END OF s_pagemargins .

    DATA ns_1904val TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_langval TYPE string VALUE 'it-IT'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_roundedcornersval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA pagemargins TYPE s_pagemargins .
    DATA ns_autotitledeletedval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_plotvisonlyval TYPE string VALUE '1'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_dispblanksasval TYPE string VALUE 'gap'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showdlblsovermaxval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA title TYPE string .               .  . " .
    DATA series TYPE t_series .
    DATA ns_c14styleval TYPE string VALUE '102'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA print_label TYPE c VALUE 'X'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_styleval TYPE string VALUE '2'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  . " .
    CONSTANTS:
      BEGIN OF c_style_default,
        c14style TYPE i VALUE 102,
        cstyle   TYPE i VALUE 2,
      END OF c_style_default .
    CONSTANTS:
      BEGIN OF c_style_1,
        c14style TYPE i VALUE 101,
        cstyle   TYPE i VALUE 1,
      END OF c_style_1 .
    CONSTANTS:
      BEGIN OF c_style_3,
        c14style TYPE i VALUE 103,
        cstyle   TYPE i VALUE 3,
      END OF c_style_3 .
    CONSTANTS:
      BEGIN OF c_style_4,
        c14style TYPE i VALUE 104,
        cstyle   TYPE i VALUE 4,
      END OF c_style_4 .
    CONSTANTS:
      BEGIN OF c_style_5,
        c14style TYPE i VALUE 105,
        cstyle   TYPE i VALUE 5,
      END OF c_style_5 .
    CONSTANTS:
      BEGIN OF c_style_6,
        c14style TYPE i VALUE 106,
        cstyle   TYPE i VALUE 6,
      END OF c_style_6 .
    CONSTANTS:
      BEGIN OF c_style_7,
        c14style TYPE i VALUE 107,
        cstyle   TYPE i VALUE 7,
      END OF c_style_7 .
    CONSTANTS:
      BEGIN OF c_style_8,
        c14style TYPE i VALUE 108,
        cstyle   TYPE i VALUE 8,
      END OF c_style_8 .
    CONSTANTS:
      BEGIN OF c_style_9,
        c14style TYPE i VALUE 109,
        cstyle   TYPE i VALUE 9,
      END OF c_style_9 .
    CONSTANTS:
      BEGIN OF c_style_10,
        c14style TYPE i VALUE 110,
        cstyle   TYPE i VALUE 10,
      END OF c_style_10 .
    CONSTANTS:
      BEGIN OF c_style_11,
        c14style TYPE i VALUE 111,
        cstyle   TYPE i VALUE 11,
      END OF c_style_11 .
    CONSTANTS:
      BEGIN OF c_style_12,
        c14style TYPE i VALUE 112,
        cstyle   TYPE i VALUE 12,
      END OF c_style_12 .
    CONSTANTS:
      BEGIN OF c_style_13,
        c14style TYPE i VALUE 113,
        cstyle   TYPE i VALUE 13,
      END OF c_style_13 .
    CONSTANTS:
      BEGIN OF c_style_14,
        c14style TYPE i VALUE 114,
        cstyle   TYPE i VALUE 14,
      END OF c_style_14 .
    CONSTANTS:
      BEGIN OF c_style_15,
        c14style TYPE i VALUE 115,
        cstyle   TYPE i VALUE 15,
      END OF c_style_15 .
    CONSTANTS:
      BEGIN OF c_style_16,
        c14style TYPE i VALUE 116,
        cstyle   TYPE i VALUE 16,
      END OF c_style_16 .
    CONSTANTS:
      BEGIN OF c_style_17,
        c14style TYPE i VALUE 117,
        cstyle   TYPE i VALUE 17,
      END OF c_style_17 .
    CONSTANTS:
      BEGIN OF c_style_18,
        c14style TYPE i VALUE 118,
        cstyle   TYPE i VALUE 18,
      END OF c_style_18 .
    CONSTANTS:
      BEGIN OF c_style_19,
        c14style TYPE i VALUE 119,
        cstyle   TYPE i VALUE 19,
      END OF c_style_19 .
    CONSTANTS:
      BEGIN OF c_style_20,
        c14style TYPE i VALUE 120,
        cstyle   TYPE i VALUE 20,
      END OF c_style_20 .
    CONSTANTS:
      BEGIN OF c_style_21,
        c14style TYPE i VALUE 121,
        cstyle   TYPE i VALUE 21,
      END OF c_style_21 .
    CONSTANTS:
      BEGIN OF c_style_22,
        c14style TYPE i VALUE 122,
        cstyle   TYPE i VALUE 22,
      END OF c_style_22 .
    CONSTANTS:
      BEGIN OF c_style_23,
        c14style TYPE i VALUE 123,
        cstyle   TYPE i VALUE 23,
      END OF c_style_23 .
    CONSTANTS:
      BEGIN OF c_style_24,
        c14style TYPE i VALUE 124,
        cstyle   TYPE i VALUE 24,
      END OF c_style_24 .
    CONSTANTS:
      BEGIN OF c_style_25,
        c14style TYPE i VALUE 125,
        cstyle   TYPE i VALUE 25,
      END OF c_style_25 .
    CONSTANTS:
      BEGIN OF c_style_26,
        c14style TYPE i VALUE 126,
        cstyle   TYPE i VALUE 26,
      END OF c_style_26 .
    CONSTANTS:
      BEGIN OF c_style_27,
        c14style TYPE i VALUE 127,
        cstyle   TYPE i VALUE 27,
      END OF c_style_27 .
    CONSTANTS:
      BEGIN OF c_style_28,
        c14style TYPE i VALUE 128,
        cstyle   TYPE i VALUE 28,
      END OF c_style_28 .
    CONSTANTS:
      BEGIN OF c_style_29,
        c14style TYPE i VALUE 129,
        cstyle   TYPE i VALUE 29,
      END OF c_style_29 .
    CONSTANTS:
      BEGIN OF c_style_30,
        c14style TYPE i VALUE 130,
        cstyle   TYPE i VALUE 30,
      END OF c_style_30 .
    CONSTANTS:
      BEGIN OF c_style_31,
        c14style TYPE i VALUE 131,
        cstyle   TYPE i VALUE 31,
      END OF c_style_31 .
    CONSTANTS:
      BEGIN OF c_style_32,
        c14style TYPE i VALUE 132,
        cstyle   TYPE i VALUE 32,
      END OF c_style_32 .
    CONSTANTS:
      BEGIN OF c_style_33,
        c14style TYPE i VALUE 133,
        cstyle   TYPE i VALUE 33,
      END OF c_style_33 .
    CONSTANTS:
      BEGIN OF c_style_34,
        c14style TYPE i VALUE 134,
        cstyle   TYPE i VALUE 34,
      END OF c_style_34 .
    CONSTANTS:
      BEGIN OF c_style_35,
        c14style TYPE i VALUE 135,
        cstyle   TYPE i VALUE 35,
      END OF c_style_35 .
    CONSTANTS:
      BEGIN OF c_style_36,
        c14style TYPE i VALUE 136,
        cstyle   TYPE i VALUE 36,
      END OF c_style_36 .
    CONSTANTS:
      BEGIN OF c_style_37,
        c14style TYPE i VALUE 137,
        cstyle   TYPE i VALUE 37,
      END OF c_style_37 .
    CONSTANTS:
      BEGIN OF c_style_38,
        c14style TYPE i VALUE 138,
        cstyle   TYPE i VALUE 38,
      END OF c_style_38 .
    CONSTANTS:
      BEGIN OF c_style_39,
        c14style TYPE i VALUE 139,
        cstyle   TYPE i VALUE 39,
      END OF c_style_39 .
    CONSTANTS:
      BEGIN OF c_style_40,
        c14style TYPE i VALUE 140,
        cstyle   TYPE i VALUE 40,
      END OF c_style_40 .
    CONSTANTS:
      BEGIN OF c_style_41,
        c14style TYPE i VALUE 141,
        cstyle   TYPE i VALUE 41,
      END OF c_style_41 .
    CONSTANTS:
      BEGIN OF c_style_42,
        c14style TYPE i VALUE 142,
        cstyle   TYPE i VALUE 42,
      END OF c_style_42 .
    CONSTANTS:
      BEGIN OF c_style_43,
        c14style TYPE i VALUE 143,
        cstyle   TYPE i VALUE 43,
      END OF c_style_43 .
    CONSTANTS:
      BEGIN OF c_style_44,
        c14style TYPE i VALUE 144,
        cstyle   TYPE i VALUE 44,
      END OF c_style_44 .
    CONSTANTS:
      BEGIN OF c_style_45,
        c14style TYPE i VALUE 145,
        cstyle   TYPE i VALUE 45,
      END OF c_style_45 .
    CONSTANTS:
      BEGIN OF c_style_46,
        c14style TYPE i VALUE 146,
        cstyle   TYPE i VALUE 46,
      END OF c_style_46 .
    CONSTANTS:
      BEGIN OF c_style_47,
        c14style TYPE i VALUE 147,
        cstyle   TYPE i VALUE 47,
      END OF c_style_47 .
    CONSTANTS:
      BEGIN OF c_style_48,
        c14style TYPE i VALUE 148,
        cstyle   TYPE i VALUE 48,
      END OF c_style_48 .
    CONSTANTS c_show_true TYPE c VALUE '1'.                 "#EC NOTEXT
    CONSTANTS c_show_false TYPE c VALUE '0'.                "#EC NOTEXT
    CONSTANTS c_print_lbl_true TYPE c VALUE '1'.            "#EC NOTEXT
    CONSTANTS c_print_lbl_false TYPE c VALUE '0'.           "#EC NOTEXT

    METHODS constructor .
    METHODS create_serie
      IMPORTING
        !ip_idx              TYPE i OPTIONAL
        !ip_order            TYPE i
        !ip_invertifnegative TYPE string OPTIONAL
        !ip_symbol           TYPE string OPTIONAL
        !ip_smooth           TYPE c OPTIONAL
        !ip_lbl_from_col     TYPE zexcel_cell_column_alpha OPTIONAL
        !ip_lbl_from_row     TYPE zexcel_cell_row OPTIONAL
        !ip_lbl_to_col       TYPE zexcel_cell_column_alpha OPTIONAL
        !ip_lbl_to_row       TYPE zexcel_cell_row OPTIONAL
        !ip_lbl              TYPE string OPTIONAL
        !ip_ref_from_col     TYPE zexcel_cell_column_alpha OPTIONAL
        !ip_ref_from_row     TYPE zexcel_cell_row OPTIONAL
        !ip_ref_to_col       TYPE zexcel_cell_column_alpha OPTIONAL
        !ip_ref_to_row       TYPE zexcel_cell_row OPTIONAL
        !ip_ref              TYPE string OPTIONAL
        !ip_sername          TYPE string
        !ip_sheet            TYPE zexcel_sheet_title OPTIONAL .
    METHODS set_style
      IMPORTING
        !ip_style TYPE s_style .
    METHODS set_print_lbl
      IMPORTING
        !ip_value TYPE c .
    METHODS set_title
      IMPORTING
        VALUE(ip_value) TYPE string .
  PROTECTED SECTION.
*"* protected components of class ZCL_EXCEL_GRAPH
*"* do not include other source files here!!!
  PRIVATE SECTION.
*"* private components of class ZCL_EXCEL_GRAPH
*"* do not include other source files here!!!
ENDCLASS.

CLASS zcl_excel_drawing DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
*"* public components of class ZCL_EXCEL_DRAWING
*"* do not include other source files here!!!
*"* protected components of class ZCL_EXCEL_DRAWING
*"* do not include other source files here!!!
*"* protected components of class ZCL_EXCEL_DRAWING
*"* do not include other source files here!!!
*"* protected components of class ZCL_EXCEL_DRAWING
*"* do not include other source files here!!!
    TYPE-POOLS abap .

    CONSTANTS c_graph_pie TYPE zexcel_graph_type VALUE 1.   "#EC NOTEXT
    CONSTANTS c_graph_line TYPE zexcel_graph_type VALUE 2.  "#EC NOTEXT
    CONSTANTS c_graph_bars TYPE zexcel_graph_type VALUE 0.  "#EC NOTEXT
    DATA graph_type TYPE zexcel_graph_type .
    DATA title TYPE string VALUE 'image1.jpg'.              "#EC NOTEXT
    DATA x_references TYPE char1 .
    DATA y_references TYPE char1 .
    CONSTANTS type_image TYPE zexcel_drawing_type VALUE 'image'. "#EC NOTEXT
    CONSTANTS type_chart TYPE zexcel_drawing_type VALUE 'chart'. "#EC NOTEXT
    CONSTANTS anchor_absolute TYPE zexcel_drawing_anchor VALUE 'ABS'. "#EC NOTEXT
    CONSTANTS anchor_one_cell TYPE zexcel_drawing_anchor VALUE 'ONE'. "#EC NOTEXT
    CONSTANTS anchor_two_cell TYPE zexcel_drawing_anchor VALUE 'TWO'. "#EC NOTEXT
    DATA graph TYPE REF TO zcl_excel_graph .
    CONSTANTS c_media_type_bmp TYPE string VALUE 'bmp'.     "#EC NOTEXT
    CONSTANTS c_media_type_xml TYPE string VALUE 'xml'.     "#EC NOTEXT
    CONSTANTS c_media_type_jpg TYPE string VALUE 'jpg'.     "#EC NOTEXT
    CONSTANTS type_image_header_footer TYPE zexcel_drawing_type VALUE 'hd_ft'. "#EC NOTEXT

    METHODS constructor
      IMPORTING
        !ip_type  TYPE zexcel_drawing_type DEFAULT zcl_excel_drawing=>type_image
        !ip_title TYPE clike OPTIONAL .
    METHODS create_media_name
      IMPORTING
        !ip_index TYPE i .
    METHODS get_from_col
      RETURNING
        VALUE(r_from_col) TYPE zexcel_cell_column .
    METHODS get_from_row
      RETURNING
        VALUE(r_from_row) TYPE zexcel_cell_row .
    METHODS get_guid
      RETURNING
        VALUE(ep_guid) TYPE guid_16 .
    METHODS get_height_emu_str
      RETURNING
        VALUE(r_height) TYPE string .
    METHODS get_media
      RETURNING
        VALUE(r_media) TYPE xstring .
    METHODS get_media_name
      RETURNING
        VALUE(r_name) TYPE string .
    METHODS get_media_type
      RETURNING
        VALUE(r_type) TYPE string .
    METHODS get_name
      RETURNING
        VALUE(r_name) TYPE string .
    METHODS get_to_col
      RETURNING
        VALUE(r_to_col) TYPE zexcel_cell_column .
    METHODS get_to_row
      RETURNING
        VALUE(r_to_row) TYPE zexcel_cell_row .
    METHODS get_width_emu_str
      RETURNING
        VALUE(r_width) TYPE string .
    CLASS-METHODS pixel2emu
      IMPORTING
        !ip_pixel    TYPE int4
        !ip_dpi      TYPE int2 OPTIONAL
      RETURNING
        VALUE(r_emu) TYPE string .
    CLASS-METHODS emu2pixel
      IMPORTING
        !ip_emu        TYPE int4
        !ip_dpi        TYPE int2 OPTIONAL
      RETURNING
        VALUE(r_pixel) TYPE int4 .
    METHODS set_media
      IMPORTING
        !ip_media      TYPE xstring OPTIONAL
        !ip_media_type TYPE string
        !ip_width      TYPE int4 DEFAULT 0
        !ip_height     TYPE int4 DEFAULT 0 .
    METHODS set_media_mime
      IMPORTING
        !ip_io     TYPE skwf_io
        !ip_width  TYPE int4
        !ip_height TYPE int4 .
    METHODS set_media_www
      IMPORTING
        !ip_key    TYPE wwwdatatab
        !ip_width  TYPE int4
        !ip_height TYPE int4 .
    METHODS set_position
      IMPORTING
        !ip_from_row TYPE zexcel_cell_row
        !ip_from_col TYPE zexcel_cell_column_alpha
        !ip_rowoff   TYPE int4 OPTIONAL
        !ip_coloff   TYPE int4 OPTIONAL
      RAISING
        zcx_excel .
    METHODS set_position2
      IMPORTING
        !ip_from   TYPE zexcel_drawing_location
        !ip_to     TYPE zexcel_drawing_location
        !ip_anchor TYPE zexcel_drawing_anchor OPTIONAL .
    METHODS get_position
      RETURNING
        VALUE(rp_position) TYPE zexcel_drawing_position .
    METHODS get_type
      RETURNING
        VALUE(rp_type) TYPE zexcel_drawing_type .
    METHODS get_index
      RETURNING
        VALUE(rp_index) TYPE string .
    METHODS load_chart_attributes
      IMPORTING
        VALUE(ip_chart) TYPE REF TO if_ixml_document .
  PROTECTED SECTION.
  PRIVATE SECTION.

*"* private components of class ZCL_EXCEL_DRAWING
*"* do not include other source files here!!!
    DATA type TYPE zexcel_drawing_type VALUE type_image. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  . " .
    DATA index TYPE string .
    DATA anchor TYPE zexcel_drawing_anchor VALUE anchor_one_cell. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  . " .
    CONSTANTS c_media_source_www TYPE char1 VALUE 1.        "#EC NOTEXT
    CONSTANTS c_media_source_xstring TYPE char1 VALUE 0.    "#EC NOTEXT
    CONSTANTS c_media_source_mime TYPE char1 VALUE 2.       "#EC NOTEXT
    DATA guid TYPE guid_16 .
    DATA media TYPE xstring .
    DATA media_key_www TYPE wwwdatatab .
    DATA media_name TYPE string .
    DATA media_source TYPE char1 .
    DATA media_type TYPE string .
    DATA io TYPE skwf_io .
    DATA from_loc TYPE zexcel_drawing_location .
    DATA to_loc TYPE zexcel_drawing_location .
    DATA size TYPE zexcel_drawing_size .
ENDCLASS.

CLASS zcl_excel_drawings DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

*"* public components of class ZCL_EXCEL_DRAWINGS
*"* do not include other source files here!!!
    DATA type TYPE zexcel_drawing_type READ-ONLY VALUE 'IMAGE'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .

    METHODS add
      IMPORTING
        !ip_drawing TYPE REF TO zcl_excel_drawing .
    METHODS include
      IMPORTING
        !ip_drawing TYPE REF TO zcl_excel_drawing .
    METHODS clear .
    METHODS constructor
      IMPORTING
        !ip_type TYPE zexcel_drawing_type .
    METHODS get
      IMPORTING
        !ip_index         TYPE zexcel_active_worksheet
      RETURNING
        VALUE(eo_drawing) TYPE REF TO zcl_excel_drawing .
    METHODS get_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS is_empty
      RETURNING
        VALUE(is_empty) TYPE flag .
    METHODS remove
      IMPORTING
        !ip_drawing TYPE REF TO zcl_excel_drawing .
    METHODS size
      RETURNING
        VALUE(ep_size) TYPE i .
    METHODS get_type
      RETURNING
        VALUE(rp_type) TYPE zexcel_drawing_type .
*"* protected components of class ZCL_EXCEL_DRAWINGS
*"* do not include other source files here!!!
*"* protected components of class ZCL_EXCEL_DRAWINGS
*"* do not include other source files here!!!
  PROTECTED SECTION.
  PRIVATE SECTION.

*"* private components of class ZCL_EXCEL_DRAWINGS
*"* do not include other source files here!!!
    DATA drawings TYPE REF TO cl_object_collection .
ENDCLASS.

CLASS zcl_excel_worksheet_pagebreaks DEFINITION
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      BEGIN OF ts_pagebreak_at ,
        cell_row    TYPE zexcel_cell_row,
        cell_column TYPE zexcel_cell_column,
      END OF ts_pagebreak_at .
    TYPES:
      tt_pagebreak_at TYPE HASHED TABLE OF  ts_pagebreak_at WITH UNIQUE KEY cell_row cell_column .

    METHODS add_pagebreak
      IMPORTING
        !ip_column TYPE simple
        !ip_row    TYPE zexcel_cell_row
      RAISING
        zcx_excel .
    METHODS get_all_pagebreaks
      RETURNING
        VALUE(rt_pagebreaks) TYPE tt_pagebreak_at .
  PROTECTED SECTION.

    DATA mt_pagebreaks TYPE tt_pagebreak_at .
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_excel_rows DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_ROWS
*"* do not include other source files here!!!
*"* protected components of class ZABAP_EXCEL_WORKSHEETS
*"* do not include other source files here!!!
  PUBLIC SECTION.
    TYPES:
      BEGIN OF mty_s_hashed_row,
        row_index TYPE int4,
        row       TYPE REF TO zcl_excel_row,
      END OF mty_s_hashed_row ,
      mty_ts_hasehd_row TYPE HASHED TABLE OF mty_s_hashed_row WITH UNIQUE KEY row_index.

    METHODS add
      IMPORTING
        !io_row TYPE REF TO zcl_excel_row .
    METHODS clear .
    METHODS constructor .
    METHODS get
      IMPORTING
        !ip_index     TYPE i
      RETURNING
        VALUE(eo_row) TYPE REF TO zcl_excel_row .
    METHODS get_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS is_empty
      RETURNING
        VALUE(is_empty) TYPE flag .
    METHODS remove
      IMPORTING
        !io_row TYPE REF TO zcl_excel_row .
    METHODS size
      RETURNING
        VALUE(ep_size) TYPE i .
  PROTECTED SECTION.
*"* private components of class ZABAP_EXCEL_RANGES
*"* do not include other source files here!!!
  PRIVATE SECTION.

    DATA rows TYPE REF TO cl_object_collection .
    DATA rows_hasehd TYPE mty_ts_hasehd_row .

ENDCLASS.

CLASS zcl_excel_hyperlink DEFINITION
  FINAL
  CREATE PRIVATE .

*"* public components of class ZCL_EXCEL_HYPERLINK
*"* do not include other source files here!!!
  PUBLIC SECTION.
    TYPE-POOLS abap .

    CLASS-METHODS create_external_link
      IMPORTING
        !iv_url        TYPE string
      RETURNING
        VALUE(ov_link) TYPE REF TO zcl_excel_hyperlink .
    CLASS-METHODS create_internal_link
      IMPORTING
        !iv_location   TYPE string
      RETURNING
        VALUE(ov_link) TYPE REF TO zcl_excel_hyperlink .
    METHODS is_internal
      RETURNING
        VALUE(ev_ret) TYPE abap_bool .
    METHODS set_cell_reference
      IMPORTING
        !ip_column TYPE simple
        !ip_row    TYPE zexcel_cell_row
      RAISING
        zcx_excel .
    METHODS get_ref
      RETURNING
        VALUE(ev_ref) TYPE string .
    METHODS get_url
      RETURNING
        VALUE(ev_url) TYPE string .
*"* protected components of class ZCL_EXCEL_HYPERLINK
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZCL_EXCEL_HYPERLINK
*"* do not include other source files here!!!
  PRIVATE SECTION.

    DATA location TYPE string .
    DATA cell_reference TYPE string .
    DATA internal TYPE abap_bool .
    DATA column TYPE zexcel_cell_column_alpha .
    DATA row TYPE zexcel_cell_row .

    CLASS-METHODS create
      IMPORTING
        !iv_url        TYPE string
        !iv_internal   TYPE abap_bool
      RETURNING
        VALUE(ov_link) TYPE REF TO zcl_excel_hyperlink .
ENDCLASS.

CLASS zcl_excel_common DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_COMMON
*"* do not include other source files here!!!
  PUBLIC SECTION.

    CONSTANTS c_excel_baseline_date TYPE d VALUE '19000101'. "#EC NOTEXT
    CLASS-DATA c_excel_numfmt_offset TYPE int1 VALUE 164. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . " .
    CONSTANTS c_excel_sheet_max_col TYPE int4 VALUE 16384.  "#EC NOTEXT
    CONSTANTS c_excel_sheet_min_col TYPE int4 VALUE 1.      "#EC NOTEXT
    CONSTANTS c_excel_sheet_max_row TYPE int4 VALUE 1048576. "#EC NOTEXT
    CONSTANTS c_excel_sheet_min_row TYPE int4 VALUE 1.      "#EC NOTEXT
    CLASS-DATA c_spras_en TYPE spras VALUE 'E'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . " .
    CLASS-DATA o_conv TYPE REF TO cl_abap_conv_out_ce .
    CONSTANTS c_excel_1900_leap_year TYPE d VALUE '19000228'. "#EC NOTEXT
    CLASS-DATA c_xlsx_file_filter TYPE string VALUE 'Excel Workbook (*.xlsx)|*.xlsx|'. "#EC NOTEXT .  .  .  .  .  .  . " .

    CLASS-METHODS class_constructor .
    CLASS-METHODS describe_structure
      IMPORTING
        !io_struct      TYPE REF TO cl_abap_structdescr
      RETURNING
        VALUE(rt_dfies) TYPE ddfields .
    CLASS-METHODS convert_column2alpha
      IMPORTING
        !ip_column       TYPE simple
      RETURNING
        VALUE(ep_column) TYPE zexcel_cell_column_alpha
      RAISING
        zcx_excel .
    CLASS-METHODS convert_column2int
      IMPORTING
        !ip_column       TYPE simple
      RETURNING
        VALUE(ep_column) TYPE zexcel_cell_column
      RAISING
        zcx_excel .
    CLASS-METHODS convert_columnrow2column_a_row
      IMPORTING
        !i_columnrow TYPE clike
      EXPORTING
        !e_column    TYPE zexcel_cell_column_alpha
        !e_row       TYPE zexcel_cell_row .
    CLASS-METHODS convert_range2column_a_row
      IMPORTING
        !i_range        TYPE clike
      EXPORTING
        !e_column_start TYPE zexcel_cell_column_alpha
        !e_column_end   TYPE zexcel_cell_column_alpha
        !e_row_start    TYPE zexcel_cell_row
        !e_row_end      TYPE zexcel_cell_row
        !e_sheet        TYPE clike
      RAISING
        zcx_excel .
    CLASS-METHODS date_to_excel_string
      IMPORTING
        !ip_value       TYPE d
      RETURNING
        VALUE(ep_value) TYPE zexcel_cell_value .
    CLASS-METHODS encrypt_password
      IMPORTING
        !i_pwd                 TYPE zexcel_aes_password
      RETURNING
        VALUE(r_encrypted_pwd) TYPE zexcel_aes_password .
    CLASS-METHODS escape_string
      IMPORTING
        !ip_value               TYPE clike
      RETURNING
        VALUE(ep_escaped_value) TYPE string .
    CLASS-METHODS unescape_string
      IMPORTING
        !iv_escaped                TYPE clike
      RETURNING
        VALUE(ev_unescaped_string) TYPE string
      RAISING
        zcx_excel .
    CLASS-METHODS excel_string_to_date
      IMPORTING
        !ip_value       TYPE zexcel_cell_value
      RETURNING
        VALUE(ep_value) TYPE d
      RAISING
        zcx_excel .
    CLASS-METHODS excel_string_to_time
      IMPORTING
        !ip_value       TYPE zexcel_cell_value
      RETURNING
        VALUE(ep_value) TYPE t
      RAISING
        zcx_excel .
    CLASS-METHODS excel_string_to_number
      IMPORTING
        !ip_value       TYPE zexcel_cell_value
      RETURNING
        VALUE(ep_value) TYPE f
      RAISING
        zcx_excel .
    CLASS-METHODS get_fieldcatalog
      IMPORTING
        !ip_table              TYPE STANDARD TABLE
      RETURNING
        VALUE(ep_fieldcatalog) TYPE zexcel_t_fieldcatalog .
    CLASS-METHODS number_to_excel_string
      IMPORTING
        VALUE(ip_value) TYPE numeric
      RETURNING
        VALUE(ep_value) TYPE zexcel_cell_value .
    CLASS-METHODS recursive_class_to_struct
      IMPORTING
        !i_source  TYPE any
      CHANGING
        !e_target  TYPE data
        !e_targetx TYPE data .
    CLASS-METHODS recursive_struct_to_class
      IMPORTING
        !i_source  TYPE data
        !i_sourcex TYPE data
      CHANGING
        !e_target  TYPE any .
    CLASS-METHODS time_to_excel_string
      IMPORTING
        !ip_value       TYPE t
      RETURNING
        VALUE(ep_value) TYPE zexcel_cell_value .
    TYPE-POOLS abap .
    CLASS-METHODS split_file
      IMPORTING
        !ip_file         TYPE text255
      EXPORTING
        !ep_file         TYPE text255
        !ep_extension    TYPE char10
        !ep_dotextension TYPE char10 .
    CLASS-METHODS calculate_cell_distance
      IMPORTING
        !iv_reference_cell TYPE clike
        !iv_current_cell   TYPE clike
      EXPORTING
        !ev_row_difference TYPE i
        !ev_col_difference TYPE i
      RAISING
        zcx_excel .
    CLASS-METHODS determine_resulting_formula
      IMPORTING
        !iv_reference_cell          TYPE clike
        !iv_reference_formula       TYPE clike
        !iv_current_cell            TYPE clike
      RETURNING
        VALUE(ev_resulting_formula) TYPE string
      RAISING
        zcx_excel .
    CLASS-METHODS shift_formula
      IMPORTING
        !iv_reference_formula       TYPE clike
        VALUE(iv_shift_cols)        TYPE i
        VALUE(iv_shift_rows)        TYPE i
      RETURNING
        VALUE(ev_resulting_formula) TYPE string
      RAISING
        zcx_excel .
    CLASS-METHODS is_cell_in_range
      IMPORTING
        !ip_column         TYPE simple
        !ip_row            TYPE zexcel_cell_row
        !ip_range          TYPE clike
      RETURNING
        VALUE(rp_in_range) TYPE abap_bool
      RAISING
        zcx_excel .
*"* protected components of class ZCL_EXCEL_COMMON
*"* do not include other source files here!!!
*"* protected components of class ZCL_EXCEL_COMMON
*"* do not include other source files here!!!
  PROTECTED SECTION.
  PRIVATE SECTION.

    CLASS-DATA c_excel_col_module TYPE int2 VALUE 64. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  .  . " .

    CLASS-METHODS structure_case
      IMPORTING
        !is_component  TYPE abap_componentdescr
      CHANGING
        !xt_components TYPE abap_component_tab .
    CLASS-METHODS structure_recursive
      IMPORTING
        !is_component        TYPE abap_componentdescr
      RETURNING
        VALUE(rt_components) TYPE abap_component_tab .
    CLASS-METHODS char2hex
      IMPORTING
        !i_char      TYPE char1
      RETURNING
        VALUE(r_hex) TYPE zexcel_pwd_hash .
    CLASS-METHODS shl01
      IMPORTING
        !i_pwd_hash       TYPE zexcel_pwd_hash
      RETURNING
        VALUE(r_pwd_hash) TYPE zexcel_pwd_hash .
    CLASS-METHODS shr14
      IMPORTING
        !i_pwd_hash       TYPE zexcel_pwd_hash
      RETURNING
        VALUE(r_pwd_hash) TYPE zexcel_pwd_hash .
ENDCLASS.

CLASS zcl_excel_styles_cond DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_STYLES_COND
*"* do not include other source files here!!!
  PUBLIC SECTION.

    METHODS add
      IMPORTING
        !ip_style_cond TYPE REF TO zcl_excel_style_cond .
    METHODS clear .
    METHODS constructor .
    METHODS get
      IMPORTING
        !ip_index            TYPE zexcel_active_worksheet
      RETURNING
        VALUE(eo_style_cond) TYPE REF TO zcl_excel_style_cond .
    METHODS get_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS is_empty
      RETURNING
        VALUE(is_empty) TYPE flag .
    METHODS remove
      IMPORTING
        !ip_style_cond TYPE REF TO zcl_excel_style_cond .
    METHODS size
      RETURNING
        VALUE(ep_size) TYPE i .
*"* protected components of class ZABAP_EXCEL_WORKSHEETS
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZCL_EXCEL_STYLES_COND
*"* do not include other source files here!!!
  PRIVATE SECTION.

    DATA styles_cond TYPE REF TO cl_object_collection .
ENDCLASS.

CLASS zcl_excel_data_validations DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_DATA_VALIDATIONS
*"* do not include other source files here!!!
  PUBLIC SECTION.
    TYPE-POOLS abap .

    METHODS add
      IMPORTING
        !ip_data_validation TYPE REF TO zcl_excel_data_validation .
    METHODS clear .
    METHODS constructor .
    METHODS get_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS is_empty
      RETURNING
        VALUE(is_empty) TYPE flag .
    METHODS remove
      IMPORTING
        !ip_data_validation TYPE REF TO zcl_excel_data_validation .
    METHODS size
      RETURNING
        VALUE(ep_size) TYPE i .
*"* protected components of class ZCL_EXCEL_DATA_VALIDATIONS
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZCL_EXCEL_DATA_VALIDATIONS
*"* do not include other source files here!!!
  PRIVATE SECTION.

    DATA data_validations TYPE REF TO cl_object_collection .
ENDCLASS.

CLASS zcl_excel_ranges DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_RANGES
*"* do not include other source files here!!!
  PUBLIC SECTION.

    METHODS add
      IMPORTING
        !ip_range TYPE REF TO zcl_excel_range .
    METHODS clear .
    METHODS constructor .
    METHODS get
      IMPORTING
        !ip_index       TYPE i
      RETURNING
        VALUE(eo_range) TYPE REF TO zcl_excel_range .
    METHODS get_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS is_empty
      RETURNING
        VALUE(is_empty) TYPE flag .
    METHODS remove
      IMPORTING
        !ip_range TYPE REF TO zcl_excel_range .
    METHODS size
      RETURNING
        VALUE(ep_size) TYPE i .
*"* protected components of class ZABAP_EXCEL_WORKSHEETS
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZABAP_EXCEL_RANGES
*"* do not include other source files here!!!
  PRIVATE SECTION.

    DATA ranges TYPE REF TO cl_object_collection .
ENDCLASS.

CLASS c_oi_proxy_error DEFINITION.
  PUBLIC SECTION.
    INTERFACES: i_oi_error.
    DATA: error_nr TYPE i.
    DATA: error_string TYPE sy-msgv1.

    METHODS: constructor IMPORTING object_name TYPE c
                                   method_name TYPE c.
  PRIVATE SECTION.
    CONSTANTS:
          ret_call_not_flushed        TYPE i VALUE -999999.

    DATA: message_id TYPE sy-msgid,
          message_nr TYPE sy-msgno,
          param1     TYPE sy-msgv1,
          param2     TYPE sy-msgv2,
          param3     TYPE sy-msgv3,
          param4     TYPE sy-msgv4.
ENDCLASS.                    "c_oi_proxy_error DEFINITION

CLASS lcl_gui_alv_grid DEFINITION INHERITING FROM cl_gui_alv_grid.

  PUBLIC SECTION.
* get ALV grid data
    METHODS: get_alv_attributes
      IMPORTING
        io_grid  TYPE REF TO cl_gui_alv_grid " ALV grid
      EXPORTING
        et_table TYPE REF TO data.           " dta table

ENDCLASS.

CLASS zcl_excel_worksheet DEFINITION
  CREATE PUBLIC .

  PUBLIC SECTION.
*"* public components of class ZCL_EXCEL_WORKSHEET
*"* do not include other source files here!!!
*"* protected components of class ZCL_EXCEL_WORKSHEET
*"* do not include other source files here!!!
*"* protected components of class ZCL_EXCEL_WORKSHEET
*"* do not include other source files here!!!
    TYPE-POOLS abap .
    TYPE-POOLS slis .
    TYPE-POOLS soi .

    INTERFACES zif_excel_sheet_printsettings .
    INTERFACES zif_excel_sheet_properties .
    INTERFACES zif_excel_sheet_protection .
    INTERFACES zif_excel_sheet_vba_project .

    TYPES:
      BEGIN OF  mty_s_outline_row,
        row_from  TYPE i,
        row_to    TYPE i,
        collapsed TYPE abap_bool,
      END OF mty_s_outline_row .
    TYPES:
      mty_ts_outlines_row TYPE SORTED TABLE OF mty_s_outline_row WITH UNIQUE KEY row_from row_to .

    CONSTANTS c_break_column TYPE zexcel_break VALUE 2.     "#EC NOTEXT
    CONSTANTS c_break_none TYPE zexcel_break VALUE 0.       "#EC NOTEXT
    CONSTANTS c_break_row TYPE zexcel_break VALUE 1.        "#EC NOTEXT
    DATA excel TYPE REF TO zcl_excel READ-ONLY .
    DATA print_gridlines TYPE zexcel_print_gridlines READ-ONLY VALUE abap_false. "#EC NOTEXT
    DATA sheet_content TYPE zexcel_t_cell_data .
    DATA sheet_setup TYPE REF TO zcl_excel_sheet_setup .
    DATA show_gridlines TYPE zexcel_show_gridlines READ-ONLY VALUE abap_true. "#EC NOTEXT
    DATA show_rowcolheaders TYPE zexcel_show_gridlines READ-ONLY VALUE abap_true. "#EC NOTEXT
    DATA styles TYPE zexcel_t_sheet_style .
    DATA tabcolor TYPE zexcel_s_tabcolor READ-ONLY .

    METHODS add_comment
      IMPORTING
        !ip_comment TYPE REF TO zcl_excel_comment .
    METHODS add_drawing
      IMPORTING
        !ip_drawing TYPE REF TO zcl_excel_drawing .
    METHODS add_new_column
      IMPORTING
        !ip_column       TYPE simple
      RETURNING
        VALUE(eo_column) TYPE REF TO zcl_excel_column .
    METHODS add_new_style_cond
      RETURNING
        VALUE(eo_style_cond) TYPE REF TO zcl_excel_style_cond .
    METHODS add_new_data_validation
      RETURNING
        VALUE(eo_data_validation) TYPE REF TO zcl_excel_data_validation .
    METHODS add_new_range
      RETURNING
        VALUE(eo_range) TYPE REF TO zcl_excel_range .
    METHODS add_new_row
      IMPORTING
        !ip_row       TYPE simple
      RETURNING
        VALUE(eo_row) TYPE REF TO zcl_excel_row .
    METHODS bind_alv
      IMPORTING
        !io_alv      TYPE REF TO object
        !it_table    TYPE STANDARD TABLE
        !i_top       TYPE i DEFAULT 1
        !i_left      TYPE i DEFAULT 1
        !table_style TYPE zexcel_table_style OPTIONAL
        !i_table     TYPE abap_bool DEFAULT abap_true
      RAISING
        zcx_excel .
    METHODS bind_alv_ole2
      IMPORTING
        !i_document_url      TYPE char255 DEFAULT space
        !i_xls               TYPE c DEFAULT space
        !i_save_path         TYPE string
        !io_alv              TYPE REF TO cl_gui_alv_grid
        !it_listheader       TYPE slis_t_listheader OPTIONAL
        !i_top               TYPE i DEFAULT 1
        !i_left              TYPE i DEFAULT 1
        !i_columns_header    TYPE c DEFAULT 'X'
        !i_columns_autofit   TYPE c DEFAULT 'X'
        !i_format_col_header TYPE soi_format_item OPTIONAL
        !i_format_subtotal   TYPE soi_format_item OPTIONAL
        !i_format_total      TYPE soi_format_item OPTIONAL
      EXCEPTIONS
        miss_guide
        ex_transfer_kkblo_error
        fatal_error
        inv_data_range
        dim_mismatch_vkey
        dim_mismatch_sema
        error_in_sema .
    METHODS bind_table
      IMPORTING
        !ip_table               TYPE STANDARD TABLE
        !it_field_catalog       TYPE zexcel_t_fieldcatalog OPTIONAL
        !is_table_settings      TYPE zexcel_s_table_settings OPTIONAL
        VALUE(iv_default_descr) TYPE c OPTIONAL
        !iv_no_line_if_empty    TYPE abap_bool DEFAULT abap_false
      EXPORTING
        !es_table_settings      TYPE zexcel_s_table_settings
      RAISING
        zcx_excel .
    METHODS calculate_column_widths
      RAISING
        zcx_excel .
    METHODS change_cell_style
      IMPORTING
        !ip_column                      TYPE simple
        !ip_row                         TYPE zexcel_cell_row
        !ip_complete                    TYPE zexcel_s_cstyle_complete OPTIONAL
        !ip_xcomplete                   TYPE zexcel_s_cstylex_complete OPTIONAL
        !ip_font                        TYPE zexcel_s_cstyle_font OPTIONAL
        !ip_xfont                       TYPE zexcel_s_cstylex_font OPTIONAL
        !ip_fill                        TYPE zexcel_s_cstyle_fill OPTIONAL
        !ip_xfill                       TYPE zexcel_s_cstylex_fill OPTIONAL
        !ip_borders                     TYPE zexcel_s_cstyle_borders OPTIONAL
        !ip_xborders                    TYPE zexcel_s_cstylex_borders OPTIONAL
        !ip_alignment                   TYPE zexcel_s_cstyle_alignment OPTIONAL
        !ip_xalignment                  TYPE zexcel_s_cstylex_alignment OPTIONAL
        !ip_number_format_format_code   TYPE zexcel_number_format OPTIONAL
        !ip_protection                  TYPE zexcel_s_cstyle_protection OPTIONAL
        !ip_xprotection                 TYPE zexcel_s_cstylex_protection OPTIONAL
        !ip_font_bold                   TYPE flag OPTIONAL
        !ip_font_color                  TYPE zexcel_s_style_color OPTIONAL
        !ip_font_color_rgb              TYPE zexcel_style_color_argb OPTIONAL
        !ip_font_color_indexed          TYPE zexcel_style_color_indexed OPTIONAL
        !ip_font_color_theme            TYPE zexcel_style_color_theme OPTIONAL
        !ip_font_color_tint             TYPE zexcel_style_color_tint OPTIONAL
        !ip_font_family                 TYPE zexcel_style_font_family OPTIONAL
        !ip_font_italic                 TYPE flag OPTIONAL
        !ip_font_name                   TYPE zexcel_style_font_name OPTIONAL
        !ip_font_scheme                 TYPE zexcel_style_font_scheme OPTIONAL
        !ip_font_size                   TYPE zexcel_style_font_size OPTIONAL
        !ip_font_strikethrough          TYPE flag OPTIONAL
        !ip_font_underline              TYPE flag OPTIONAL
        !ip_font_underline_mode         TYPE zexcel_style_font_underline OPTIONAL
        !ip_fill_filltype               TYPE zexcel_fill_type OPTIONAL
        !ip_fill_rotation               TYPE zexcel_rotation OPTIONAL
        !ip_fill_fgcolor                TYPE zexcel_s_style_color OPTIONAL
        !ip_fill_fgcolor_rgb            TYPE zexcel_style_color_argb OPTIONAL
        !ip_fill_fgcolor_indexed        TYPE zexcel_style_color_indexed OPTIONAL
        !ip_fill_fgcolor_theme          TYPE zexcel_style_color_theme OPTIONAL
        !ip_fill_fgcolor_tint           TYPE zexcel_style_color_tint OPTIONAL
        !ip_fill_bgcolor                TYPE zexcel_s_style_color OPTIONAL
        !ip_fill_bgcolor_rgb            TYPE zexcel_style_color_argb OPTIONAL
        !ip_fill_bgcolor_indexed        TYPE zexcel_style_color_indexed OPTIONAL
        !ip_fill_bgcolor_theme          TYPE zexcel_style_color_theme OPTIONAL
        !ip_fill_bgcolor_tint           TYPE zexcel_style_color_tint OPTIONAL
        !ip_borders_allborders          TYPE zexcel_s_cstyle_border OPTIONAL
        !ip_fill_gradtype_type          TYPE zexcel_s_gradient_type-type OPTIONAL
        !ip_fill_gradtype_degree        TYPE zexcel_s_gradient_type-degree OPTIONAL
        !ip_xborders_allborders         TYPE zexcel_s_cstylex_border OPTIONAL
        !ip_borders_diagonal            TYPE zexcel_s_cstyle_border OPTIONAL
        !ip_fill_gradtype_bottom        TYPE zexcel_s_gradient_type-bottom OPTIONAL
        !ip_fill_gradtype_top           TYPE zexcel_s_gradient_type-top OPTIONAL
        !ip_xborders_diagonal           TYPE zexcel_s_cstylex_border OPTIONAL
        !ip_borders_diagonal_mode       TYPE zexcel_diagonal OPTIONAL
        !ip_fill_gradtype_right         TYPE zexcel_s_gradient_type-right OPTIONAL
        !ip_borders_down                TYPE zexcel_s_cstyle_border OPTIONAL
        !ip_fill_gradtype_left          TYPE zexcel_s_gradient_type-left OPTIONAL
        !ip_fill_gradtype_position1     TYPE zexcel_s_gradient_type-position1 OPTIONAL
        !ip_xborders_down               TYPE zexcel_s_cstylex_border OPTIONAL
        !ip_borders_left                TYPE zexcel_s_cstyle_border OPTIONAL
        !ip_fill_gradtype_position2     TYPE zexcel_s_gradient_type-position2 OPTIONAL
        !ip_fill_gradtype_position3     TYPE zexcel_s_gradient_type-position3 OPTIONAL
        !ip_xborders_left               TYPE zexcel_s_cstylex_border OPTIONAL
        !ip_borders_right               TYPE zexcel_s_cstyle_border OPTIONAL
        !ip_xborders_right              TYPE zexcel_s_cstylex_border OPTIONAL
        !ip_borders_top                 TYPE zexcel_s_cstyle_border OPTIONAL
        !ip_xborders_top                TYPE zexcel_s_cstylex_border OPTIONAL
        !ip_alignment_horizontal        TYPE zexcel_alignment OPTIONAL
        !ip_alignment_vertical          TYPE zexcel_alignment OPTIONAL
        !ip_alignment_textrotation      TYPE zexcel_text_rotation OPTIONAL
        !ip_alignment_wraptext          TYPE flag OPTIONAL
        !ip_alignment_shrinktofit       TYPE flag OPTIONAL
        !ip_alignment_indent            TYPE zexcel_indent OPTIONAL
        !ip_protection_hidden           TYPE zexcel_cell_protection OPTIONAL
        !ip_protection_locked           TYPE zexcel_cell_protection OPTIONAL
        !ip_borders_allborders_style    TYPE zexcel_border OPTIONAL
        !ip_borders_allborders_color    TYPE zexcel_s_style_color OPTIONAL
        !ip_borders_allbo_color_rgb     TYPE zexcel_style_color_argb OPTIONAL
        !ip_borders_allbo_color_indexed TYPE zexcel_style_color_indexed OPTIONAL
        !ip_borders_allbo_color_theme   TYPE zexcel_style_color_theme OPTIONAL
        !ip_borders_allbo_color_tint    TYPE zexcel_style_color_tint OPTIONAL
        !ip_borders_diagonal_style      TYPE zexcel_border OPTIONAL
        !ip_borders_diagonal_color      TYPE zexcel_s_style_color OPTIONAL
        !ip_borders_diagonal_color_rgb  TYPE zexcel_style_color_argb OPTIONAL
        !ip_borders_diagonal_color_inde TYPE zexcel_style_color_indexed OPTIONAL
        !ip_borders_diagonal_color_them TYPE zexcel_style_color_theme OPTIONAL
        !ip_borders_diagonal_color_tint TYPE zexcel_style_color_tint OPTIONAL
        !ip_borders_down_style          TYPE zexcel_border OPTIONAL
        !ip_borders_down_color          TYPE zexcel_s_style_color OPTIONAL
        !ip_borders_down_color_rgb      TYPE zexcel_style_color_argb OPTIONAL
        !ip_borders_down_color_indexed  TYPE zexcel_style_color_indexed OPTIONAL
        !ip_borders_down_color_theme    TYPE zexcel_style_color_theme OPTIONAL
        !ip_borders_down_color_tint     TYPE zexcel_style_color_tint OPTIONAL
        !ip_borders_left_style          TYPE zexcel_border OPTIONAL
        !ip_borders_left_color          TYPE zexcel_s_style_color OPTIONAL
        !ip_borders_left_color_rgb      TYPE zexcel_style_color_argb OPTIONAL
        !ip_borders_left_color_indexed  TYPE zexcel_style_color_indexed OPTIONAL
        !ip_borders_left_color_theme    TYPE zexcel_style_color_theme OPTIONAL
        !ip_borders_left_color_tint     TYPE zexcel_style_color_tint OPTIONAL
        !ip_borders_right_style         TYPE zexcel_border OPTIONAL
        !ip_borders_right_color         TYPE zexcel_s_style_color OPTIONAL
        !ip_borders_right_color_rgb     TYPE zexcel_style_color_argb OPTIONAL
        !ip_borders_right_color_indexed TYPE zexcel_style_color_indexed OPTIONAL
        !ip_borders_right_color_theme   TYPE zexcel_style_color_theme OPTIONAL
        !ip_borders_right_color_tint    TYPE zexcel_style_color_tint OPTIONAL
        !ip_borders_top_style           TYPE zexcel_border OPTIONAL
        !ip_borders_top_color           TYPE zexcel_s_style_color OPTIONAL
        !ip_borders_top_color_rgb       TYPE zexcel_style_color_argb OPTIONAL
        !ip_borders_top_color_indexed   TYPE zexcel_style_color_indexed OPTIONAL
        !ip_borders_top_color_theme     TYPE zexcel_style_color_theme OPTIONAL
        !ip_borders_top_color_tint      TYPE zexcel_style_color_tint OPTIONAL
      RETURNING
        VALUE(ep_guid)                  TYPE zexcel_cell_style
      RAISING
        zcx_excel .
    METHODS constructor
      IMPORTING
        !ip_excel TYPE REF TO zcl_excel
        !ip_title TYPE zexcel_sheet_title OPTIONAL
      RAISING
        zcx_excel .
    METHODS delete_merge
      IMPORTING
        !ip_cell_column TYPE simple OPTIONAL
        !ip_cell_row    TYPE zexcel_cell_row OPTIONAL
      RAISING
        zcx_excel .
    METHODS delete_row_outline
      IMPORTING
        !iv_row_from TYPE i
        !iv_row_to   TYPE i
      RAISING
        zcx_excel .
    METHODS freeze_panes
      IMPORTING
        !ip_num_columns TYPE i OPTIONAL
        !ip_num_rows    TYPE i OPTIONAL
      RAISING
        zcx_excel .
    METHODS get_active_cell
      RETURNING
        VALUE(ep_active_cell) TYPE string
      RAISING
        zcx_excel .
    METHODS get_cell
      IMPORTING
        !ip_column  TYPE simple
        !ip_row     TYPE zexcel_cell_row
      EXPORTING
        !ep_value   TYPE zexcel_cell_value
        !ep_rc      TYPE sysubrc
        !ep_style   TYPE REF TO zcl_excel_style
        !ep_guid    TYPE zexcel_cell_style
        !ep_formula TYPE zexcel_cell_formula
      RAISING
        zcx_excel .
    METHODS get_column
      IMPORTING
        !ip_column       TYPE simple
      RETURNING
        VALUE(eo_column) TYPE REF TO zcl_excel_column .
    METHODS get_columns
      RETURNING
        VALUE(eo_columns) TYPE REF TO zcl_excel_columns .
    METHODS get_columns_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS get_style_cond_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS get_data_validations_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS get_data_validations_size
      RETURNING
        VALUE(ep_size) TYPE i .
    METHODS get_default_column
      RETURNING
        VALUE(eo_column) TYPE REF TO zcl_excel_column .
    METHODS get_default_excel_date_format
      RETURNING
        VALUE(ep_default_excel_date_format) TYPE zexcel_number_format .
    METHODS get_default_excel_time_format
      RETURNING
        VALUE(ep_default_excel_time_format) TYPE zexcel_number_format .
    METHODS get_default_row
      RETURNING
        VALUE(eo_row) TYPE REF TO zcl_excel_row .
    METHODS get_dimension_range
      RETURNING
        VALUE(ep_dimension_range) TYPE string
      RAISING
        zcx_excel .
    METHODS get_comments
      RETURNING
        VALUE(r_comments) TYPE REF TO zcl_excel_comments .
    METHODS get_drawings
      IMPORTING
        !ip_type          TYPE zexcel_drawing_type OPTIONAL
      RETURNING
        VALUE(r_drawings) TYPE REF TO zcl_excel_drawings .
    METHODS get_comments_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS get_drawings_iterator
      IMPORTING
        !ip_type           TYPE zexcel_drawing_type
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS get_freeze_cell
      EXPORTING
        !ep_row    TYPE zexcel_cell_row
        !ep_column TYPE zexcel_cell_column .
    METHODS get_guid
      RETURNING
        VALUE(ep_guid) TYPE uuid .
    METHODS get_highest_column
      RETURNING
        VALUE(r_highest_column) TYPE zexcel_cell_column
      RAISING
        zcx_excel .
    METHODS get_highest_row
      RETURNING
        VALUE(r_highest_row) TYPE int4
      RAISING
        zcx_excel .
    METHODS get_hyperlinks_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS get_hyperlinks_size
      RETURNING
        VALUE(ep_size) TYPE i .
    METHODS get_merge
      RETURNING
        VALUE(merge_range) TYPE string_table
      RAISING
        zcx_excel .
    METHODS get_pagebreaks
      RETURNING
        VALUE(ro_pagebreaks) TYPE REF TO zcl_excel_worksheet_pagebreaks
      RAISING
        zcx_excel .
    METHODS get_ranges_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS get_row
      IMPORTING
        !ip_row       TYPE int4
      RETURNING
        VALUE(eo_row) TYPE REF TO zcl_excel_row .
    METHODS get_rows
      RETURNING
        VALUE(eo_rows) TYPE REF TO zcl_excel_rows .
    METHODS get_rows_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS get_row_outlines
      RETURNING
        VALUE(rt_row_outlines) TYPE mty_ts_outlines_row .
    METHODS get_style_cond
      IMPORTING
        !ip_guid             TYPE zexcel_cell_style
      RETURNING
        VALUE(eo_style_cond) TYPE REF TO zcl_excel_style_cond .
    METHODS get_tabcolor
      RETURNING
        VALUE(ev_tabcolor) TYPE zexcel_s_tabcolor .
    METHODS get_tables_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS get_tables_size
      RETURNING
        VALUE(ep_size) TYPE i .
    METHODS get_title
      IMPORTING
        !ip_escaped     TYPE flag DEFAULT ''
      RETURNING
        VALUE(ep_title) TYPE zexcel_sheet_title .
    METHODS is_cell_merged
      IMPORTING
        !ip_column          TYPE simple
        !ip_row             TYPE zexcel_cell_row
      RETURNING
        VALUE(rp_is_merged) TYPE abap_bool
      RAISING
        zcx_excel .
    METHODS set_cell
      IMPORTING
        !ip_column    TYPE simple
        !ip_row       TYPE zexcel_cell_row
        !ip_value     TYPE simple OPTIONAL
        !ip_formula   TYPE zexcel_cell_formula OPTIONAL
        !ip_style     TYPE zexcel_cell_style OPTIONAL
        !ip_hyperlink TYPE REF TO zcl_excel_hyperlink OPTIONAL
        !ip_data_type TYPE zexcel_cell_data_type OPTIONAL
        !ip_abap_type TYPE abap_typekind OPTIONAL
      RAISING
        zcx_excel .
    METHODS set_cell_formula
      IMPORTING
        !ip_column  TYPE simple
        !ip_row     TYPE zexcel_cell_row
        !ip_formula TYPE zexcel_cell_formula
      RAISING
        zcx_excel .
    METHODS set_cell_style
      IMPORTING
        !ip_column TYPE simple
        !ip_row    TYPE zexcel_cell_row
        !ip_style  TYPE zexcel_cell_style
      RAISING
        zcx_excel .
    METHODS set_column_width
      IMPORTING
        !ip_column         TYPE simple
        !ip_width_fix      TYPE simple DEFAULT 0
        !ip_width_autosize TYPE flag DEFAULT 'X'
      RAISING
        zcx_excel .
    METHODS set_default_excel_date_format
      IMPORTING
        !ip_default_excel_date_format TYPE zexcel_number_format
      RAISING
        zcx_excel .
    METHODS set_merge
      IMPORTING
        !ip_column_start TYPE simple DEFAULT zcl_excel_common=>c_excel_sheet_min_col
        !ip_column_end   TYPE simple DEFAULT zcl_excel_common=>c_excel_sheet_max_col
        !ip_row          TYPE zexcel_cell_row DEFAULT zcl_excel_common=>c_excel_sheet_min_row
        !ip_row_to       TYPE zexcel_cell_row DEFAULT zcl_excel_common=>c_excel_sheet_max_row
        !ip_style        TYPE zexcel_cell_style OPTIONAL "added parameter
        !ip_value        TYPE simple OPTIONAL "added parameter
        !ip_formula      TYPE zexcel_cell_formula OPTIONAL "added parameter
      RAISING
        zcx_excel .
    METHODS set_print_gridlines
      IMPORTING
        !i_print_gridlines TYPE zexcel_print_gridlines .
    METHODS set_row_height
      IMPORTING
        !ip_row        TYPE simple
        !ip_height_fix TYPE simple
      RAISING
        zcx_excel .
    METHODS set_row_outline
      IMPORTING
        !iv_row_from  TYPE i
        !iv_row_to    TYPE i
        !iv_collapsed TYPE abap_bool
      RAISING
        zcx_excel .
    METHODS set_show_gridlines
      IMPORTING
        !i_show_gridlines TYPE zexcel_show_gridlines .
    METHODS set_show_rowcolheaders
      IMPORTING
        !i_show_rowcolheaders TYPE zexcel_show_rowcolheader .
    METHODS set_tabcolor
      IMPORTING
        !iv_tabcolor TYPE zexcel_s_tabcolor .
    METHODS set_table
      IMPORTING
        !ip_table           TYPE STANDARD TABLE
        !ip_hdr_style       TYPE zexcel_cell_style OPTIONAL
        !ip_body_style      TYPE zexcel_cell_style OPTIONAL
        !ip_table_title     TYPE string
        !ip_top_left_column TYPE zexcel_cell_column_alpha DEFAULT 'B'
        !ip_top_left_row    TYPE zexcel_cell_row DEFAULT 3
        !ip_transpose       TYPE xfeld OPTIONAL
        !ip_no_header       TYPE xfeld OPTIONAL
      RAISING
        zcx_excel .
    METHODS set_title
      IMPORTING
        !ip_title TYPE zexcel_sheet_title
      RAISING
        zcx_excel .
    METHODS get_table
      IMPORTING
        !iv_skipped_rows TYPE int4 DEFAULT 0
        !iv_skipped_cols TYPE int4 DEFAULT 0
        !iv_max_col      TYPE int4 OPTIONAL
        !iv_max_row      TYPE int4 OPTIONAL
      EXPORTING
        !et_table        TYPE STANDARD TABLE
      RAISING
        zcx_excel .
    METHODS set_merge_style
      IMPORTING
        !ip_column_start TYPE simple OPTIONAL
        !ip_column_end   TYPE simple OPTIONAL
        !ip_row          TYPE zexcel_cell_row OPTIONAL
        !ip_row_to       TYPE zexcel_cell_row OPTIONAL
        !ip_style        TYPE zexcel_cell_style OPTIONAL .
    METHODS set_area_formula
      IMPORTING
        !ip_column_start TYPE simple
        !ip_column_end   TYPE simple OPTIONAL
        !ip_row          TYPE zexcel_cell_row
        !ip_row_to       TYPE zexcel_cell_row OPTIONAL
        !ip_formula      TYPE zexcel_cell_formula
        !ip_merge        TYPE abap_bool OPTIONAL
      RAISING
        zcx_excel .
    METHODS set_area_style
      IMPORTING
        !ip_column_start TYPE simple
        !ip_column_end   TYPE simple OPTIONAL
        !ip_row          TYPE zexcel_cell_row
        !ip_row_to       TYPE zexcel_cell_row OPTIONAL
        !ip_style        TYPE zexcel_cell_style
        !ip_merge        TYPE abap_bool OPTIONAL .
    METHODS set_area
      IMPORTING
        !ip_column_start TYPE simple
        !ip_column_end   TYPE simple OPTIONAL
        !ip_row          TYPE zexcel_cell_row
        !ip_row_to       TYPE zexcel_cell_row OPTIONAL
        !ip_value        TYPE simple OPTIONAL
        !ip_formula      TYPE zexcel_cell_formula OPTIONAL
        !ip_style        TYPE zexcel_cell_style OPTIONAL
        !ip_hyperlink    TYPE REF TO zcl_excel_hyperlink OPTIONAL
        !ip_data_type    TYPE zexcel_cell_data_type OPTIONAL
        !ip_abap_type    TYPE abap_typekind OPTIONAL
        !ip_merge        TYPE abap_bool OPTIONAL
      RAISING
        zcx_excel .
    METHODS get_header_footer_drawings
      RETURNING
        VALUE(rt_drawings) TYPE zexcel_t_drawings .
  PROTECTED SECTION.
  PRIVATE SECTION.

    TYPES:
      BEGIN OF mty_s_font_metric,
        char       TYPE c LENGTH 1,
        char_width TYPE tdcwidths,
      END OF mty_s_font_metric .
    TYPES:
      mty_th_font_metrics
             TYPE HASHED TABLE OF mty_s_font_metric
             WITH UNIQUE KEY char .
    TYPES:
      BEGIN OF mty_s_font_cache,
        font_name       TYPE zexcel_style_font_name,
        font_height     TYPE tdfontsize,
        flag_bold       TYPE abap_bool,
        flag_italic     TYPE abap_bool,
        th_font_metrics TYPE mty_th_font_metrics,
      END OF mty_s_font_cache .
    TYPES:
      mty_th_font_cache
             TYPE HASHED TABLE OF mty_s_font_cache
             WITH UNIQUE KEY font_name font_height flag_bold flag_italic .
    TYPES:
*  types:
*    mty_ts_row_dimension TYPE SORTED TABLE OF zexcel_s_worksheet_rowdimensio WITH UNIQUE KEY row .
      BEGIN OF mty_merge,
        row_from TYPE i,
        row_to   TYPE i,
        col_from TYPE i,
        col_to   TYPE i,
      END OF mty_merge .
    TYPES:
      mty_ts_merge TYPE SORTED TABLE OF mty_merge WITH UNIQUE KEY table_line .

*"* private components of class ZCL_EXCEL_WORKSHEET
*"* do not include other source files here!!!
    DATA active_cell TYPE zexcel_s_cell_data .
    DATA charts TYPE REF TO zcl_excel_drawings .
    DATA columns TYPE REF TO zcl_excel_columns .
    DATA row_default TYPE REF TO zcl_excel_row .
    DATA column_default TYPE REF TO zcl_excel_column .
    DATA styles_cond TYPE REF TO zcl_excel_styles_cond .
    DATA data_validations TYPE REF TO zcl_excel_data_validations .
    DATA default_excel_date_format TYPE zexcel_number_format .
    DATA default_excel_time_format TYPE zexcel_number_format .
    DATA comments TYPE REF TO zcl_excel_comments .
    DATA drawings TYPE REF TO zcl_excel_drawings .
    DATA freeze_pane_cell_column TYPE zexcel_cell_column .
    DATA freeze_pane_cell_row TYPE zexcel_cell_row .
    DATA guid TYPE uuid .
    DATA hyperlinks TYPE REF TO cl_object_collection .
    DATA lower_cell TYPE zexcel_s_cell_data .
    DATA mo_pagebreaks TYPE REF TO zcl_excel_worksheet_pagebreaks .
    CLASS-DATA mth_font_cache TYPE mty_th_font_cache .
    DATA mt_merged_cells TYPE mty_ts_merge .
    DATA mt_row_outlines TYPE mty_ts_outlines_row .
    DATA print_title_col_from TYPE zexcel_cell_column_alpha .
    DATA print_title_col_to TYPE zexcel_cell_column_alpha .
    DATA print_title_row_from TYPE zexcel_cell_row .
    DATA print_title_row_to TYPE zexcel_cell_row .
    DATA ranges TYPE REF TO zcl_excel_ranges .
    DATA rows TYPE REF TO zcl_excel_rows .
    DATA tables TYPE REF TO cl_object_collection .
    DATA title TYPE zexcel_sheet_title VALUE 'Worksheet'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . " .
    DATA upper_cell TYPE zexcel_s_cell_data .

    METHODS calculate_cell_width
      IMPORTING
        !ip_column      TYPE simple
        !ip_row         TYPE zexcel_cell_row
      RETURNING
        VALUE(ep_width) TYPE float
      RAISING
        zcx_excel .
    METHODS generate_title
      RETURNING
        VALUE(ep_title) TYPE zexcel_sheet_title .
    METHODS get_value_type
      IMPORTING
        !ip_value      TYPE simple
      EXPORTING
        !ep_value      TYPE simple
        !ep_value_type TYPE abap_typekind .
    METHODS print_title_set_range .
    METHODS update_dimension_range
      RAISING
        zcx_excel .
ENDCLASS.

CLASS zcl_excel_autofilter DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_AUTOFILTER
*"* do not include other source files here!!!
  PUBLIC SECTION.

    TYPES tv_filter_rule TYPE string .
    TYPES tv_logical_operator TYPE char3 .
    TYPES:
      BEGIN OF ts_filter,
        column           TYPE zexcel_cell_column,
        rule             TYPE tv_filter_rule,
        t_values         TYPE HASHED TABLE OF zexcel_cell_value WITH UNIQUE KEY table_line,
        tr_textfilter1   TYPE RANGE OF string,
        logical_operator TYPE tv_logical_operator,
        tr_textfilter2   TYPE RANGE OF string,
      END OF ts_filter .
    TYPES:
      tt_filters TYPE HASHED TABLE OF ts_filter WITH UNIQUE KEY column .

    DATA filter_area TYPE zexcel_s_autofilter_area .
    CONSTANTS mc_filter_rule_single_values TYPE tv_filter_rule VALUE 'single_values'. "#EC NOTEXT
    CONSTANTS mc_filter_rule_text_pattern TYPE tv_filter_rule VALUE 'text_pattern'. "#EC NOTEXT
    CONSTANTS mc_logical_operator_and TYPE tv_logical_operator VALUE 'and'. "#EC NOTEXT
    CONSTANTS mc_logical_operator_none TYPE tv_logical_operator VALUE space. "#EC NOTEXT
    CONSTANTS mc_logical_operator_or TYPE tv_logical_operator VALUE 'or'. "#EC NOTEXT

    METHODS constructor
      IMPORTING
        !io_sheet TYPE REF TO zcl_excel_worksheet .
    METHODS get_filter_area
      RETURNING
        VALUE(rs_area) TYPE zexcel_s_autofilter_area .
    METHODS get_filter_range
      RETURNING
        VALUE(r_range) TYPE zexcel_cell_value
      RAISING
        zcx_excel.
    METHODS get_filter_reference
      RETURNING
        VALUE(r_ref) TYPE zexcel_range_value
      RAISING
        zcx_excel .
    METHODS get_values
      RETURNING
        VALUE(rt_filter) TYPE zexcel_t_autofilter_values .
    TYPE-POOLS abap .
    METHODS is_row_hidden
      IMPORTING
        !iv_row             TYPE zexcel_cell_row
      RETURNING
        VALUE(rv_is_hidden) TYPE abap_bool .
    METHODS set_filter_area
      IMPORTING
        !is_area TYPE zexcel_s_autofilter_area .
    METHODS set_text_filter
      IMPORTING
        !i_column            TYPE zexcel_cell_column
        !iv_textfilter1      TYPE clike
        !iv_logical_operator TYPE tv_logical_operator DEFAULT mc_logical_operator_none
        !iv_textfilter2      TYPE clike OPTIONAL .
    METHODS set_value
      IMPORTING
        !i_column TYPE zexcel_cell_column
        !i_value  TYPE zexcel_cell_value .
    METHODS set_values
      IMPORTING
        !it_values TYPE zexcel_t_autofilter_values .
*"* protected components of class ZABAP_EXCEL_WORKSHEET
*"* do not include other source files here!!!
  PROTECTED SECTION.

    METHODS get_column_filter
      IMPORTING
        !i_column        TYPE zexcel_cell_column
      RETURNING
        VALUE(rr_filter) TYPE REF TO ts_filter .
    METHODS is_row_hidden_single_values
      IMPORTING
        !iv_row             TYPE zexcel_cell_row
        !iv_col             TYPE zexcel_cell_column
        !is_filter          TYPE ts_filter
      RETURNING
        VALUE(rv_is_hidden) TYPE abap_bool .
    METHODS is_row_hidden_text_pattern
      IMPORTING
        !iv_row             TYPE zexcel_cell_row
        !iv_col             TYPE zexcel_cell_column
        !is_filter          TYPE ts_filter
      RETURNING
        VALUE(rv_is_hidden) TYPE abap_bool .
*"* private components of class ZCL_EXCEL_AUTOFILTER
*"* do not include other source files here!!!
  PRIVATE SECTION.

    DATA worksheet TYPE REF TO zcl_excel_worksheet .
    DATA mt_filters TYPE tt_filters .

    METHODS validate_area
      RAISING
        zcx_excel .
ENDCLASS.

CLASS zcl_excel_autofilters DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
*"* public components of class ZCL_EXCEL_AUTOFILTERS
*"* do not include other source files here!!!
    TYPE-POOLS abap .

    CONSTANTS c_autofilter TYPE string VALUE '_xlnm._FilterDatabase'. "#EC NOTEXT

    METHODS add
      IMPORTING
        !io_sheet            TYPE REF TO zcl_excel_worksheet
      RETURNING
        VALUE(ro_autofilter) TYPE REF TO zcl_excel_autofilter
      RAISING
        zcx_excel .
    METHODS clear .
    METHODS get
      IMPORTING
        !io_worksheet        TYPE REF TO zcl_excel_worksheet OPTIONAL
        !i_sheet_guid        TYPE uuid OPTIONAL
      RETURNING
        VALUE(ro_autofilter) TYPE REF TO zcl_excel_autofilter .
    METHODS is_empty
      RETURNING
        VALUE(r_empty) TYPE flag .
    METHODS remove
      IMPORTING
        !io_sheet TYPE any .
    METHODS size
      RETURNING
        VALUE(r_size) TYPE i .
*"* protected components of class ZABAP_EXCEL_WORKSHEETS
*"* do not include other source files here!!!
*"* protected components of class ZABAP_EXCEL_WORKSHEETS
*"* do not include other source files here!!!
  PROTECTED SECTION.
  PRIVATE SECTION.

    TYPES:
      BEGIN OF ts_autofilter,
        worksheet  TYPE REF TO zcl_excel_worksheet,
        autofilter TYPE REF TO zcl_excel_autofilter,
      END OF ts_autofilter .
    TYPES:
      tt_autofilters TYPE HASHED TABLE OF ts_autofilter WITH UNIQUE KEY worksheet .

    DATA mt_autofilters TYPE tt_autofilters .
ENDCLASS.

CLASS zcl_excel_theme_font_scheme DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      BEGIN OF t_font,
        script   TYPE string,
        typeface TYPE string,
      END OF t_font .
    TYPES:
      tt_font TYPE SORTED TABLE OF t_font WITH UNIQUE KEY script .
    TYPES:
      BEGIN OF t_fonttype,
        typeface    TYPE string,
        panose      TYPE string,
        pitchfamily TYPE string,
        charset     TYPE string,
      END OF t_fonttype .
    TYPES:
      BEGIN OF t_fonts,
        latin TYPE t_fonttype,
        ea    TYPE t_fonttype,
        cs    TYPE t_fonttype,
        fonts TYPE tt_font,
      END OF t_fonts .
    TYPES:
      BEGIN OF t_scheme,
        name  TYPE string,
        major TYPE t_fonts,
        minor TYPE t_fonts,
      END OF t_scheme .

    CONSTANTS c_name TYPE string VALUE 'name'.              "#EC NOTEXT
    CONSTANTS c_scheme TYPE string VALUE 'fontScheme'.      "#EC NOTEXT
    CONSTANTS c_major TYPE string VALUE 'majorFont'.        "#EC NOTEXT
    CONSTANTS c_minor TYPE string VALUE 'minorFont'.        "#EC NOTEXT
    CONSTANTS c_font TYPE string VALUE 'font'.              "#EC NOTEXT
    CONSTANTS c_latin TYPE string VALUE 'latin'.            "#EC NOTEXT
    CONSTANTS c_ea TYPE string VALUE 'ea'.                  "#EC NOTEXT
    CONSTANTS c_cs TYPE string VALUE 'cs'.                  "#EC NOTEXT
    CONSTANTS c_typeface TYPE string VALUE 'typeface'.      "#EC NOTEXT
    CONSTANTS c_panose TYPE string VALUE 'panose'.          "#EC NOTEXT
    CONSTANTS c_pitchfamily TYPE string VALUE 'pitchFamily'. "#EC NOTEXT
    CONSTANTS c_charset TYPE string VALUE 'charset'.        "#EC NOTEXT
    CONSTANTS c_script TYPE string VALUE 'script'.          "#EC NOTEXT

    METHODS load
      IMPORTING
        !io_font_scheme TYPE REF TO if_ixml_element .
    METHODS set_name
      IMPORTING
        VALUE(iv_name) TYPE string .
    METHODS build_xml
      IMPORTING
        !io_document TYPE REF TO if_ixml_document .
    METHODS modify_font
      IMPORTING
        VALUE(iv_type)     TYPE string
        VALUE(iv_script)   TYPE string
        VALUE(iv_typeface) TYPE string .
    METHODS modify_latin_font
      IMPORTING
        VALUE(iv_type)        TYPE string
        VALUE(iv_typeface)    TYPE string
        VALUE(iv_panose)      TYPE string OPTIONAL
        VALUE(iv_pitchfamily) TYPE string OPTIONAL
        VALUE(iv_charset)     TYPE string OPTIONAL .
    METHODS modify_ea_font
      IMPORTING
        VALUE(iv_type)        TYPE string
        VALUE(iv_typeface)    TYPE string
        VALUE(iv_panose)      TYPE string OPTIONAL
        VALUE(iv_pitchfamily) TYPE string OPTIONAL
        VALUE(iv_charset)     TYPE string OPTIONAL .
    METHODS modify_cs_font
      IMPORTING
        VALUE(iv_type)        TYPE string
        VALUE(iv_typeface)    TYPE string
        VALUE(iv_panose)      TYPE string OPTIONAL
        VALUE(iv_pitchfamily) TYPE string OPTIONAL
        VALUE(iv_charset)     TYPE string OPTIONAL .
    METHODS constructor .
  PROTECTED SECTION.

    METHODS modify_lec_fonts
      IMPORTING
        VALUE(iv_type)        TYPE string
        VALUE(iv_font_type)   TYPE string
        VALUE(iv_typeface)    TYPE string
        VALUE(iv_panose)      TYPE string OPTIONAL
        VALUE(iv_pitchfamily) TYPE string OPTIONAL
        VALUE(iv_charset)     TYPE string OPTIONAL .
  PRIVATE SECTION.

    DATA font_scheme TYPE t_scheme .

    METHODS set_defaults .
ENDCLASS.

CLASS zcl_excel_theme_fmt_scheme DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    METHODS load
      IMPORTING
        !io_fmt_scheme TYPE REF TO if_ixml_element .
    METHODS build_xml
      IMPORTING
        !io_document TYPE REF TO if_ixml_document .
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA fmt_scheme TYPE REF TO if_ixml_element .

    METHODS get_default_fmt
      RETURNING
        VALUE(rv_string) TYPE string .
ENDCLASS.

CLASS zcl_excel_theme_elements DEFINITION
  FINAL
  CREATE PUBLIC

  FRIENDS zcl_excel_theme .

  PUBLIC SECTION.

    CONSTANTS c_color_scheme TYPE string VALUE 'clrScheme'. "#EC NOTEXT
    CONSTANTS c_font_scheme TYPE string VALUE 'fontScheme'. "#EC NOTEXT
    CONSTANTS c_fmt_scheme TYPE string VALUE 'fmtScheme'.   "#EC NOTEXT
    CONSTANTS c_theme_elements TYPE string VALUE 'themeElements'. "#EC NOTEXT

    METHODS constructor .
    METHODS load
      IMPORTING
        !io_elements TYPE REF TO if_ixml_element .
    METHODS build_xml
      IMPORTING
        !io_document TYPE REF TO if_ixml_document .
  PROTECTED SECTION.

    DATA color_scheme TYPE REF TO zcl_excel_theme_color_scheme .
    DATA font_scheme TYPE REF TO zcl_excel_theme_font_scheme .
    DATA fmt_scheme TYPE REF TO zcl_excel_theme_fmt_scheme .
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_excel_theme_color_scheme DEFINITION
  FINAL
  CREATE PUBLIC

  FRIENDS zcl_excel_theme
          zcl_excel_theme_elements .

  PUBLIC SECTION.

    TYPES t_srgb TYPE string .
    TYPES:
      BEGIN OF t_syscolor,
        val     TYPE string,
        lastclr TYPE t_srgb,
      END OF t_syscolor .
    TYPES:
      BEGIN OF t_color,
        srgb     TYPE t_srgb,
        syscolor TYPE t_syscolor,
      END OF t_color .

    CONSTANTS c_dark1 TYPE string VALUE 'dk1'.              "#EC NOTEXT
    CONSTANTS c_dark2 TYPE string VALUE 'dk2'.              "#EC NOTEXT
    CONSTANTS c_light1 TYPE string VALUE 'lt1'.             "#EC NOTEXT
    CONSTANTS c_light2 TYPE string VALUE 'lt2'.             "#EC NOTEXT
    CONSTANTS c_accent1 TYPE string VALUE 'accent1'.        "#EC NOTEXT
    CONSTANTS c_accent2 TYPE string VALUE 'accent2'.        "#EC NOTEXT
    CONSTANTS c_accent3 TYPE string VALUE 'accent3'.        "#EC NOTEXT
    CONSTANTS c_accent4 TYPE string VALUE 'accent4'.        "#EC NOTEXT
    CONSTANTS c_accent5 TYPE string VALUE 'accent5'.        "#EC NOTEXT
    CONSTANTS c_accent6 TYPE string VALUE 'accent6'.        "#EC NOTEXT
    CONSTANTS c_hlink TYPE string VALUE 'hlink'.            "#EC NOTEXT
    CONSTANTS c_folhlink TYPE string VALUE 'folHlink'.      "#EC NOTEXT
    CONSTANTS c_syscolor TYPE string VALUE 'sysClr'.        "#EC NOTEXT
    CONSTANTS c_srgbcolor TYPE string VALUE 'srgbClr'.      "#EC NOTEXT
    CONSTANTS c_val TYPE string VALUE 'val'.                "#EC NOTEXT
    CONSTANTS c_lastclr TYPE string VALUE 'lastClr'.        "#EC NOTEXT
    CONSTANTS c_name TYPE string VALUE 'name'.              "#EC NOTEXT
    CONSTANTS c_scheme TYPE string VALUE 'clrScheme'.       "#EC NOTEXT

    METHODS load
      IMPORTING
        !io_color_scheme TYPE REF TO if_ixml_element .
    METHODS set_color
      IMPORTING
        VALUE(iv_type)         TYPE string
        VALUE(iv_srgb)         TYPE t_srgb OPTIONAL
        VALUE(iv_syscolorname) TYPE string OPTIONAL
        VALUE(iv_syscolorlast) TYPE t_srgb .
    METHODS build_xml
      IMPORTING
        !io_document TYPE REF TO if_ixml_document .
    METHODS constructor .
    METHODS set_name
      IMPORTING
        VALUE(iv_name) TYPE string .
  PROTECTED SECTION.

    DATA name TYPE string .
    DATA dark1 TYPE t_color .
    DATA dark2 TYPE t_color .
    DATA light1 TYPE t_color .
    DATA light2 TYPE t_color .
    DATA accent1 TYPE t_color .
    DATA accent2 TYPE t_color .
    DATA accent3 TYPE t_color .
    DATA accent4 TYPE t_color .
    DATA accent5 TYPE t_color .
    DATA accent6 TYPE t_color .
    DATA hlink TYPE t_color .
    DATA folhlink TYPE t_color .
  PRIVATE SECTION.

    METHODS get_color
      IMPORTING
        !io_object      TYPE REF TO if_ixml_element
      RETURNING
        VALUE(rv_color) TYPE t_color .
    METHODS set_defaults .
ENDCLASS.

CLASS zcl_excel_theme_objectdefaults DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    METHODS load
      IMPORTING
        !io_object_def TYPE REF TO if_ixml_element .
    METHODS build_xml
      IMPORTING
        !io_document TYPE REF TO if_ixml_document .
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA objectdefaults TYPE REF TO if_ixml_element .
ENDCLASS.

CLASS zcl_excel_theme_eclrschemelst DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    METHODS load
      IMPORTING
        !io_extra_color TYPE REF TO if_ixml_element .
    METHODS build_xml
      IMPORTING
        !io_document TYPE REF TO if_ixml_document .
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA extracolor TYPE REF TO if_ixml_element .
ENDCLASS.

CLASS zcl_excel_theme_extlst DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    METHODS load
      IMPORTING
        !io_extlst TYPE REF TO if_ixml_element .
    METHODS build_xml
      IMPORTING
        !io_document TYPE REF TO if_ixml_document .
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA extlst TYPE REF TO if_ixml_element .
ENDCLASS.

CLASS zcl_excel_theme DEFINITION
  CREATE PUBLIC .

  PUBLIC SECTION.

    CONSTANTS c_theme_elements TYPE string VALUE 'themeElements'. "#EC NOTEXT
    CONSTANTS c_theme_object_def TYPE string VALUE 'objectDefaults'. "#EC NOTEXT
    CONSTANTS c_theme_extra_color TYPE string VALUE 'extraClrSchemeLst'. "#EC NOTEXT
    CONSTANTS c_theme_extlst TYPE string VALUE 'extLst'.    "#EC NOTEXT
    CONSTANTS c_theme TYPE string VALUE 'theme'.            "#EC NOTEXT
    CONSTANTS c_theme_name TYPE string VALUE 'name'.        "#EC NOTEXT
    CONSTANTS c_theme_xmlns TYPE string VALUE 'xmlns:a'.    "#EC NOTEXT
    CONSTANTS c_theme_prefix TYPE string VALUE 'a'.         "#EC NOTEXT
    CONSTANTS c_theme_prefix_write TYPE string VALUE 'a:'.  "#EC NOTEXT
    CONSTANTS c_theme_xmlns_val TYPE string VALUE 'http://schemas.openxmlformats.org/drawingml/2006/main'. "#EC NOTEXT

    METHODS constructor .
    METHODS read_theme
      IMPORTING
        VALUE(io_theme_xml) TYPE REF TO if_ixml_document .
    METHODS write_theme
      RETURNING
        VALUE(rv_xstring) TYPE xstring .
    METHODS set_color
      IMPORTING
        VALUE(iv_type)         TYPE string
        VALUE(iv_srgb)         TYPE zcl_excel_theme_color_scheme=>t_srgb OPTIONAL
        VALUE(iv_syscolorname) TYPE string OPTIONAL
        VALUE(iv_syscolorlast) TYPE zcl_excel_theme_color_scheme=>t_srgb OPTIONAL .
    METHODS set_color_scheme_name
      IMPORTING
        VALUE(iv_name) TYPE string .
    METHODS set_font
      IMPORTING
        VALUE(iv_type)     TYPE string
        VALUE(iv_script)   TYPE string
        VALUE(iv_typeface) TYPE string .
    METHODS set_latin_font
      IMPORTING
        VALUE(iv_type)        TYPE string
        VALUE(iv_typeface)    TYPE string
        VALUE(iv_panose)      TYPE string OPTIONAL
        VALUE(iv_pitchfamily) TYPE string OPTIONAL
        VALUE(iv_charset)     TYPE string OPTIONAL .
    METHODS set_ea_font
      IMPORTING
        VALUE(iv_type)        TYPE string
        VALUE(iv_typeface)    TYPE string
        VALUE(iv_panose)      TYPE string OPTIONAL
        VALUE(iv_pitchfamily) TYPE string OPTIONAL
        VALUE(iv_charset)     TYPE string OPTIONAL .
    METHODS set_cs_font
      IMPORTING
        VALUE(iv_type)        TYPE string
        VALUE(iv_typeface)    TYPE string
        VALUE(iv_panose)      TYPE string OPTIONAL
        VALUE(iv_pitchfamily) TYPE string OPTIONAL
        VALUE(iv_charset)     TYPE string OPTIONAL .
    METHODS set_font_scheme_name
      IMPORTING
        VALUE(iv_name) TYPE string .
    METHODS set_theme_name
      IMPORTING
        VALUE(iv_name) TYPE string .
  PROTECTED SECTION.

    DATA elements TYPE REF TO zcl_excel_theme_elements .
    DATA objectdefaults TYPE REF TO zcl_excel_theme_objectdefaults .
    DATA extclrschemelst TYPE REF TO zcl_excel_theme_eclrschemelst .
    DATA extlst TYPE REF TO zcl_excel_theme_extlst .
  PRIVATE SECTION.

    DATA theme_changed TYPE abap_bool .
    DATA theme_read TYPE abap_bool .
    DATA name TYPE string .
    DATA xmls_a TYPE string .
ENDCLASS.

CLASS zcl_excel_worksheets DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_WORKSHEETS
*"* do not include other source files here!!!
  PUBLIC SECTION.

    DATA active_worksheet TYPE zexcel_active_worksheet VALUE 1. "#EC NOTEXT .  .  .  .  .  .  .  .  . " .
    DATA name TYPE zexcel_worksheets_name VALUE 'Worksheets'. "#EC NOTEXT .  .  .  .  .  .  .  .  . " .

    METHODS add
      IMPORTING
        !ip_worksheet TYPE REF TO zcl_excel_worksheet .
    METHODS clear .
    METHODS constructor .
    METHODS get
      IMPORTING
        !ip_index           TYPE zexcel_active_worksheet
      RETURNING
        VALUE(eo_worksheet) TYPE REF TO zcl_excel_worksheet .
    METHODS get_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS is_empty
      RETURNING
        VALUE(is_empty) TYPE flag .
    METHODS remove
      IMPORTING
        !ip_worksheet TYPE REF TO zcl_excel_worksheet .
    METHODS size
      RETURNING
        VALUE(ep_size) TYPE i .
*"* protected components of class ZCL_EXCEL_WORKSHEETS
*"* do not include other source files here!!!
  PROTECTED SECTION.
*"* private components of class ZCL_EXCEL_WORKSHEETS
*"* do not include other source files here!!!
  PRIVATE SECTION.

    DATA worksheets TYPE REF TO cl_object_collection .
ENDCLASS.

CLASS zcl_excel_styles DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_STYLES
*"* do not include other source files here!!!
  PUBLIC SECTION.

    METHODS add
      IMPORTING
        !ip_style TYPE REF TO zcl_excel_style .
    METHODS clear .
    METHODS constructor .
    METHODS get
      IMPORTING
        !ip_index       TYPE i
      RETURNING
        VALUE(eo_style) TYPE REF TO zcl_excel_style .
    METHODS get_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS is_empty
      RETURNING
        VALUE(is_empty) TYPE flag .
    METHODS remove
      IMPORTING
        !ip_style TYPE REF TO zcl_excel_style .
    METHODS size
      RETURNING
        VALUE(ep_size) TYPE i .
    METHODS register_new_style
      IMPORTING
        !io_style            TYPE REF TO zcl_excel_style
      RETURNING
        VALUE(ep_style_code) TYPE i .
*"* protected components of class ZABAP_EXCEL_WORKSHEETS
*"* do not include other source files here!!!
*"* protected components of class ZABAP_EXCEL_WORKSHEETS
*"* do not include other source files here!!!
*"* protected components of class ZABAP_EXCEL_WORKSHEETS
*"* do not include other source files here!!!
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA styles TYPE REF TO cl_object_collection .
ENDCLASS.

CLASS zcl_excel DEFINITION
  CREATE PUBLIC .

  PUBLIC SECTION.

*"* public components of class ZCL_EXCEL
*"* do not include other source files here!!!
    INTERFACES zif_excel_book_properties .
    INTERFACES zif_excel_book_protection .
    INTERFACES zif_excel_book_vba_project .

    DATA legacy_palette TYPE REF TO zcl_excel_legacy_palette READ-ONLY .
    DATA security TYPE REF TO zcl_excel_security .
    DATA use_template TYPE xfeld .

    METHODS add_new_autofilter
      IMPORTING
        !io_sheet            TYPE REF TO zcl_excel_worksheet
      RETURNING
        VALUE(ro_autofilter) TYPE REF TO zcl_excel_autofilter
      RAISING
        zcx_excel .
    METHODS add_new_comment
      RETURNING
        VALUE(eo_comment) TYPE REF TO zcl_excel_comment .
    METHODS add_new_drawing
      IMPORTING
        !ip_type          TYPE zexcel_drawing_type DEFAULT zcl_excel_drawing=>type_image
        !ip_title         TYPE clike OPTIONAL
      RETURNING
        VALUE(eo_drawing) TYPE REF TO zcl_excel_drawing .
    METHODS add_new_range
      RETURNING
        VALUE(eo_range) TYPE REF TO zcl_excel_range .
    METHODS add_new_style
      IMPORTING
        !ip_guid        TYPE zexcel_cell_style OPTIONAL
      RETURNING
        VALUE(eo_style) TYPE REF TO zcl_excel_style .
    METHODS add_new_worksheet
      IMPORTING
        !ip_title           TYPE zexcel_sheet_title OPTIONAL
      RETURNING
        VALUE(eo_worksheet) TYPE REF TO zcl_excel_worksheet
      RAISING
        zcx_excel .
    METHODS add_static_styles .
    METHODS constructor .
    METHODS delete_worksheet
      IMPORTING
        !io_worksheet TYPE REF TO zcl_excel_worksheet
      RAISING
        zcx_excel .
    METHODS delete_worksheet_by_index
      IMPORTING
        !iv_index TYPE numeric
      RAISING
        zcx_excel .
    METHODS delete_worksheet_by_name
      IMPORTING
        !iv_title TYPE clike
      RAISING
        zcx_excel .
    METHODS get_active_sheet_index
      RETURNING
        VALUE(r_active_worksheet) TYPE zexcel_active_worksheet .
    METHODS get_active_worksheet
      RETURNING
        VALUE(eo_worksheet) TYPE REF TO zcl_excel_worksheet .
    METHODS get_autofilters_reference
      RETURNING
        VALUE(ro_autofilters) TYPE REF TO zcl_excel_autofilters .
    METHODS get_default_style
      RETURNING
        VALUE(ep_style) TYPE zexcel_cell_style .
    METHODS get_drawings_iterator
      IMPORTING
        !ip_type           TYPE zexcel_drawing_type
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS get_next_table_id
      RETURNING
        VALUE(ep_id) TYPE i .
    METHODS get_ranges_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS get_static_cellstyle_guid
      IMPORTING
        !ip_cstyle_complete  TYPE zexcel_s_cstyle_complete
        !ip_cstylex_complete TYPE zexcel_s_cstylex_complete
      RETURNING
        VALUE(ep_guid)       TYPE zexcel_cell_style .
    METHODS get_styles_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS get_style_index_in_styles
      IMPORTING
        !ip_guid        TYPE zexcel_cell_style
      RETURNING
        VALUE(ep_index) TYPE sytabix
      RAISING
        zcx_excel .
    METHODS get_style_to_guid
      IMPORTING
        !ip_guid               TYPE zexcel_cell_style
      RETURNING
        VALUE(ep_stylemapping) TYPE zexcel_s_stylemapping
      RAISING
        zcx_excel .
    METHODS get_theme
      EXPORTING
        !eo_theme TYPE REF TO zcl_excel_theme .
    METHODS get_worksheets_iterator
      RETURNING
        VALUE(eo_iterator) TYPE REF TO cl_object_collection_iterator .
    METHODS get_worksheets_name
      RETURNING
        VALUE(ep_name) TYPE zexcel_worksheets_name .
    METHODS get_worksheets_size
      RETURNING
        VALUE(ep_size) TYPE i .
    METHODS get_worksheet_by_index
      IMPORTING
        !iv_index           TYPE numeric
      RETURNING
        VALUE(eo_worksheet) TYPE REF TO zcl_excel_worksheet .
    METHODS get_worksheet_by_name
      IMPORTING
        !ip_sheet_name      TYPE zexcel_sheet_title
      RETURNING
        VALUE(eo_worksheet) TYPE REF TO zcl_excel_worksheet .
    METHODS set_active_sheet_index
      IMPORTING
        !i_active_worksheet TYPE zexcel_active_worksheet
      RAISING
        zcx_excel .
    METHODS set_active_sheet_index_by_name
      IMPORTING
        !i_worksheet_name TYPE zexcel_worksheets_name .
    METHODS set_default_style
      IMPORTING
        !ip_style TYPE zexcel_cell_style
      RAISING
        zcx_excel .
    METHODS set_theme
      IMPORTING
        !io_theme TYPE REF TO zcl_excel_theme .
  PROTECTED SECTION.

    DATA worksheets TYPE REF TO zcl_excel_worksheets .
  PRIVATE SECTION.

    CONSTANTS version TYPE char10 VALUE '7.0.6'.            "#EC NOTEXT
    DATA autofilters TYPE REF TO zcl_excel_autofilters .
    DATA charts TYPE REF TO zcl_excel_drawings .
    DATA default_style TYPE zexcel_cell_style .
*"* private components of class ZCL_EXCEL
*"* do not include other source files here!!!
    DATA drawings TYPE REF TO zcl_excel_drawings .
    DATA ranges TYPE REF TO zcl_excel_ranges .
    DATA styles TYPE REF TO zcl_excel_styles .
    DATA t_stylemapping1 TYPE zexcel_t_stylemapping1 .
    DATA t_stylemapping2 TYPE zexcel_t_stylemapping2 .
    DATA theme TYPE REF TO zcl_excel_theme .
    DATA comments TYPE REF TO zcl_excel_comments .

    METHODS get_style_from_guid
      IMPORTING
        !ip_guid        TYPE zexcel_cell_style
      RETURNING
        VALUE(eo_style) TYPE REF TO zcl_excel_style .
    METHODS stylemapping_dynamic_style
      IMPORTING
        !ip_style        TYPE REF TO zcl_excel_style
      RETURNING
        VALUE(eo_style2) TYPE zexcel_s_stylemapping .
ENDCLASS.

CLASS zcl_excel_obsolete_func_wrap DEFINITION
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS guid_create
      RETURNING
        VALUE(rv_guid_16) TYPE guid_16 .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_excel_style_color DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

*"* public components of class ZCL_EXCEL_STYLE_COLOR
*"* do not include other source files here!!!
    CONSTANTS c_black TYPE zexcel_style_color_argb VALUE 'FF000000'. "#EC NOTEXT
    CONSTANTS c_blue TYPE zexcel_style_color_argb VALUE 'FF0000FF'. "#EC NOTEXT
    CONSTANTS c_darkblue TYPE zexcel_style_color_argb VALUE 'FF000080'. "#EC NOTEXT
    CONSTANTS c_darkgreen TYPE zexcel_style_color_argb VALUE 'FF008000'. "#EC NOTEXT
    CONSTANTS c_darkred TYPE zexcel_style_color_argb VALUE 'FF800000'. "#EC NOTEXT
    CONSTANTS c_darkyellow TYPE zexcel_style_color_argb VALUE 'FF808000'. "#EC NOTEXT
    CONSTANTS c_gray TYPE zexcel_style_color_argb VALUE 'FFCCCCCC'. "#EC NOTEXT
    CONSTANTS c_green TYPE zexcel_style_color_argb VALUE 'FF00FF00'. "#EC NOTEXT
    CONSTANTS c_red TYPE zexcel_style_color_argb VALUE 'FFFF0000'. "#EC NOTEXT
    CONSTANTS c_white TYPE zexcel_style_color_argb VALUE 'FFFFFFFF'. "#EC NOTEXT
    CONSTANTS c_yellow TYPE zexcel_style_color_argb VALUE 'FFFFFF00'. "#EC NOTEXT
    CONSTANTS c_theme_dark1 TYPE zexcel_style_color_theme VALUE 0. "#EC NOTEXT
    CONSTANTS c_theme_light1 TYPE zexcel_style_color_theme VALUE 1. "#EC NOTEXT
    CONSTANTS c_theme_dark2 TYPE zexcel_style_color_theme VALUE 2. "#EC NOTEXT
    CONSTANTS c_theme_light2 TYPE zexcel_style_color_theme VALUE 3. "#EC NOTEXT
    CONSTANTS c_theme_accent1 TYPE zexcel_style_color_theme VALUE 4. "#EC NOTEXT
    CONSTANTS c_theme_accent2 TYPE zexcel_style_color_theme VALUE 5. "#EC NOTEXT
    CONSTANTS c_theme_accent3 TYPE zexcel_style_color_theme VALUE 6. "#EC NOTEXT
    CONSTANTS c_theme_accent4 TYPE zexcel_style_color_theme VALUE 7. "#EC NOTEXT
    CONSTANTS c_theme_accent5 TYPE zexcel_style_color_theme VALUE 8. "#EC NOTEXT
    CONSTANTS c_theme_accent6 TYPE zexcel_style_color_theme VALUE 9. "#EC NOTEXT
    CONSTANTS c_theme_hyperlink TYPE zexcel_style_color_theme VALUE 10. "#EC NOTEXT
    CONSTANTS c_theme_hyperlink_followed TYPE zexcel_style_color_theme VALUE 11. "#EC NOTEXT
    CONSTANTS c_theme_not_set TYPE zexcel_style_color_theme VALUE -1. "#EC NOTEXT
    CONSTANTS c_indexed_not_set TYPE zexcel_style_color_indexed VALUE -1. "#EC NOTEXT
    CONSTANTS c_indexed_sys_foreground TYPE zexcel_style_color_indexed VALUE 64. "#EC NOTEXT

    CLASS-METHODS create_new_argb
      IMPORTING
        !ip_red              TYPE zexcel_style_color_component
        !ip_green            TYPE zexcel_style_color_component
        !ip_blu              TYPE zexcel_style_color_component
      RETURNING
        VALUE(ep_color_argb) TYPE zexcel_style_color_argb .
    CLASS-METHODS create_new_arbg_int
      IMPORTING
        !iv_red              TYPE numeric
        !iv_green            TYPE numeric
        !iv_blue             TYPE numeric
      RETURNING
        VALUE(rv_color_argb) TYPE zexcel_style_color_argb .
*"* protected components of class ZCL_EXCEL_STYLE_COLOR
*"* do not include other source files here!!!
*"* protected components of class ZCL_EXCEL_STYLE_COLOR
*"* do not include other source files here!!!
  PROTECTED SECTION.
  PRIVATE SECTION.

*"* private components of class ZCL_EXCEL_STYLE_COLOR
*"* do not include other source files here!!!
    CONSTANTS c_alpha TYPE char2 VALUE 'FF'.                "#EC NOTEXT
ENDCLASS.

CLASS zcl_excel_graph_bars DEFINITION
  INHERITING FROM zcl_excel_graph
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
*"* public components of class ZCL_EXCEL_GRAPH_BARS
*"* do not include other source files here!!!
      BEGIN OF s_ax,
        axid          TYPE string,
        type          TYPE char5,
        orientation   TYPE string,
        delete        TYPE string,
        axpos         TYPE string,
        formatcode    TYPE string,
        sourcelinked  TYPE string,
        majortickmark TYPE string,
        minortickmark TYPE string,
        ticklblpos    TYPE string,
        crossax       TYPE string,
        crosses       TYPE string,
        auto          TYPE string,
        lblalgn       TYPE string,
        lbloffset     TYPE string,
        nomultilvllbl TYPE string,
        crossbetween  TYPE string,
      END OF s_ax .
    TYPES:
      t_ax TYPE STANDARD TABLE OF s_ax .

    DATA ns_bardirval TYPE string VALUE 'col'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  . " .
    CONSTANTS c_groupingval_clustered TYPE string VALUE 'clustered'. "#EC NOTEXT
    CONSTANTS c_groupingval_stacked TYPE string VALUE 'stacked'. "#EC NOTEXT
    DATA ns_groupingval TYPE string VALUE c_groupingval_clustered. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_varycolorsval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showlegendkeyval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showvalval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showcatnameval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showsernameval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showpercentval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showbubblesizeval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_gapwidthval TYPE string VALUE '150'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  . " .
    DATA axes TYPE t_ax .
    CONSTANTS:
      c_valax TYPE c LENGTH 5 VALUE 'VALAX'.                "#EC NOTEXT
    CONSTANTS:
      c_catax TYPE c LENGTH 5 VALUE 'CATAX'.                "#EC NOTEXT
    DATA ns_legendposval TYPE string VALUE 'r'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  . " .
    DATA ns_overlayval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  .  . " .
    CONSTANTS c_invertifnegative_yes TYPE string VALUE '1'. "#EC NOTEXT
    CONSTANTS c_invertifnegative_no TYPE string VALUE '0'.  "#EC NOTEXT

    METHODS create_ax
      IMPORTING
        !ip_axid          TYPE string OPTIONAL
        !ip_type          TYPE char5
        !ip_orientation   TYPE string OPTIONAL
        !ip_delete        TYPE string OPTIONAL
        !ip_axpos         TYPE string OPTIONAL
        !ip_formatcode    TYPE string OPTIONAL
        !ip_sourcelinked  TYPE string OPTIONAL
        !ip_majortickmark TYPE string OPTIONAL
        !ip_minortickmark TYPE string OPTIONAL
        !ip_ticklblpos    TYPE string OPTIONAL
        !ip_crossax       TYPE string OPTIONAL
        !ip_crosses       TYPE string OPTIONAL
        !ip_auto          TYPE string OPTIONAL
        !ip_lblalgn       TYPE string OPTIONAL
        !ip_lbloffset     TYPE string OPTIONAL
        !ip_nomultilvllbl TYPE string OPTIONAL
        !ip_crossbetween  TYPE string OPTIONAL .
    METHODS set_show_legend_key
      IMPORTING
        !ip_value TYPE c .
    METHODS set_show_values
      IMPORTING
        !ip_value TYPE c .
    METHODS set_show_cat_name
      IMPORTING
        !ip_value TYPE c .
    METHODS set_show_ser_name
      IMPORTING
        !ip_value TYPE c .
    METHODS set_show_percent
      IMPORTING
        !ip_value TYPE c .
    METHODS set_varycolor
      IMPORTING
        !ip_value TYPE c .
  PROTECTED SECTION.
*"* protected components of class ZCL_EXCEL_GRAPH_BARS
*"* do not include other source files here!!!
  PRIVATE SECTION.
*"* private components of class ZCL_EXCEL_GRAPH_BARS
*"* do not include other source files here!!!
ENDCLASS.

CLASS zcl_excel_graph_pie DEFINITION
  INHERITING FROM zcl_excel_graph
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

*"* public components of class ZCL_EXCEL_GRAPH_PIE
*"* do not include other source files here!!!
    DATA ns_legendposval TYPE string VALUE 'r'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_overlayval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_pprrtl TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_endpararprlang TYPE string VALUE 'it-IT'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_varycolorsval TYPE string VALUE '1'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_firstsliceangval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showlegendkeyval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showvalval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showcatnameval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showsernameval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showpercentval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showbubblesizeval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showleaderlinesval TYPE string VALUE '1'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .

    METHODS set_show_legend_key
      IMPORTING
        !ip_value TYPE c .
    METHODS set_show_values
      IMPORTING
        !ip_value TYPE c .
    METHODS set_show_cat_name
      IMPORTING
        !ip_value TYPE c .
    METHODS set_show_ser_name
      IMPORTING
        !ip_value TYPE c .
    METHODS set_show_percent
      IMPORTING
        !ip_value TYPE c .
    METHODS set_show_leader_lines
      IMPORTING
        !ip_value TYPE c .
    METHODS set_varycolor
      IMPORTING
        !ip_value TYPE c .
  PROTECTED SECTION.
*"* protected components of class ZCL_EXCEL_GRAPH_PIE
*"* do not include other source files here!!!
  PRIVATE SECTION.
*"* private components of class ZCL_EXCEL_GRAPH_PIE
*"* do not include other source files here!!!
ENDCLASS.

CLASS zcl_excel_graph_line DEFINITION
  INHERITING FROM zcl_excel_graph
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
*"* public components of class ZCL_EXCEL_GRAPH_LINE
*"* do not include other source files here!!!
      BEGIN OF s_ax,
        axid          TYPE string,
        type          TYPE char5,
        orientation   TYPE string,
        delete        TYPE string,
        axpos         TYPE string,
        formatcode    TYPE string,
        sourcelinked  TYPE string,
        majortickmark TYPE string,
        minortickmark TYPE string,
        ticklblpos    TYPE string,
        crossax       TYPE string,
        crosses       TYPE string,
        auto          TYPE string,
        lblalgn       TYPE string,
        lbloffset     TYPE string,
        nomultilvllbl TYPE string,
        crossbetween  TYPE string,
      END OF s_ax .
    TYPES:
      t_ax TYPE STANDARD TABLE OF s_ax .

    DATA ns_groupingval TYPE string VALUE 'standard'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_varycolorsval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showlegendkeyval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showvalval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showcatnameval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showsernameval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showpercentval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_showbubblesizeval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_markerval TYPE string VALUE '1'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_smoothval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA axes TYPE t_ax .
    CONSTANTS:
      c_valax TYPE c LENGTH 5 VALUE 'VALAX'.                "#EC NOTEXT
    CONSTANTS:
      c_catax TYPE c LENGTH 5 VALUE 'CATAX'.                "#EC NOTEXT
    DATA ns_legendposval TYPE string VALUE 'r'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA ns_overlayval TYPE string VALUE '0'. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    CONSTANTS c_symbol_auto TYPE string VALUE 'auto'.       "#EC NOTEXT
    CONSTANTS c_symbol_none TYPE string VALUE 'none'.       "#EC NOTEXT

    METHODS create_ax
      IMPORTING
        !ip_axid          TYPE string OPTIONAL
        !ip_type          TYPE char5
        !ip_orientation   TYPE string OPTIONAL
        !ip_delete        TYPE string OPTIONAL
        !ip_axpos         TYPE string OPTIONAL
        !ip_formatcode    TYPE string OPTIONAL
        !ip_sourcelinked  TYPE string OPTIONAL
        !ip_majortickmark TYPE string OPTIONAL
        !ip_minortickmark TYPE string OPTIONAL
        !ip_ticklblpos    TYPE string OPTIONAL
        !ip_crossax       TYPE string OPTIONAL
        !ip_crosses       TYPE string OPTIONAL
        !ip_auto          TYPE string OPTIONAL
        !ip_lblalgn       TYPE string OPTIONAL
        !ip_lbloffset     TYPE string OPTIONAL
        !ip_nomultilvllbl TYPE string OPTIONAL
        !ip_crossbetween  TYPE string OPTIONAL .
    METHODS set_show_legend_key
      IMPORTING
        !ip_value TYPE c .
    METHODS set_show_values
      IMPORTING
        !ip_value TYPE c .
    METHODS set_show_cat_name
      IMPORTING
        !ip_value TYPE c .
    METHODS set_show_ser_name
      IMPORTING
        !ip_value TYPE c .
    METHODS set_show_percent
      IMPORTING
        !ip_value TYPE c .
    METHODS set_varycolor
      IMPORTING
        !ip_value TYPE c .
  PROTECTED SECTION.
*"* protected components of class ZCL_EXCEL_GRAPH_LINE
*"* do not include other source files here!!!
  PRIVATE SECTION.
*"* private components of class ZCL_EXCEL_GRAPH_LINE
*"* do not include other source files here!!!
ENDCLASS.

CLASS lcl_zip_archive DEFINITION ABSTRACT.
  PUBLIC SECTION.
    METHODS read ABSTRACT
      IMPORTING i_filename       TYPE csequence
      RETURNING VALUE(r_content) TYPE xstring " Remember copy-on-write!
      RAISING   zcx_excel.
ENDCLASS.

CLASS lcl_abap_zip_archive DEFINITION
    INHERITING FROM lcl_zip_archive
    CREATE PRIVATE.
  PUBLIC SECTION.
    CLASS-METHODS create
      IMPORTING i_data       TYPE xstring
      RETURNING VALUE(r_zip) TYPE REF TO lcl_zip_archive
      RAISING   zcx_excel.
    METHODS read REDEFINITION.
  PRIVATE SECTION.
    DATA: abap_zip TYPE REF TO cl_abap_zip.
    METHODS constructor IMPORTING i_data TYPE xstring
                        RAISING   zcx_excel.
ENDCLASS.

CLASS lcl_alternate_zip_archive DEFINITION
  INHERITING FROM lcl_zip_archive
  CREATE PRIVATE.
  PUBLIC SECTION.
    CLASS-METHODS create
      IMPORTING i_data                TYPE xstring
                i_alternate_zip_class TYPE seoclsname
      RETURNING VALUE(r_zip)          TYPE REF TO lcl_zip_archive
      RAISING   zcx_excel.
    METHODS read REDEFINITION.
  PRIVATE SECTION.
    DATA: alternate_zip TYPE REF TO object.
    METHODS constructor
      IMPORTING i_data                TYPE xstring
                i_alternate_zip_class TYPE seoclsname
      RAISING   zcx_excel.
ENDCLASS.

CLASS zcl_excel_reader_2007 DEFINITION
  CREATE PUBLIC .

  PUBLIC SECTION.

*    TYPES: BEGIN OF t_relationship,
*             id     TYPE string,
*             type   TYPE string,
*             target TYPE string,
*           END OF t_relationship.

*"* public components of class ZCL_EXCEL_READER_2007
*"* do not include other source files here!!!
    TYPE-POOLS ixml .

    INTERFACES zif_excel_reader .

    CLASS-METHODS fill_struct_from_attributes
      IMPORTING
        !ip_element   TYPE REF TO if_ixml_element
      CHANGING
        !cp_structure TYPE any .
  PROTECTED SECTION.

    TYPES:
*"* protected components of class ZCL_EXCEL_READER_2007
*"* do not include other source files here!!!
      BEGIN OF t_relationship,
        id         TYPE string,
        type       TYPE string,
        target     TYPE string,
        targetmode TYPE string,
        worksheet  TYPE REF TO zcl_excel_worksheet,
        sheetid    TYPE string,     "ins #235 - repeat rows/cols - needed to identify correct sheet
      END OF t_relationship .
    TYPES:
      BEGIN OF t_fileversion,
        appname      TYPE string,
        lastedited   TYPE string,
        lowestedited TYPE string,
        rupbuild     TYPE string,
        codename     TYPE string,
      END OF t_fileversion .
    TYPES:
      BEGIN OF t_sheet,
        name    TYPE string,
        sheetid TYPE string,
        id      TYPE string,
        state   TYPE string,
      END OF t_sheet .
    TYPES:
      BEGIN OF t_workbookpr,
        codename            TYPE string,
        defaultthemeversion TYPE string,
      END OF t_workbookpr .
    TYPES:
      BEGIN OF t_sheetpr,
        codename TYPE string,
      END OF t_sheetpr .
    TYPES:
      BEGIN OF t_range,
        name         TYPE string,
        hidden       TYPE string,       "inserted with issue #235 because Autofilters didn't passthrough
        localsheetid TYPE string,       " issue #163
      END OF t_range .
    TYPES:
      t_fills   TYPE STANDARD TABLE OF REF TO zcl_excel_style_fill WITH NON-UNIQUE DEFAULT KEY .
    TYPES:
      t_borders TYPE STANDARD TABLE OF REF TO zcl_excel_style_borders WITH NON-UNIQUE DEFAULT KEY .
    TYPES:
      t_fonts   TYPE STANDARD TABLE OF REF TO zcl_excel_style_font WITH NON-UNIQUE DEFAULT KEY .
    TYPES:
      t_style_refs TYPE STANDARD TABLE OF REF TO zcl_excel_style WITH NON-UNIQUE DEFAULT KEY .
    TYPES:
      BEGIN OF t_color,
        indexed TYPE string,
        rgb     TYPE string,
        theme   TYPE string,
        tint    TYPE string,
      END OF t_color .
    TYPES:
      BEGIN OF t_rel_drawing,
        id          TYPE string,
        content     TYPE xstring,
        file_ext    TYPE string,
        content_xml TYPE REF TO if_ixml_document,
      END OF t_rel_drawing .
    TYPES:
      t_rel_drawings TYPE STANDARD TABLE OF t_rel_drawing WITH NON-UNIQUE DEFAULT KEY .
    TYPES:
      BEGIN OF gts_external_hyperlink,
        id     TYPE string,
        target TYPE string,
      END OF gts_external_hyperlink .
    TYPES:
      gtt_external_hyperlinks TYPE HASHED TABLE OF gts_external_hyperlink WITH UNIQUE KEY id .
    TYPES:
      BEGIN OF ty_ref_formulae,
        sheet   TYPE REF TO zcl_excel_worksheet,
        row     TYPE i,
        column  TYPE i,
        si      TYPE i,
        ref     TYPE string,
        formula TYPE string,
      END   OF ty_ref_formulae .
    TYPES:
      tyt_ref_formulae TYPE HASHED TABLE OF ty_ref_formulae WITH UNIQUE KEY sheet row column .

    DATA shared_strings TYPE stringtab .
    DATA styles TYPE t_style_refs .
    DATA mt_ref_formulae TYPE tyt_ref_formulae .
    DATA mt_dxf_styles TYPE zexcel_t_styles_cond_mapping .

    METHODS fill_row_outlines
      IMPORTING
        !io_worksheet TYPE REF TO zcl_excel_worksheet
      RAISING
        zcx_excel .
    METHODS get_from_zip_archive
      IMPORTING
        !i_filename      TYPE string
      RETURNING
        VALUE(r_content) TYPE xstring
      RAISING
        zcx_excel .
    METHODS get_ixml_from_zip_archive
      IMPORTING
        !i_filename     TYPE string
        !is_normalizing TYPE boolean DEFAULT 'X'
      RETURNING
        VALUE(r_ixml)   TYPE REF TO if_ixml_document
      RAISING
        zcx_excel .
    METHODS load_drawing_anchor
      IMPORTING
        !io_anchor_element   TYPE REF TO if_ixml_element
        !io_worksheet        TYPE REF TO zcl_excel_worksheet
        !it_related_drawings TYPE t_rel_drawings .
    METHODS load_shared_strings
      IMPORTING
        !ip_path TYPE string
      RAISING
        zcx_excel .
    METHODS load_styles
      IMPORTING
        !ip_path  TYPE string
        !ip_excel TYPE REF TO zcl_excel
      RAISING
        zcx_excel .
    METHODS load_dxf_styles
      IMPORTING
        !iv_path  TYPE string
        !io_excel TYPE REF TO zcl_excel
      RAISING
        zcx_excel .
    METHODS load_style_borders
      IMPORTING
        !ip_xml           TYPE REF TO if_ixml_document
      RETURNING
        VALUE(ep_borders) TYPE t_borders .
    METHODS load_style_fills
      IMPORTING
        !ip_xml         TYPE REF TO if_ixml_document
      RETURNING
        VALUE(ep_fills) TYPE t_fills .
    METHODS load_style_fonts
      IMPORTING
        !ip_xml         TYPE REF TO if_ixml_document
      RETURNING
        VALUE(ep_fonts) TYPE t_fonts .
    METHODS load_style_num_formats
      IMPORTING
        !ip_xml               TYPE REF TO if_ixml_document
      RETURNING
        VALUE(ep_num_formats) TYPE zcl_excel_style_number_format=>t_num_formats .
    METHODS load_workbook
      IMPORTING
        !iv_workbook_full_filename TYPE string
        !io_excel                  TYPE REF TO zcl_excel
      RAISING
        zcx_excel .
    METHODS load_worksheet
      IMPORTING
        !ip_path      TYPE string
        !io_worksheet TYPE REF TO zcl_excel_worksheet
      RAISING
        zcx_excel .
    METHODS load_worksheet_cond_format
      IMPORTING
        !io_ixml_worksheet TYPE REF TO if_ixml_document
        !io_worksheet      TYPE REF TO zcl_excel_worksheet
      RAISING
        zcx_excel .
    METHODS load_worksheet_cond_format_aa
      IMPORTING
        !io_ixml_rule  TYPE REF TO if_ixml_element
        !io_style_cond TYPE REF TO zcl_excel_style_cond.
    METHODS load_worksheet_cond_format_ci
      IMPORTING
        !io_ixml_rule  TYPE REF TO if_ixml_element
        !io_style_cond TYPE REF TO zcl_excel_style_cond .
    METHODS load_worksheet_cond_format_cs
      IMPORTING
        !io_ixml_rule  TYPE REF TO if_ixml_element
        !io_style_cond TYPE REF TO zcl_excel_style_cond .
    METHODS load_worksheet_cond_format_ex
      IMPORTING
        !io_ixml_rule  TYPE REF TO if_ixml_element
        !io_style_cond TYPE REF TO zcl_excel_style_cond .
    METHODS load_worksheet_cond_format_is
      IMPORTING
        !io_ixml_rule  TYPE REF TO if_ixml_element
        !io_style_cond TYPE REF TO zcl_excel_style_cond .
    METHODS load_worksheet_cond_format_db
      IMPORTING
        !io_ixml_rule  TYPE REF TO if_ixml_element
        !io_style_cond TYPE REF TO zcl_excel_style_cond .
    METHODS load_worksheet_cond_format_t10
      IMPORTING
        !io_ixml_rule  TYPE REF TO if_ixml_element
        !io_style_cond TYPE REF TO zcl_excel_style_cond .
    METHODS load_worksheet_drawing
      IMPORTING
        !ip_path      TYPE string
        !io_worksheet TYPE REF TO zcl_excel_worksheet
      RAISING
        zcx_excel .
    METHODS load_worksheet_hyperlinks
      IMPORTING
        !io_ixml_worksheet      TYPE REF TO if_ixml_document
        !io_worksheet           TYPE REF TO zcl_excel_worksheet
        !it_external_hyperlinks TYPE gtt_external_hyperlinks
      RAISING
        zcx_excel .
    METHODS load_worksheet_pagebreaks
      IMPORTING
        !io_ixml_worksheet TYPE REF TO if_ixml_document
        !io_worksheet      TYPE REF TO zcl_excel_worksheet
      RAISING
        zcx_excel .
    METHODS load_worksheet_pagemargins
      IMPORTING
        !io_ixml_worksheet TYPE REF TO if_ixml_document
        !io_worksheet      TYPE REF TO zcl_excel_worksheet
      RAISING
        zcx_excel .
    CLASS-METHODS resolve_path
      IMPORTING
        !ip_path         TYPE string
      RETURNING
        VALUE(rp_result) TYPE string .
    METHODS resolve_referenced_formulae .
    METHODS get_dxf_style_guid
      IMPORTING
        !io_ixml_dxf         TYPE REF TO if_ixml_element
        !io_excel            TYPE REF TO zcl_excel
      RETURNING
        VALUE(rv_style_guid) TYPE zexcel_cell_style .
    METHODS load_theme
      IMPORTING
        VALUE(iv_path) TYPE string
        !ip_excel      TYPE REF TO zcl_excel .
  PRIVATE SECTION.

    DATA zip TYPE REF TO lcl_zip_archive .

    METHODS create_zip_archive
      IMPORTING
        !i_xlsx_binary       TYPE xstring
        !i_use_alternate_zip TYPE seoclsname OPTIONAL
      RETURNING
        VALUE(e_zip)         TYPE REF TO lcl_zip_archive
      RAISING
        zcx_excel .
    METHODS read_from_applserver
      IMPORTING
        !i_filename         TYPE csequence
      RETURNING
        VALUE(r_excel_data) TYPE xstring
      RAISING
        zcx_excel.
    METHODS read_from_local_file
      IMPORTING
        !i_filename         TYPE csequence
      RETURNING
        VALUE(r_excel_data) TYPE xstring
      RAISING
        zcx_excel .
ENDCLASS.

CLASS zcl_excel_converter DEFINITION
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_CONVERTER
*"* do not include other source files here!!!
  PUBLIC SECTION.

    TYPES:   BEGIN OF ts_alv_types,
               seoclass TYPE seoclsname,
               clsname  TYPE seoclsname,
             END OF ts_alv_types,
             tt_alv_types TYPE HASHED TABLE OF ts_alv_types WITH UNIQUE KEY seoclass.

    TYPES:   BEGIN OF ts_sort_values,
               fieldname    TYPE fieldname,
               row_int      TYPE zexcel_cell_row,
               value        TYPE REF TO data,
               new          TYPE flag,
               sort_level   TYPE int4,
               is_collapsed TYPE flag,
             END OF ts_sort_values,

             tt_sort_values TYPE HASHED TABLE OF ts_sort_values WITH UNIQUE KEY fieldname.
    TYPES:   BEGIN OF ts_subtotal_rows,
               row_int       TYPE zexcel_cell_row,
               row_int_start TYPE zexcel_cell_row,
               columnname    TYPE fieldname,
             END OF ts_subtotal_rows,

             tt_subtotal_rows TYPE HASHED TABLE OF ts_subtotal_rows WITH UNIQUE KEY row_int.

    TYPES:   BEGIN OF ts_styles,
               type      TYPE char1,
               alignment TYPE zexcel_alignment,
               inttype   TYPE inttype,
               decimals  TYPE int1,
               style     TYPE REF TO zcl_excel_style,
               guid      TYPE zexcel_cell_style,
             END OF ts_styles,

             tt_styles TYPE HASHED TABLE OF ts_styles  WITH UNIQUE KEY type alignment inttype decimals.

    TYPES:   BEGIN OF ts_color_styles,
               guid_old  TYPE zexcel_cell_style,
               fontcolor TYPE zexcel_style_color_argb,
               fillcolor TYPE zexcel_style_color_argb,
               style_new TYPE REF TO zcl_excel_style,
             END OF ts_color_styles,

             tt_color_styles TYPE HASHED TABLE OF ts_color_styles  WITH UNIQUE KEY guid_old fontcolor fillcolor.


    TYPE-POOLS abap .

    CLASS-METHODS class_constructor .
    METHODS ask_option
      RETURNING
        VALUE(rs_option) TYPE zexcel_s_converter_option
      RAISING
        zcx_excel .
    METHODS convert
      IMPORTING
        !is_option     TYPE zexcel_s_converter_option OPTIONAL
        !io_alv        TYPE REF TO object OPTIONAL
        !it_table      TYPE STANDARD TABLE OPTIONAL
        !i_row_int     TYPE i DEFAULT 1
        !i_column_int  TYPE i DEFAULT 1
        !i_table       TYPE flag OPTIONAL
        !i_style_table TYPE zexcel_table_style OPTIONAL
        !io_worksheet  TYPE REF TO zcl_excel_worksheet OPTIONAL
      CHANGING
        !co_excel      TYPE REF TO zcl_excel OPTIONAL
      RAISING
        zcx_excel .
    METHODS create_path
      RETURNING
        VALUE(r_path) TYPE string .
    METHODS get_file
      EXPORTING
        !e_bytecount TYPE i
        !et_file     TYPE solix_tab
        !e_file      TYPE xstring .
    METHODS get_option
      RETURNING
        VALUE(rs_option) TYPE zexcel_s_converter_option .
    METHODS open_file .
    METHODS set_option
      IMPORTING
        !is_option TYPE zexcel_s_converter_option .
    METHODS write_file
      IMPORTING
        !i_path TYPE string OPTIONAL .
*"* protected components of class ZCL_EXCEL_CONVERTER
*"* do not include other source files here!!!
  PROTECTED SECTION.

    TYPES:
      BEGIN OF t_relationship,
        id     TYPE string,
        type   TYPE string,
        target TYPE string,
      END OF t_relationship .
    TYPES:
      BEGIN OF t_fileversion,
        appname      TYPE string,
        lastedited   TYPE string,
        lowestedited TYPE string,
        rupbuild     TYPE string,
        codename     TYPE string,
      END OF t_fileversion .
    TYPES:
      BEGIN OF t_sheet,
        name    TYPE string,
        sheetid TYPE string,
        id      TYPE string,
      END OF t_sheet .
    TYPES:
      BEGIN OF t_workbookpr,
        codename            TYPE string,
        defaultthemeversion TYPE string,
      END OF t_workbookpr .
    TYPES:
      BEGIN OF t_sheetpr,
        codename TYPE string,
      END OF t_sheetpr .

    DATA w_row_int TYPE zexcel_cell_row VALUE 1. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
    DATA w_col_int TYPE zexcel_cell_column VALUE 1. "#EC NOTEXT .  .  .  .  .  .  .  .  .  . " .
*"* private components of class ZCL_EXCEL_CONVERTER
*"* do not include other source files here!!!
  PRIVATE SECTION.

    DATA wo_excel TYPE REF TO zcl_excel .
    DATA wo_worksheet TYPE REF TO zcl_excel_worksheet .
    DATA wo_autofilter TYPE REF TO zcl_excel_autofilter .
    DATA wo_table TYPE REF TO data .
    DATA wo_data TYPE REF TO data .
    DATA wt_fieldcatalog TYPE zexcel_t_converter_fcat .
    DATA ws_layout TYPE zexcel_s_converter_layo .
    DATA wt_colors TYPE zexcel_t_converter_col .
    DATA wt_filter TYPE zexcel_t_converter_fil .
    CLASS-DATA wt_objects TYPE tt_alv_types .
    CLASS-DATA w_fcount TYPE numc3 .
    DATA wt_sort_values TYPE tt_sort_values .
    DATA wt_subtotal_rows TYPE tt_subtotal_rows .
    DATA wt_styles TYPE tt_styles .
    CONSTANTS c_type_hdr TYPE char1 VALUE 'H'.              "#EC NOTEXT
    CONSTANTS c_type_str TYPE char1 VALUE 'P'.              "#EC NOTEXT
    CONSTANTS c_type_nor TYPE char1 VALUE 'N'.              "#EC NOTEXT
    CONSTANTS c_type_sub TYPE char1 VALUE 'S'.              "#EC NOTEXT
    CONSTANTS c_type_tot TYPE char1 VALUE 'T'.              "#EC NOTEXT
    DATA wt_color_styles TYPE tt_color_styles .
    CLASS-DATA ws_option TYPE zexcel_s_converter_option .
    CLASS-DATA ws_indx TYPE indx .

    CLASS-METHODS init_option .
    METHODS bind_table
      IMPORTING
        !i_style_table      TYPE zexcel_table_style
      RETURNING
        VALUE(r_freeze_col) TYPE int1
      RAISING
        zcx_excel .
    METHODS bind_cells
      RETURNING
        VALUE(r_freeze_col) TYPE int1
      RAISING
        zcx_excel .
    METHODS clean_fieldcatalog .
    METHODS create_color_style
      IMPORTING
        !i_style        TYPE zexcel_cell_style
        !is_colors      TYPE zexcel_s_converter_col
      RETURNING
        VALUE(ro_style) TYPE REF TO zcl_excel_style .
    METHODS create_formular_subtotal
      IMPORTING
        !i_row_int_start   TYPE zexcel_cell_row
        !i_row_int_end     TYPE zexcel_cell_row
        !i_column          TYPE zexcel_cell_column_alpha
        !i_totals_function TYPE zexcel_table_totals_function
      RETURNING
        VALUE(r_formula)   TYPE string .
    METHODS create_formular_total
      IMPORTING
        !i_row_int         TYPE zexcel_cell_row
        !i_column          TYPE zexcel_cell_column_alpha
        !i_totals_function TYPE zexcel_table_totals_function
      RETURNING
        VALUE(r_formula)   TYPE string .
    METHODS create_style_hdr
      IMPORTING
        !i_alignment    TYPE zexcel_alignment OPTIONAL
      RETURNING
        VALUE(ro_style) TYPE REF TO zcl_excel_style .
    METHODS create_style_normal
      IMPORTING
        !i_alignment    TYPE zexcel_alignment OPTIONAL
        !i_inttype      TYPE inttype OPTIONAL
        !i_decimals     TYPE int1 OPTIONAL
      RETURNING
        VALUE(ro_style) TYPE REF TO zcl_excel_style .
    METHODS create_style_stripped
      IMPORTING
        !i_alignment    TYPE zexcel_alignment OPTIONAL
        !i_inttype      TYPE inttype OPTIONAL
        !i_decimals     TYPE int1 OPTIONAL
      RETURNING
        VALUE(ro_style) TYPE REF TO zcl_excel_style .
    METHODS create_style_subtotal
      IMPORTING
        !i_alignment    TYPE zexcel_alignment OPTIONAL
        !i_inttype      TYPE inttype OPTIONAL
        !i_decimals     TYPE int1 OPTIONAL
      RETURNING
        VALUE(ro_style) TYPE REF TO zcl_excel_style .
    METHODS create_style_total
      IMPORTING
        !i_alignment    TYPE zexcel_alignment OPTIONAL
        !i_inttype      TYPE inttype OPTIONAL
        !i_decimals     TYPE int1 OPTIONAL
      RETURNING
        VALUE(ro_style) TYPE REF TO zcl_excel_style .
    METHODS create_table .
    METHODS create_text_subtotal
      IMPORTING
        !i_value           TYPE any
        !i_totals_function TYPE zexcel_table_totals_function
      RETURNING
        VALUE(r_text)      TYPE string .
    METHODS create_worksheet
      IMPORTING
        !i_table       TYPE flag DEFAULT 'X'
        !i_style_table TYPE zexcel_table_style
      RAISING
        zcx_excel .
    METHODS execute_converter
      IMPORTING
        !io_object TYPE REF TO object
        !it_table  TYPE STANDARD TABLE
      RAISING
        zcx_excel .
    METHODS get_color_style
      IMPORTING
        !i_row         TYPE zexcel_cell_row
        !i_fieldname   TYPE fieldname
        !i_style       TYPE zexcel_cell_style
      RETURNING
        VALUE(r_style) TYPE zexcel_cell_style .
    METHODS get_function_number
      IMPORTING
        !i_totals_function       TYPE zexcel_table_totals_function
      RETURNING
        VALUE(r_function_number) TYPE int1 .
    METHODS get_style
      IMPORTING
        !i_type        TYPE char1
        !i_alignment   TYPE zexcel_alignment DEFAULT space
        !i_inttype     TYPE inttype DEFAULT space
        !i_decimals    TYPE int1 DEFAULT 0
      RETURNING
        VALUE(r_style) TYPE zexcel_cell_style .
    METHODS loop_normal
      IMPORTING
        !i_row_int          TYPE zexcel_cell_row
        !i_col_int          TYPE zexcel_cell_column
      RETURNING
        VALUE(r_freeze_col) TYPE int1
      RAISING
        zcx_excel .
    METHODS loop_subtotal
      IMPORTING
        !i_row_int          TYPE zexcel_cell_row
        !i_col_int          TYPE zexcel_cell_column
      RETURNING
        VALUE(r_freeze_col) TYPE int1
      RAISING
        zcx_excel .
    METHODS set_autofilter_area .
    METHODS set_cell_format
      IMPORTING
        !i_inttype      TYPE inttype
        !i_decimals     TYPE int1
      RETURNING
        VALUE(r_format) TYPE zexcel_number_format .
    METHODS set_fieldcatalog .
ENDCLASS.

CLASS zcl_excel_table DEFINITION
  FINAL
  CREATE PUBLIC .

*"* public components of class ZCL_EXCEL_TABLE
*"* do not include other source files here!!!
  PUBLIC SECTION.
    TYPE-POOLS abap .

    CONSTANTS builtinstyle_dark1 TYPE zexcel_table_style VALUE 'TableStyleDark1'. "#EC NOTEXT
    CONSTANTS builtinstyle_dark2 TYPE zexcel_table_style VALUE 'TableStyleDark2'. "#EC NOTEXT
    CONSTANTS builtinstyle_dark3 TYPE zexcel_table_style VALUE 'TableStyleDark3'. "#EC NOTEXT
    CONSTANTS builtinstyle_dark4 TYPE zexcel_table_style VALUE 'TableStyleDark4'. "#EC NOTEXT
    CONSTANTS builtinstyle_dark5 TYPE zexcel_table_style VALUE 'TableStyleDark5'. "#EC NOTEXT
    CONSTANTS builtinstyle_dark6 TYPE zexcel_table_style VALUE 'TableStyleDark6'. "#EC NOTEXT
    CONSTANTS builtinstyle_dark7 TYPE zexcel_table_style VALUE 'TableStyleDark7'. "#EC NOTEXT
    CONSTANTS builtinstyle_dark8 TYPE zexcel_table_style VALUE 'TableStyleDark8'. "#EC NOTEXT
    CONSTANTS builtinstyle_dark9 TYPE zexcel_table_style VALUE 'TableStyleDark9'. "#EC NOTEXT
    CONSTANTS builtinstyle_dark10 TYPE zexcel_table_style VALUE 'TableStyleDark10'. "#EC NOTEXT
    CONSTANTS builtinstyle_dark11 TYPE zexcel_table_style VALUE 'TableStyleDark11'. "#EC NOTEXT
    CONSTANTS builtinstyle_light1 TYPE zexcel_table_style VALUE 'TableStyleLight1'. "#EC NOTEXT
    CONSTANTS builtinstyle_light2 TYPE zexcel_table_style VALUE 'TableStyleLight2'. "#EC NOTEXT
    CONSTANTS builtinstyle_light3 TYPE zexcel_table_style VALUE 'TableStyleLight3'. "#EC NOTEXT
    CONSTANTS builtinstyle_light4 TYPE zexcel_table_style VALUE 'TableStyleLight4'. "#EC NOTEXT
    CONSTANTS builtinstyle_light5 TYPE zexcel_table_style VALUE 'TableStyleLight5'. "#EC NOTEXT
    CONSTANTS builtinstyle_pivot_light16 TYPE zexcel_table_style VALUE 'PivotStyleLight16'. "#EC NOTEXT
    CONSTANTS builtinstyle_light6 TYPE zexcel_table_style VALUE 'TableStyleLight6'. "#EC NOTEXT
    CONSTANTS totals_function_average TYPE zexcel_table_totals_function VALUE 'average'. "#EC NOTEXT
    CONSTANTS builtinstyle_light7 TYPE zexcel_table_style VALUE 'TableStyleLight7'. "#EC NOTEXT
    CONSTANTS totals_function_count TYPE zexcel_table_totals_function VALUE 'count'. "#EC NOTEXT
    CONSTANTS builtinstyle_light8 TYPE zexcel_table_style VALUE 'TableStyleLight8'. "#EC NOTEXT
    CONSTANTS totals_function_custom TYPE zexcel_table_totals_function VALUE 'custom'. "#EC NOTEXT
    CONSTANTS builtinstyle_light9 TYPE zexcel_table_style VALUE 'TableStyleLight9'. "#EC NOTEXT
    CONSTANTS totals_function_max TYPE zexcel_table_totals_function VALUE 'max'. "#EC NOTEXT
    CONSTANTS builtinstyle_light10 TYPE zexcel_table_style VALUE 'TableStyleLight10'. "#EC NOTEXT
    CONSTANTS totals_function_min TYPE zexcel_table_totals_function VALUE 'min'. "#EC NOTEXT
    CONSTANTS builtinstyle_light11 TYPE zexcel_table_style VALUE 'TableStyleLight11'. "#EC NOTEXT
    CONSTANTS totals_function_sum TYPE zexcel_table_totals_function VALUE 'sum'. "#EC NOTEXT
    CONSTANTS builtinstyle_light12 TYPE zexcel_table_style VALUE 'TableStyleLight12'. "#EC NOTEXT
    DATA fieldcat TYPE zexcel_t_fieldcatalog .
    CONSTANTS builtinstyle_light13 TYPE zexcel_table_style VALUE 'TableStyleLight13'. "#EC NOTEXT
    CONSTANTS builtinstyle_light14 TYPE zexcel_table_style VALUE 'TableStyleLight14'. "#EC NOTEXT
    DATA settings TYPE zexcel_s_table_settings .
    CONSTANTS builtinstyle_light15 TYPE zexcel_table_style VALUE 'TableStyleLight15'. "#EC NOTEXT
    CONSTANTS builtinstyle_light16 TYPE zexcel_table_style VALUE 'TableStyleLight16'. "#EC NOTEXT
    CONSTANTS builtinstyle_light17 TYPE zexcel_table_style VALUE 'TableStyleLight17'. "#EC NOTEXT
    CONSTANTS builtinstyle_light18 TYPE zexcel_table_style VALUE 'TableStyleLight18'. "#EC NOTEXT
    CONSTANTS builtinstyle_light19 TYPE zexcel_table_style VALUE 'TableStyleLight19'. "#EC NOTEXT
    CONSTANTS builtinstyle_light20 TYPE zexcel_table_style VALUE 'TableStyleLight20'. "#EC NOTEXT
    CONSTANTS builtinstyle_light21 TYPE zexcel_table_style VALUE 'TableStyleLight21'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium1 TYPE zexcel_table_style VALUE 'TableStyleMedium1'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium2 TYPE zexcel_table_style VALUE 'TableStyleMedium2'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium3 TYPE zexcel_table_style VALUE 'TableStyleMedium3'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium4 TYPE zexcel_table_style VALUE 'TableStyleMedium4'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium5 TYPE zexcel_table_style VALUE 'TableStyleMedium5'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium6 TYPE zexcel_table_style VALUE 'TableStyleMedium6'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium7 TYPE zexcel_table_style VALUE 'TableStyleMedium7'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium8 TYPE zexcel_table_style VALUE 'TableStyleMedium8'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium9 TYPE zexcel_table_style VALUE 'TableStyleMedium9'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium10 TYPE zexcel_table_style VALUE 'TableStyleMedium10'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium11 TYPE zexcel_table_style VALUE 'TableStyleMedium11'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium12 TYPE zexcel_table_style VALUE 'TableStyleMedium12'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium13 TYPE zexcel_table_style VALUE 'TableStyleMedium13'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium14 TYPE zexcel_table_style VALUE 'TableStyleMedium14'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium15 TYPE zexcel_table_style VALUE 'TableStyleMedium15'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium16 TYPE zexcel_table_style VALUE 'TableStyleMedium16'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium17 TYPE zexcel_table_style VALUE 'TableStyleMedium17'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium18 TYPE zexcel_table_style VALUE 'TableStyleMedium18'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium19 TYPE zexcel_table_style VALUE 'TableStyleMedium19'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium20 TYPE zexcel_table_style VALUE 'TableStyleMedium20'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium21 TYPE zexcel_table_style VALUE 'TableStyleMedium21'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium22 TYPE zexcel_table_style VALUE 'TableStyleMedium22'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium23 TYPE zexcel_table_style VALUE 'TableStyleMedium23'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium24 TYPE zexcel_table_style VALUE 'TableStyleMedium24'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium25 TYPE zexcel_table_style VALUE 'TableStyleMedium26'. "#EC NOTEXT
    CONSTANTS builtinstyle_medium27 TYPE zexcel_table_style VALUE 'TableStyleMedium27'. "#EC NOTEXT

    METHODS get_totals_formula
      IMPORTING
        !ip_column        TYPE clike
        !ip_function      TYPE zexcel_table_totals_function
      RETURNING
        VALUE(ep_formula) TYPE string
      RAISING
        zcx_excel .
    METHODS has_totals
      RETURNING
        VALUE(ep_result) TYPE abap_bool .
    METHODS set_data
      IMPORTING
        !ir_data TYPE STANDARD TABLE .
    METHODS get_id
      RETURNING
        VALUE(ov_id) TYPE i .
    METHODS set_id
      IMPORTING
        !iv_id TYPE i .
    METHODS get_name
      RETURNING
        VALUE(ov_name) TYPE string .
    METHODS get_reference
      IMPORTING
        !ip_include_totals_row TYPE abap_bool DEFAULT abap_true
      RETURNING
        VALUE(ov_reference)    TYPE string
      RAISING
        zcx_excel .
    METHODS get_bottom_row_integer
      RETURNING
        VALUE(ev_row) TYPE i .
    METHODS get_right_column_integer
      RETURNING
        VALUE(ev_column) TYPE i
      RAISING
        zcx_excel .
*"* protected components of class ZCL_EXCEL_TABLE
*"* do not include other source files here!!!
*"* protected components of class ZCL_EXCEL_TABLE
*"* do not include other source files here!!!
*"* protected components of class ZCL_EXCEL_TABLE
*"* do not include other source files here!!!
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA id TYPE i .
    DATA name TYPE string .
    DATA table_data TYPE REF TO data .
    DATA builtinstyle_medium28 TYPE zexcel_table_style VALUE 'TableStyleMedium28'. "#EC NOTEXT .  .  . " .
ENDCLASS.

CLASS zcl_excel_writer_2007 DEFINITION
  CREATE PUBLIC .

  PUBLIC SECTION.

*"* public components of class ZCL_EXCEL_WRITER_2007
*"* do not include other source files here!!!
    INTERFACES zif_excel_writer .
    METHODS constructor.

  PROTECTED SECTION.

*"* protected components of class ZCL_EXCEL_WRITER_2007
*"* do not include other source files here!!!
    CONSTANTS c_content_types TYPE string VALUE '[Content_Types].xml'. "#EC NOTEXT
    CONSTANTS c_docprops_app TYPE string VALUE 'docProps/app.xml'. "#EC NOTEXT
    CONSTANTS c_docprops_core TYPE string VALUE 'docProps/core.xml'. "#EC NOTEXT
    CONSTANTS c_relationships TYPE string VALUE '_rels/.rels'. "#EC NOTEXT
    CONSTANTS c_xl_calcchain TYPE string VALUE 'xl/calcChain.xml'. "#EC NOTEXT
    CONSTANTS c_xl_drawings TYPE string VALUE 'xl/drawings/drawing#.xml'. "#EC NOTEXT
    CONSTANTS c_xl_drawings_rels TYPE string VALUE 'xl/drawings/_rels/drawing#.xml.rels'. "#EC NOTEXT
    CONSTANTS c_xl_relationships TYPE string VALUE 'xl/_rels/workbook.xml.rels'. "#EC NOTEXT
    CONSTANTS c_xl_sharedstrings TYPE string VALUE 'xl/sharedStrings.xml'. "#EC NOTEXT
    CONSTANTS c_xl_sheet TYPE string VALUE 'xl/worksheets/sheet#.xml'. "#EC NOTEXT
    CONSTANTS c_xl_sheet_rels TYPE string VALUE 'xl/worksheets/_rels/sheet#.xml.rels'. "#EC NOTEXT
    CONSTANTS c_xl_styles TYPE string VALUE 'xl/styles.xml'. "#EC NOTEXT
    CONSTANTS c_xl_theme TYPE string VALUE 'xl/theme/theme1.xml'. "#EC NOTEXT
    CONSTANTS c_xl_workbook TYPE string VALUE 'xl/workbook.xml'. "#EC NOTEXT
    DATA excel TYPE REF TO zcl_excel .
    DATA shared_strings TYPE zexcel_t_shared_string .
    DATA styles_cond_mapping TYPE zexcel_t_styles_cond_mapping .
    DATA styles_mapping TYPE zexcel_t_styles_mapping .
    CONSTANTS c_xl_comments TYPE string VALUE 'xl/comments#.xml'. "#EC NOTEXT
    CONSTANTS cl_xl_drawing_for_comments TYPE string VALUE 'xl/drawings/vmlDrawing#.vml'. "#EC NOTEXT
    CONSTANTS c_xl_drawings_vml_rels TYPE string VALUE 'xl/drawings/_rels/vmlDrawing#.vml.rels'. "#EC NOTEXT
    DATA ixml TYPE REF TO if_ixml.

    METHODS create_xl_sheet_sheet_data
      IMPORTING
        !io_document                   TYPE REF TO if_ixml_document
        !io_worksheet                  TYPE REF TO zcl_excel_worksheet
      RETURNING
        VALUE(rv_ixml_sheet_data_root) TYPE REF TO if_ixml_element .
    METHODS add_further_data_to_zip
      IMPORTING
        !io_zip TYPE REF TO cl_abap_zip .
    METHODS create
      RETURNING
        VALUE(ep_excel) TYPE xstring .
    METHODS create_content_types
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_docprops_app
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_docprops_core
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_dxf_style
      IMPORTING
        !iv_cell_style    TYPE zexcel_cell_style
        !io_dxf_element   TYPE REF TO if_ixml_element
        !io_ixml_document TYPE REF TO if_ixml_document
        !it_cellxfs       TYPE zexcel_t_cellxfs
        !it_fonts         TYPE zexcel_t_style_font
        !it_fills         TYPE zexcel_t_style_fill
      CHANGING
        !cv_dfx_count     TYPE i .
    METHODS create_relationships
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_xl_charts
      IMPORTING
        !io_drawing       TYPE REF TO zcl_excel_drawing
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_xl_comments
      IMPORTING
        !io_worksheet     TYPE REF TO zcl_excel_worksheet
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_xl_drawings
      IMPORTING
        !io_worksheet     TYPE REF TO zcl_excel_worksheet
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_xl_drawings_rels
      IMPORTING
        !io_worksheet     TYPE REF TO zcl_excel_worksheet
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_xl_drawing_anchor
      IMPORTING
        !io_drawing      TYPE REF TO zcl_excel_drawing
        !io_document     TYPE REF TO if_ixml_document
        !ip_index        TYPE i
      RETURNING
        VALUE(ep_anchor) TYPE REF TO if_ixml_element .
    METHODS create_xl_drawing_for_comments
      IMPORTING
        !io_worksheet     TYPE REF TO zcl_excel_worksheet
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_xl_relationships
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_xl_sharedstrings
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_xl_sheet
      IMPORTING
        !io_worksheet     TYPE REF TO zcl_excel_worksheet
        !iv_active        TYPE flag DEFAULT ''
      RETURNING
        VALUE(ep_content) TYPE xstring
      RAISING
        zcx_excel .
    METHODS create_xl_sheet_pagebreaks
      IMPORTING
        !io_document  TYPE REF TO if_ixml_document
        !io_parent    TYPE REF TO if_ixml_element
        !io_worksheet TYPE REF TO zcl_excel_worksheet
      RAISING
        zcx_excel .
    METHODS create_xl_sheet_rels
      IMPORTING
        !io_worksheet     TYPE REF TO zcl_excel_worksheet
        !iv_drawing_index TYPE i
        !iv_comment_index TYPE i
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_xl_styles
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_xl_styles_color_node
      IMPORTING
        !io_document        TYPE REF TO if_ixml_document
        !io_parent          TYPE REF TO if_ixml_element
        !iv_color_elem_name TYPE string DEFAULT 'color'
        !is_color           TYPE zexcel_s_style_color .
    METHODS create_xl_table
      IMPORTING
        !io_table         TYPE REF TO zcl_excel_table
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_xl_theme
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_xl_workbook
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS get_shared_string_index
      IMPORTING
        !ip_cell_value  TYPE zexcel_cell_value
      RETURNING
        VALUE(ep_index) TYPE int4 .
    METHODS create_xl_drawings_vml
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS set_vml_string
      RETURNING
        VALUE(ep_content) TYPE string .
    METHODS create_xl_drawings_vml_rels
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS set_vml_shape_footer
      IMPORTING
        !is_footer        TYPE zexcel_s_worksheet_head_foot
      RETURNING
        VALUE(ep_content) TYPE string .
    METHODS set_vml_shape_header
      IMPORTING
        !is_header        TYPE zexcel_s_worksheet_head_foot
      RETURNING
        VALUE(ep_content) TYPE string .
    METHODS create_xl_drawing_for_hdft_im
      IMPORTING
        !io_worksheet     TYPE REF TO zcl_excel_worksheet
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_xl_drawings_hdft_rels
      IMPORTING
        !io_worksheet     TYPE REF TO zcl_excel_worksheet
      RETURNING
        VALUE(ep_content) TYPE xstring .
    METHODS create_xml_document
      RETURNING
        VALUE(ro_document) TYPE REF TO if_ixml_document.
    METHODS render_xml_document
      IMPORTING
        io_document       TYPE REF TO if_ixml_document
      RETURNING
        VALUE(ep_content) TYPE xstring.
  PRIVATE SECTION.

*"* private components of class ZCL_EXCEL_WRITER_2007
*"* do not include other source files here!!!
    CONSTANTS c_off TYPE string VALUE '0'.                  "#EC NOTEXT
    CONSTANTS c_on TYPE string VALUE '1'.                   "#EC NOTEXT
    CONSTANTS c_xl_printersettings TYPE string VALUE 'xl/printerSettings/printerSettings#.bin'. "#EC NOTEXT

    METHODS flag2bool
      IMPORTING
        !ip_flag          TYPE flag
      RETURNING
        VALUE(ep_boolean) TYPE char5 .
ENDCLASS.

*--------------------------------------------------------------------*
* CLASS IMPLEMENTATIONS
*--------------------------------------------------------------------*
CLASS zcx_excel IMPLEMENTATION.

  METHOD if_message~get_text.

    IF me->error IS NOT INITIAL.
*--------------------------------------------------------------------*
* If message was supplied explicitly use this
*--------------------------------------------------------------------*
      result = me->error .
    ELSEIF me->syst_at_raise IS NOT INITIAL.
*--------------------------------------------------------------------*
* If message was supplied by syst create messagetext now
*--------------------------------------------------------------------*
      MESSAGE ID syst_at_raise-msgid TYPE syst_at_raise-msgty NUMBER syst_at_raise-msgno
           WITH  syst_at_raise-msgv1 syst_at_raise-msgv2 syst_at_raise-msgv3 syst_at_raise-msgv4
           INTO  result.
    ELSE.
*--------------------------------------------------------------------*
* otherwise use standard method to derive text
*--------------------------------------------------------------------*
      CALL METHOD super->if_message~get_text
        RECEIVING
          result = result.
    ENDIF.
  ENDMETHOD.

  METHOD if_message~get_longtext.

    IF   me->error         IS NOT INITIAL
      OR me->syst_at_raise IS NOT INITIAL.
*--------------------------------------------------------------------*
* If message was supplied explicitly use this as longtext as well
*--------------------------------------------------------------------*
      result = me->get_text( ).
    ELSE.
*--------------------------------------------------------------------*
* otherwise use standard method to derive text
*--------------------------------------------------------------------*
      super->if_message~get_longtext( EXPORTING
                                        preserve_newlines = preserve_newlines
                                      RECEIVING
                                        result            = result ).
    ENDIF.
  ENDMETHOD.

  METHOD constructor.
    CALL METHOD super->constructor
      EXPORTING
        textid   = textid
        previous = previous.
    IF textid IS INITIAL.
      me->textid = zcx_excel .
    ENDIF.
    me->error = error .
    me->syst_at_raise = syst_at_raise .
  ENDMETHOD.

  METHOD raise_text.
    RAISE EXCEPTION TYPE zcx_excel
      EXPORTING
        error = iv_text.
  ENDMETHOD.

  METHOD raise_symsg.
    RAISE EXCEPTION TYPE zcx_excel
      EXPORTING
        syst_at_raise = syst.
  ENDMETHOD.

ENDCLASS.

CLASS zcl_excel_legacy_palette IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_LEGACY_PALETTE->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    " default Excel palette based on
    " http://msdn.microsoft.com/en-us/library/documentformat.openxml.spreadsheet.indexedcolors.aspx

    APPEND '00000000' TO colors.
    APPEND '00FFFFFF' TO colors.
    APPEND '00FF0000' TO colors.
    APPEND '0000FF00' TO colors.
    APPEND '000000FF' TO colors.
    APPEND '00FFFF00' TO colors.
    APPEND '00FF00FF' TO colors.
    APPEND '0000FFFF' TO colors.
    APPEND '00000000' TO colors.
    APPEND '00FFFFFF' TO colors.

    APPEND '00FF0000' TO colors.
    APPEND '0000FF00' TO colors.
    APPEND '000000FF' TO colors.
    APPEND '00FFFF00' TO colors.
    APPEND '00FF00FF' TO colors.
    APPEND '0000FFFF' TO colors.
    APPEND '00800000' TO colors.
    APPEND '00008000' TO colors.
    APPEND '00000080' TO colors.
    APPEND '00808000' TO colors.

    APPEND '00800080' TO colors.
    APPEND '00008080' TO colors.
    APPEND '00C0C0C0' TO colors.
    APPEND '00808080' TO colors.
    APPEND '009999FF' TO colors.
    APPEND '00993366' TO colors.
    APPEND '00FFFFCC' TO colors.
    APPEND '00CCFFFF' TO colors.
    APPEND '00660066' TO colors.
    APPEND '00FF8080' TO colors.

    APPEND '000066CC' TO colors.
    APPEND '00CCCCFF' TO colors.
    APPEND '00000080' TO colors.
    APPEND '00FF00FF' TO colors.
    APPEND '00FFFF00' TO colors.
    APPEND '0000FFFF' TO colors.
    APPEND '00800080' TO colors.
    APPEND '00800000' TO colors.
    APPEND '00008080' TO colors.
    APPEND '000000FF' TO colors.

    APPEND '0000CCFF' TO colors.
    APPEND '00CCFFFF' TO colors.
    APPEND '00CCFFCC' TO colors.
    APPEND '00FFFF99' TO colors.
    APPEND '0099CCFF' TO colors.
    APPEND '00FF99CC' TO colors.
    APPEND '00CC99FF' TO colors.
    APPEND '00FFCC99' TO colors.
    APPEND '003366FF' TO colors.
    APPEND '0033CCCC' TO colors.

    APPEND '0099CC00' TO colors.
    APPEND '00FFCC00' TO colors.
    APPEND '00FF9900' TO colors.
    APPEND '00FF6600' TO colors.
    APPEND '00666699' TO colors.
    APPEND '00969696' TO colors.
    APPEND '00003366' TO colors.
    APPEND '00339966' TO colors.
    APPEND '00003300' TO colors.
    APPEND '00333300' TO colors.

    APPEND '00993300' TO colors.
    APPEND '00993366' TO colors.
    APPEND '00333399' TO colors.
    APPEND '00333333' TO colors.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_LEGACY_PALETTE->GET_COLOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        I
* | [<-()] EP_COLOR                       TYPE        ZEXCEL_STYLE_COLOR_ARGB
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_color.
    DATA: lv_index TYPE i.

    lv_index = ip_index + 1.
    READ TABLE colors INTO ep_color INDEX lv_index.
    IF sy-subrc <> 0.
      zcx_excel=>raise_text( 'Invalid color index' ).
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_LEGACY_PALETTE->GET_COLORS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_COLORS                      TYPE        ZEXCEL_T_STYLE_COLOR_ARGB
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_colors.
    ep_colors = colors.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_LEGACY_PALETTE->IS_MODIFIED
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_MODIFIED                    TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_modified.
    ep_modified = modified.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_LEGACY_PALETTE->SET_COLOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        I
* | [--->] IP_COLOR                       TYPE        ZEXCEL_STYLE_COLOR_ARGB
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_color.
    DATA: lv_index TYPE i.

    FIELD-SYMBOLS: <lv_color> LIKE LINE OF colors.

    lv_index = ip_index + 1.
    READ TABLE colors ASSIGNING <lv_color> INDEX lv_index.
    IF sy-subrc <> 0.
      zcx_excel=>raise_text( 'Invalid color index' ).
    ENDIF.

    IF <lv_color> <> ip_color.
      modified = abap_true.
      <lv_color> = ip_color.
    ENDIF.

  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_security IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_SECURITY->IS_SECURITY_ENABLED
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_SECURITY_ENABLED            TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_security_enabled.
    IF lockrevision EQ abap_true OR lockstructure EQ abap_true OR lockwindows EQ abap_true.
      ep_security_enabled = abap_true.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_sheet_setup IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_SHEET_SETUP->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    orientation = me->c_orientation_default.

* default margins
    margin_bottom = '0.75'.
    margin_footer = '0.3'.
    margin_header = '0.3'.
    margin_left   = '0.7'.
    margin_right  = '0.7'.
    margin_top    = '0.75'.

* clear page settings
    CLEAR: black_and_white,
           cell_comments,
           copies,
           draft,
           errors,
           first_page_number,
           fit_to_page,
           fit_to_height,
           fit_to_width,
           horizontal_dpi,
           orientation,
           page_order,
           paper_height,
           paper_size,
           paper_width,
           scale,
           use_first_page_num,
           use_printer_defaults,
           vertical_dpi.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_SHEET_SETUP->GET_HEADER_FOOTER
* +-------------------------------------------------------------------------------------------------+
* | [<---] EP_ODD_HEADER                  TYPE        ZEXCEL_S_WORKSHEET_HEAD_FOOT
* | [<---] EP_ODD_FOOTER                  TYPE        ZEXCEL_S_WORKSHEET_HEAD_FOOT
* | [<---] EP_EVEN_HEADER                 TYPE        ZEXCEL_S_WORKSHEET_HEAD_FOOT
* | [<---] EP_EVEN_FOOTER                 TYPE        ZEXCEL_S_WORKSHEET_HEAD_FOOT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_header_footer.

* Only Basic font/text formatting possible:
* Bold (yes / no), Font Type, Font Size
*
* usefull placeholders, which can be used in header/footer value strings
* '&P' - page number
* '&N' - total number of pages
* '&D' - Date
* '&T' - Time
* '&F' - File Name
* '&Z' - Path
* '&A' - Sheet name
* new line via class constant CL_ABAP_CHAR_UTILITIES=>newline
*
* Example Value String 'page &P of &N'
*
* DO NOT USE &L , &C or &R which automatically created as position markers

    ep_odd_header = me->odd_header.
    ep_odd_footer = me->odd_footer.
    ep_even_header = me->even_header.
    ep_even_footer = me->even_footer.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_SHEET_SETUP->GET_HEADER_FOOTER_STRING
* +-------------------------------------------------------------------------------------------------+
* | [<---] EP_ODD_HEADER                  TYPE        STRING
* | [<---] EP_ODD_FOOTER                  TYPE        STRING
* | [<---] EP_EVEN_HEADER                 TYPE        STRING
* | [<---] EP_EVEN_FOOTER                 TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_header_footer_string.
* ----------------------------------------------------------------------
    DATA:   lc_marker_left(2)   TYPE c VALUE '&L'
          , lc_marker_right(2)  TYPE c VALUE '&R'
          , lc_marker_center(2) TYPE c VALUE '&C'
          , lv_value            TYPE string
          .
* ----------------------------------------------------------------------
    IF ep_odd_header IS SUPPLIED.

      IF me->odd_header-left_value IS NOT INITIAL.
        lv_value = me->process_header_footer( ip_header = me->odd_header ip_side = 'LEFT' ).
        CONCATENATE lc_marker_left lv_value INTO ep_odd_header.
      ENDIF.

      IF me->odd_header-center_value IS NOT INITIAL.
        lv_value = me->process_header_footer( ip_header = me->odd_header ip_side = 'CENTER' ).
        CONCATENATE ep_odd_header lc_marker_center lv_value INTO ep_odd_header.
      ENDIF.

      IF me->odd_header-right_value IS NOT INITIAL.
        lv_value = me->process_header_footer( ip_header = me->odd_header ip_side = 'RIGHT' ).
        CONCATENATE ep_odd_header lc_marker_right lv_value INTO ep_odd_header.
      ENDIF.

      IF me->odd_header-left_image IS NOT INITIAL.
        lv_value = '&G'.
        CONCATENATE ep_odd_header lc_marker_left lv_value INTO ep_odd_header.
      ENDIF.
      IF me->odd_header-center_image IS NOT INITIAL.
        lv_value = '&G'.
        CONCATENATE ep_odd_header lc_marker_center lv_value INTO ep_odd_header.
      ENDIF.
      IF me->odd_header-right_image IS NOT INITIAL.
        lv_value = '&G'.
        CONCATENATE ep_odd_header lc_marker_right lv_value INTO ep_odd_header.
      ENDIF.

    ENDIF.
* ----------------------------------------------------------------------
    IF ep_odd_footer IS SUPPLIED.

      IF me->odd_footer-left_value IS NOT INITIAL.
        lv_value = me->process_header_footer( ip_header = me->odd_footer ip_side = 'LEFT' ).
        CONCATENATE lc_marker_left lv_value INTO ep_odd_footer.
      ENDIF.

      IF me->odd_footer-center_value IS NOT INITIAL.
        lv_value = me->process_header_footer( ip_header = me->odd_footer ip_side = 'CENTER' ).
        CONCATENATE ep_odd_footer lc_marker_center lv_value INTO ep_odd_footer.
      ENDIF.

      IF me->odd_footer-right_value IS NOT INITIAL.
        lv_value = me->process_header_footer( ip_header = me->odd_footer ip_side = 'RIGHT' ).
        CONCATENATE ep_odd_footer lc_marker_right lv_value INTO ep_odd_footer.
      ENDIF.

      IF me->odd_footer-left_image IS NOT INITIAL.
        lv_value = '&G'.
        CONCATENATE ep_odd_header lc_marker_left lv_value INTO ep_odd_footer.
      ENDIF.
      IF me->odd_footer-center_image IS NOT INITIAL.
        lv_value = '&G'.
        CONCATENATE ep_odd_header lc_marker_center lv_value INTO ep_odd_footer.
      ENDIF.
      IF me->odd_footer-right_image IS NOT INITIAL.
        lv_value = '&G'.
        CONCATENATE ep_odd_header lc_marker_right lv_value INTO ep_odd_footer.
      ENDIF.

    ENDIF.
* ----------------------------------------------------------------------
    IF ep_even_header IS SUPPLIED.

      IF me->even_header-left_value IS NOT INITIAL.
        lv_value = me->process_header_footer( ip_header = me->even_header ip_side = 'LEFT' ).
        CONCATENATE lc_marker_left lv_value INTO ep_even_header.
      ENDIF.

      IF me->even_header-center_value IS NOT INITIAL.
        lv_value = me->process_header_footer( ip_header = me->even_header ip_side = 'CENTER' ).
        CONCATENATE ep_even_header lc_marker_center lv_value INTO ep_even_header.
      ENDIF.

      IF me->even_header-right_value IS NOT INITIAL.
        lv_value = me->process_header_footer( ip_header = me->even_header ip_side = 'RIGHT' ).
        CONCATENATE ep_even_header lc_marker_right lv_value INTO ep_even_header.
      ENDIF.

      IF me->even_header-left_image IS NOT INITIAL.
        lv_value = '&G'.
        CONCATENATE ep_odd_header lc_marker_left lv_value INTO ep_even_header.
      ENDIF.
      IF me->even_header-center_image IS NOT INITIAL.
        lv_value = '&G'.
        CONCATENATE ep_odd_header lc_marker_center lv_value INTO ep_even_header.
      ENDIF.
      IF me->even_header-right_image IS NOT INITIAL.
        lv_value = '&G'.
        CONCATENATE ep_odd_header lc_marker_right lv_value INTO ep_even_header.
      ENDIF.

    ENDIF.
* ----------------------------------------------------------------------
    IF ep_even_footer IS SUPPLIED.

      IF me->even_footer-left_value IS NOT INITIAL.
        lv_value = me->process_header_footer( ip_header = me->even_footer ip_side = 'LEFT' ).
        CONCATENATE lc_marker_left lv_value INTO ep_even_footer.
      ENDIF.

      IF me->even_footer-center_value IS NOT INITIAL.
        lv_value = me->process_header_footer( ip_header = me->even_footer ip_side = 'CENTER' ).
        CONCATENATE ep_even_footer lc_marker_center lv_value INTO ep_even_footer.
      ENDIF.

      IF me->even_footer-right_value IS NOT INITIAL.
        lv_value = me->process_header_footer( ip_header = me->even_footer ip_side = 'RIGHT' ).
        CONCATENATE ep_even_footer lc_marker_right lv_value INTO ep_even_footer.
      ENDIF.

      IF me->even_footer-left_image IS NOT INITIAL.
        lv_value = '&G'.
        CONCATENATE ep_odd_header lc_marker_left lv_value INTO ep_even_footer.
      ENDIF.
      IF me->even_footer-center_image IS NOT INITIAL.
        lv_value = '&G'.
        CONCATENATE ep_odd_header lc_marker_center lv_value INTO ep_even_footer.
      ENDIF.
      IF me->even_footer-right_image IS NOT INITIAL.
        lv_value = '&G'.
        CONCATENATE ep_odd_header lc_marker_right lv_value INTO ep_even_footer.
      ENDIF.

    ENDIF.
* ----------------------------------------------------------------------
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_SHEET_SETUP->PROCESS_HEADER_FOOTER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_HEADER                      TYPE        ZEXCEL_S_WORKSHEET_HEAD_FOOT
* | [--->] IP_SIDE                        TYPE        STRING
* | [<-()] RV_PROCESSED_STRING            TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD process_header_footer.

* ----------------------------------------------------------------------
* Only Basic font/text formatting possible:
* Bold (yes / no), Font Type, Font Size

    DATA:   lv_fname(12) TYPE c
          , lv_string    TYPE string
          .

    FIELD-SYMBOLS:   <lv_value> TYPE string
                   , <ls_font>  TYPE zexcel_s_style_font
                   .

* ----------------------------------------------------------------------
    CONCATENATE ip_side '_VALUE' INTO lv_fname.
    ASSIGN COMPONENT lv_fname OF STRUCTURE ip_header TO <lv_value>.

    CONCATENATE ip_side '_FONT' INTO lv_fname.
    ASSIGN COMPONENT lv_fname OF STRUCTURE ip_header TO <ls_font>.

    IF <ls_font> IS ASSIGNED AND <lv_value> IS ASSIGNED.

      IF <lv_value> = '&G'. "image header
        rv_processed_string = <lv_value>.
      ELSE.

        IF <ls_font>-name IS NOT INITIAL.
          CONCATENATE '&"' <ls_font>-name ',' INTO rv_processed_string.
        ELSE.
          rv_processed_string = '&"-,'.
        ENDIF.

        IF <ls_font>-bold = abap_true.
          CONCATENATE rv_processed_string 'Bold"' INTO rv_processed_string.
        ELSE.
          CONCATENATE rv_processed_string 'Standard"' INTO rv_processed_string.
        ENDIF.

        IF <ls_font>-size IS NOT INITIAL.
          lv_string = <ls_font>-size.
          CONCATENATE rv_processed_string '&' lv_string INTO rv_processed_string.
          CONDENSE rv_processed_string NO-GAPS.
        ENDIF.

        CONCATENATE rv_processed_string <lv_value> INTO rv_processed_string.
      ENDIF.
    ENDIF.
* ----------------------------------------------------------------------

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_SHEET_SETUP->SET_HEADER_FOOTER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_ODD_HEADER                  TYPE        ZEXCEL_S_WORKSHEET_HEAD_FOOT(optional)
* | [--->] IP_ODD_FOOTER                  TYPE        ZEXCEL_S_WORKSHEET_HEAD_FOOT(optional)
* | [--->] IP_EVEN_HEADER                 TYPE        ZEXCEL_S_WORKSHEET_HEAD_FOOT(optional)
* | [--->] IP_EVEN_FOOTER                 TYPE        ZEXCEL_S_WORKSHEET_HEAD_FOOT(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_header_footer.

* Only Basic font/text formatting possible:
* Bold (yes / no), Font Type, Font Size
*
* usefull placeholders, which can be used in header/footer value strings
* '&P' - page number
* '&N' - total number of pages
* '&D' - Date
* '&T' - Time
* '&F' - File Name
* '&Z' - Path
* '&A' - Sheet name
* new line via class constant CL_ABAP_CHAR_UTILITIES=>newline
*
* Example Value String 'page &P of &N'
*
* DO NOT USE &L , &C or &R which automatically created as position markers

    me->odd_header = ip_odd_header.
    me->odd_footer = ip_odd_footer.
    me->even_header = ip_even_header.
    me->even_footer = ip_even_footer.

    IF me->even_header IS NOT INITIAL OR me->even_footer IS NOT INITIAL.
      me->diff_oddeven_headerfooter = abap_true.
    ENDIF.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_SHEET_SETUP->SET_PAGE_MARGINS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_BOTTOM                      TYPE        FLOAT(optional)
* | [--->] IP_FOOTER                      TYPE        FLOAT(optional)
* | [--->] IP_HEADER                      TYPE        FLOAT(optional)
* | [--->] IP_LEFT                        TYPE        FLOAT(optional)
* | [--->] IP_RIGHT                       TYPE        FLOAT(optional)
* | [--->] IP_TOP                         TYPE        FLOAT(optional)
* | [--->] IP_UNIT                        TYPE        CSEQUENCE (default ='in')
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_page_margins.
    DATA: lv_coef TYPE f,
          lv_unit TYPE string.

    lv_unit = ip_unit.
    TRANSLATE lv_unit TO UPPER CASE.

    CASE lv_unit.
      WHEN 'IN'. lv_coef = 1.
      WHEN 'CM'. lv_coef = '0.393700787'.
      WHEN 'MM'. lv_coef = '0.0393700787'.
    ENDCASE.

    IF ip_bottom IS SUPPLIED. margin_bottom = lv_coef * ip_bottom. ENDIF.
    IF ip_footer IS SUPPLIED. margin_footer = lv_coef * ip_footer. ENDIF.
    IF ip_header IS SUPPLIED. margin_header = lv_coef * ip_header. ENDIF.
    IF ip_left IS SUPPLIED.   margin_left   = lv_coef * ip_left. ENDIF.
    IF ip_right IS SUPPLIED.  margin_right  = lv_coef * ip_right. ENDIF.
    IF ip_top IS SUPPLIED.    margin_top    = lv_coef * ip_top. ENDIF.

  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_comment IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENT->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENT->GET_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RP_INDEX                       TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_index.
    rp_index = me->index.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENT->GET_NAME
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_NAME                         TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_name.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENT->GET_REF
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RP_REF                         TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_ref.
    rp_ref = me->ref.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENT->GET_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RP_TEXT                        TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_text.
    rp_text = me->text.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENT->SET_TEXT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_TEXT                        TYPE        STRING
* | [--->] IP_REF                         TYPE        STRING(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_text.
    me->text = ip_text.

    IF ip_ref IS SUPPLIED.
      me->ref = ip_ref.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_column IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [--->] IP_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [--->] IP_EXCEL                       TYPE REF TO ZCL_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    me->column_index = zcl_excel_common=>convert_column2int( ip_index ).
    me->width         = -1.
    me->auto_size     = abap_false.
    me->visible       = abap_true.
    me->outline_level = 0.
    me->collapsed     = abap_false.
    me->excel         = ip_excel.        "ins issue #157 - Allow Style for columns
    me->worksheet     = ip_worksheet.    "ins issue #157 - Allow Style for columns

    " set default index to cellXf
    me->xf_index = 0.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->GET_AUTO_SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_AUTO_SIZE                    TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_auto_size.
    r_auto_size = me->auto_size.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->GET_COLLAPSED
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_COLLAPSED                    TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_collapsed.
    r_collapsed = me->collapsed.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->GET_COLUMN_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_COLUMN_INDEX                 TYPE        INT4
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_column_index.
    r_column_index = me->column_index.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->GET_COLUMN_STYLE_GUID
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_STYLE_GUID                  TYPE        ZEXCEL_CELL_STYLE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_column_style_guid.
    IF me->style_guid IS NOT INITIAL.
      ep_style_guid = me->style_guid.
    ELSE.
      ep_style_guid = me->worksheet->zif_excel_sheet_properties~get_style( ).
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->GET_OUTLINE_LEVEL
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_OUTLINE_LEVEL                TYPE        INT4
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_outline_level.
    r_outline_level = me->outline_level.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->GET_VISIBLE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_VISIBLE                      TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_visible.
    r_visible = me->visible.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->GET_WIDTH
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_WIDTH                        TYPE        FLOAT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_width.
    r_width = me->width.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->GET_XF_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_XF_INDEX                     TYPE        INT4
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_xf_index.
    r_xf_index = me->xf_index.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->SET_AUTO_SIZE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_AUTO_SIZE                   TYPE        ABAP_BOOL
* | [<-()] IO_COLUMN                      TYPE REF TO ZCL_EXCEL_COLUMN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_auto_size.
    me->auto_size = ip_auto_size.
    io_column = me.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->SET_COLLAPSED
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLLAPSED                   TYPE        ABAP_BOOL
* | [<-()] IO_COLUMN                      TYPE REF TO ZCL_EXCEL_COLUMN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_collapsed.
    me->collapsed = ip_collapsed.
    io_column = me.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->SET_COLUMN_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [<-()] IO_COLUMN                      TYPE REF TO ZCL_EXCEL_COLUMN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_column_index.
    me->column_index = zcl_excel_common=>convert_column2int( ip_index ).
    io_column = me.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->SET_COLUMN_STYLE_BY_GUID
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_STYLE_GUID                  TYPE        ZEXCEL_CELL_STYLE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_column_style_by_guid.
    DATA: stylemapping TYPE zexcel_s_stylemapping.

    IF me->excel IS NOT BOUND.
      zcx_excel=>raise_text( 'Internal error - reference to ZCL_EXCEL not bound' ).
    ENDIF.
    TRY.
        stylemapping = me->excel->get_style_to_guid( ip_style_guid ).
        me->style_guid = stylemapping-guid.

      CATCH zcx_excel .
        EXIT.  " leave as is in case of error
    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->SET_OUTLINE_LEVEL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_OUTLINE_LEVEL               TYPE        INT4
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_outline_level.
    me->outline_level = ip_outline_level.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->SET_VISIBLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VISIBLE                     TYPE        ABAP_BOOL
* | [<-()] IO_COLUMN                      TYPE REF TO ZCL_EXCEL_COLUMN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_visible.
    me->visible = ip_visible.
    io_column = me.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->SET_WIDTH
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_WIDTH                       TYPE        SIMPLE
* | [<-()] IO_COLUMN                      TYPE REF TO ZCL_EXCEL_COLUMN
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_width.
    TRY.
        me->width = ip_width.
        io_column = me.
      CATCH cx_sy_conversion_no_number.
        zcx_excel=>raise_text( 'Unable to interpret width as number' ).
    ENDTRY.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMN->SET_XF_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_XF_INDEX                    TYPE        INT4
* | [<-()] IO_COLUMN                      TYPE REF TO ZCL_EXCEL_COLUMN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_xf_index.
    me->xf_index = ip_xf_index.
    io_column = me.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_style_cond IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_COND->ADD_RANGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_START_ROW                   TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_START_COLUMN                TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [--->] IP_STOP_ROW                    TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_STOP_COLUMN                 TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_range.
    DATA: lv_column    TYPE zexcel_cell_column,
          lv_row_alpha TYPE string,
          lv_col_alpha TYPE string,
          lv_coords1   TYPE string,
          lv_coords2   TYPE string.


    lv_column = zcl_excel_common=>convert_column2int( ip_start_column ).
*  me->mv_cell_data-cell_row     = 1.
*  me->mv_cell_data-cell_column  = lv_column.
*
    lv_col_alpha = ip_start_column.
    lv_row_alpha = ip_start_row.
    SHIFT lv_row_alpha RIGHT DELETING TRAILING space.
    SHIFT lv_row_alpha LEFT DELETING LEADING space.
    CONCATENATE lv_col_alpha lv_row_alpha INTO lv_coords1.

    IF ip_stop_column IS NOT INITIAL.
      lv_column = zcl_excel_common=>convert_column2int( ip_stop_column ).
    ELSE.
      lv_column = zcl_excel_common=>convert_column2int( ip_start_column ).
    ENDIF.

    IF ip_stop_row IS NOT INITIAL. " If we don't get explicitly a stop column use start column
      lv_row_alpha = ip_stop_row.
    ELSE.
      lv_row_alpha = ip_start_row.
    ENDIF.
    IF ip_stop_column IS NOT INITIAL. " If we don't get explicitly a stop column use start column
      lv_col_alpha = ip_stop_column.
    ELSE.
      lv_col_alpha = ip_start_column.
    ENDIF.
    SHIFT lv_row_alpha RIGHT DELETING TRAILING space.
    SHIFT lv_row_alpha LEFT DELETING LEADING space.
    CONCATENATE lv_col_alpha lv_row_alpha INTO lv_coords2.
    IF lv_coords2 IS NOT INITIAL AND lv_coords2 <> lv_coords1.
      CONCATENATE me->mv_rule_range ` ` lv_coords1 ':' lv_coords2 INTO me->mv_rule_range.
    ELSE.
      CONCATENATE me->mv_rule_range ` ` lv_coords1  INTO me->mv_rule_range.
    ENDIF.
    SHIFT me->mv_rule_range LEFT DELETING LEADING space.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_COND->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_GUID                        TYPE        ZEXCEL_CELL_STYLE(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.

    DATA: ls_iconset TYPE zexcel_conditional_iconset.
    ls_iconset-iconset     = zcl_excel_style_cond=>c_iconset_3trafficlights.
    ls_iconset-cfvo1_type  = zcl_excel_style_cond=>c_cfvo_type_percent.
    ls_iconset-cfvo1_value = '0'.
    ls_iconset-cfvo2_type  = zcl_excel_style_cond=>c_cfvo_type_percent.
    ls_iconset-cfvo2_value = '20'.
    ls_iconset-cfvo3_type  = zcl_excel_style_cond=>c_cfvo_type_percent.
    ls_iconset-cfvo3_value = '40'.
    ls_iconset-cfvo4_type  = zcl_excel_style_cond=>c_cfvo_type_percent.
    ls_iconset-cfvo4_value = '60'.
    ls_iconset-cfvo5_type  = zcl_excel_style_cond=>c_cfvo_type_percent.
    ls_iconset-cfvo5_value = '80'.


    me->rule          = zcl_excel_style_cond=>c_rule_none.
*  me->iconset->operator    = zcl_excel_style_conditional=>c_operator_none.
    me->mode_iconset  = ls_iconset.
    me->priority      = 1.

* inizialize dimension range
    me->mv_rule_range     = 'A1'.

    IF ip_guid IS NOT INITIAL.
      me->guid = ip_guid.
    ELSE.
      me->guid = zcl_excel_obsolete_func_wrap=>guid_create( ).
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_STYLE_COND=>FACTORY_COND_STYLE_ICONSET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [--->] IV_ICON_TYPE                   TYPE        ZEXCEL_CONDITION_RULE_ICONSET (default =C_ICONSET_3TRAFFICLIGHTS2)
* | [--->] IV_CFVO1_TYPE                  TYPE        ZEXCEL_CONDITIONAL_TYPE (default =C_CFVO_TYPE_PERCENT)
* | [--->] IV_CFVO1_VALUE                 TYPE        ZEXCEL_CONDITIONAL_VALUE(optional)
* | [--->] IV_CFVO2_TYPE                  TYPE        ZEXCEL_CONDITIONAL_TYPE (default =C_CFVO_TYPE_PERCENT)
* | [--->] IV_CFVO2_VALUE                 TYPE        ZEXCEL_CONDITIONAL_VALUE(optional)
* | [--->] IV_CFVO3_TYPE                  TYPE        ZEXCEL_CONDITIONAL_TYPE (default =C_CFVO_TYPE_PERCENT)
* | [--->] IV_CFVO3_VALUE                 TYPE        ZEXCEL_CONDITIONAL_VALUE(optional)
* | [--->] IV_CFVO4_TYPE                  TYPE        ZEXCEL_CONDITIONAL_TYPE (default =C_CFVO_TYPE_PERCENT)
* | [--->] IV_CFVO4_VALUE                 TYPE        ZEXCEL_CONDITIONAL_VALUE(optional)
* | [--->] IV_CFVO5_TYPE                  TYPE        ZEXCEL_CONDITIONAL_TYPE (default =C_CFVO_TYPE_PERCENT)
* | [--->] IV_CFVO5_VALUE                 TYPE        ZEXCEL_CONDITIONAL_VALUE(optional)
* | [--->] IV_SHOWVALUE                   TYPE        ZEXCEL_CONDITIONAL_SHOW_VALUE (default =ZCL_EXCEL_STYLE_COND=>C_SHOWVALUE_TRUE)
* | [<-()] EO_STYLE_COND                  TYPE REF TO ZCL_EXCEL_STYLE_COND
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD factory_cond_style_iconset.

*--------------------------------------------------------------------*
* Work in progress
* Missing:  LE or LT may be specified --> extend structure ZEXCEL_CONDITIONAL_ICONSET to hold this information as well
*--------------------------------------------------------------------*

*  DATA: lv_needed_values TYPE i.
*  CASE icon_type.
*
*    WHEN 'C_ICONSET_3ARROWS'
*      OR 'C_ICONSET_3ARROWSGRAY'
*      OR 'C_ICONSET_3FLAGS'
*      OR 'C_ICONSET_3SIGNS'
*      OR 'C_ICONSET_3SYMBOLS'
*      OR 'C_ICONSET_3SYMBOLS2'
*      OR 'C_ICONSET_3TRAFFICLIGHTS'
*      OR 'C_ICONSET_3TRAFFICLIGHTS2'.
*      lv_needed_values = 3.
*
*    WHEN 'C_ICONSET_4ARROWS'
*      OR 'C_ICONSET_4ARROWSGRAY'
*      OR 'C_ICONSET_4RATING'
*      OR 'C_ICONSET_4REDTOBLACK'
*      OR 'C_ICONSET_4TRAFFICLIGHTS'.
*      lv_needed_values = 4.
*
*    WHEN 'C_ICONSET_5ARROWS'
*      OR 'C_ICONSET_5ARROWSGRAY'
*      OR 'C_ICONSET_5QUARTERS'
*      OR 'C_ICONSET_5RATING'.
*      lv_needed_values = 5.
*
*    WHEN OTHERS.
*      RETURN.
*  ENDCASE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_COND->GET_DIMENSION_RANGE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_DIMENSION_RANGE             TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_dimension_range.

    ep_dimension_range = me->mv_rule_range.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_COND->GET_GUID
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_GUID                        TYPE        ZEXCEL_CELL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_guid.
    ep_guid = me->guid.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_COND->SET_RANGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_START_ROW                   TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_START_COLUMN                TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [--->] IP_STOP_ROW                    TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_STOP_COLUMN                 TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_range.

    CLEAR: me->mv_rule_range.

    me->add_range( ip_start_row    = ip_start_row
                   ip_start_column = ip_start_column
                   ip_stop_row     = ip_stop_row
                   ip_stop_column  = ip_stop_column ).

  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_data_validation IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DATA_VALIDATION->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    " Initialise instance variables
    formula1          = ''.
    formula2          = ''.
    type              = me->c_type_none.
    errorstyle        = me->c_style_stop.
    operator          = ''.
    allowblank        = abap_false.
    showdropdown      = abap_false.
    showinputmessage  = abap_true.
    showerrormessage  = abap_true.
    errortitle        = ''.
    error             = ''.
    prompttitle       = ''.
    prompt            = ''.
* inizialize dimension range
    cell_row     = 1.
    cell_column  = 'A'.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_range IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_RANGE->GET_GUID
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_GUID                        TYPE        ZEXCEL_RANGE_GUID
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_guid.

    ep_guid = me->guid.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_RANGE->GET_VALUE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_VALUE                       TYPE        ZEXCEL_RANGE_VALUE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_value.

    ep_value = me->value.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_RANGE->SET_RANGE_VALUE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        ZEXCEL_RANGE_VALUE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_range_value.
    me->value = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_RANGE->SET_VALUE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_SHEET_NAME                  TYPE        ZEXCEL_SHEET_TITLE
* | [--->] IP_START_ROW                   TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_START_COLUMN                TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [--->] IP_STOP_ROW                    TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_STOP_COLUMN                 TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_value.
    DATA: lv_start_row_c TYPE char7,
          lv_stop_row_c  TYPE char7,
          lv_value       TYPE string.
    lv_stop_row_c = ip_stop_row.
    SHIFT lv_stop_row_c RIGHT DELETING TRAILING space.
    SHIFT lv_stop_row_c LEFT DELETING LEADING space.
    lv_start_row_c = ip_start_row.
    SHIFT lv_start_row_c RIGHT DELETING TRAILING space.
    SHIFT lv_start_row_c LEFT DELETING LEADING space.
    lv_value = ip_sheet_name.
    me->value = zcl_excel_common=>escape_string( ip_value = lv_value ).

    CONCATENATE me->value '!$' ip_start_column '$' lv_start_row_c ':$' ip_stop_column '$' lv_stop_row_c INTO me->value.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_row IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROW->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        INT4 (default =0)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    " Initialise values
    me->row_index    = ip_index.
    me->row_height   = -1.
    me->visible     = abap_true.
    me->outline_level  = 0.
    me->collapsed   = abap_false.

    " set row dimension as unformatted by default
    me->xf_index = 0.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROW->GET_COLLAPSED
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET(optional)
* | [<-()] R_COLLAPSED                    TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_collapsed.

    DATA: lt_row_outlines  TYPE zcl_excel_worksheet=>mty_ts_outlines_row,
          lv_previous_row  TYPE i,
          lv_following_row TYPE i.

    r_collapsed = me->collapsed.

    CHECK r_collapsed = abap_false.  " Maybe new method for outlines is being used
    CHECK io_worksheet IS BOUND.

* If an outline is collapsed ( even inside an outer outline ) the line following the last line
* of the group gets the flag "collapsed"
    IF io_worksheet->zif_excel_sheet_properties~summarybelow = zif_excel_sheet_properties=>c_below_off.
      lv_following_row = me->row_index + 1.
      lt_row_outlines = io_worksheet->get_row_outlines( ).
      READ TABLE lt_row_outlines TRANSPORTING NO FIELDS WITH KEY row_from  = lv_following_row " first line of an outline
                                                                 collapsed = abap_true.       " that is collapsed
    ELSE.
      lv_previous_row = me->row_index - 1.
      lt_row_outlines = io_worksheet->get_row_outlines( ).
      READ TABLE lt_row_outlines TRANSPORTING NO FIELDS WITH KEY row_to    = lv_previous_row  " last line of an outline
                                                                 collapsed = abap_true.       " that is collapsed
    ENDIF.
    CHECK sy-subrc = 0.  " ok - we found it
    r_collapsed = abap_true.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROW->GET_OUTLINE_LEVEL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET(optional)
* | [<-()] R_OUTLINE_LEVEL                TYPE        INT4
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_outline_level.

    DATA: lt_row_outlines TYPE zcl_excel_worksheet=>mty_ts_outlines_row.
    FIELD-SYMBOLS: <ls_row_outline> LIKE LINE OF lt_row_outlines.

* if someone has set the outline level explicitly - just use that
    IF me->outline_level IS NOT INITIAL.
      r_outline_level = me->outline_level.
      RETURN.
    ENDIF.
* Maybe we can use the outline information in the worksheet
    CHECK io_worksheet IS BOUND.

    lt_row_outlines = io_worksheet->get_row_outlines( ).
    LOOP AT lt_row_outlines ASSIGNING <ls_row_outline> WHERE row_from <= me->row_index
                                                         AND row_to   >= me->row_index.

      ADD 1 TO r_outline_level.

    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROW->GET_ROW_HEIGHT
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_ROW_HEIGHT                   TYPE        FLOAT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_row_height.
    r_row_height = me->row_height.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROW->GET_ROW_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_ROW_INDEX                    TYPE        INT4
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_row_index.
    r_row_index = me->row_index.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROW->GET_VISIBLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET(optional)
* | [<-()] R_VISIBLE                      TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_visible.

    DATA: lt_row_outlines TYPE zcl_excel_worksheet=>mty_ts_outlines_row.
    FIELD-SYMBOLS: <ls_row_outline> LIKE LINE OF lt_row_outlines.

    r_visible = me->visible.
    CHECK r_visible = 'X'.        " Currently visible --> but maybe the new outline methodology will hide it implicitly
    CHECK io_worksheet IS BOUND.  " But we have to see the worksheet to make sure

    lt_row_outlines = io_worksheet->get_row_outlines( ).
    LOOP AT lt_row_outlines ASSIGNING <ls_row_outline> WHERE row_from  <= me->row_index
                                                         AND row_to    >= me->row_index
                                                         AND collapsed =  abap_true.      " row is in a collapsed outline --> not visible
      CLEAR r_visible.
      RETURN. " one hit is enough to ensure invisibility

    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROW->GET_XF_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_XF_INDEX                     TYPE        INT4
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_xf_index.
    r_xf_index = me->xf_index.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROW->SET_COLLAPSED
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLLAPSED                   TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_collapsed.
    me->collapsed = ip_collapsed.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROW->SET_OUTLINE_LEVEL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_OUTLINE_LEVEL               TYPE        INT4
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_outline_level.
    IF   ip_outline_level < 0
      OR ip_outline_level > 7.

      zcx_excel=>raise_text( 'Outline level must range between 0 and 7.' ).

    ENDIF.
    me->outline_level = ip_outline_level.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROW->SET_ROW_HEIGHT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_ROW_HEIGHT                  TYPE        SIMPLE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_row_height.
    TRY.
        me->row_height = ip_row_height.
      CATCH cx_sy_conversion_no_number.
        zcx_excel=>raise_text( 'Unable to interpret ip_row_height as number' ).
    ENDTRY.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROW->SET_ROW_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        INT4
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_row_index.
    me->row_index = ip_index.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROW->SET_VISIBLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VISIBLE                     TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_visible.
    me->visible = ip_visible.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROW->SET_XF_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_XF_INDEX                    TYPE        INT4
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_xf_index.
    me->xf_index = ip_xf_index.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_style_font IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_FONT->CALCULATE_TEXT_WIDTH
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TEXT                         TYPE        ZEXCEL_CELL_VALUE
* | [<-()] R_WIDTH                        TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD calculate_text_width.
    " Addition to solve issue #120, contribution by Stefan Schmoecker
    r_width = strlen( i_text ).
    " use scale factor based on default 11
    " ( don't know where defaultsetting is stored currently )
    r_width = r_width * me->size / 11.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_FONT->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    me->color-rgb       = zcl_excel_style_color=>c_black.
    me->color-theme     = zcl_excel_style_color=>c_theme_not_set.
    me->color-indexed   = zcl_excel_style_color=>c_indexed_not_set.
    me->scheme          = zcl_excel_style_font=>c_scheme_minor.
    me->underline_mode  = zcl_excel_style_font=>c_underline_single.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_FONT->GET_STRUCTURE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] ES_FONT                        TYPE        ZEXCEL_S_STYLE_FONT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_structure.

    es_font-bold            = me->bold.
    es_font-italic          = me->italic.
    es_font-underline       = me->underline.
    es_font-underline_mode  = me->underline_mode.
    es_font-strikethrough   = me->strikethrough.
    es_font-size            = me->size.
    es_font-color           = me->color.
    es_font-name            = me->name.
    es_font-family          = me->family.
    es_font-scheme          = me->scheme.

  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_style_fill IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_STYLE_FILL->BUILD_GRADIENT
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD build_gradient.
    CHECK check_filltype_is_gradient( ) EQ abap_true.
    CLEAR gradtype.
    CASE filltype.
      WHEN c_fill_gradient_horizontal90.
        gradtype-degree = '90'.
        gradtype-position1 = '0'.
        gradtype-position2 = '1'.
      WHEN c_fill_gradient_horizontal270.
        gradtype-degree = '270'.
        gradtype-position1 = '0'.
        gradtype-position2 = '1'.
      WHEN c_fill_gradient_horizontalb.
        gradtype-degree = '90'.
        gradtype-position1 = '0'.
        gradtype-position2 = '0.5'.
        gradtype-position3 = '1'.
      WHEN c_fill_gradient_vertical.
        gradtype-position1 = '0'.
        gradtype-position2 = '1'.
      WHEN c_fill_gradient_fromcenter.
        gradtype-type = c_fill_gradient_path.
        gradtype-position1 = '0'.
        gradtype-position2 = '1'.
        gradtype-bottom = '0.5'.
        gradtype-top = '0.5'.
        gradtype-left = '0.5'.
        gradtype-right = '0.5'.
      WHEN c_fill_gradient_diagonal45.
        gradtype-degree = '45'.
        gradtype-position1 = '0'.
        gradtype-position2 = '1'.
      WHEN c_fill_gradient_diagonal45b.
        gradtype-degree = '45'.
        gradtype-position1 = '0'.
        gradtype-position2 = '0.5'.
        gradtype-position3 = '1'.
      WHEN c_fill_gradient_diagonal135.
        gradtype-degree = '135'.
        gradtype-position1 = '0'.
        gradtype-position2 = '1'.
      WHEN c_fill_gradient_diagonal135b.
        gradtype-degree = '135'.
        gradtype-position1 = '0'.
        gradtype-position2 = '0.5'.
        gradtype-position3 = '1'.
      WHEN c_fill_gradient_cornerlt.
        gradtype-type = c_fill_gradient_path.
        gradtype-position1 = '0'.
        gradtype-position2 = '1'.
      WHEN c_fill_gradient_cornerlb.
        gradtype-type = c_fill_gradient_path.
        gradtype-position1 = '0'.
        gradtype-position2 = '1'.
        gradtype-bottom = '1'.
        gradtype-top = '1'.
      WHEN c_fill_gradient_cornerrt.
        gradtype-type = c_fill_gradient_path.
        gradtype-position1 = '0'.
        gradtype-position2 = '1'.
        gradtype-left = '1'.
        gradtype-right = '1'.
      WHEN c_fill_gradient_cornerrb.
        gradtype-type = c_fill_gradient_path.
        gradtype-position1 = '0'.
        gradtype-position2 = '1'.
        gradtype-bottom = '0.5'.
        gradtype-top = '0.5'.
        gradtype-left = '0.5'.
        gradtype-right = '0.5'.
    ENDCASE.

  ENDMETHOD.                    "build_gradient


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_STYLE_FILL->CHECK_FILLTYPE_IS_GRADIENT
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_IS_GRADIENT                 TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_filltype_is_gradient.
    CASE filltype.
      WHEN c_fill_gradient_horizontal90 OR
           c_fill_gradient_horizontal270 OR
           c_fill_gradient_horizontalb OR
           c_fill_gradient_vertical OR
           c_fill_gradient_fromcenter OR
           c_fill_gradient_diagonal45 OR
           c_fill_gradient_diagonal45b OR
           c_fill_gradient_diagonal135 OR
           c_fill_gradient_diagonal135b OR
           c_fill_gradient_cornerlt OR
           c_fill_gradient_cornerlb OR
           c_fill_gradient_cornerrt OR
           c_fill_gradient_cornerrb.
        rv_is_gradient = abap_true.
    ENDCASE.
  ENDMETHOD.                    "check_filltype_is_gradient


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_FILL->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    filltype = zcl_excel_style_fill=>c_fill_none.
    fgcolor-theme     = zcl_excel_style_color=>c_theme_not_set.
    fgcolor-indexed   = zcl_excel_style_color=>c_indexed_not_set.
    bgcolor-theme     = zcl_excel_style_color=>c_theme_not_set.
    bgcolor-indexed   = zcl_excel_style_color=>c_indexed_sys_foreground.
    rotation = 0.

  ENDMETHOD.                    "CONSTRUCTOR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_FILL->GET_STRUCTURE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] ES_FILL                        TYPE        ZEXCEL_S_STYLE_FILL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_structure.
    es_fill-rotation  = me->rotation.
    es_fill-filltype  = me->filltype.
    es_fill-fgcolor   = me->fgcolor.
    es_fill-bgcolor   = me->bgcolor.
    me->build_gradient( ).
    es_fill-gradtype = me->gradtype.
  ENDMETHOD.                    "GET_STRUCTURE
ENDCLASS.

CLASS zcl_excel_style_border IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_BORDER->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    border_style = zcl_excel_style_border=>c_border_none.
    border_color-theme     = zcl_excel_style_color=>c_theme_not_set.
    border_color-indexed   = zcl_excel_style_color=>c_indexed_not_set.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_style_borders IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_BORDERS->GET_STRUCTURE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] ES_FILL                        TYPE        ZEXCEL_S_STYLE_BORDER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_structure.
*initialize colors to 'not set'
    es_fill-left_color-indexed = zcl_excel_style_color=>c_indexed_not_set.
    es_fill-left_color-theme = zcl_excel_style_color=>c_theme_not_set.
    es_fill-right_color-indexed = zcl_excel_style_color=>c_indexed_not_set.
    es_fill-right_color-theme = zcl_excel_style_color=>c_theme_not_set.
    es_fill-top_color-indexed = zcl_excel_style_color=>c_indexed_not_set.
    es_fill-top_color-theme = zcl_excel_style_color=>c_theme_not_set.
    es_fill-bottom_color-indexed = zcl_excel_style_color=>c_indexed_not_set.
    es_fill-bottom_color-theme = zcl_excel_style_color=>c_theme_not_set.
    es_fill-diagonal_color-indexed = zcl_excel_style_color=>c_indexed_not_set.
    es_fill-diagonal_color-theme = zcl_excel_style_color=>c_theme_not_set.

* Check if all borders is set otherwise check single border
    IF me->allborders IS BOUND.
      es_fill-left_color    = me->allborders->border_color.
      es_fill-left_style    = me->allborders->border_style.
      es_fill-right_color   = me->allborders->border_color.
      es_fill-right_style   = me->allborders->border_style.
      es_fill-top_color     = me->allborders->border_color.
      es_fill-top_style     = me->allborders->border_style.
      es_fill-bottom_color  = me->allborders->border_color.
      es_fill-bottom_style  = me->allborders->border_style.
    ELSE.
      IF me->left IS BOUND.
        es_fill-left_color = me->left->border_color.
        es_fill-left_style = me->left->border_style.
      ENDIF.
      IF me->right IS BOUND.
        es_fill-right_color = me->right->border_color.
        es_fill-right_style = me->right->border_style.
      ENDIF.
      IF me->top IS BOUND.
        es_fill-top_color = me->top->border_color.
        es_fill-top_style = me->top->border_style.
      ENDIF.
      IF me->down IS BOUND.
        es_fill-bottom_color = me->down->border_color.
        es_fill-bottom_style = me->down->border_style.
      ENDIF.
    ENDIF.

* Check if diagonal is set
    IF me->diagonal IS BOUND.
      es_fill-diagonal_color = me->diagonal->border_color.
      es_fill-diagonal_style = me->diagonal->border_style.
      CASE me->diagonal_mode.
        WHEN 1.
          es_fill-diagonalup     = 1.
          es_fill-diagonaldown   = 0.
        WHEN 2.
          es_fill-diagonalup     = 0.
          es_fill-diagonaldown   = 1.
        WHEN 3.
          es_fill-diagonalup     = 1.
          es_fill-diagonaldown   = 1.
        WHEN OTHERS.
          es_fill-diagonalup     = 0.
          es_fill-diagonaldown   = 0.
      ENDCASE.
    ENDIF.

  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_style_alignment IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_ALIGNMENT->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    horizontal  = me->c_horizontal_general.
    vertical    = me->c_vertical_bottom.
    wraptext    = abap_false.
    shrinktofit = abap_false.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_ALIGNMENT->GET_STRUCTURE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] ES_ALIGNMENT                   TYPE        ZEXCEL_S_STYLE_ALIGNMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_structure.

    es_alignment-horizontal   = me->horizontal.
    es_alignment-vertical     = me->vertical.
    es_alignment-textrotation = me->textrotation.
    es_alignment-wraptext     = me->wraptext.
    es_alignment-shrinktofit  = me->shrinktofit.
    es_alignment-indent       = me->indent.

  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_style_number_format IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_STYLE_NUMBER_FORMAT=>CLASS_CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD class_constructor.

    DATA: ls_num_format LIKE LINE OF mt_built_in_num_formats.

    DEFINE predefined_format.
      ls_num_format-id                  = &1.
      create object ls_num_format-format.
      ls_num_format-format->format_code = &2.
      insert ls_num_format into table mt_built_in_num_formats.
    END-OF-DEFINITION.

    CLEAR mt_built_in_num_formats.

    predefined_format    '1'        zcl_excel_style_number_format=>c_format_number.               " '0'.
    predefined_format    '2'        zcl_excel_style_number_format=>c_format_number_00.            " '0.00'.
    predefined_format    '3'        zcl_excel_style_number_format=>c_format_number_comma_sep0.    " '#,##0'.
    predefined_format    '4'        zcl_excel_style_number_format=>c_format_number_comma_sep1.    " '#,##0.00'.
    predefined_format    '5'        zcl_excel_style_number_format=>c_format_currency_simple.      " '$#,##0_);($#,##0)'.
    predefined_format    '6'        zcl_excel_style_number_format=>c_format_currency_simple_red.  " '$#,##0_);[Red]($#,##0)'.
    predefined_format    '7'        zcl_excel_style_number_format=>c_format_currency_simple2.     " '$#,##0.00_);($#,##0.00)'.
    predefined_format    '8'        zcl_excel_style_number_format=>c_format_currency_simple_red2. " '$#,##0.00_);[Red]($#,##0.00)'.
    predefined_format    '9'        zcl_excel_style_number_format=>c_format_percentage.           " '0%'.
    predefined_format   '10'        zcl_excel_style_number_format=>c_format_percentage_00.        " '0.00%'.
    predefined_format   '11'        zcl_excel_style_number_format=>c_format_scientific.           " '0.00E+00'.
    predefined_format   '12'        zcl_excel_style_number_format=>c_format_fraction_1.           " '# ?/?'.
    predefined_format   '13'        zcl_excel_style_number_format=>c_format_fraction_2.           " '# ??/??'.
    predefined_format   '14'        zcl_excel_style_number_format=>c_format_date_xlsx14.          "'m/d/yyyy'.  <--  should have been 'mm-dd-yy' like constant in zcl_excel_style_number_format
    predefined_format   '15'        zcl_excel_style_number_format=>c_format_date_xlsx15.          "'d-mmm-yy'.
    predefined_format   '16'        zcl_excel_style_number_format=>c_format_date_xlsx16.          "'d-mmm'.
    predefined_format   '17'        zcl_excel_style_number_format=>c_format_date_xlsx17.          "'mmm-yy'.
    predefined_format   '18'        zcl_excel_style_number_format=>c_format_date_time1.           " 'h:mm AM/PM'.
    predefined_format   '19'        zcl_excel_style_number_format=>c_format_date_time2.           " 'h:mm:ss AM/PM'.
    predefined_format   '20'        zcl_excel_style_number_format=>c_format_date_time3.           " 'h:mm'.
    predefined_format   '21'        zcl_excel_style_number_format=>c_format_date_time4.           " 'h:mm:ss'.
    predefined_format   '22'        zcl_excel_style_number_format=>c_format_date_xlsx22.          " 'm/d/yyyy h:mm'.


    predefined_format   '37'        zcl_excel_style_number_format=>c_format_xlsx37.               " '#,##0_);(#,##0)'.
    predefined_format   '38'        zcl_excel_style_number_format=>c_format_xlsx38.               " '#,##0_);[Red](#,##0)'.
    predefined_format   '39'        zcl_excel_style_number_format=>c_format_xlsx39.               " '#,##0.00_);(#,##0.00)'.
    predefined_format   '40'        zcl_excel_style_number_format=>c_format_xlsx40.               " '#,##0.00_);[Red](#,##0.00)'.
    predefined_format   '41'        zcl_excel_style_number_format=>c_format_xlsx41.               " '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)'.
    predefined_format   '42'        zcl_excel_style_number_format=>c_format_xlsx42.               " '_($* #,##0_);_($* (#,##0);_($* "-"_);_(@_)'.
    predefined_format   '43'        zcl_excel_style_number_format=>c_format_xlsx43.               " '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)'.
    predefined_format   '44'        zcl_excel_style_number_format=>c_format_xlsx44.               " '_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)'.
    predefined_format   '45'        zcl_excel_style_number_format=>c_format_date_xlsx45.          " 'mm:ss'.
    predefined_format   '46'        zcl_excel_style_number_format=>c_format_date_xlsx46.          " '[h]:mm:ss'.
    predefined_format   '47'        zcl_excel_style_number_format=>c_format_date_xlsx47.          "  'mm:ss.0'.
    predefined_format   '48'        zcl_excel_style_number_format=>c_format_special_01.           " '##0.0E+0'.
    predefined_format   '49'        zcl_excel_style_number_format=>c_format_text.                 " '@'.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_NUMBER_FORMAT->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    format_code = me->c_format_general.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_NUMBER_FORMAT->GET_STRUCTURE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_NUMBER_FORMAT               TYPE        ZEXCEL_S_STYLE_NUMFMT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_structure.
    ep_number_format-numfmt = me->format_code.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_style_protection IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_PROTECTION->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    locked = me->c_protection_locked.
    hidden = me->c_protection_unhidden.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE_PROTECTION->GET_STRUCTURE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_PROTECTION                  TYPE        ZEXCEL_S_STYLE_PROTECTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_structure.
    ep_protection-locked = me->locked.
    ep_protection-hidden = me->hidden.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_style IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_GUID                        TYPE        ZEXCEL_CELL_STYLE(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.


    CREATE OBJECT font.
    CREATE OBJECT fill.
    CREATE OBJECT borders.
    CREATE OBJECT alignment.
    CREATE OBJECT number_format.
    CREATE OBJECT protection.

    IF ip_guid IS NOT INITIAL.
      me->guid = ip_guid.
    ELSE.
      me->guid = zcl_excel_obsolete_func_wrap=>guid_create( ).
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLE->GET_GUID
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_GUID                        TYPE        ZEXCEL_CELL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_guid.


    ep_guid = me->guid.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_columns IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMNS->ADD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_COLUMN                      TYPE REF TO ZCL_EXCEL_COLUMN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add.
    DATA: ls_hashed_column TYPE mty_s_hashed_column.

    ls_hashed_column-column_index = io_column->get_column_index( ).
    ls_hashed_column-column = io_column.

    INSERT ls_hashed_column INTO TABLE columns_hasehd .

    columns->add( io_column ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMNS->CLEAR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD clear.
    CLEAR columns_hasehd.
    columns->clear( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMNS->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.

    CREATE OBJECT columns.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMNS->GET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        I
* | [<-()] EO_COLUMN                      TYPE REF TO ZCL_EXCEL_COLUMN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get.
    FIELD-SYMBOLS: <ls_hashed_column> TYPE mty_s_hashed_column.

    READ TABLE columns_hasehd WITH KEY column_index = ip_index ASSIGNING <ls_hashed_column>.
    IF sy-subrc = 0.
      eo_column = <ls_hashed_column>-column.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMNS->GET_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_iterator.
    eo_iterator ?= columns->if_object_collection~get_iterator( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMNS->IS_EMPTY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] IS_EMPTY                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_empty.
    is_empty = columns->if_object_collection~is_empty( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMNS->REMOVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_COLUMN                      TYPE REF TO ZCL_EXCEL_COLUMN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD remove.
    DATA column_index TYPE int4.
    column_index = io_column->get_column_index( ) .
    DELETE TABLE columns_hasehd WITH TABLE KEY column_index = column_index.
    columns->remove( io_column ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COLUMNS->SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_SIZE                        TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD size.
    ep_size = columns->if_object_collection~size( ).
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_comments IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENTS->ADD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COMMENT                     TYPE REF TO ZCL_EXCEL_COMMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add.
    DATA: lv_index TYPE i.

    comments->add( ip_comment ).
    lv_index = comments->if_object_collection~size( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENTS->CLEAR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD clear.
    comments->clear( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENTS->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    CREATE OBJECT comments.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENTS->GET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        ZEXCEL_ACTIVE_WORKSHEET
* | [<-()] EO_COMMENT                     TYPE REF TO ZCL_EXCEL_COMMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get.
    DATA lv_index TYPE i.
    lv_index = ip_index.
    eo_comment ?= comments->if_object_collection~get( lv_index ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENTS->GET_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_iterator.

    eo_iterator ?= comments->if_object_collection~get_iterator( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENTS->INCLUDE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COMMENT                     TYPE REF TO ZCL_EXCEL_COMMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD include.
    comments->add( ip_comment ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENTS->IS_EMPTY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] IS_EMPTY                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_empty.

    is_empty = comments->if_object_collection~is_empty( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENTS->REMOVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COMMENT                     TYPE REF TO ZCL_EXCEL_COMMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD remove.

    comments->remove( ip_comment ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_COMMENTS->SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_SIZE                        TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD size.

    ep_size = comments->if_object_collection~size( ).
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_graph IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    "Load default values
    me->pagemargins-b = '0.75'.
    me->pagemargins-l = '0.7'.
    me->pagemargins-r = '0.7'.
    me->pagemargins-t = '0.75'.
    me->pagemargins-header = '0.3'.
    me->pagemargins-footer = '0.3'.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH->CREATE_SERIE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_IDX                         TYPE        I(optional)
* | [--->] IP_ORDER                       TYPE        I
* | [--->] IP_INVERTIFNEGATIVE            TYPE        STRING(optional)
* | [--->] IP_SYMBOL                      TYPE        STRING(optional)
* | [--->] IP_SMOOTH                      TYPE        C(optional)
* | [--->] IP_LBL_FROM_COL                TYPE        ZEXCEL_CELL_COLUMN_ALPHA(optional)
* | [--->] IP_LBL_FROM_ROW                TYPE        ZEXCEL_CELL_ROW(optional)
* | [--->] IP_LBL_TO_COL                  TYPE        ZEXCEL_CELL_COLUMN_ALPHA(optional)
* | [--->] IP_LBL_TO_ROW                  TYPE        ZEXCEL_CELL_ROW(optional)
* | [--->] IP_LBL                         TYPE        STRING(optional)
* | [--->] IP_REF_FROM_COL                TYPE        ZEXCEL_CELL_COLUMN_ALPHA(optional)
* | [--->] IP_REF_FROM_ROW                TYPE        ZEXCEL_CELL_ROW(optional)
* | [--->] IP_REF_TO_COL                  TYPE        ZEXCEL_CELL_COLUMN_ALPHA(optional)
* | [--->] IP_REF_TO_ROW                  TYPE        ZEXCEL_CELL_ROW(optional)
* | [--->] IP_REF                         TYPE        STRING(optional)
* | [--->] IP_SERNAME                     TYPE        STRING
* | [--->] IP_SHEET                       TYPE        ZEXCEL_SHEET_TITLE(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_serie.
    DATA ls_serie TYPE s_series.

    DATA: lv_start_row_c TYPE char7,
          lv_stop_row_c  TYPE char7.


    IF ip_lbl IS NOT SUPPLIED.
      lv_stop_row_c = ip_lbl_to_row.
      SHIFT lv_stop_row_c RIGHT DELETING TRAILING space.
      SHIFT lv_stop_row_c LEFT DELETING LEADING space.
      lv_start_row_c = ip_lbl_from_row.
      SHIFT lv_start_row_c RIGHT DELETING TRAILING space.
      SHIFT lv_start_row_c LEFT DELETING LEADING space.
      ls_serie-lbl = ip_sheet.
      ls_serie-lbl = zcl_excel_common=>escape_string( ip_value = ls_serie-lbl ).
      CONCATENATE ls_serie-lbl '!$' ip_lbl_from_col '$' lv_start_row_c ':$' ip_lbl_to_col '$' lv_stop_row_c INTO ls_serie-lbl.
      CLEAR: lv_start_row_c, lv_stop_row_c.
    ELSE.
      ls_serie-lbl = ip_lbl.
    ENDIF.
    IF ip_ref IS NOT SUPPLIED.
      lv_stop_row_c = ip_ref_to_row.
      SHIFT lv_stop_row_c RIGHT DELETING TRAILING space.
      SHIFT lv_stop_row_c LEFT DELETING LEADING space.
      lv_start_row_c = ip_ref_from_row.
      SHIFT lv_start_row_c RIGHT DELETING TRAILING space.
      SHIFT lv_start_row_c LEFT DELETING LEADING space.
      ls_serie-ref = ip_sheet.
      ls_serie-ref = zcl_excel_common=>escape_string( ip_value = ls_serie-ref ).
      CONCATENATE ls_serie-ref '!$' ip_ref_from_col '$' lv_start_row_c ':$' ip_ref_to_col '$' lv_stop_row_c INTO ls_serie-ref.
      CLEAR: lv_start_row_c, lv_stop_row_c.
    ELSE.
      ls_serie-ref = ip_ref.
    ENDIF.
    ls_serie-idx = ip_idx.
    ls_serie-order = ip_order.
    ls_serie-invertifnegative = ip_invertifnegative.
    ls_serie-symbol = ip_symbol.
    ls_serie-smooth = ip_smooth.
    ls_serie-sername = ip_sername.
    APPEND ls_serie TO me->series.
    SORT me->series BY order ASCENDING.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH->SET_PRINT_LBL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_print_lbl.
    me->print_label = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH->SET_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_STYLE                       TYPE        S_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_style.
    me->ns_c14styleval = ip_style-c14style.
    CONDENSE me->ns_c14styleval NO-GAPS.
    me->ns_styleval = ip_style-cstyle.
    CONDENSE me->ns_styleval NO-GAPS.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH->SET_TITLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_title.
    me->title = ip_value.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_drawing IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_TYPE                        TYPE        ZEXCEL_DRAWING_TYPE (default =ZCL_EXCEL_DRAWING=>TYPE_IMAGE)
* | [--->] IP_TITLE                       TYPE        CLIKE(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.

*  CALL FUNCTION 'GUID_CREATE'                                  " del issue #379 - function is outdated in newer releases
*    IMPORTING
*      ev_guid_16 = me->guid.
    me->guid = zcl_excel_obsolete_func_wrap=>guid_create( ).      " ins issue #379 - replacement for outdated function call

    IF ip_title IS NOT INITIAL.
      title = ip_title.
    ELSE.
      title = me->guid.
    ENDIF.

    me->type = ip_type.

* inizialize dimension range
    anchor = anchor_one_cell.
    from_loc-col = 1.
    from_loc-row = 1.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->CREATE_MEDIA_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_media_name.

* if media name is initial, create unique name
    CHECK media_name IS INITIAL.

    index = ip_index.
    CONCATENATE me->type index INTO media_name.
    CONDENSE media_name NO-GAPS.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_DRAWING=>EMU2PIXEL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_EMU                         TYPE        INT4
* | [--->] IP_DPI                         TYPE        INT2(optional)
* | [<-()] R_PIXEL                        TYPE        INT4
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD emu2pixel.
* suppose 96 DPI
    IF ip_dpi IS SUPPLIED.
*    r_emu = ip_pixel  * 914400 / ip_dpi.
      r_pixel = ip_emu * ip_dpi / 914400.
    ELSE.
* suppose 96 DPI
*    r_emu = ip_pixel  * 914400 / 96.
      r_pixel = ip_emu * 96 / 914400.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->GET_FROM_COL
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_FROM_COL                     TYPE        ZEXCEL_CELL_COLUMN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_from_col.
    r_from_col = me->from_loc-col.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->GET_FROM_ROW
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_FROM_ROW                     TYPE        ZEXCEL_CELL_ROW
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_from_row.
    r_from_row = me->from_loc-row.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->GET_GUID
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_GUID                        TYPE        GUID_16
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_guid.

    ep_guid = me->guid.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->GET_HEIGHT_EMU_STR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_HEIGHT                       TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_height_emu_str.
    r_height = pixel2emu( size-height ).
    CONDENSE r_height NO-GAPS.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->GET_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RP_INDEX                       TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_index.
    rp_index = me->index.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->GET_MEDIA
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_MEDIA                        TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_media.

    DATA: lv_language TYPE sylangu.
    DATA: lt_bin_mime TYPE sdokcntbins.
    DATA: lt_mime          TYPE tsfmime,
          lv_filesize      TYPE i,
          lv_filesizec(10).

    CASE media_source.
      WHEN c_media_source_xstring.
        r_media = media.
      WHEN c_media_source_www.
        CALL FUNCTION 'WWWDATA_IMPORT'
          EXPORTING
            key    = media_key_www
          TABLES
            mime   = lt_mime
          EXCEPTIONS
            OTHERS = 1.

        CALL FUNCTION 'WWWPARAMS_READ'
          EXPORTING
            relid = media_key_www-relid
            objid = media_key_www-objid
            name  = 'filesize'
          IMPORTING
            value = lv_filesizec.

        lv_filesize = lv_filesizec.
        CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
          EXPORTING
            input_length = lv_filesize
          IMPORTING
            buffer       = r_media
          TABLES
            binary_tab   = lt_mime
          EXCEPTIONS
            failed       = 1
            OTHERS       = 2.
      WHEN c_media_source_mime.
        lv_language = sy-langu.
        cl_wb_mime_repository=>load_mime( EXPORTING
                                            io        = me->io
                                          IMPORTING
                                            filesize  = lv_filesize
                                            bin_data  = lt_bin_mime
                                          CHANGING
                                            language  = lv_language ).

        CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
          EXPORTING
            input_length = lv_filesize
          IMPORTING
            buffer       = r_media
          TABLES
            binary_tab   = lt_bin_mime
          EXCEPTIONS
            failed       = 1
            OTHERS       = 2.
    ENDCASE.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->GET_MEDIA_NAME
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_NAME                         TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_media_name.
    CONCATENATE media_name  `.` media_type INTO r_name.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->GET_MEDIA_TYPE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_TYPE                         TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_media_type.
    r_type = media_type.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->GET_NAME
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_NAME                         TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_name.
    r_name = title.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->GET_POSITION
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RP_POSITION                    TYPE        ZEXCEL_DRAWING_POSITION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_position.
    rp_position-anchor = anchor.
    rp_position-from = from_loc.
    rp_position-to = to_loc.
    rp_position-size = size.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->GET_TO_COL
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_TO_COL                       TYPE        ZEXCEL_CELL_COLUMN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_to_col.
    r_to_col = me->to_loc-col.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->GET_TO_ROW
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_TO_ROW                       TYPE        ZEXCEL_CELL_ROW
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_to_row.
    r_to_row = me->to_loc-row.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->GET_TYPE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RP_TYPE                        TYPE        ZEXCEL_DRAWING_TYPE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_type.
    rp_type = me->type.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->GET_WIDTH_EMU_STR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_WIDTH                        TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_width_emu_str.
    r_width = pixel2emu( size-width ).
    CONDENSE r_width NO-GAPS.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->LOAD_CHART_ATTRIBUTES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_CHART                       TYPE REF TO IF_IXML_DOCUMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_chart_attributes.
    DATA: node                TYPE REF TO if_ixml_element.
    DATA: node2               TYPE REF TO if_ixml_element.
    DATA: node3               TYPE REF TO if_ixml_element.
    DATA: node4               TYPE REF TO if_ixml_element.

    DATA lo_barchart TYPE REF TO zcl_excel_graph_bars.
    DATA lo_piechart TYPE REF TO zcl_excel_graph_pie.
    DATA lo_linechart TYPE REF TO zcl_excel_graph_line.

    TYPES: BEGIN OF t_prop,
             val          TYPE string,
             rtl          TYPE string,
             lang         TYPE string,
             formatcode   TYPE string,
             sourcelinked TYPE string,
           END OF t_prop.

    TYPES: BEGIN OF t_pagemargins,
             b      TYPE string,
             l      TYPE string,
             r      TYPE string,
             t      TYPE string,
             header TYPE string,
             footer TYPE string,
           END OF t_pagemargins.

    DATA ls_prop TYPE t_prop.
    DATA ls_pagemargins TYPE t_pagemargins.

    DATA lo_collection TYPE REF TO if_ixml_node_collection.
    DATA lo_node       TYPE REF TO if_ixml_node.
    DATA lo_iterator   TYPE REF TO if_ixml_node_iterator.
    DATA lv_idx        TYPE i.
    DATA lv_order      TYPE i.
    DATA lv_invertifnegative      TYPE string.
    DATA lv_symbol      TYPE string.
    DATA lv_smooth      TYPE c.
    DATA lv_sername    TYPE string.
    DATA lv_label      TYPE string.
    DATA lv_value      TYPE string.
    DATA lv_axid       TYPE string.
    DATA lv_orientation TYPE string.
    DATA lv_delete TYPE string.
    DATA lv_axpos TYPE string.
    DATA lv_formatcode TYPE string.
    DATA lv_sourcelinked TYPE string.
    DATA lv_majortickmark TYPE string.
    DATA lv_minortickmark TYPE string.
    DATA lv_ticklblpos TYPE string.
    DATA lv_crossax TYPE string.
    DATA lv_crosses TYPE string.
    DATA lv_auto TYPE string.
    DATA lv_lblalgn TYPE string.
    DATA lv_lbloffset TYPE string.
    DATA lv_nomultilvllbl TYPE string.
    DATA lv_crossbetween TYPE string.

    node ?= ip_chart->if_ixml_node~get_first_child( ).
    CHECK node IS NOT INITIAL.

    CASE me->graph_type.
      WHEN c_graph_bars.
        CREATE OBJECT lo_barchart.
        me->graph = lo_barchart.
      WHEN c_graph_pie.
        CREATE OBJECT lo_piechart.
        me->graph = lo_piechart.
      WHEN c_graph_line.
        CREATE OBJECT lo_linechart.
        me->graph = lo_linechart.
      WHEN OTHERS.
    ENDCASE.

    "Fill properties
    node2 ?= node->find_from_name( name = 'date1904' namespace = 'c' ).
    zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
    me->graph->ns_1904val = ls_prop-val.
    node2 ?= node->find_from_name( name = 'lang' namespace = 'c' ).
    zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
    me->graph->ns_langval = ls_prop-val.
    node2 ?= node->find_from_name( name = 'roundedCorners' namespace = 'c' ).
    zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
    me->graph->ns_roundedcornersval = ls_prop-val.

    "style
    node2 ?= node->find_from_name( name = 'style' namespace = 'c14' ).
    zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
    me->graph->ns_c14styleval = ls_prop-val.
    node2 ?= node->find_from_name( name = 'style' namespace = 'c' ).
    zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
    me->graph->ns_styleval = ls_prop-val.
    "---------------------------Read graph properties
    "ADDED
    CLEAR node2.
    node2 ?= node->find_from_name( name = 'title' namespace = 'c' ).
    IF node2 IS BOUND AND node2 IS NOT INITIAL.
      node3 ?= node2->find_from_name( name = 't' namespace = 'a' ).
      me->graph->title = node3->get_value( ).
    ENDIF.
    "END

    node2 ?= node->find_from_name( name = 'autoTitleDeleted' namespace = 'c' ).
    zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
    me->graph->ns_autotitledeletedval = ls_prop-val.

    "plotArea
    CASE me->graph_type.
      WHEN c_graph_bars.
        node2 ?= node->find_from_name( name = 'barDir' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_barchart->ns_bardirval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'grouping' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_barchart->ns_groupingval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'varyColors' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_barchart->ns_varycolorsval = ls_prop-val.

        "Load series
        CALL METHOD node->get_elements_by_tag_name
          EXPORTING
*           depth     = 0
            name = 'ser'
*           namespace = ''
          RECEIVING
            rval = lo_collection.
        CALL METHOD lo_collection->create_iterator
          RECEIVING
            rval = lo_iterator.
        lo_node = lo_iterator->get_next( ).
        IF lo_node IS BOUND.
          node2 ?= lo_node->query_interface( ixml_iid_element ).
        ENDIF.
        WHILE lo_node IS BOUND.
          node3 ?= node2->find_from_name( name = 'idx' namespace = 'c' ).
          zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
          lv_idx = ls_prop-val.
          node3 ?= node2->find_from_name( name = 'order' namespace = 'c' ).
          zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
          lv_order = ls_prop-val.
          node3 ?= node2->find_from_name( name = 'invertIfNegative' namespace = 'c' ).
          zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
          lv_invertifnegative = ls_prop-val.
          node3 ?= node2->find_from_name( name = 'v' namespace = 'c' ).
          IF node3 IS BOUND.
            lv_sername = node3->get_value( ).
          ENDIF.
          node3 ?= node2->find_from_name( name = 'strRef' namespace = 'c' ).
          IF node3 IS BOUND.
            node4 ?= node3->find_from_name( name = 'f' namespace = 'c' ).
            lv_label = node4->get_value( ).
          ENDIF.
          node3 ?= node2->find_from_name( name = 'numRef' namespace = 'c' ).
          IF node3 IS BOUND.
            node4 ?= node3->find_from_name( name = 'f' namespace = 'c' ).
            lv_value = node4->get_value( ).
          ENDIF.
          CALL METHOD lo_barchart->create_serie
            EXPORTING
              ip_idx              = lv_idx
              ip_order            = lv_order
              ip_invertifnegative = lv_invertifnegative
              ip_lbl              = lv_label
              ip_ref              = lv_value
              ip_sername          = lv_sername.
          lo_node = lo_iterator->get_next( ).
          IF lo_node IS BOUND.
            node2 ?= lo_node->query_interface( ixml_iid_element ).
          ENDIF.
        ENDWHILE.
        "note: numCache avoided
        node2 ?= node->find_from_name( name = 'showLegendKey' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_barchart->ns_showlegendkeyval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showVal' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_barchart->ns_showvalval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showCatName' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_barchart->ns_showcatnameval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showSerName' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_barchart->ns_showsernameval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showPercent' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_barchart->ns_showpercentval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showBubbleSize' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_barchart->ns_showbubblesizeval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'gapWidth' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_barchart->ns_gapwidthval = ls_prop-val.

        "Load axes
        node2 ?= node->find_from_name( name = 'barChart' namespace = 'c' ).
        CALL METHOD node2->get_elements_by_tag_name
          EXPORTING
*           depth     = 0
            name = 'axId'
*           namespace = ''
          RECEIVING
            rval = lo_collection.
        CALL METHOD lo_collection->create_iterator
          RECEIVING
            rval = lo_iterator.
        lo_node = lo_iterator->get_next( ).
        IF lo_node IS BOUND.
          node2 ?= lo_node->query_interface( ixml_iid_element ).
        ENDIF.
        WHILE lo_node IS BOUND.
          zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
          lv_axid = ls_prop-val.
          IF sy-index EQ 1. "catAx
            node2 ?= node->find_from_name( name = 'catAx' namespace = 'c' ).
            node3 ?= node2->find_from_name( name = 'orientation' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_orientation = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'delete' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_delete = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'axPos' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_axpos = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'numFmt' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_formatcode = ls_prop-formatcode.
            lv_sourcelinked = ls_prop-sourcelinked.
            node3 ?= node2->find_from_name( name = 'majorTickMark' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_majortickmark = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'majorTickMark' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_minortickmark = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'tickLblPos' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_ticklblpos = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'crossAx' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_crossax = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'crosses' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_crosses = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'auto' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_auto = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'lblAlgn' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_lblalgn = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'lblOffset' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_lbloffset = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'noMultiLvlLbl' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_nomultilvllbl = ls_prop-val.
            CALL METHOD lo_barchart->create_ax
              EXPORTING
                ip_axid          = lv_axid
                ip_type          = zcl_excel_graph_bars=>c_catax
                ip_orientation   = lv_orientation
                ip_delete        = lv_delete
                ip_axpos         = lv_axpos
                ip_formatcode    = lv_formatcode
                ip_sourcelinked  = lv_sourcelinked
                ip_majortickmark = lv_majortickmark
                ip_minortickmark = lv_minortickmark
                ip_ticklblpos    = lv_ticklblpos
                ip_crossax       = lv_crossax
                ip_crosses       = lv_crosses
                ip_auto          = lv_auto
                ip_lblalgn       = lv_lblalgn
                ip_lbloffset     = lv_lbloffset
                ip_nomultilvllbl = lv_nomultilvllbl.
          ELSEIF sy-index EQ 2. "valAx
            node2 ?= node->find_from_name( name = 'valAx' namespace = 'c' ).
            node3 ?= node2->find_from_name( name = 'orientation' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_orientation = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'delete' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_delete = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'axPos' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_axpos = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'numFmt' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_formatcode = ls_prop-formatcode.
            lv_sourcelinked = ls_prop-sourcelinked.
            node3 ?= node2->find_from_name( name = 'majorTickMark' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_majortickmark = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'majorTickMark' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_minortickmark = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'tickLblPos' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_ticklblpos = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'crossAx' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_crossax = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'crosses' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_crosses = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'crossBetween' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_crossbetween = ls_prop-val.
            CALL METHOD lo_barchart->create_ax
              EXPORTING
                ip_axid          = lv_axid
                ip_type          = zcl_excel_graph_bars=>c_valax
                ip_orientation   = lv_orientation
                ip_delete        = lv_delete
                ip_axpos         = lv_axpos
                ip_formatcode    = lv_formatcode
                ip_sourcelinked  = lv_sourcelinked
                ip_majortickmark = lv_majortickmark
                ip_minortickmark = lv_minortickmark
                ip_ticklblpos    = lv_ticklblpos
                ip_crossax       = lv_crossax
                ip_crosses       = lv_crosses
                ip_crossbetween  = lv_crossbetween.
          ENDIF.
          lo_node = lo_iterator->get_next( ).
          IF lo_node IS BOUND.
            node2 ?= lo_node->query_interface( ixml_iid_element ).
          ENDIF.
        ENDWHILE.

      WHEN c_graph_pie.
        node2 ?= node->find_from_name( name = 'varyColors' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_piechart->ns_varycolorsval = ls_prop-val.

        "Load series
        CALL METHOD node->get_elements_by_tag_name
          EXPORTING
*           depth     = 0
            name = 'ser'
*           namespace = ''
          RECEIVING
            rval = lo_collection.
        CALL METHOD lo_collection->create_iterator
          RECEIVING
            rval = lo_iterator.
        lo_node = lo_iterator->get_next( ).
        IF lo_node IS BOUND.
          node2 ?= lo_node->query_interface( ixml_iid_element ).
        ENDIF.
        WHILE lo_node IS BOUND.
          node3 ?= node2->find_from_name( name = 'idx' namespace = 'c' ).
          zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
          lv_idx = ls_prop-val.
          node3 ?= node2->find_from_name( name = 'order' namespace = 'c' ).
          zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
          lv_order = ls_prop-val.
          node3 ?= node2->find_from_name( name = 'v' namespace = 'c' ).
          IF node3 IS BOUND.
            lv_sername = node3->get_value( ).
          ENDIF.
          node3 ?= node2->find_from_name( name = 'strRef' namespace = 'c' ).
          IF node3 IS BOUND.
            node4 ?= node3->find_from_name( name = 'f' namespace = 'c' ).
            lv_label = node4->get_value( ).
          ENDIF.
          node3 ?= node2->find_from_name( name = 'numRef' namespace = 'c' ).
          IF node3 IS BOUND.
            node4 ?= node3->find_from_name( name = 'f' namespace = 'c' ).
            lv_value = node4->get_value( ).
          ENDIF.
          CALL METHOD lo_piechart->create_serie
            EXPORTING
              ip_idx     = lv_idx
              ip_order   = lv_order
              ip_lbl     = lv_label
              ip_ref     = lv_value
              ip_sername = lv_sername.
          lo_node = lo_iterator->get_next( ).
          IF lo_node IS BOUND.
            node2 ?= lo_node->query_interface( ixml_iid_element ).
          ENDIF.
        ENDWHILE.

        "note: numCache avoided
        node2 ?= node->find_from_name( name = 'showLegendKey' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_piechart->ns_showlegendkeyval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showVal' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_piechart->ns_showvalval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showCatName' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_piechart->ns_showcatnameval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showSerName' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_piechart->ns_showsernameval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showPercent' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_piechart->ns_showpercentval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showBubbleSize' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_piechart->ns_showbubblesizeval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showLeaderLines' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_piechart->ns_showleaderlinesval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'firstSliceAng' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_piechart->ns_firstsliceangval = ls_prop-val.
      WHEN c_graph_line.
        node2 ?= node->find_from_name( name = 'grouping' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_linechart->ns_groupingval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'varyColors' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_linechart->ns_varycolorsval = ls_prop-val.

        "Load series
        CALL METHOD node->get_elements_by_tag_name
          EXPORTING
*           depth     = 0
            name = 'ser'
*           namespace = ''
          RECEIVING
            rval = lo_collection.
        CALL METHOD lo_collection->create_iterator
          RECEIVING
            rval = lo_iterator.
        lo_node = lo_iterator->get_next( ).
        IF lo_node IS BOUND.
          node2 ?= lo_node->query_interface( ixml_iid_element ).
        ENDIF.
        WHILE lo_node IS BOUND.
          node3 ?= node2->find_from_name( name = 'idx' namespace = 'c' ).
          zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
          lv_idx = ls_prop-val.
          node3 ?= node2->find_from_name( name = 'order' namespace = 'c' ).
          zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
          lv_order = ls_prop-val.
          node3 ?= node2->find_from_name( name = 'symbol' namespace = 'c' ).
          zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
          lv_symbol = ls_prop-val.
          node3 ?= node2->find_from_name( name = 'smooth' namespace = 'c' ).
          zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
          lv_smooth = ls_prop-val.
          node3 ?= node2->find_from_name( name = 'v' namespace = 'c' ).
          IF node3 IS BOUND.
            lv_sername = node3->get_value( ).
          ENDIF.
          node3 ?= node2->find_from_name( name = 'strRef' namespace = 'c' ).
          IF node3 IS BOUND.
            node4 ?= node3->find_from_name( name = 'f' namespace = 'c' ).
            lv_label = node4->get_value( ).
          ENDIF.
          node3 ?= node2->find_from_name( name = 'numRef' namespace = 'c' ).
          IF node3 IS BOUND.
            node4 ?= node3->find_from_name( name = 'f' namespace = 'c' ).
            lv_value = node4->get_value( ).
          ENDIF.
          CALL METHOD lo_linechart->create_serie
            EXPORTING
              ip_idx     = lv_idx
              ip_order   = lv_order
              ip_symbol  = lv_symbol
              ip_smooth  = lv_smooth
              ip_lbl     = lv_label
              ip_ref     = lv_value
              ip_sername = lv_sername.
          lo_node = lo_iterator->get_next( ).
          IF lo_node IS BOUND.
            node2 ?= lo_node->query_interface( ixml_iid_element ).
          ENDIF.
        ENDWHILE.
        "note: numCache avoided
        node2 ?= node->find_from_name( name = 'showLegendKey' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_linechart->ns_showlegendkeyval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showVal' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_linechart->ns_showvalval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showCatName' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_linechart->ns_showcatnameval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showSerName' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_linechart->ns_showsernameval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showPercent' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_linechart->ns_showpercentval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'showBubbleSize' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_linechart->ns_showbubblesizeval = ls_prop-val.

        node ?= node->find_from_name( name = 'lineChart' namespace = 'c' ).
        node2 ?= node->find_from_name( name = 'marker' namespace = 'c' depth = '1' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_linechart->ns_markerval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'smooth' namespace = 'c' depth = '1' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_linechart->ns_smoothval = ls_prop-val.
        node ?= ip_chart->if_ixml_node~get_first_child( ).
        CHECK node IS NOT INITIAL.

        "Load axes
        node2 ?= node->find_from_name( name = 'lineChart' namespace = 'c' ).
        CALL METHOD node2->get_elements_by_tag_name
          EXPORTING
*           depth     = 0
            name = 'axId'
*           namespace = ''
          RECEIVING
            rval = lo_collection.
        CALL METHOD lo_collection->create_iterator
          RECEIVING
            rval = lo_iterator.
        lo_node = lo_iterator->get_next( ).
        IF lo_node IS BOUND.
          node2 ?= lo_node->query_interface( ixml_iid_element ).
        ENDIF.
        WHILE lo_node IS BOUND.
          zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
          lv_axid = ls_prop-val.
          IF sy-index EQ 1. "catAx
            node2 ?= node->find_from_name( name = 'catAx' namespace = 'c' ).
            node3 ?= node2->find_from_name( name = 'orientation' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_orientation = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'delete' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_delete = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'axPos' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_axpos = ls_prop-val.
*          node3 ?= node2->find_from_name( name = 'numFmt' namespace = 'c' ).
*          zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
*          lv_formatcode = ls_prop-formatcode.
*          lv_sourcelinked = ls_prop-sourcelinked.
            node3 ?= node2->find_from_name( name = 'majorTickMark' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_majortickmark = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'majorTickMark' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_minortickmark = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'tickLblPos' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_ticklblpos = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'crossAx' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_crossax = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'crosses' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_crosses = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'auto' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_auto = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'lblAlgn' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_lblalgn = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'lblOffset' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_lbloffset = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'noMultiLvlLbl' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_nomultilvllbl = ls_prop-val.
            CALL METHOD lo_linechart->create_ax
              EXPORTING
                ip_axid          = lv_axid
                ip_type          = zcl_excel_graph_line=>c_catax
                ip_orientation   = lv_orientation
                ip_delete        = lv_delete
                ip_axpos         = lv_axpos
                ip_formatcode    = lv_formatcode
                ip_sourcelinked  = lv_sourcelinked
                ip_majortickmark = lv_majortickmark
                ip_minortickmark = lv_minortickmark
                ip_ticklblpos    = lv_ticklblpos
                ip_crossax       = lv_crossax
                ip_crosses       = lv_crosses
                ip_auto          = lv_auto
                ip_lblalgn       = lv_lblalgn
                ip_lbloffset     = lv_lbloffset
                ip_nomultilvllbl = lv_nomultilvllbl.
          ELSEIF sy-index EQ 2. "valAx
            node2 ?= node->find_from_name( name = 'valAx' namespace = 'c' ).
            node3 ?= node2->find_from_name( name = 'orientation' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_orientation = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'delete' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_delete = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'axPos' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_axpos = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'numFmt' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_formatcode = ls_prop-formatcode.
            lv_sourcelinked = ls_prop-sourcelinked.
            node3 ?= node2->find_from_name( name = 'majorTickMark' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_majortickmark = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'majorTickMark' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_minortickmark = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'tickLblPos' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_ticklblpos = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'crossAx' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_crossax = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'crosses' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_crosses = ls_prop-val.
            node3 ?= node2->find_from_name( name = 'crossBetween' namespace = 'c' ).
            zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = ls_prop ).
            lv_crossbetween = ls_prop-val.
            CALL METHOD lo_linechart->create_ax
              EXPORTING
                ip_axid          = lv_axid
                ip_type          = zcl_excel_graph_line=>c_valax
                ip_orientation   = lv_orientation
                ip_delete        = lv_delete
                ip_axpos         = lv_axpos
                ip_formatcode    = lv_formatcode
                ip_sourcelinked  = lv_sourcelinked
                ip_majortickmark = lv_majortickmark
                ip_minortickmark = lv_minortickmark
                ip_ticklblpos    = lv_ticklblpos
                ip_crossax       = lv_crossax
                ip_crosses       = lv_crosses
                ip_crossbetween  = lv_crossbetween.
          ENDIF.
          lo_node = lo_iterator->get_next( ).
          IF lo_node IS BOUND.
            node2 ?= lo_node->query_interface( ixml_iid_element ).
          ENDIF.
        ENDWHILE.
      WHEN OTHERS.
    ENDCASE.

    "legend
    CASE me->graph_type.
      WHEN c_graph_bars.
        node2 ?= node->find_from_name( name = 'legendPos' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_barchart->ns_legendposval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'overlay' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_barchart->ns_overlayval = ls_prop-val.
      WHEN c_graph_line.
        node2 ?= node->find_from_name( name = 'legendPos' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_linechart->ns_legendposval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'overlay' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_linechart->ns_overlayval = ls_prop-val.
      WHEN c_graph_pie.
        node2 ?= node->find_from_name( name = 'legendPos' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_piechart->ns_legendposval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'overlay' namespace = 'c' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_piechart->ns_overlayval = ls_prop-val.
        node2 ?= node->find_from_name( name = 'pPr' namespace = 'a' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_piechart->ns_pprrtl = ls_prop-rtl.
        node2 ?= node->find_from_name( name = 'endParaRPr' namespace = 'a' ).
        zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
        lo_piechart->ns_endpararprlang = ls_prop-lang.

      WHEN OTHERS.
    ENDCASE.

    node2 ?= node->find_from_name( name = 'plotVisOnly' namespace = 'c' ).
    zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
    me->graph->ns_plotvisonlyval = ls_prop-val.
    node2 ?= node->find_from_name( name = 'dispBlanksAs' namespace = 'c' ).
    zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
    me->graph->ns_dispblanksasval = ls_prop-val.
    node2 ?= node->find_from_name( name = 'showDLblsOverMax' namespace = 'c' ).
    zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_prop ).
    me->graph->ns_showdlblsovermaxval = ls_prop-val.
    "---------------------

    node2 ?= node->find_from_name( name = 'pageMargins' namespace = 'c' ).
    zcl_excel_reader_2007=>fill_struct_from_attributes( EXPORTING ip_element = node2 CHANGING cp_structure = ls_pagemargins ).
    me->graph->pagemargins = ls_pagemargins.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_DRAWING=>PIXEL2EMU
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_PIXEL                       TYPE        INT4
* | [--->] IP_DPI                         TYPE        INT2(optional)
* | [<-()] R_EMU                          TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD pixel2emu.
* suppose 96 DPI
    IF ip_dpi IS SUPPLIED.
      r_emu = ip_pixel  * 914400 / ip_dpi.
    ELSE.
* suppose 96 DPI
      r_emu = ip_pixel  * 914400 / 96.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->SET_MEDIA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_MEDIA                       TYPE        XSTRING(optional)
* | [--->] IP_MEDIA_TYPE                  TYPE        STRING
* | [--->] IP_WIDTH                       TYPE        INT4 (default =0)
* | [--->] IP_HEIGHT                      TYPE        INT4 (default =0)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_media.
    IF ip_media IS SUPPLIED.
      media = ip_media.
    ENDIF.
    media_type = ip_media_type.
    media_source = c_media_source_xstring.
    IF ip_width IS SUPPLIED.
      size-width  = ip_width.
    ENDIF.
    IF ip_height IS SUPPLIED.
      size-height = ip_height.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->SET_MEDIA_MIME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_IO                          TYPE        SKWF_IO
* | [--->] IP_WIDTH                       TYPE        INT4
* | [--->] IP_HEIGHT                      TYPE        INT4
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_media_mime.

    DATA: lv_language TYPE sylangu.

    io = ip_io.
    media_source = c_media_source_mime.
    size-width  = ip_width.
    size-height = ip_height.

    lv_language = sy-langu.
    cl_wb_mime_repository=>load_mime( EXPORTING
                                        io        = ip_io
                                      IMPORTING
                                        filename  = media_name
                                        "mimetype = media_type
                                      CHANGING
                                        language  = lv_language  ).

    SPLIT media_name AT '.' INTO media_name media_type.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->SET_MEDIA_WWW
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_KEY                         TYPE        WWWDATATAB
* | [--->] IP_WIDTH                       TYPE        INT4
* | [--->] IP_HEIGHT                      TYPE        INT4
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_media_www.
    DATA: lv_value(20).

    media_key_www = ip_key.
    media_source = c_media_source_www.

    CALL FUNCTION 'WWWPARAMS_READ'
      EXPORTING
        relid = media_key_www-relid
        objid = media_key_www-objid
        name  = 'fileextension'
      IMPORTING
        value = lv_value.
    media_type = lv_value.
    SHIFT media_type LEFT DELETING LEADING '.'.

    size-width  = ip_width.
    size-height = ip_height.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->SET_POSITION
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_FROM_ROW                    TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_FROM_COL                    TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [--->] IP_ROWOFF                      TYPE        INT4(optional)
* | [--->] IP_COLOFF                      TYPE        INT4(optional)
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_position.
    from_loc-col = zcl_excel_common=>convert_column2int( ip_from_col ) - 1.
    IF ip_coloff IS SUPPLIED.
      from_loc-col_offset = ip_coloff.
    ENDIF.
    from_loc-row = ip_from_row - 1.
    IF ip_rowoff IS SUPPLIED.
      from_loc-row_offset = ip_rowoff.
    ENDIF.
    anchor = anchor_one_cell.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWING->SET_POSITION2
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_FROM                        TYPE        ZEXCEL_DRAWING_LOCATION
* | [--->] IP_TO                          TYPE        ZEXCEL_DRAWING_LOCATION
* | [--->] IP_ANCHOR                      TYPE        ZEXCEL_DRAWING_ANCHOR(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_position2.

    DATA: lv_anchor                     TYPE zexcel_drawing_anchor.
    lv_anchor = ip_anchor.

    IF lv_anchor IS INITIAL.
      IF ip_to IS NOT INITIAL.
        lv_anchor = anchor_two_cell.
      ELSE.
        lv_anchor = anchor_one_cell.
      ENDIF.
    ENDIF.

    CASE lv_anchor.
      WHEN anchor_absolute OR anchor_one_cell.
        CLEAR: me->to_loc.
      WHEN anchor_two_cell.
        CLEAR: me->size.
    ENDCASE.

    me->from_loc = ip_from.
    me->to_loc = ip_to.
    me->anchor = lv_anchor.

  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_drawings IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWINGS->ADD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_DRAWING                     TYPE REF TO ZCL_EXCEL_DRAWING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add.
    DATA: lv_index TYPE i.

    drawings->add( ip_drawing ).
    lv_index = drawings->if_object_collection~size( ).
    ip_drawing->create_media_name(
      ip_index = lv_index ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWINGS->CLEAR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD clear.

    drawings->clear( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWINGS->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_TYPE                        TYPE        ZEXCEL_DRAWING_TYPE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.

    CREATE OBJECT drawings.
    type = ip_type.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWINGS->GET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        ZEXCEL_ACTIVE_WORKSHEET
* | [<-()] EO_DRAWING                     TYPE REF TO ZCL_EXCEL_DRAWING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get.

    DATA lv_index TYPE i.
    lv_index = ip_index.
    eo_drawing ?= drawings->if_object_collection~get( lv_index ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWINGS->GET_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_iterator.

    eo_iterator ?= drawings->if_object_collection~get_iterator( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWINGS->GET_TYPE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RP_TYPE                        TYPE        ZEXCEL_DRAWING_TYPE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_type.
    rp_type = me->type.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWINGS->INCLUDE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_DRAWING                     TYPE REF TO ZCL_EXCEL_DRAWING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD include.
    drawings->add( ip_drawing ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWINGS->IS_EMPTY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] IS_EMPTY                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_empty.

    is_empty = drawings->if_object_collection~is_empty( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWINGS->REMOVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_DRAWING                     TYPE REF TO ZCL_EXCEL_DRAWING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD remove.

    drawings->remove( ip_drawing ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DRAWINGS->SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_SIZE                        TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD size.

    ep_size = drawings->if_object_collection~size( ).
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_worksheet_pagebreaks IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET_PAGEBREAKS->ADD_PAGEBREAK
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_pagebreak.
    DATA: ls_pagebreak      LIKE LINE OF me->mt_pagebreaks.

    ls_pagebreak-cell_row    = ip_row.
    ls_pagebreak-cell_column = zcl_excel_common=>convert_column2int( ip_column ).

    INSERT ls_pagebreak INTO TABLE me->mt_pagebreaks.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET_PAGEBREAKS->GET_ALL_PAGEBREAKS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RT_PAGEBREAKS                  TYPE        TT_PAGEBREAK_AT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_all_pagebreaks.
    rt_pagebreaks = me->mt_pagebreaks.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_rows IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROWS->ADD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_ROW                         TYPE REF TO ZCL_EXCEL_ROW
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add.
    DATA: ls_hashed_row TYPE mty_s_hashed_row.

    ls_hashed_row-row_index = io_row->get_row_index( ).
    ls_hashed_row-row = io_row.

    INSERT ls_hashed_row INTO TABLE rows_hasehd.

    rows->add( io_row ).
  ENDMETHOD.                    "ADD


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROWS->CLEAR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD clear.
    CLEAR rows_hasehd.
    rows->clear( ).
  ENDMETHOD.                    "CLEAR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROWS->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.

    CREATE OBJECT rows.

  ENDMETHOD.                    "CONSTRUCTOR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROWS->GET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        I
* | [<-()] EO_ROW                         TYPE REF TO ZCL_EXCEL_ROW
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get.
    FIELD-SYMBOLS: <ls_hashed_row> TYPE mty_s_hashed_row.

    READ TABLE rows_hasehd WITH KEY row_index = ip_index ASSIGNING <ls_hashed_row>.
    IF sy-subrc = 0.
      eo_row = <ls_hashed_row>-row.
    ENDIF.
  ENDMETHOD.                    "GET


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROWS->GET_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_iterator.
    eo_iterator ?= rows->if_object_collection~get_iterator( ).
  ENDMETHOD.                    "GET_ITERATOR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROWS->IS_EMPTY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] IS_EMPTY                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_empty.
    is_empty = rows->if_object_collection~is_empty( ).
  ENDMETHOD.                    "IS_EMPTY


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROWS->REMOVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_ROW                         TYPE REF TO ZCL_EXCEL_ROW
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD remove.
    DATA row_index TYPE int4.
    row_index = io_row->get_row_index( ) .
    DELETE TABLE rows_hasehd WITH TABLE KEY row_index = row_index.
    rows->remove( io_row ).
  ENDMETHOD.                    "REMOVE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_ROWS->SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_SIZE                        TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD size.
    ep_size = rows->if_object_collection~size( ).
  ENDMETHOD.                    "SIZE
ENDCLASS.

CLASS zcl_excel_hyperlink IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Private Method ZCL_EXCEL_HYPERLINK=>CREATE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_URL                         TYPE        STRING
* | [--->] IV_INTERNAL                    TYPE        ABAP_BOOL
* | [<-()] OV_LINK                        TYPE REF TO ZCL_EXCEL_HYPERLINK
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create.
    DATA: lo_hyperlink TYPE REF TO zcl_excel_hyperlink.

    CREATE OBJECT lo_hyperlink.

    lo_hyperlink->location = iv_url.
    lo_hyperlink->internal = iv_internal.

    ov_link = lo_hyperlink.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_HYPERLINK=>CREATE_EXTERNAL_LINK
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_URL                         TYPE        STRING
* | [<-()] OV_LINK                        TYPE REF TO ZCL_EXCEL_HYPERLINK
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_external_link.

    ov_link = zcl_excel_hyperlink=>create( iv_url = iv_url
                                           iv_internal = abap_false ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_HYPERLINK=>CREATE_INTERNAL_LINK
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_LOCATION                    TYPE        STRING
* | [<-()] OV_LINK                        TYPE REF TO ZCL_EXCEL_HYPERLINK
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_internal_link.
    ov_link = zcl_excel_hyperlink=>create( iv_url = iv_location
                                           iv_internal = abap_true ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_HYPERLINK->GET_REF
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EV_REF                         TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_ref.
    ev_ref = row.
    CONDENSE ev_ref.
    CONCATENATE column ev_ref INTO ev_ref.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_HYPERLINK->GET_URL
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EV_URL                         TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_url.
    ev_url = me->location.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_HYPERLINK->IS_INTERNAL
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EV_RET                         TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_internal.
    ev_ret = me->internal.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_HYPERLINK->SET_CELL_REFERENCE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_cell_reference.
    me->column = zcl_excel_common=>convert_column2alpha( ip_column ). " issue #155 - less restrictive typing for ip_column
    me->row = ip_row.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_common IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>CALCULATE_CELL_DISTANCE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_REFERENCE_CELL              TYPE        CLIKE
* | [--->] IV_CURRENT_CELL                TYPE        CLIKE
* | [<---] EV_ROW_DIFFERENCE              TYPE        I
* | [<---] EV_COL_DIFFERENCE              TYPE        I
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD calculate_cell_distance.

    DATA:       lv_reference_row       TYPE i,
                lv_reference_col_alpha TYPE zexcel_cell_column_alpha,
                lv_reference_col       TYPE i,
                lv_current_row         TYPE i,
                lv_current_col_alpha   TYPE zexcel_cell_column_alpha,
                lv_current_col         TYPE i.

*--------------------------------------------------------------------*
* Split reference  cell into numerical row/column representation
*--------------------------------------------------------------------*
    convert_columnrow2column_a_row( EXPORTING
                                      i_columnrow = iv_reference_cell
                                    IMPORTING
                                      e_column    = lv_reference_col_alpha
                                      e_row       = lv_reference_row ).
    lv_reference_col = convert_column2int( lv_reference_col_alpha ).

*--------------------------------------------------------------------*
* Split current  cell into numerical row/column representation
*--------------------------------------------------------------------*
    convert_columnrow2column_a_row( EXPORTING
                                      i_columnrow = iv_current_cell
                                    IMPORTING
                                      e_column    = lv_current_col_alpha
                                      e_row       = lv_current_row ).
    lv_current_col = convert_column2int( lv_current_col_alpha ).

*--------------------------------------------------------------------*
* Calculate row and column difference
* Positive:   Current cell below    reference cell
*         or  Current cell right of reference cell
* Negative:   Current cell above    reference cell
*         or  Current cell left  of reference cell
*--------------------------------------------------------------------*
    ev_row_difference = lv_current_row - lv_reference_row.
    ev_col_difference = lv_current_col - lv_reference_col.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Private Method ZCL_EXCEL_COMMON=>CHAR2HEX
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_CHAR                         TYPE        CHAR1
* | [<-()] R_HEX                          TYPE        ZEXCEL_PWD_HASH
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD char2hex.

    IF o_conv IS NOT BOUND.
      o_conv = cl_abap_conv_out_ce=>create( endian   = 'L'
                                            ignore_cerr = abap_true
                                            replacement = '#' ).
    ENDIF.

    CALL METHOD o_conv->reset( ).
    CALL METHOD o_conv->write( data = i_char ).
    r_hex+1 = o_conv->get_buffer( ). " x'65' must be x'0065'

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>CLASS_CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD class_constructor.
    c_xlsx_file_filter = 'Excel Workbook (*.xlsx)|*.xlsx|'(005).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>CONVERT_COLUMN2ALPHA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [<-()] EP_COLUMN                      TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD convert_column2alpha.

    DATA:       lv_uccpi  TYPE i,
                lv_text   TYPE sychar02,
                lv_module TYPE int4,
                lv_column TYPE zexcel_cell_column.

    STATICS:    sv_prev_in  LIKE lv_column,
                sv_prev_out LIKE ep_column.

* Propagate zcx_excel if error occurs           " issue #155 - less restrictive typing for ip_column
    lv_column = convert_column2int( ip_column ).  " issue #155 - less restrictive typing for ip_column

*--------------------------------------------------------------------*
* Check whether column is in allowed range for EXCEL to handle ( 1-16384 )
*--------------------------------------------------------------------*
    IF   lv_column > 16384
      OR lv_column < 1.
      zcx_excel=>raise_text( 'Index out of bounds' ).
    ENDIF.

*--------------------------------------------------------------------*
* Look up for previous succesfull cached result
*--------------------------------------------------------------------*
    IF lv_column = sv_prev_in AND sv_prev_out IS NOT INITIAL.
      ep_column = sv_prev_out.
      RETURN.
    ELSE.
      CLEAR sv_prev_out.
      sv_prev_in  = lv_column.
    ENDIF.

*--------------------------------------------------------------------*
* Build alpha representation of column
*--------------------------------------------------------------------*
    WHILE lv_column GT 0.

      lv_module = ( lv_column - 1 ) MOD 26.
      lv_uccpi  = 65 + lv_module.

      lv_column = ( lv_column - lv_module ) / 26.

      lv_text   = cl_abap_conv_in_ce=>uccpi( lv_uccpi ).
      CONCATENATE lv_text ep_column INTO ep_column.

    ENDWHILE.

*--------------------------------------------------------------------*
* Save succesfull output into cache
*--------------------------------------------------------------------*
    sv_prev_out = ep_column.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>CONVERT_COLUMN2INT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [<-()] EP_COLUMN                      TYPE        ZEXCEL_CELL_COLUMN
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD convert_column2int.

*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,      (done)              2012-12-29
*              - ...
* changes: renaming variables to naming conventions
*          removing unused variables
*          removing commented out code that is inactive for more then half a year
*          message made to support multilinguality
*          adding comments to explain what we are trying to achieve
*--------------------------------------------------------------------*
* issue#246 - error converting lower case column names
*              - Stefan Schmoecker,                          2012-12-29
* changes: translating the correct variable to upper dase
*          adding missing exception if input is a number
*          that is out of bounds
*          adding missing exception if input contains
*          illegal characters like german umlauts
*--------------------------------------------------------------------*

    DATA:       lv_column       TYPE zexcel_cell_column_alpha,
                lv_column_c     TYPE char10,
                lv_column_s     TYPE string,
                lv_errormessage TYPE string,                          " Can't pass '...'(abc) to exception-class
                lv_modulo       TYPE i.

    STATICS:    sv_prev_in  LIKE lv_column_c,
                sv_prev_out LIKE ep_column.
*--------------------------------------------------------------------*
* This module tries to identify which column a user wants to access
* Numbers as input are just passed back, anything else will be converted
* using EXCEL nomenclatura A = 1, AA = 27, ..., XFD = 16384
*--------------------------------------------------------------------*

*--------------------------------------------------------------------*
* Normalize input ( upper case , no gaps )
*--------------------------------------------------------------------*
    lv_column_c = ip_column.
*  TRANSLATE lv_column TO UPPER CASE.                       " Fix #246
    TRANSLATE lv_column_c TO UPPER CASE.                      " Fix #246
    CONDENSE lv_column_c NO-GAPS.
    IF lv_column_c EQ ''.
*    lv_errormessage = 'Unable to interpret input as column'(003).
      MESSAGE e800(zabap2xlsx) INTO lv_errormessage.
      zcx_excel=>raise_symsg( ).
    ENDIF.

*--------------------------------------------------------------------*
* Look up for previous succesfull cached result
*--------------------------------------------------------------------*
    IF lv_column_c = sv_prev_in AND sv_prev_out IS NOT INITIAL.
      ep_column = sv_prev_out.
      RETURN.
    ELSE.
      CLEAR sv_prev_out.
      sv_prev_in  = lv_column_c.
    ENDIF.

*--------------------------------------------------------------------*
* If a number gets passed, just convert it to an integer and return
* the converted value
*--------------------------------------------------------------------*
    TRY.
        IF lv_column_c CO '1234567890 '.                      " Fix #164
          ep_column = lv_column_c.                            " Fix #164
*--------------------------------------------------------------------*
* Maximum column for EXCEL:  XFD = 16384    " if anyone has a reference for this information - please add here instead of this comment
*--------------------------------------------------------------------*
          IF ep_column > 16384 OR ep_column < 1.
            lv_errormessage = 'Index out of bounds'(004).
            zcx_excel=>raise_text( lv_errormessage ).
          ENDIF.
          EXIT.
        ENDIF.
      CATCH cx_sy_conversion_no_number.                 "#EC NO_HANDLER
        " Try the character-approach if approach via number has failed
    ENDTRY.

*--------------------------------------------------------------------*
* Raise error if unexpected characters turns up
*--------------------------------------------------------------------*
    lv_column_s = lv_column_c.
    IF lv_column_s CN sy-abcde.
*    lv_errormessage = 'Unable to interpret input as column'(003).
      MESSAGE e800(zabap2xlsx) INTO lv_errormessage.
      zcx_excel=>raise_symsg( ).
    ENDIF.

    DO 1 TIMES. "Because of using CHECK
*--------------------------------------------------------------------*
* Interpret input as number to base 26 with A=1, ... Z=26
* Raise error if unexpected character turns up
*--------------------------------------------------------------------*
* 1st character
*--------------------------------------------------------------------*
      lv_column = lv_column_c.
      lv_modulo = cl_abap_conv_out_ce=>uccpi( lv_column+0(1) ) MOD zcl_excel_common=>c_excel_col_module.
      IF lv_modulo < 1 OR lv_modulo > 26.
*    lv_errormessage = 'Unable to interpret input as column'(003).
        MESSAGE e800(zabap2xlsx) INTO lv_errormessage.
        zcx_excel=>raise_symsg( ).
      ENDIF.
      ep_column = lv_modulo.                    " Leftmost digit

*--------------------------------------------------------------------*
* 2nd character if present
*--------------------------------------------------------------------*
      CHECK lv_column+1(1) IS NOT INITIAL.      " No need to continue if string ended
      lv_modulo = cl_abap_conv_out_ce=>uccpi( lv_column+1(1) ) MOD zcl_excel_common=>c_excel_col_module.
      IF lv_modulo < 1 OR lv_modulo > 26.
*    lv_errormessage = 'Unable to interpret input as column'(003).
        MESSAGE e800(zabap2xlsx) INTO lv_errormessage.
        zcx_excel=>raise_symsg( ).
      ENDIF.
      ep_column = 26 * ep_column + lv_modulo.   " if second digit is present first digit is for 26^1

*--------------------------------------------------------------------*
* 3rd character if present
*--------------------------------------------------------------------*
      CHECK lv_column+2(1) IS NOT INITIAL.      " No need to continue if string ended
      lv_modulo = cl_abap_conv_out_ce=>uccpi( lv_column+2(1) ) MOD zcl_excel_common=>c_excel_col_module.
      IF lv_modulo < 1 OR lv_modulo > 26.
*    lv_errormessage = 'Unable to interpret input as column'(003).
        MESSAGE e800(zabap2xlsx) INTO lv_errormessage.
        zcx_excel=>raise_symsg( ).
      ENDIF.
      ep_column = 26 * ep_column + lv_modulo.   " if third digit is present first digit is for 26^2 and second digit for 26^1
    ENDDO.

*--------------------------------------------------------------------*
* Maximum column for EXCEL:  XFD = 16384    " if anyone has a reference for this information - please add here instead of this comment
*--------------------------------------------------------------------*
    IF ep_column > 16384 OR ep_column < 1.
      lv_errormessage = 'Index out of bounds'(004).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.

*--------------------------------------------------------------------*
* Save succesfull output into cache
*--------------------------------------------------------------------*
    sv_prev_out = ep_column.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>CONVERT_COLUMNROW2COLUMN_A_ROW
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_COLUMNROW                    TYPE        CLIKE
* | [<---] E_COLUMN                       TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [<---] E_ROW                          TYPE        ZEXCEL_CELL_ROW
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD convert_columnrow2column_a_row.
*--------------------------------------------------------------------*
    "issue #256 - replacing char processing with regex
*--------------------------------------------------------------------*
* Stefan Schmoecker, 2013-08-11
*    Allow input to be CLIKE instead of STRING
*--------------------------------------------------------------------*

    DATA: pane_cell_row_a TYPE string,
          lv_columnrow    TYPE string.

    lv_columnrow = i_columnrow.    " Get rid of trailing blanks

    FIND REGEX '^(\D+)(\d+)$' IN lv_columnrow SUBMATCHES e_column
                                                         pane_cell_row_a.
    e_row = pane_cell_row_a.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>CONVERT_RANGE2COLUMN_A_ROW
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_RANGE                        TYPE        CLIKE
* | [<---] E_COLUMN_START                 TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [<---] E_COLUMN_END                   TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [<---] E_ROW_START                    TYPE        ZEXCEL_CELL_ROW
* | [<---] E_ROW_END                      TYPE        ZEXCEL_CELL_ROW
* | [<---] E_SHEET                        TYPE        CLIKE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD convert_range2column_a_row.
*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,      (done)              2012-12-07
*              - ...
* changes: renaming variables to naming conventions
*          aligning code
*          added exceptionclass
*          added errorhandling for invalid range
*          adding comments to explain what we are trying to achieve
*--------------------------------------------------------------------*
* issue#241 - error when sheetname contains "!"
*           - sheetname should be returned unescaped
*              - Stefan Schmoecker,                          2012-12-07
* changes: changed coding to support sheetnames with "!"
*          unescaping sheetname
*--------------------------------------------------------------------*
* issue#155 - lessening restrictions of input parameters
*              - Stefan Schmoecker,                          2012-12-07
* changes: i_range changed to clike
*          e_sheet changed to clike
*--------------------------------------------------------------------*

    DATA:       lv_sheet           TYPE string,
                lv_range           TYPE string,
                lv_columnrow_start TYPE string,
                lv_columnrow_end   TYPE string,
                lv_errormessage    TYPE string.                          " Can't pass '...'(abc) to exception-class


*--------------------------------------------------------------------*
* Split input range into sheetname and Area
* 4 cases - a) input empty --> nothing to do
*         - b) sheetname existing - starts with '            example 'Sheet 1'!$B$6:$D$13
*         - c) sheetname existing - does not start with '    example Sheet1!$B$6:$D$13
*         - d) no sheetname - just area                      example $B$6:$D$13
*--------------------------------------------------------------------*
* Initialize output parameters
    CLEAR: e_column_start,
           e_column_end,
           e_row_start,
           e_row_end,
           e_sheet.

    IF i_range IS INITIAL.                                " a) input empty --> nothing to do
      EXIT.

    ELSEIF i_range(1) = `'`.                              " b) sheetname existing - starts with '
      FIND REGEX '\![^\!]*$' IN i_range MATCH OFFSET sy-fdpos.  " Find last !
      IF sy-subrc = 0.
        lv_sheet = i_range(sy-fdpos).
        ADD 1 TO sy-fdpos.
        lv_range = i_range.
        SHIFT lv_range LEFT BY sy-fdpos PLACES.
      ELSE.
        lv_errormessage = 'Invalid range'(001).
        zcx_excel=>raise_text( lv_errormessage ).
      ENDIF.

    ELSEIF i_range CS '!'.                                " c) sheetname existing - does not start with '
      SPLIT i_range AT '!' INTO lv_sheet lv_range.
      " begin Dennis Schaaf
      IF lv_range CP '*#REF*'.
        lv_errormessage = 'Invalid range'(001).
        zcx_excel=>raise_text( lv_errormessage ).
      ENDIF.
      " end Dennis Schaaf
    ELSE.                                                 " d) no sheetname - just area
      lv_range = i_range.
    ENDIF.

    REPLACE ALL OCCURRENCES OF '$' IN lv_range WITH ''.
    SPLIT lv_range AT ':' INTO lv_columnrow_start lv_columnrow_end.

    convert_columnrow2column_a_row( EXPORTING
                                      i_columnrow = lv_columnrow_start
                                    IMPORTING
                                      e_column    = e_column_start
                                      e_row       = e_row_start ).
    convert_columnrow2column_a_row( EXPORTING
                                      i_columnrow = lv_columnrow_end
                                    IMPORTING
                                      e_column    = e_column_end
                                      e_row       = e_row_end ).

    e_sheet = unescape_string( lv_sheet ).                  " Return in unescaped form
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>DATE_TO_EXCEL_STRING
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        D
* | [<-()] EP_VALUE                       TYPE        ZEXCEL_CELL_VALUE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD date_to_excel_string.
    DATA: lv_date_diff         TYPE i.

    CHECK ip_value IS NOT INITIAL
      AND ip_value <> space.
    " Needed hack caused by the problem that:
    " Excel 2000 incorrectly assumes that the year 1900 is a leap year
    " http://support.microsoft.com/kb/214326/en-us
    IF ip_value > c_excel_1900_leap_year.
      lv_date_diff = ip_value - c_excel_baseline_date + 2.
    ELSE.
      lv_date_diff = ip_value - c_excel_baseline_date + 1.
    ENDIF.
    ep_value = zcl_excel_common=>number_to_excel_string( ip_value = lv_date_diff ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>DESCRIBE_STRUCTURE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_STRUCT                      TYPE REF TO CL_ABAP_STRUCTDESCR
* | [<-()] RT_DFIES                       TYPE        DDFIELDS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD describe_structure.
    DATA:   lt_components TYPE abap_component_tab,
            lt_comps      TYPE abap_component_tab,
            ls_component  TYPE abap_componentdescr,
            lo_elemdescr  TYPE REF TO cl_abap_elemdescr,
            ls_dfies      TYPE dfies,
            l_position    TYPE tabfdpos.

    "for DDIC structure get the info directly
    IF io_struct->is_ddic_type( ) = abap_true.
      rt_dfies = io_struct->get_ddic_field_list( ).
    ELSE.
      lt_components = io_struct->get_components( ).

      LOOP AT lt_components INTO ls_component.
        structure_case( EXPORTING is_component  = ls_component
                        CHANGING  xt_components = lt_comps   ) .
      ENDLOOP.
      LOOP AT lt_comps INTO ls_component.
        CLEAR ls_dfies.
        IF ls_component-type->kind = cl_abap_typedescr=>kind_elem. "E Elementary Type
          ADD 1 TO l_position.
          lo_elemdescr ?= ls_component-type.
          IF lo_elemdescr->is_ddic_type( ) = abap_true.
            ls_dfies           = lo_elemdescr->get_ddic_field( ).
            ls_dfies-fieldname = ls_component-name.
            ls_dfies-position  = l_position.
          ELSE.
            ls_dfies-fieldname = ls_component-name.
            ls_dfies-position  = l_position.
            ls_dfies-inttype   = lo_elemdescr->type_kind.
            ls_dfies-leng      = lo_elemdescr->length.
            ls_dfies-outputlen = lo_elemdescr->length.
            ls_dfies-decimals  = lo_elemdescr->decimals.
            ls_dfies-fieldtext = ls_component-name.
            ls_dfies-reptext   = ls_component-name.
            ls_dfies-scrtext_s = ls_component-name.
            ls_dfies-scrtext_m = ls_component-name.
            ls_dfies-scrtext_l = ls_component-name.
            ls_dfies-dynpfld   = abap_true.
          ENDIF.
          INSERT ls_dfies INTO TABLE rt_dfies.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>DETERMINE_RESULTING_FORMULA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_REFERENCE_CELL              TYPE        CLIKE
* | [--->] IV_REFERENCE_FORMULA           TYPE        CLIKE
* | [--->] IV_CURRENT_CELL                TYPE        CLIKE
* | [<-()] EV_RESULTING_FORMULA           TYPE        STRING
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD determine_resulting_formula.

    DATA:       lv_row_difference TYPE i,
                lv_col_difference TYPE i.

*--------------------------------------------------------------------*
* Calculate distance of reference and current cell
*--------------------------------------------------------------------*
    calculate_cell_distance( EXPORTING
                               iv_reference_cell = iv_reference_cell
                               iv_current_cell   = iv_current_cell
                             IMPORTING
                               ev_row_difference = lv_row_difference
                               ev_col_difference = lv_col_difference ).

*--------------------------------------------------------------------*
* and shift formula by using the row- and columndistance
*--------------------------------------------------------------------*
    ev_resulting_formula = shift_formula( iv_reference_formula = iv_reference_formula
                                          iv_shift_rows        = lv_row_difference
                                          iv_shift_cols        = lv_col_difference ).

  ENDMETHOD.                    "determine_resulting_formula


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>ENCRYPT_PASSWORD
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_PWD                          TYPE        ZEXCEL_AES_PASSWORD
* | [<-()] R_ENCRYPTED_PWD                TYPE        ZEXCEL_AES_PASSWORD
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD encrypt_password.

    DATA lv_curr_offset            TYPE i.
    DATA lv_curr_char              TYPE c LENGTH 1.
    DATA lv_curr_hex               TYPE zexcel_pwd_hash.
    DATA lv_pwd_len                TYPE zexcel_pwd_hash.
    DATA lv_pwd_hash               TYPE zexcel_pwd_hash.

    CONSTANTS:
      lv_0x7fff TYPE zexcel_pwd_hash VALUE '7FFF',
      lv_0x0001 TYPE zexcel_pwd_hash VALUE '0001',
      lv_0xce4b TYPE zexcel_pwd_hash VALUE 'CE4B'.

    DATA lv_pwd            TYPE zexcel_aes_password.

    lv_pwd = i_pwd(15).

    lv_pwd_len = strlen( lv_pwd ).
    lv_curr_offset = lv_pwd_len - 1.

    WHILE lv_curr_offset GE 0.

      lv_curr_char = lv_pwd+lv_curr_offset(1).
      lv_curr_hex = char2hex( lv_curr_char ).

      lv_pwd_hash = (  shr14( lv_pwd_hash ) BIT-AND lv_0x0001 ) BIT-OR ( shl01( lv_pwd_hash ) BIT-AND lv_0x7fff ).

      lv_pwd_hash = lv_pwd_hash BIT-XOR lv_curr_hex.
      SUBTRACT 1 FROM lv_curr_offset.
    ENDWHILE.

    lv_pwd_hash = (  shr14( lv_pwd_hash ) BIT-AND lv_0x0001 ) BIT-OR ( shl01( lv_pwd_hash ) BIT-AND lv_0x7fff ).
    lv_pwd_hash = lv_pwd_hash BIT-XOR lv_0xce4b.
    lv_pwd_hash = lv_pwd_hash BIT-XOR lv_pwd_len.

    WRITE lv_pwd_hash TO r_encrypted_pwd.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>ESCAPE_STRING
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        CLIKE
* | [<-()] EP_ESCAPED_VALUE               TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD escape_string.
*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,      (done)              2012-12-08
*              - ...
* changes: aligning code
*          adding comments to explain what we are trying to achieve
*--------------------------------------------------------------------*
* issue#242 - Support escaping for white-spaces
*           - Escaping also necessary when ' encountered in input
*              - Stefan Schmoecker,                          2012-12-08
* changes: switched check if escaping is necessary to regular expression
*          and moved the "REPLACE"
*--------------------------------------------------------------------*
* issue#155 - lessening restrictions of input parameters
*              - Stefan Schmoecker,                          2012-12-08
* changes: ip_value changed to clike
*--------------------------------------------------------------------*
    DATA:       lv_value                        TYPE string.

*--------------------------------------------------------------------*
* There exist various situations when a space will be used to separate
* different parts of a string. When we have a string consisting spaces
* that will cause errors unless we "escape" the string by putting ' at
* the beginning and at the end of the string.
*--------------------------------------------------------------------*


*--------------------------------------------------------------------*
* When allowing clike-input parameters we might encounter trailing
* "real" blanks .  These are automatically eliminated when moving
* the input parameter to a string.
* Now any remaining spaces ( white-spaces or normal spaces ) should
* trigger the escaping as well as any '
*--------------------------------------------------------------------*
    lv_value = ip_value.


    FIND REGEX `\s|'` IN lv_value.  " \s finds regular and white spaces
    IF sy-subrc = 0.
      REPLACE ALL OCCURRENCES OF `'` IN lv_value WITH `''`.
      CONCATENATE `'` lv_value `'` INTO lv_value .
    ENDIF.

    ep_escaped_value = lv_value.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>EXCEL_STRING_TO_DATE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        ZEXCEL_CELL_VALUE
* | [<-()] EP_VALUE                       TYPE        D
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD excel_string_to_date.
    DATA: lv_date_int TYPE i.

    TRY.
        lv_date_int = ip_value.
        ep_value = lv_date_int + c_excel_baseline_date - 2.
        " Needed hack caused by the problem that:
        " Excel 2000 incorrectly assumes that the year 1900 is a leap year
        " http://support.microsoft.com/kb/214326/en-us
        IF ep_value < c_excel_1900_leap_year.
          ep_value = ep_value + 1.
        ENDIF.
      CATCH cx_sy_conversion_error.
        zcx_excel=>raise_text( 'Index out of bounds' ).
    ENDTRY.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>EXCEL_STRING_TO_NUMBER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        ZEXCEL_CELL_VALUE
* | [<-()] EP_VALUE                       TYPE        F
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD excel_string_to_number.

* If we encounter anything more complicated in EXCEL we might have to extend this
* But currently this works fine - even for numbers in scientific notation

    ep_value = ip_value.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>EXCEL_STRING_TO_TIME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        ZEXCEL_CELL_VALUE
* | [<-()] EP_VALUE                       TYPE        T
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD excel_string_to_time.
    DATA: lv_seconds_in_day TYPE i,
          lv_day_fraction   TYPE f,
          lc_seconds_in_day TYPE i VALUE 86400.

    TRY.

        lv_day_fraction = ip_value.
        lv_seconds_in_day = lv_day_fraction * lc_seconds_in_day.

        ep_value = lv_seconds_in_day.

      CATCH cx_sy_conversion_error.
        zcx_excel=>raise_text( 'Unable to interpret time' ).
    ENDTRY.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>GET_FIELDCATALOG
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_TABLE                       TYPE        STANDARD TABLE
* | [<-()] EP_FIELDCATALOG                TYPE        ZEXCEL_T_FIELDCATALOG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_fieldcatalog.
    DATA: lr_dref_tab           TYPE REF TO data,
          lo_salv_table         TYPE REF TO cl_salv_table,
          lo_salv_columns_table TYPE REF TO cl_salv_columns_table,
          lt_salv_t_column_ref  TYPE salv_t_column_ref,
          ls_salv_t_column_ref  LIKE LINE OF lt_salv_t_column_ref,
          lo_salv_column_table  TYPE REF TO cl_salv_column_table.

    FIELD-SYMBOLS: <tab>          TYPE STANDARD TABLE.
    FIELD-SYMBOLS: <fcat>         LIKE LINE OF ep_fieldcatalog.

* Get copy of IP_TABLE-structure <-- must be changeable to create salv
    CREATE DATA lr_dref_tab LIKE ip_table.
    ASSIGN lr_dref_tab->* TO <tab>.
* Create salv --> implicitly create fieldcat
    TRY.
        cl_salv_table=>factory( IMPORTING
                                  r_salv_table   = lo_salv_table
                                CHANGING
                                  t_table        = <tab>  ).
        lo_salv_columns_table = lo_salv_table->get_columns( ).
        lt_salv_t_column_ref  = lo_salv_columns_table->get( ).
      CATCH cx_root.
* maybe some errorhandling here - just haven't made up my mind yet
    ENDTRY.

* Loop through columns and set relevant fields ( fieldname, texts )
    LOOP AT lt_salv_t_column_ref INTO ls_salv_t_column_ref.

      lo_salv_column_table ?= ls_salv_t_column_ref-r_column.
      APPEND INITIAL LINE TO ep_fieldcatalog ASSIGNING <fcat>.
      <fcat>-position  = sy-tabix.
      <fcat>-fieldname = ls_salv_t_column_ref-columnname.
      <fcat>-scrtext_s = ls_salv_t_column_ref-r_column->get_short_text( ).
      <fcat>-scrtext_m = ls_salv_t_column_ref-r_column->get_medium_text( ).
      <fcat>-scrtext_l = ls_salv_t_column_ref-r_column->get_long_text( ).
      <fcat>-abap_type = lo_salv_column_table->get_ddic_inttype( ).

      <fcat>-dynpfld   = 'X'.  " What in the world would we exclude here?
      " except for the MANDT-field of most tables ( 1st column that is )
      IF <fcat>-position = 1 AND lo_salv_column_table->get_ddic_datatype( ) = 'CLNT'.
        CLEAR <fcat>-dynpfld.
      ENDIF.

* For fields that don't a description (  i.e. defined by  "field type i," )
* just use the fieldname as description - that is better than nothing
      IF    <fcat>-scrtext_s IS INITIAL
        AND <fcat>-scrtext_m IS INITIAL
        AND <fcat>-scrtext_l IS INITIAL.
        CONCATENATE 'Col:' <fcat>-fieldname INTO <fcat>-scrtext_l  SEPARATED BY space.
        <fcat>-scrtext_m = <fcat>-scrtext_l.
        <fcat>-scrtext_s = <fcat>-scrtext_l.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>IS_CELL_IN_RANGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_RANGE                       TYPE        CLIKE
* | [<-()] RP_IN_RANGE                    TYPE        ABAP_BOOL
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_cell_in_range.
    DATA lv_column_start    TYPE zexcel_cell_column_alpha.
    DATA lv_column_end      TYPE zexcel_cell_column_alpha.
    DATA lv_row_start       TYPE zexcel_cell_row.
    DATA lv_row_end         TYPE zexcel_cell_row.
    DATA lv_column_start_i  TYPE zexcel_cell_column.
    DATA lv_column_end_i    TYPE zexcel_cell_column.
    DATA lv_column_i        TYPE zexcel_cell_column.


* Split range and convert columns
    convert_range2column_a_row(
      EXPORTING
        i_range        = ip_range
      IMPORTING
        e_column_start = lv_column_start
        e_column_end   = lv_column_end
        e_row_start    = lv_row_start
        e_row_end      = lv_row_end ).

    lv_column_start_i = convert_column2int( ip_column = lv_column_start ).
    lv_column_end_i   = convert_column2int( ip_column = lv_column_end ).

    lv_column_i = convert_column2int( ip_column = ip_column ).

* Check if cell is in range
    IF lv_column_i >= lv_column_start_i AND
       lv_column_i <= lv_column_end_i   AND
       ip_row      >= lv_row_start      AND
       ip_row      <= lv_row_end.
      rp_in_range = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>NUMBER_TO_EXCEL_STRING
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        NUMERIC
* | [<-()] EP_VALUE                       TYPE        ZEXCEL_CELL_VALUE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD number_to_excel_string.
    DATA: lv_value_c TYPE c LENGTH 100.

    WRITE ip_value TO lv_value_c EXPONENT 0 NO-GROUPING NO-SIGN.
    REPLACE ALL OCCURRENCES OF ',' IN lv_value_c WITH '.'.

    ep_value = lv_value_c.
    CONDENSE ep_value.

    IF ip_value < 0.
      CONCATENATE '-' ep_value INTO ep_value.
    ELSEIF ip_value EQ 0.
      ep_value = '0'.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>RECURSIVE_CLASS_TO_STRUCT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_SOURCE                       TYPE        ANY
* | [<-->] E_TARGET                       TYPE        DATA
* | [<-->] E_TARGETX                      TYPE        DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD recursive_class_to_struct.
    " # issue 139
* is working for me - but after looking through this coding I guess
* I'll rewrite this to a version w/o recursion
* This is private an no one using it so far except me, so no need to hurry
    DATA: descr          TYPE REF TO cl_abap_structdescr,
          wa_component   LIKE LINE OF descr->components,
          attribute_name TYPE fieldname,
          flag_class     TYPE flag.

    FIELD-SYMBOLS: <field>     TYPE any,
                   <fieldx>    TYPE any,
                   <attribute> TYPE any.


    descr ?= cl_abap_structdescr=>describe_by_data( e_target ).

    LOOP AT descr->components INTO wa_component.

* Assign structure and X-structure
      ASSIGN COMPONENT wa_component-name OF STRUCTURE e_target  TO <field>.
      ASSIGN COMPONENT wa_component-name OF STRUCTURE e_targetx TO <fieldx>.
* At least one field in the structure should be marked - otherwise continue with next field
      CLEAR flag_class.
* maybe source is just a structure - try assign component...
      ASSIGN COMPONENT wa_component-name OF STRUCTURE i_source  TO <attribute>.
      IF sy-subrc <> 0.
* not - then it is an attribute of the class - use different assign then
        CONCATENATE 'i_source->' wa_component-name INTO attribute_name.
        ASSIGN (attribute_name) TO <attribute>.
        IF sy-subrc <> 0.
          EXIT.
        ENDIF.  " Should not happen if structure is built properly - otherwise just exit to create no dumps
        flag_class = abap_true.
      ENDIF.

      CASE wa_component-type_kind.
        WHEN cl_abap_structdescr=>typekind_struct1 OR cl_abap_structdescr=>typekind_struct2.  " Structure --> use recursio
*        IF flag_class = abap_true.
** Only borders will be passed as unbound references.  But since we want to set a value we have to create an instance
*        ENDIF.
          zcl_excel_common=>recursive_class_to_struct( EXPORTING i_source  = <attribute>
                                                       CHANGING  e_target  = <field>
                                                                 e_targetx = <fieldx> ).
        WHEN OTHERS.
          <field> = <attribute>.
          <fieldx> = abap_true.

      ENDCASE.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>RECURSIVE_STRUCT_TO_CLASS
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_SOURCE                       TYPE        DATA
* | [--->] I_SOURCEX                      TYPE        DATA
* | [<-->] E_TARGET                       TYPE        ANY
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD recursive_struct_to_class.
    " # issue 139
* is working for me - but after looking through this coding I guess
* I'll rewrite this to a version w/o recursion
* This is private an no one using it so far except me, so no need to hurry
    DATA: descr          TYPE REF TO cl_abap_structdescr,
          wa_component   LIKE LINE OF descr->components,
          attribute_name TYPE fieldname,
          flag_class     TYPE flag,
          o_border       TYPE REF TO zcl_excel_style_border.

    FIELD-SYMBOLS: <field>     TYPE any,
                   <fieldx>    TYPE any,
                   <attribute> TYPE any.


    descr ?= cl_abap_structdescr=>describe_by_data( i_source ).

    LOOP AT descr->components INTO wa_component.

* Assign structure and X-structure
      ASSIGN COMPONENT wa_component-name OF STRUCTURE i_source  TO <field>.
      ASSIGN COMPONENT wa_component-name OF STRUCTURE i_sourcex TO <fieldx>.
* At least one field in the structure should be marked - otherwise continue with next field
      CHECK <fieldx> CA abap_true.
      CLEAR flag_class.
* maybe target is just a structure - try assign component...
      ASSIGN COMPONENT wa_component-name OF STRUCTURE e_target  TO <attribute>.
      IF sy-subrc <> 0.
* not - then it is an attribute of the class - use different assign then
        CONCATENATE 'E_TARGET->' wa_component-name INTO attribute_name.
        ASSIGN (attribute_name) TO <attribute>.
        IF sy-subrc <> 0.EXIT.ENDIF.  " Should not happen if structure is built properly - otherwise just exit to create no dumps
        flag_class = abap_true.
      ENDIF.

      CASE wa_component-type_kind.
        WHEN cl_abap_structdescr=>typekind_struct1 OR cl_abap_structdescr=>typekind_struct2.  " Structure --> use recursion
          " To avoid dump with attribute GRADTYPE of class ZCL_EXCEL_STYLE_FILL
          " quick and really dirty fix -> check the attribute name
          " Border has to be initialized somewhere else
          IF wa_component-name EQ 'GRADTYPE'.
            flag_class = abap_false.
          ENDIF.

          IF flag_class = abap_true AND <attribute> IS INITIAL.
* Only borders will be passed as unbound references.  But since we want to set a value we have to create an instance
            CREATE OBJECT o_border.
            <attribute> = o_border.
          ENDIF.
          zcl_excel_common=>recursive_struct_to_class( EXPORTING i_source  = <field>
                                                                 i_sourcex = <fieldx>
                                                       CHANGING  e_target  = <attribute> ).
*      WHEN cl_abap_structdescr=>typekind_struct2.  " String
*        CHECK <fieldx> = abap_true.  " Marked for change
*        <attribute_s> = <field>.
        WHEN OTHERS.
          CHECK <fieldx> = abap_true.  " Marked for change
          <attribute> = <field>.

      ENDCASE.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>SHIFT_FORMULA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_REFERENCE_FORMULA           TYPE        CLIKE
* | [--->] IV_SHIFT_COLS                  TYPE        I
* | [--->] IV_SHIFT_ROWS                  TYPE        I
* | [<-()] EV_RESULTING_FORMULA           TYPE        STRING
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD shift_formula.

    CONSTANTS:  lcv_operators            TYPE string VALUE '+-/*^%=<>&, !',
                lcv_letters              TYPE string VALUE 'ABCDEFGHIJKLMNOPQRSTUVWXYZ$',
                lcv_digits               TYPE string VALUE '0123456789',
                lcv_cell_reference_error TYPE string VALUE '#REF!'.

    DATA:       lv_tcnt           TYPE i,         " Counter variable
                lv_tlen           TYPE i,         " Temp variable length
                lv_cnt            TYPE i,         " Counter variable
                lv_cnt2           TYPE i,         " Counter variable
                lv_offset1        TYPE i,         " Character offset
                lv_numchars       TYPE i,         " Number of characters counter
                lv_tchar(1)       TYPE c,         " Temp character
                lv_tchar2(1)      TYPE c,         " Temp character
                lv_cur_form(2000) TYPE c,         " Formula for current cell
                lv_ref_cell_addr  TYPE string,    " Reference cell address
                lv_tcol1          TYPE string,    " Temp column letter
                lv_tcol2          TYPE string,    " Temp column letter
                lv_tcoln          TYPE i,         " Temp column number
                lv_trow1          TYPE string,    " Temp row number
                lv_trow2          TYPE string,    " Temp row number
                lv_flen           TYPE i,         " Length of reference formula
                lv_tlen2          TYPE i,         " Temp variable length
                lv_substr1        TYPE string,    " Substring variable
                lv_abscol         TYPE string,    " Absolute column symbol
                lv_absrow         TYPE string,    " Absolute row symbol

                lv_errormessage   TYPE string.

*--------------------------------------------------------------------*
* When copying a cell in EXCEL to another cell any inherent formulas
* are copied as well.  Cell-references in the formula are being adjusted
* by the distance of the new cell to the original one
*--------------------------------------------------------------------*
* §1 Parse reference formula character by character
* §2 Identify Cell-references
* §3 Shift cell-reference
* §4 Build resulting formula
*--------------------------------------------------------------------*

*--------------------------------------------------------------------*
* No distance --> Reference = resulting cell/formula
*--------------------------------------------------------------------*
    IF    iv_shift_cols = 0
      AND iv_shift_rows = 0.
      ev_resulting_formula = iv_reference_formula.
      EXIT. " done
    ENDIF.


    lv_flen     = strlen( iv_reference_formula ).
    lv_numchars = 1.

*--------------------------------------------------------------------*
* §1 Parse reference formula character by character
*--------------------------------------------------------------------*
    DO lv_flen TIMES.

      CLEAR: lv_tchar,
             lv_substr1,
             lv_ref_cell_addr.
      lv_cnt2 = lv_cnt + 1.
      IF lv_cnt2 > lv_flen.
        EXIT. " Done
      ENDIF.

*--------------------------------------------------------------------*
* Here we have the current character in the formula
*--------------------------------------------------------------------*
      lv_tchar = iv_reference_formula+lv_cnt(1).

*--------------------------------------------------------------------*
* Operators or opening parenthesis will separate possible cellreferences
*--------------------------------------------------------------------*
      IF    (    lv_tchar CA lcv_operators
              OR lv_tchar CA '(' )
        AND lv_cnt2 = 1.
        lv_substr1  = iv_reference_formula+lv_offset1(1).
        CONCATENATE lv_cur_form lv_substr1 INTO lv_cur_form.
        lv_cnt      = lv_cnt + 1.
        lv_offset1  = lv_cnt.
        lv_numchars = 1.
        CONTINUE.       " --> next character in formula can be analyzed
      ENDIF.

*--------------------------------------------------------------------*
* Quoted literal text holds no cell reference --> advance to end of text
*--------------------------------------------------------------------*
      IF lv_tchar EQ '"'.
        lv_cnt      = lv_cnt + 1.
        lv_numchars = lv_numchars + 1.
        lv_tchar     = iv_reference_formula+lv_cnt(1).
        WHILE lv_tchar NE '"'.

          lv_cnt      = lv_cnt + 1.
          lv_numchars = lv_numchars + 1.
          lv_tchar    = iv_reference_formula+lv_cnt(1).

        ENDWHILE.
        lv_cnt2    = lv_cnt + 1.
        lv_substr1 = iv_reference_formula+lv_offset1(lv_numchars).
        CONCATENATE lv_cur_form lv_substr1 INTO lv_cur_form.
        lv_cnt     = lv_cnt + 1.
        IF lv_cnt = lv_flen.
          EXIT.
        ENDIF.
        lv_offset1  = lv_cnt.
        lv_numchars = 1.
        lv_tchar    = iv_reference_formula+lv_cnt(1).
        lv_cnt2     = lv_cnt + 1.
        CONTINUE.       " --> next character in formula can be analyzed
      ENDIF.


*--------------------------------------------------------------------*
* Operators or parenthesis or last character in formula will separate possible cellreferences
*--------------------------------------------------------------------*
      IF   lv_tchar CA lcv_operators
        OR lv_tchar CA '():'
        OR lv_cnt2  =  lv_flen.
        IF lv_cnt > 0.
          lv_substr1 = iv_reference_formula+lv_offset1(lv_numchars).
*--------------------------------------------------------------------*
* Check for text concatenation and functions
*--------------------------------------------------------------------*
          IF ( lv_tchar CA lcv_operators AND lv_tchar EQ lv_substr1 ) OR lv_tchar EQ '('.
            CONCATENATE lv_cur_form lv_substr1 INTO lv_cur_form.
            lv_cnt = lv_cnt + 1.
            lv_offset1 = lv_cnt.
            lv_cnt2 = lv_cnt + 1.
            lv_numchars = 1.
            CONTINUE.       " --> next character in formula can be analyzed
          ENDIF.

          lv_tlen = lv_cnt2 - lv_offset1.
*--------------------------------------------------------------------*
* Exclude mathematical operators and closing parentheses
*--------------------------------------------------------------------*
          IF   lv_tchar CA lcv_operators
            OR lv_tchar CA ':)'.
            IF    lv_cnt2     = lv_flen
              AND lv_numchars = 1.
              CONCATENATE lv_cur_form lv_substr1 INTO lv_cur_form.
              lv_cnt      = lv_cnt + 1.
              lv_offset1  = lv_cnt.
              lv_cnt2     = lv_cnt + 1.
              lv_numchars = 1.
              CONTINUE.       " --> next character in formula can be analyzed
            ELSE.
              lv_tlen = lv_tlen - 1.
            ENDIF.
          ENDIF.
*--------------------------------------------------------------------*
* Capture reference cell address
*--------------------------------------------------------------------*
          TRY.
              MOVE: iv_reference_formula+lv_offset1(lv_tlen) TO lv_ref_cell_addr. "Ref cell address
            CATCH cx_root.
              lv_errormessage = 'Internal error in Class ZCL_EXCEL_COMMON Method SHIFT_FORMULA Spot 1 '.  " Change to messageclass if possible
              zcx_excel=>raise_text( lv_errormessage ).
          ENDTRY.

*--------------------------------------------------------------------*
* Split cell address into characters and numbers
*--------------------------------------------------------------------*
          CLEAR: lv_tlen,
                 lv_tcnt,
                 lv_tcol1,
                 lv_trow1.
          lv_tlen = strlen( lv_ref_cell_addr ).
          IF lv_tlen <> 0.
            CLEAR: lv_tcnt.
            DO lv_tlen TIMES.
              CLEAR: lv_tchar2.
              lv_tchar2 = lv_ref_cell_addr+lv_tcnt(1).
              IF lv_tchar2 CA lcv_letters.
                CONCATENATE lv_tcol1 lv_tchar2 INTO lv_tcol1.
              ELSEIF lv_tchar2 CA lcv_digits.
                CONCATENATE lv_trow1 lv_tchar2 INTO lv_trow1.
              ENDIF.
              lv_tcnt = lv_tcnt + 1.
            ENDDO.
          ENDIF.
*--------------------------------------------------------------------*
* Check for invalid cell address
*--------------------------------------------------------------------*
          IF lv_tcol1 IS INITIAL OR lv_trow1 IS INITIAL.
            CONCATENATE lv_cur_form lv_substr1 INTO lv_cur_form.
            lv_cnt = lv_cnt + 1.
            lv_offset1 = lv_cnt.
            lv_cnt2 = lv_cnt + 1.
            lv_numchars = 1.
            CONTINUE.
          ENDIF.
*--------------------------------------------------------------------*
* Check for range names
*--------------------------------------------------------------------*
          CLEAR: lv_tlen.
          lv_tlen = strlen( lv_tcol1 ).
          IF lv_tlen GT 3.
            CONCATENATE lv_cur_form lv_substr1 INTO lv_cur_form.
            lv_cnt = lv_cnt + 1.
            lv_offset1 = lv_cnt.
            lv_cnt2 = lv_cnt + 1.
            lv_numchars = 1.
            CONTINUE.
          ENDIF.
*--------------------------------------------------------------------*
* Check for valid row
*--------------------------------------------------------------------*
          IF lv_trow1 GT 1048576.
            CONCATENATE lv_cur_form lv_substr1 INTO lv_cur_form.
            lv_cnt = lv_cnt + 1.
            lv_offset1 = lv_cnt.
            lv_cnt2 = lv_cnt + 1.
            lv_numchars = 1.
            CONTINUE.
          ENDIF.
*--------------------------------------------------------------------*
* Check for absolute column or row reference
*--------------------------------------------------------------------*
          CLEAR: lv_tcol2,
                 lv_trow2,
                 lv_abscol,
                 lv_absrow.
          lv_tlen2 = strlen( lv_tcol1 ) - 1.
          IF lv_tcol1 IS NOT INITIAL.
            lv_abscol = lv_tcol1(1).
          ENDIF.
          IF lv_tlen2 GE 0.
            lv_absrow = lv_tcol1+lv_tlen2(1).
          ENDIF.
          IF lv_abscol EQ '$' AND lv_absrow EQ '$'.
            lv_tlen2 = lv_tlen2 - 1.
            IF lv_tlen2 > 0.
              lv_tcol1 = lv_tcol1+1(lv_tlen2).
            ENDIF.
            lv_tlen2 = lv_tlen2 + 1.
          ELSEIF lv_abscol EQ '$'.
            lv_tcol1 = lv_tcol1+1(lv_tlen2).
          ELSEIF lv_absrow EQ '$'.
            lv_tcol1 = lv_tcol1(lv_tlen2).
          ENDIF.
*--------------------------------------------------------------------*
* Check for valid column
*--------------------------------------------------------------------*
          TRY.
              lv_tcoln = zcl_excel_common=>convert_column2int( lv_tcol1 ) + iv_shift_cols.
            CATCH zcx_excel.
              CONCATENATE lv_cur_form lv_substr1 INTO lv_cur_form.
              lv_cnt = lv_cnt + 1.
              lv_offset1 = lv_cnt.
              lv_cnt2 = lv_cnt + 1.
              lv_numchars = 1.
              CONTINUE.
          ENDTRY.
*--------------------------------------------------------------------*
* Check whether there is a referencing problem
*--------------------------------------------------------------------*
          lv_trow2 = lv_trow1 + iv_shift_rows.
          IF   ( lv_tcoln < 1 AND lv_abscol <> '$' )   " Maybe we should add here max-column and max row-tests as well.
            OR ( lv_trow2 < 1 AND lv_absrow <> '$' ).  " Check how EXCEL behaves in this case
*--------------------------------------------------------------------*
* Referencing problem encountered --> set error
*--------------------------------------------------------------------*
            CONCATENATE lv_cur_form lcv_cell_reference_error INTO lv_cur_form.
          ELSE.
*--------------------------------------------------------------------*
* No referencing problems --> adjust row and column
*--------------------------------------------------------------------*

*--------------------------------------------------------------------*
* Adjust column
*--------------------------------------------------------------------*
            IF lv_abscol EQ '$'.
              CONCATENATE lv_cur_form lv_abscol lv_tcol1 INTO lv_cur_form.
            ELSEIF iv_shift_cols EQ 0.
              CONCATENATE lv_cur_form lv_tcol1 INTO lv_cur_form.
            ELSE.
              TRY.
                  lv_tcol2 = zcl_excel_common=>convert_column2alpha( lv_tcoln ).
                  CONCATENATE lv_cur_form lv_tcol2 INTO lv_cur_form.
                CATCH zcx_excel.
                  CONCATENATE lv_cur_form lv_substr1 INTO lv_cur_form.
                  lv_cnt = lv_cnt + 1.
                  lv_offset1 = lv_cnt.
                  lv_cnt2 = lv_cnt + 1.
                  lv_numchars = 1.
                  CONTINUE.
              ENDTRY.
            ENDIF.
*--------------------------------------------------------------------*
* Adjust row
*--------------------------------------------------------------------*
            IF lv_absrow EQ '$'.
              CONCATENATE lv_cur_form lv_absrow lv_trow1 INTO lv_cur_form.
            ELSEIF iv_shift_rows = 0.
              CONCATENATE lv_cur_form lv_trow1 INTO lv_cur_form.
*        elseif lv_trow2 < 1.
*          CONCATENATE lv_cur_form lc_cell_reference_error INTO lv_cur_form.
            ELSE.
              CONCATENATE lv_cur_form lv_trow2 INTO lv_cur_form.
            ENDIF.
          ENDIF.

          lv_numchars = 0.
          IF   lv_tchar CA lcv_operators
            OR lv_tchar CA ':)'.
            CONCATENATE lv_cur_form lv_tchar INTO lv_cur_form.
          ENDIF.
          lv_offset1 = lv_cnt2.
        ENDIF.
      ENDIF.
      lv_numchars = lv_numchars + 1.
      lv_cnt   = lv_cnt   + 1.
      lv_cnt2  = lv_cnt   + 1.

    ENDDO.



*--------------------------------------------------------------------*
* Return resulting formula
*--------------------------------------------------------------------*
    IF lv_cur_form IS NOT INITIAL.
      MOVE lv_cur_form TO ev_resulting_formula.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Private Method ZCL_EXCEL_COMMON=>SHL01
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_PWD_HASH                     TYPE        ZEXCEL_PWD_HASH
* | [<-()] R_PWD_HASH                     TYPE        ZEXCEL_PWD_HASH
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD shl01.

    DATA:
      lv_bit      TYPE i,
      lv_curr_pos TYPE i VALUE 2,
      lv_prev_pos TYPE i VALUE 1.

    DO 15 TIMES.
      GET BIT lv_curr_pos OF i_pwd_hash INTO lv_bit.
      SET BIT lv_prev_pos OF r_pwd_hash TO lv_bit.
      ADD 1 TO lv_curr_pos.
      ADD 1 TO lv_prev_pos.
    ENDDO.
    SET BIT 16 OF r_pwd_hash TO 0.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Private Method ZCL_EXCEL_COMMON=>SHR14
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_PWD_HASH                     TYPE        ZEXCEL_PWD_HASH
* | [<-()] R_PWD_HASH                     TYPE        ZEXCEL_PWD_HASH
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD shr14.

    DATA:
      lv_bit      TYPE i,
      lv_curr_pos TYPE i,
      lv_next_pos TYPE i.

    r_pwd_hash = i_pwd_hash.

    DO 14 TIMES.
      lv_curr_pos = 15.
      lv_next_pos = 16.

      DO 15 TIMES.
        GET BIT lv_curr_pos OF r_pwd_hash INTO lv_bit.
        SET BIT lv_next_pos OF r_pwd_hash TO lv_bit.
        SUBTRACT 1 FROM lv_curr_pos.
        SUBTRACT 1 FROM lv_next_pos.
      ENDDO.
      SET BIT 1 OF r_pwd_hash TO 0.
    ENDDO.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>SPLIT_FILE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_FILE                        TYPE        TEXT255
* | [<---] EP_FILE                        TYPE        TEXT255
* | [<---] EP_EXTENSION                   TYPE        CHAR10
* | [<---] EP_DOTEXTENSION                TYPE        CHAR10
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD split_file.

    DATA: lt_hlp TYPE TABLE OF text255,
          ls_hlp TYPE text255.

    DATA: lf_ext(10)     TYPE c,
          lf_dot_ext(10) TYPE c.
    DATA: lf_anz TYPE i,
          lf_len TYPE i.
** ---------------------------------------------------------------------

    CLEAR: lt_hlp,
           ep_file,
           ep_extension,
           ep_dotextension.

** Split the whole file at '.'
    SPLIT ip_file AT '.' INTO TABLE lt_hlp.

** get the extenstion from the last line of table
    DESCRIBE TABLE lt_hlp LINES lf_anz.
    IF lf_anz <= 1.
      ep_file = ip_file.
      EXIT.
    ENDIF.

    READ TABLE lt_hlp INTO ls_hlp INDEX lf_anz.
    ep_extension = ls_hlp.
    lf_ext =  ls_hlp.
    IF NOT lf_ext IS INITIAL.
      CONCATENATE '.' lf_ext INTO lf_dot_ext.
    ENDIF.
    ep_dotextension = lf_dot_ext.

** get only the filename
    lf_len = strlen( ip_file ) - strlen( lf_dot_ext ).
    IF lf_len > 0.
      ep_file = ip_file(lf_len).
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Private Method ZCL_EXCEL_COMMON=>STRUCTURE_CASE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_COMPONENT                   TYPE        ABAP_COMPONENTDESCR
* | [<-->] XT_COMPONENTS                  TYPE        ABAP_COMPONENT_TAB
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD structure_case.
    DATA: lt_comp_str        TYPE abap_component_tab.

    CASE is_component-type->kind.
      WHEN cl_abap_typedescr=>kind_elem. "E Elementary Type
        INSERT is_component INTO TABLE xt_components.
      WHEN cl_abap_typedescr=>kind_table. "T Table
        INSERT is_component INTO TABLE xt_components.
      WHEN cl_abap_typedescr=>kind_struct. "S Structure
        lt_comp_str = structure_recursive( is_component = is_component ).
        INSERT LINES OF lt_comp_str INTO TABLE xt_components.
      WHEN OTHERS. "cl_abap_typedescr=>kind_ref or  cl_abap_typedescr=>kind_class or  cl_abap_typedescr=>kind_intf.
* We skip it. for now.
    ENDCASE.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Private Method ZCL_EXCEL_COMMON=>STRUCTURE_RECURSIVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_COMPONENT                   TYPE        ABAP_COMPONENTDESCR
* | [<-()] RT_COMPONENTS                  TYPE        ABAP_COMPONENT_TAB
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD structure_recursive.
    DATA: lo_struct     TYPE REF TO cl_abap_structdescr,
          lt_components TYPE abap_component_tab,
          ls_components TYPE abap_componentdescr.

    REFRESH rt_components.

    lo_struct ?= is_component-type.
    lt_components = lo_struct->get_components( ).

    LOOP AT lt_components INTO ls_components.
      structure_case( EXPORTING is_component  = ls_components
                      CHANGING  xt_components = rt_components ) .
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>TIME_TO_EXCEL_STRING
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        T
* | [<-()] EP_VALUE                       TYPE        ZEXCEL_CELL_VALUE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD time_to_excel_string.
    DATA: lv_seconds_in_day TYPE i,
          lv_day_fraction   TYPE f,
          lc_time_baseline  TYPE t VALUE '000000',
          lc_seconds_in_day TYPE i VALUE 86400.

    lv_seconds_in_day = ip_value - lc_time_baseline.
    lv_day_fraction = lv_seconds_in_day / lc_seconds_in_day.
    ep_value = zcl_excel_common=>number_to_excel_string( ip_value = lv_day_fraction ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_COMMON=>UNESCAPE_STRING
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ESCAPED                     TYPE        CLIKE
* | [<-()] EV_UNESCAPED_STRING            TYPE        STRING
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD unescape_string.

    CONSTANTS   lcv_regex                       TYPE string VALUE `^'[^']`    & `|` &  " Beginning single ' OR
                                                                  `[^']'$`    & `|` &  " Trailing single '  OR
                                                                  `[^']'[^']`.         " Single ' somewhere in between


    DATA:       lv_errormessage                 TYPE string.                          " Can't pass '...'(abc) to exception-class

*--------------------------------------------------------------------*
* This method is used to extract the "real" string from an escaped string.
* An escaped string can be identified by a beginning ' which must be
* accompanied by a trailing '
* All '' in between beginning and trailing ' are treated as single '
*--------------------------------------------------------------------*

*--------------------------------------------------------------------*
* When allowing clike-input parameters we might encounter trailing
* "real" blanks .  These are automatically eliminated when moving
* the input parameter to a string.
*--------------------------------------------------------------------*
    ev_unescaped_string = iv_escaped.           " Pass through if not escaped

    CHECK ev_unescaped_string IS NOT INITIAL.   " Nothing to do if empty
    CHECK ev_unescaped_string(1) = `'`.         " Nothing to do if not escaped

*--------------------------------------------------------------------*
* Remove leading and trailing '
*--------------------------------------------------------------------*
    REPLACE REGEX `^'(.*)'$` IN ev_unescaped_string WITH '$1'.
    IF sy-subrc <> 0.
      lv_errormessage = 'Input not properly escaped - &'(002).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.

*--------------------------------------------------------------------*
* Any remaining single ' should not be here
*--------------------------------------------------------------------*
    FIND REGEX lcv_regex IN ev_unescaped_string.
    IF sy-subrc = 0.
      lv_errormessage = 'Input not properly escaped - &'(002).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.

*--------------------------------------------------------------------*
* Replace '' with '
*--------------------------------------------------------------------*
    REPLACE ALL OCCURRENCES OF `''` IN ev_unescaped_string WITH `'`.


  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_styles_cond IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES_COND->ADD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_STYLE_COND                  TYPE REF TO ZCL_EXCEL_STYLE_COND
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add.
    styles_cond->add( ip_style_cond ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES_COND->CLEAR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD clear.
    styles_cond->clear( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES_COND->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.

    CREATE OBJECT styles_cond.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES_COND->GET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        ZEXCEL_ACTIVE_WORKSHEET
* | [<-()] EO_STYLE_COND                  TYPE REF TO ZCL_EXCEL_STYLE_COND
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get.
    DATA lv_index TYPE i.
    lv_index = ip_index.
    eo_style_cond ?= styles_cond->if_object_collection~get( lv_index ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES_COND->GET_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_iterator.
    eo_iterator ?= styles_cond->if_object_collection~get_iterator( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES_COND->IS_EMPTY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] IS_EMPTY                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_empty.
    is_empty = styles_cond->if_object_collection~is_empty( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES_COND->REMOVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_STYLE_COND                  TYPE REF TO ZCL_EXCEL_STYLE_COND
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD remove.
    styles_cond->remove( ip_style_cond ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES_COND->SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_SIZE                        TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD size.
    ep_size = styles_cond->if_object_collection~size( ).
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_data_validations IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DATA_VALIDATIONS->ADD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_DATA_VALIDATION             TYPE REF TO ZCL_EXCEL_DATA_VALIDATION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add.
    data_validations->add( ip_data_validation ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DATA_VALIDATIONS->CLEAR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD clear.
    data_validations->clear( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DATA_VALIDATIONS->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.

    CREATE OBJECT data_validations.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DATA_VALIDATIONS->GET_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_iterator.
    eo_iterator ?= data_validations->if_object_collection~get_iterator( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DATA_VALIDATIONS->IS_EMPTY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] IS_EMPTY                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_empty.
    is_empty = data_validations->if_object_collection~is_empty( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DATA_VALIDATIONS->REMOVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_DATA_VALIDATION             TYPE REF TO ZCL_EXCEL_DATA_VALIDATION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD remove.
    data_validations->remove( ip_data_validation ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_DATA_VALIDATIONS->SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_SIZE                        TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD size.
    ep_size = data_validations->if_object_collection~size( ).
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_ranges IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_RANGES->ADD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_RANGE                       TYPE REF TO ZCL_EXCEL_RANGE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add.
    ranges->add( ip_range ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_RANGES->CLEAR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD clear.
    ranges->clear( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_RANGES->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.


    CREATE OBJECT ranges.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_RANGES->GET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        I
* | [<-()] EO_RANGE                       TYPE REF TO ZCL_EXCEL_RANGE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get.
    eo_range ?= ranges->if_object_collection~get( ip_index ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_RANGES->GET_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_iterator.
    eo_iterator ?= ranges->if_object_collection~get_iterator( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_RANGES->IS_EMPTY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] IS_EMPTY                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_empty.
    is_empty = ranges->if_object_collection~is_empty( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_RANGES->REMOVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_RANGE                       TYPE REF TO ZCL_EXCEL_RANGE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD remove.
    ranges->remove( ip_range ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_RANGES->SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_SIZE                        TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD size.
    ep_size = ranges->if_object_collection~size( ).
  ENDMETHOD.
ENDCLASS.

CLASS c_oi_proxy_error IMPLEMENTATION.
  METHOD constructor.
*                IMPORTING object_name TYPE c
*                          method_name TYPE c.
    error_nr = ret_call_not_flushed.
    me->i_oi_error~error_code = c_oi_errors=>ret_call_not_flushed.
    me->i_oi_error~is_flushed = ' '.
    me->i_oi_error~has_failed = 'X'.
    me->i_oi_error~has_succeeded = ' '.
    me->message_id = 'SOFFICEINTEGRATION'.
    me->message_nr = '899'.
    me->param1 = object_name.
    me->param2 = method_name.
  ENDMETHOD.                    "constructor

  METHOD i_oi_error~flush_error.
    IF error_nr EQ 0.
      me->i_oi_error~error_code = c_oi_errors=>ret_ok.
      me->i_oi_error~is_flushed = 'X'.
      me->i_oi_error~has_failed = ' '.
      me->i_oi_error~has_succeeded = 'X'.
      me->message_id = ''.
      me->message_nr = '000'.
      CALL METHOD c_oi_errors=>translate_proxy_error_code
        EXPORTING
          errorcode = error_nr
        IMPORTING
          retcode   = me->i_oi_error~error_code.
    ELSEIF error_nr EQ ret_call_not_flushed.
      "call still not flushed
      CALL METHOD c_oi_errors=>translate_proxy_error_code
        EXPORTING
          errorcode   = error_nr
          errorstring = me->param2  "method name
          objectname  = me->param1
        IMPORTING
          retcode     = me->i_oi_error~error_code.
    ELSE.
      me->i_oi_error~is_flushed = 'X'.
      me->i_oi_error~has_succeeded = ' '.
      me->i_oi_error~has_failed = 'X'.
      CALL METHOD c_oi_errors=>translate_proxy_error_code
        EXPORTING
          errorcode   = error_nr
          errorstring = error_string
        IMPORTING
          retcode     = me->i_oi_error~error_code.
      CALL METHOD c_oi_errors=>get_message
        IMPORTING
          message_id     = me->message_id
          message_number = me->message_nr
          param1         = me->param1
          param2         = me->param2
          param3         = me->param3
          param4         = me->param4.
    ENDIF.
  ENDMETHOD.                    "i_oi_error~flush_error

  METHOD i_oi_error~raise_message.
*                         IMPORTING type TYPE c.
*                         EXCEPTIONS message_raised flush_failed.
    IF me->i_oi_error~has_succeeded IS INITIAL.
      IF NOT me->i_oi_error~is_flushed IS INITIAL.
        MESSAGE ID message_id TYPE type
            NUMBER message_nr WITH param1 param2 param3 param4
            RAISING message_raised.
      ELSE.
        RAISE flush_failed.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    "i_oi_error~raise_message

  METHOD i_oi_error~get_message.
*                    EXPORTING message_id TYPE c
*                              message_number TYPE c
*                              param1 TYPE c
*                              param2 TYPE c
*                              param3 TYPE c
*                              param4 TYPE c.
    param1 = me->param1. param2 = me->param2.
    param3 = me->param3. param4 = me->param4.

    message_id = me->message_id.
    message_number = me->message_nr.
  ENDMETHOD.                    "i_oi_error~get_message
ENDCLASS.

CLASS lcl_gui_alv_grid IMPLEMENTATION.

  METHOD get_alv_attributes.
    CREATE DATA et_table LIKE io_grid->mt_outtab.
    et_table = io_grid->mt_outtab.
  ENDMETHOD.                    "get_data

ENDCLASS.

CLASS zcl_excel_worksheet IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ADD_COMMENT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COMMENT                     TYPE REF TO ZCL_EXCEL_COMMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_comment.
    comments->include( ip_comment ).
  ENDMETHOD.                    "add_comment


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ADD_DRAWING
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_DRAWING                     TYPE REF TO ZCL_EXCEL_DRAWING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_drawing.
    CASE ip_drawing->get_type( ).
      WHEN zcl_excel_drawing=>type_image.
        drawings->include( ip_drawing ).
      WHEN zcl_excel_drawing=>type_chart.
        charts->include( ip_drawing ).
    ENDCASE.
  ENDMETHOD.                    "ADD_DRAWING


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ADD_NEW_COLUMN
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [<-()] EO_COLUMN                      TYPE REF TO ZCL_EXCEL_COLUMN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_new_column.
    DATA: lv_column_alpha TYPE zexcel_cell_column_alpha.

    lv_column_alpha = zcl_excel_common=>convert_column2alpha( ip_column ).

    CREATE OBJECT eo_column
      EXPORTING
        ip_index     = lv_column_alpha
        ip_excel     = me->excel
        ip_worksheet = me.
    columns->add( eo_column ).
  ENDMETHOD.                    "ADD_NEW_COLUMN


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ADD_NEW_DATA_VALIDATION
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_DATA_VALIDATION             TYPE REF TO ZCL_EXCEL_DATA_VALIDATION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_new_data_validation.

    CREATE OBJECT eo_data_validation.
    data_validations->add( eo_data_validation ).
  ENDMETHOD.                    "ADD_NEW_DATA_VALIDATION


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ADD_NEW_RANGE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_RANGE                       TYPE REF TO ZCL_EXCEL_RANGE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_new_range.
* Create default blank range
    CREATE OBJECT eo_range.
    ranges->add( eo_range ).
  ENDMETHOD.                    "ADD_NEW_RANGE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ADD_NEW_ROW
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_ROW                         TYPE        SIMPLE
* | [<-()] EO_ROW                         TYPE REF TO ZCL_EXCEL_ROW
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_new_row.
    CREATE OBJECT eo_row
      EXPORTING
        ip_index = ip_row.
    rows->add( eo_row ).
  ENDMETHOD.                    "ADD_NEW_ROW


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ADD_NEW_STYLE_COND
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_STYLE_COND                  TYPE REF TO ZCL_EXCEL_STYLE_COND
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_new_style_cond.
    CREATE OBJECT eo_style_cond.
    styles_cond->add( eo_style_cond ).
  ENDMETHOD.                    "ADD_NEW_STYLE_COND


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->BIND_ALV
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_ALV                         TYPE REF TO OBJECT
* | [--->] IT_TABLE                       TYPE        STANDARD TABLE
* | [--->] I_TOP                          TYPE        I (default =1)
* | [--->] I_LEFT                         TYPE        I (default =1)
* | [--->] TABLE_STYLE                    TYPE        ZEXCEL_TABLE_STYLE(optional)
* | [--->] I_TABLE                        TYPE        ABAP_BOOL (default =ABAP_TRUE)
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD bind_alv.
    DATA: lo_converter TYPE REF TO zcl_excel_converter.

    CREATE OBJECT lo_converter.

    TRY.
        lo_converter->convert(
          EXPORTING
            io_alv         = io_alv
            it_table       = it_table
            i_row_int      = i_top
            i_column_int   = i_left
            i_table        = i_table
            i_style_table  = table_style
            io_worksheet   = me
          CHANGING
            co_excel       = excel ).
      CATCH zcx_excel .
    ENDTRY.

  ENDMETHOD.                    "BIND_ALV


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->BIND_ALV_OLE2
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_DOCUMENT_URL                 TYPE        CHAR255 (default =SPACE)
* | [--->] I_XLS                          TYPE        C (default =SPACE)
* | [--->] I_SAVE_PATH                    TYPE        STRING
* | [--->] IO_ALV                         TYPE REF TO CL_GUI_ALV_GRID
* | [--->] IT_LISTHEADER                  TYPE        SLIS_T_LISTHEADER(optional)
* | [--->] I_TOP                          TYPE        I (default =1)
* | [--->] I_LEFT                         TYPE        I (default =1)
* | [--->] I_COLUMNS_HEADER               TYPE        C (default ='X')
* | [--->] I_COLUMNS_AUTOFIT              TYPE        C (default ='X')
* | [--->] I_FORMAT_COL_HEADER            TYPE        SOI_FORMAT_ITEM(optional)
* | [--->] I_FORMAT_SUBTOTAL              TYPE        SOI_FORMAT_ITEM(optional)
* | [--->] I_FORMAT_TOTAL                 TYPE        SOI_FORMAT_ITEM(optional)
* | [EXC!] MISS_GUIDE
* | [EXC!] EX_TRANSFER_KKBLO_ERROR
* | [EXC!] FATAL_ERROR
* | [EXC!] INV_DATA_RANGE
* | [EXC!] DIM_MISMATCH_VKEY
* | [EXC!] DIM_MISMATCH_SEMA
* | [EXC!] ERROR_IN_SEMA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD bind_alv_ole2.
*--------------------------------------------------------------------*
* Method description:
*   Method use to export a CL_GUI_ALV_GRID object to xlsx/xls file
*   with list header and  characteristics of ALV field catalog such as:
*     + Total, group's subtotal
*     + Quantity fields, amount fields (dependent fields)
*     + No_out, no_zero, ...
* Technique use in method:
*   SAP Desktop Office Integration (DOI)
*--------------------------------------------------------------------*

* Data for session 0: DOI constructor
* ------------------------------------------

    DATA: lo_control  TYPE REF TO i_oi_container_control.
    DATA: lo_proxy    TYPE REF TO i_oi_document_proxy.
    DATA: lo_spreadsheet TYPE REF TO i_oi_spreadsheet.
    DATA: lo_error    TYPE REF TO i_oi_error.
    DATA: lc_retcode  TYPE soi_ret_string.
    DATA: li_has      TYPE i. "Proxy has spreadsheet interface?
    DATA: l_is_closed TYPE i.

* Data for session 1: Get LVC data from ALV object
* ------------------------------------------

    DATA: l_has_activex,
          l_doctype_excel_sheet(11) TYPE c.

* LVC
    DATA: lt_fieldcat_lvc       TYPE lvc_t_fcat.
    DATA: wa_fieldcat_lvc       TYPE lvc_s_fcat.
    DATA: lt_sort_lvc           TYPE lvc_t_sort.
    DATA: lt_filter_idx_lvc     TYPE lvc_t_fidx.
    DATA: lt_grouplevels_lvc    TYPE lvc_t_grpl.

* KKBLO
    DATA: lt_fieldcat_kkblo     TYPE  kkblo_t_fieldcat.
    DATA: lt_sort_kkblo         TYPE  kkblo_t_sortinfo.
    DATA: lt_grouplevels_kkblo  TYPE  kkblo_t_grouplevels.
    DATA: lt_filter_idx_kkblo   TYPE  kkblo_t_sfinfo.
    DATA: wa_listheader         LIKE LINE OF it_listheader.

* Subtotal
    DATA: lt_collect00          TYPE REF TO data.
    DATA: lt_collect01          TYPE REF TO data.
    DATA: lt_collect02          TYPE REF TO data.
    DATA: lt_collect03          TYPE REF TO data.
    DATA: lt_collect04          TYPE REF TO data.
    DATA: lt_collect05          TYPE REF TO data.
    DATA: lt_collect06          TYPE REF TO data.
    DATA: lt_collect07          TYPE REF TO data.
    DATA: lt_collect08          TYPE REF TO data.
    DATA: lt_collect09          TYPE REF TO data.

* data table name
    DATA: l_tabname             TYPE  kkblo_tabname.

* local object
    DATA: lo_grid               TYPE REF TO lcl_gui_alv_grid.

* data table get from ALV
    DATA: lt_alv                  TYPE REF TO data.

* total / subtotal data
    FIELD-SYMBOLS: <f_collect00>  TYPE STANDARD TABLE.
    FIELD-SYMBOLS: <f_collect01>  TYPE STANDARD TABLE.
    FIELD-SYMBOLS: <f_collect02>  TYPE STANDARD TABLE.
    FIELD-SYMBOLS: <f_collect03>  TYPE STANDARD TABLE.
    FIELD-SYMBOLS: <f_collect04>  TYPE STANDARD TABLE.
    FIELD-SYMBOLS: <f_collect05>  TYPE STANDARD TABLE.
    FIELD-SYMBOLS: <f_collect06>  TYPE STANDARD TABLE.
    FIELD-SYMBOLS: <f_collect07>  TYPE STANDARD TABLE.
    FIELD-SYMBOLS: <f_collect08>  TYPE STANDARD TABLE.
    FIELD-SYMBOLS: <f_collect09>  TYPE STANDARD TABLE.

* table before append subtotal lines
    FIELD-SYMBOLS: <f_alv_tab>    TYPE STANDARD TABLE.

* data for session 2: sort, filter and calculate total/subtotal
* ------------------------------------------

* table to save index of subotal / total line in excel tanle
* this ideal to control index of subtotal / total line later
* for ex, when get subtotal / total line to format
    TYPES: BEGIN OF st_subtot_indexs,
             index TYPE i,
           END OF st_subtot_indexs.
    DATA: lt_subtot_indexs TYPE TABLE OF st_subtot_indexs.
    DATA: wa_subtot_indexs LIKE LINE OF lt_subtot_indexs.

* data table after append subtotal
    DATA: lt_excel                TYPE REF TO data.

    DATA: l_tabix                 TYPE i.
    DATA: l_save_index            TYPE i.

* dyn subtotal table name
    DATA: l_collect               TYPE string.

* subtotal range, to format subtotal (and total)
    DATA: subranges               TYPE soi_range_list.
    DATA: subrangeitem            TYPE soi_range_item.
    DATA: l_sub_index             TYPE i.


* table after append subtotal lines
    FIELD-SYMBOLS: <f_excel_tab>  TYPE STANDARD TABLE.
    FIELD-SYMBOLS: <f_excel_line> TYPE any.

* dyn subtotal tables
    FIELD-SYMBOLS: <f_collect_tab>      TYPE STANDARD TABLE.
    FIELD-SYMBOLS: <f_collect_line>     TYPE any.

    FIELD-SYMBOLS: <f_filter_idx_line>  LIKE LINE OF lt_filter_idx_kkblo.
    FIELD-SYMBOLS: <f_fieldcat_line>    LIKE LINE OF lt_fieldcat_kkblo.
    FIELD-SYMBOLS: <f_grouplevels_line> LIKE LINE OF lt_grouplevels_kkblo.
    FIELD-SYMBOLS: <f_line>             TYPE any.

* Data for session 3: map data to semantic table
* ------------------------------------------

    TYPES: BEGIN OF st_column_index,
             fieldname TYPE kkblo_fieldname,
             tabname   TYPE kkblo_tabname,
             col       LIKE sy-index,
           END OF st_column_index.

* columns index
    DATA: lt_column_index   TYPE TABLE OF st_column_index.
    DATA: wa_column_index   LIKE LINE OF lt_column_index.

* table of dependent field ( currency and quantity unit field)
    DATA: lt_fieldcat_depf  TYPE kkblo_t_fieldcat.
    DATA: wa_fieldcat_depf  TYPE kkblo_fieldcat.

* XXL interface:
* -XXL: contain exporting columns characteristic
    DATA: lt_sema TYPE TABLE OF gxxlt_s INITIAL SIZE 0.
    DATA: wa_sema LIKE LINE OF lt_sema.

* -XXL interface: header
    DATA: lt_hkey TYPE TABLE OF gxxlt_h INITIAL SIZE 0.
    DATA: wa_hkey LIKE LINE OF lt_hkey.

* -XXL interface: header keys
    DATA: lt_vkey TYPE TABLE OF gxxlt_v INITIAL SIZE 0.
    DATA: wa_vkey LIKE LINE OF lt_vkey.

* Number of H Keys: number of key columns
    DATA: l_n_hrz_keys      TYPE  i.
* Number of data columns in the list object: non-key columns no
    DATA: l_n_att_cols      TYPE  i.
* Number of V Keys: number of header row
    DATA: l_n_vrt_keys      TYPE  i.

* curency to format amount
    DATA: lt_tcurx          TYPE TABLE OF tcurx.
    DATA: wa_tcurx          LIKE LINE OF lt_tcurx.
    DATA: l_def             TYPE flag. " currency / quantity flag
    DATA: wa_t006           TYPE t006. " decimal place of unit

    DATA: l_num             TYPE i. " table columns number
    DATA: l_typ             TYPE c. " table type
    DATA: wa                TYPE REF TO data.
    DATA: l_int             TYPE i.
    DATA: l_counter         TYPE i.

    FIELD-SYMBOLS: <f_excel_column>     TYPE any.
    FIELD-SYMBOLS: <f_fcat_column>      TYPE any.

* Data for session 4: write to excel
* ------------------------------------------

    DATA: sema_type         TYPE  c.

    DATA l_error           TYPE REF TO c_oi_proxy_error.
    DATA count              TYPE i.
    DATA datac              TYPE i.
    DATA datareal           TYPE i. " exporting column number
    DATA vkeycount          TYPE i.
    DATA all TYPE i.
    DATA mit TYPE i         VALUE 1.  " index of recent row?
    DATA li_col_pos TYPE i  VALUE 1.  " column position
    DATA li_col_num TYPE i.           " table columns number
    FIELD-SYMBOLS: <line>   TYPE any.
    FIELD-SYMBOLS: <item>   TYPE any.
    TYPE-POOLS sydes.
    DATA td                 TYPE sydes_desc.

    DATA: typ.
    DATA: ranges             TYPE soi_range_list.
    DATA: rangeitem          TYPE soi_range_item.
    DATA: contents           TYPE soi_generic_table.
    DATA: contentsitem       TYPE soi_generic_item.
    DATA: semaitem           TYPE gxxlt_s.
    DATA: hkeyitem           TYPE gxxlt_h.
    DATA: vkeyitem           TYPE gxxlt_v.
    DATA: li_commentary_rows TYPE i.  "row number of title lines + 1
    DATA: lo_error_w         TYPE REF TO  i_oi_error.
    DATA: l_retcode          TYPE soi_ret_string.
    DATA: no_flush           TYPE c VALUE 'X'.
    DATA: li_head_top        TYPE i. "header rows position

* Data for session 5: Save and clode document
* ------------------------------------------

    DATA: li_document_size   TYPE i.
    DATA: ls_path            TYPE rlgrap-filename.

* MACRO: Close_document
*-------------------------------------------

    DEFINE close_document.
      clear: l_is_closed.
      if lo_proxy is not initial.

* check proxy detroyed adi

        call method lo_proxy->is_destroyed
          importing
            ret_value = l_is_closed.

* if dun detroyed yet: close -> release proxy

        if l_is_closed is initial.
          call method lo_proxy->close_document
*        EXPORTING
*          do_save = do_save
            importing
              error       = lo_error
              retcode     = lc_retcode.
        endif.

        call method lo_proxy->release_document
          importing
            error   = lo_error
            retcode = lc_retcode.

      else.
        lc_retcode = c_oi_errors=>ret_document_not_open.
      endif.

* Detroy control container

      if lo_control is not initial.
        call method lo_control->destroy_control.
      endif.

      clear:
        lo_spreadsheet,
        lo_proxy,
        lo_control.

* free local

      clear: l_is_closed.

    END-OF-DEFINITION.

* Macro to catch DOI error
*-------------------------------------------

    DEFINE error_doi.
      if lc_retcode ne c_oi_errors=>ret_ok.
        close_document.
        call method lo_error->raise_message
          exporting
            type = 'E'.
        clear: lo_error.
      endif.
    END-OF-DEFINITION.

*--------------------------------------------------------------------*
* SESSION 0: DOI CONSTRUCTOR
*--------------------------------------------------------------------*

* check active windown

    CALL FUNCTION 'GUI_HAS_ACTIVEX'
      IMPORTING
        return = l_has_activex.

    IF l_has_activex IS INITIAL.
      RAISE miss_guide.
    ENDIF.

*   Get Container Object of Screen

    CALL METHOD c_oi_container_control_creator=>get_container_control
      IMPORTING
        control = lo_control
        retcode = lc_retcode.

    error_doi.

* Initialize Container control

    CALL METHOD lo_control->init_control
      EXPORTING
        parent                   = cl_gui_container=>default_screen
        r3_application_name      = ''
        inplace_enabled          = 'X'
        no_flush                 = 'X'
        register_on_close_event  = 'X'
        register_on_custom_event = 'X'
      IMPORTING
        error                    = lo_error
        retcode                  = lc_retcode.

    error_doi.

* Get Proxy Document:
* check exist of document proxy, if exist -> close first

    IF NOT lo_proxy IS INITIAL.
      close_document.
    ENDIF.

    IF i_xls IS NOT INITIAL.
* xls format, doctype = soi_doctype_excel97_sheet
      l_doctype_excel_sheet = 'Excel.Sheet.8'.
    ELSE.
* xlsx format, doctype = soi_doctype_excel_sheet
      l_doctype_excel_sheet = 'Excel.Sheet'.
    ENDIF.

    CALL METHOD lo_control->get_document_proxy
      EXPORTING
        document_type      = l_doctype_excel_sheet
        register_container = 'X'
      IMPORTING
        document_proxy     = lo_proxy
        error              = lo_error
        retcode            = lc_retcode.

    error_doi.

    IF i_document_url IS INITIAL.

* create new excel document

      CALL METHOD lo_proxy->create_document
        EXPORTING
          create_view_data = 'X'
          open_inplace     = 'X'
          no_flush         = 'X'
        IMPORTING
          error            = lo_error
          retcode          = lc_retcode.

      error_doi.

    ELSE.

* Read excel template for i_DOCUMENT_URL
* this excel template can be store in local or server

      CALL METHOD lo_proxy->open_document
        EXPORTING
          document_url = i_document_url
          open_inplace = 'X'
          no_flush     = 'X'
        IMPORTING
          error        = lo_error
          retcode      = lc_retcode.

      error_doi.

    ENDIF.

* Check Spreadsheet Interface of Document Proxy

    CALL METHOD lo_proxy->has_spreadsheet_interface
      IMPORTING
        is_available = li_has
        error        = lo_error
        retcode      = lc_retcode.

    error_doi.

* create Spreadsheet object

    CHECK li_has IS NOT INITIAL.

    CALL METHOD lo_proxy->get_spreadsheet_interface
      IMPORTING
        sheet_interface = lo_spreadsheet
        error           = lo_error
        retcode         = lc_retcode.

    error_doi.

*--------------------------------------------------------------------*
* SESSION 1: GET LVC DATA FROM ALV OBJECT
*--------------------------------------------------------------------*

* data table

    CREATE OBJECT lo_grid
      EXPORTING
        i_parent = cl_gui_container=>screen0.

    CALL METHOD lo_grid->get_alv_attributes
      EXPORTING
        io_grid  = io_alv
      IMPORTING
        et_table = lt_alv.

    ASSIGN lt_alv->* TO <f_alv_tab>.

* fieldcat

    CALL METHOD io_alv->get_frontend_fieldcatalog
      IMPORTING
        et_fieldcatalog = lt_fieldcat_lvc.

* table name

    LOOP AT lt_fieldcat_lvc INTO wa_fieldcat_lvc
    WHERE NOT tabname IS INITIAL.
      l_tabname = wa_fieldcat_lvc-tabname.
      EXIT.
    ENDLOOP.

    IF sy-subrc NE 0.
      l_tabname = '1'.
    ENDIF.
    CLEAR: wa_fieldcat_lvc.

* sort table

    CALL METHOD io_alv->get_sort_criteria
      IMPORTING
        et_sort = lt_sort_lvc.


* filter index

    CALL METHOD io_alv->get_filtered_entries
      IMPORTING
        et_filtered_entries = lt_filter_idx_lvc.

* group level + subtotal

    CALL METHOD io_alv->get_subtotals
      IMPORTING
        ep_collect00   = lt_collect00
        ep_collect01   = lt_collect01
        ep_collect02   = lt_collect02
        ep_collect03   = lt_collect03
        ep_collect04   = lt_collect04
        ep_collect05   = lt_collect05
        ep_collect06   = lt_collect06
        ep_collect07   = lt_collect07
        ep_collect08   = lt_collect08
        ep_collect09   = lt_collect09
        et_grouplevels = lt_grouplevels_lvc.

    ASSIGN lt_collect00->* TO <f_collect00>.
    ASSIGN lt_collect01->* TO <f_collect01>.
    ASSIGN lt_collect02->* TO <f_collect02>.
    ASSIGN lt_collect03->* TO <f_collect03>.
    ASSIGN lt_collect04->* TO <f_collect04>.
    ASSIGN lt_collect05->* TO <f_collect05>.
    ASSIGN lt_collect06->* TO <f_collect06>.
    ASSIGN lt_collect07->* TO <f_collect07>.
    ASSIGN lt_collect08->* TO <f_collect08>.
    ASSIGN lt_collect09->* TO <f_collect09>.

* transfer to KKBLO struct

    CALL FUNCTION 'LVC_TRANSFER_TO_KKBLO'
      EXPORTING
        it_fieldcat_lvc           = lt_fieldcat_lvc
        it_sort_lvc               = lt_sort_lvc
        it_filter_index_lvc       = lt_filter_idx_lvc
        it_grouplevels_lvc        = lt_grouplevels_lvc
      IMPORTING
        et_fieldcat_kkblo         = lt_fieldcat_kkblo
        et_sort_kkblo             = lt_sort_kkblo
        et_filtered_entries_kkblo = lt_filter_idx_kkblo
        et_grouplevels_kkblo      = lt_grouplevels_kkblo
      TABLES
        it_data                   = <f_alv_tab>
      EXCEPTIONS
        it_data_missing           = 1
        it_fieldcat_lvc_missing   = 2
        OTHERS                    = 3.
    IF sy-subrc <> 0.
      RAISE ex_transfer_kkblo_error.
    ENDIF.

    CLEAR:
      wa_fieldcat_lvc,
      lt_fieldcat_lvc,
      lt_sort_lvc,
      lt_filter_idx_lvc,
      lt_grouplevels_lvc.

    CLEAR:
      lo_grid.


*--------------------------------------------------------------------*
* SESSION 2: SORT, FILTER AND CALCULATE TOTAL / SUBTOTAL
*--------------------------------------------------------------------*

* append subtotal & total line

    CREATE DATA lt_excel LIKE <f_alv_tab>.
    ASSIGN lt_excel->* TO <f_excel_tab>.

    LOOP AT <f_alv_tab> ASSIGNING <f_line>.
      l_save_index = sy-tabix.

* filter base on filter index table

      READ TABLE lt_filter_idx_kkblo ASSIGNING <f_filter_idx_line>
      WITH KEY index = l_save_index
      BINARY SEARCH.
      IF sy-subrc NE 0.
        APPEND <f_line> TO <f_excel_tab>.
      ENDIF.

* append subtotal lines

      READ TABLE lt_grouplevels_kkblo ASSIGNING <f_grouplevels_line>
      WITH KEY index_to = l_save_index
      BINARY SEARCH.
      IF sy-subrc = 0.
        l_tabix = sy-tabix.
        DO.
          IF <f_grouplevels_line>-subtot EQ 'X' AND
             <f_grouplevels_line>-hide_level IS INITIAL AND
             <f_grouplevels_line>-cindex_from NE 0.

* dynamic append subtotal line to excel table base on grouplevel table
* ex <f_GROUPLEVELS_line>-level = 1
* then <f_collect_tab> = '<F_COLLECT01>'

            l_collect = <f_grouplevels_line>-level.
            CONDENSE l_collect.
            CONCATENATE '<F_COLLECT0'
                        l_collect '>'
*                      '->*'
                        INTO l_collect.

            ASSIGN (l_collect) TO <f_collect_tab>.

* incase there're more than 1 total line of group, at the same level
* for example: subtotal of multi currency

            LOOP AT <f_collect_tab> ASSIGNING <f_collect_line>.
              IF  sy-tabix BETWEEN <f_grouplevels_line>-cindex_from
                              AND  <f_grouplevels_line>-cindex_to.


                APPEND <f_collect_line> TO <f_excel_tab>.

* save subtotal lines index

                wa_subtot_indexs-index = sy-tabix.
                APPEND wa_subtot_indexs TO lt_subtot_indexs.

* append sub total ranges table for format later

                ADD 1 TO l_sub_index.
                subrangeitem-name     =  l_sub_index.
                CONDENSE subrangeitem-name.
                CONCATENATE 'SUBTOT'
                            subrangeitem-name
                            INTO subrangeitem-name.

                subrangeitem-rows     = wa_subtot_indexs-index.
                subrangeitem-columns  = 1.            " start col
                APPEND subrangeitem TO subranges.
                CLEAR: subrangeitem.

              ENDIF.
            ENDLOOP.
            UNASSIGN: <f_collect_tab>.
            UNASSIGN: <f_collect_line>.
            CLEAR: l_collect.
          ENDIF.

* check next subtotal level of group

          UNASSIGN: <f_grouplevels_line>.
          ADD 1 TO l_tabix.

          READ TABLE lt_grouplevels_kkblo ASSIGNING <f_grouplevels_line>
          INDEX l_tabix.
          IF sy-subrc NE 0
          OR <f_grouplevels_line>-index_to NE l_save_index.
            EXIT.
          ENDIF.

          UNASSIGN:
            <f_collect_tab>,
            <f_collect_line>.

        ENDDO.
      ENDIF.

      CLEAR:
        l_tabix,
        l_save_index.

      UNASSIGN:
        <f_filter_idx_line>,
        <f_grouplevels_line>.

    ENDLOOP.

* free local data

    UNASSIGN:
      <f_line>,
      <f_collect_tab>,
      <f_collect_line>,
      <f_fieldcat_line>.

* append grand total line

    IF <f_collect00> IS ASSIGNED.
      ASSIGN <f_collect00> TO <f_collect_tab>.
      IF <f_collect_tab> IS NOT INITIAL.
        LOOP AT <f_collect_tab> ASSIGNING <f_collect_line>.

          APPEND <f_collect_line> TO <f_excel_tab>.

* save total line index

          wa_subtot_indexs-index = sy-tabix.
          APPEND wa_subtot_indexs TO lt_subtot_indexs.

* append grand total range (to format)

          ADD 1 TO l_sub_index.
          subrangeitem-name     =  l_sub_index.
          CONDENSE subrangeitem-name.
          CONCATENATE 'TOTAL'
                      subrangeitem-name
                      INTO subrangeitem-name.

          subrangeitem-rows     = wa_subtot_indexs-index.
          subrangeitem-columns  = 1.            " start col
          APPEND subrangeitem TO subranges.
        ENDLOOP.
      ENDIF.
    ENDIF.

    CLEAR:
      subrangeitem,
      lt_sort_kkblo,
      <f_collect00>,
      <f_collect01>,
      <f_collect02>,
      <f_collect03>,
      <f_collect04>,
      <f_collect05>,
      <f_collect06>,
      <f_collect07>,
      <f_collect08>,
      <f_collect09>.

    UNASSIGN:
      <f_collect00>,
      <f_collect01>,
      <f_collect02>,
      <f_collect03>,
      <f_collect04>,
      <f_collect05>,
      <f_collect06>,
      <f_collect07>,
      <f_collect08>,
      <f_collect09>,
      <f_collect_tab>,
      <f_collect_line>.

*--------------------------------------------------------------------*
* SESSION 3: MAP DATA TO SEMANTIC TABLE
*--------------------------------------------------------------------*

* get dependent field field: currency and quantity

    CREATE DATA wa LIKE LINE OF <f_excel_tab>.
    ASSIGN wa->* TO <f_excel_line>.

    DESCRIBE FIELD <f_excel_line> TYPE l_typ COMPONENTS l_num.

    DO l_num TIMES.
      l_save_index = sy-index.
      ASSIGN COMPONENT l_save_index OF STRUCTURE <f_excel_line>
      TO <f_excel_column>.
      IF sy-subrc NE 0.
        MESSAGE e059(0k) WITH 'FATAL ERROR' RAISING fatal_error.
      ENDIF.

      LOOP AT lt_fieldcat_kkblo ASSIGNING <f_fieldcat_line>
      WHERE tabname = l_tabname.
        ASSIGN COMPONENT <f_fieldcat_line>-fieldname
        OF STRUCTURE <f_excel_line> TO <f_fcat_column>.

        DESCRIBE DISTANCE BETWEEN <f_excel_column> AND <f_fcat_column>
        INTO l_int IN BYTE MODE.

* append column index
* this columns index is of table, not fieldcat

        IF l_int = 0.
          wa_column_index-fieldname = <f_fieldcat_line>-fieldname.
          wa_column_index-tabname   = <f_fieldcat_line>-tabname.
          wa_column_index-col       = l_save_index.
          APPEND wa_column_index TO lt_column_index.
        ENDIF.

* append dependent fields (currency and quantity unit)

        IF <f_fieldcat_line>-cfieldname IS NOT INITIAL.
          CLEAR wa_fieldcat_depf.
          wa_fieldcat_depf-fieldname = <f_fieldcat_line>-cfieldname.
          wa_fieldcat_depf-tabname   = <f_fieldcat_line>-ctabname.
          COLLECT wa_fieldcat_depf INTO lt_fieldcat_depf.
        ENDIF.

        IF <f_fieldcat_line>-qfieldname IS NOT INITIAL.
          CLEAR wa_fieldcat_depf.
          wa_fieldcat_depf-fieldname = <f_fieldcat_line>-qfieldname.
          wa_fieldcat_depf-tabname   = <f_fieldcat_line>-qtabname.
          COLLECT wa_fieldcat_depf INTO lt_fieldcat_depf.
        ENDIF.

* rewrite field data type

        IF <f_fieldcat_line>-inttype = 'X'
        AND <f_fieldcat_line>-datatype(3) = 'INT'.
          <f_fieldcat_line>-inttype = 'I'.
        ENDIF.

      ENDLOOP.

      CLEAR: l_save_index.
      UNASSIGN: <f_fieldcat_line>.

    ENDDO.

* build semantic tables

    l_n_hrz_keys = 1.

*   Get keyfigures

    LOOP AT lt_fieldcat_kkblo ASSIGNING <f_fieldcat_line>
    WHERE tabname = l_tabname
    AND tech NE 'X'
    AND no_out NE 'X'.

      CLEAR wa_sema.
      CLEAR wa_hkey.

*   Units belong to keyfigures -> display as str

      READ TABLE lt_fieldcat_depf INTO wa_fieldcat_depf WITH KEY
      fieldname = <f_fieldcat_line>-fieldname
      tabname   = <f_fieldcat_line>-tabname.

      IF sy-subrc = 0.
        wa_sema-col_typ = 'STR'.
        wa_sema-col_ops = 'DFT'.

*   Keyfigures

      ELSE.
        CASE <f_fieldcat_line>-datatype.
          WHEN 'QUAN'.
            wa_sema-col_typ = 'N03'.

            IF <f_fieldcat_line>-no_sum NE 'X'.
              wa_sema-col_ops = 'ADD'.
            ELSE.
              wa_sema-col_ops = 'NOP'. " no dependent field
            ENDIF.

          WHEN 'DATS'.
            wa_sema-col_typ = 'DAT'.
            wa_sema-col_ops = 'NOP'.

          WHEN 'CHAR' OR 'UNIT' OR 'CUKY'. " Added fieldformats UNIT and CUKY - dd. 26-10-2012 Wouter Heuvelmans
            wa_sema-col_typ = 'STR'.
            wa_sema-col_ops = 'DFT'.   " dependent field

*   incase numeric, ex '00120' -> display as '12'

          WHEN 'NUMC'.
            wa_sema-col_typ = 'STR'.
            wa_sema-col_ops = 'DFT'.

          WHEN OTHERS.
            wa_sema-col_typ = 'NUM'.

            IF <f_fieldcat_line>-no_sum NE 'X'.
              wa_sema-col_ops = 'ADD'.
            ELSE.
              wa_sema-col_ops = 'NOP'.
            ENDIF.
        ENDCASE.
      ENDIF.

      l_counter = l_counter + 1.
      l_n_att_cols = l_n_att_cols + 1.

      wa_sema-col_no = l_counter.

      READ TABLE lt_column_index INTO wa_column_index WITH KEY
      fieldname = <f_fieldcat_line>-fieldname
      tabname   = <f_fieldcat_line>-tabname.

      IF sy-subrc = 0.
        wa_sema-col_src = wa_column_index-col.
      ELSE.
        RAISE fatal_error.
      ENDIF.

* columns index of ref currency field in table

      IF NOT <f_fieldcat_line>-cfieldname IS INITIAL.
        READ TABLE lt_column_index INTO wa_column_index WITH KEY
        fieldname = <f_fieldcat_line>-cfieldname
        tabname   = <f_fieldcat_line>-ctabname.

        IF sy-subrc = 0.
          wa_sema-col_cur = wa_column_index-col.
        ENDIF.

* quantities fields
* treat as currency when display on excel

      ELSEIF NOT <f_fieldcat_line>-qfieldname IS INITIAL.
        READ TABLE lt_column_index INTO wa_column_index WITH KEY
        fieldname = <f_fieldcat_line>-qfieldname
        tabname   = <f_fieldcat_line>-qtabname.
        IF sy-subrc = 0.
          wa_sema-col_cur = wa_column_index-col.
        ENDIF.

      ENDIF.

*   Treat of fixed currency in the fieldcatalog for column

      DATA: l_num_help(2) TYPE n.

      IF NOT <f_fieldcat_line>-currency IS INITIAL.

        SELECT * FROM tcurx INTO TABLE lt_tcurx.
        SORT lt_tcurx.
        READ TABLE lt_tcurx INTO wa_tcurx
                   WITH KEY currkey = <f_fieldcat_line>-currency.
        IF sy-subrc = 0.
          l_num_help = wa_tcurx-currdec.
          CONCATENATE 'N' l_num_help INTO wa_sema-col_typ.
          wa_sema-col_cur = sy-tabix * ( -1 ).
        ENDIF.

      ENDIF.

      wa_hkey-col_no    = l_n_att_cols.
      wa_hkey-row_no    = l_n_hrz_keys.
      wa_hkey-col_name  = <f_fieldcat_line>-reptext.
      APPEND wa_hkey TO lt_hkey.
      APPEND wa_sema TO lt_sema.

    ENDLOOP.

* free local data

    CLEAR:
      lt_column_index,
      wa_column_index,
      lt_fieldcat_depf,
      wa_fieldcat_depf,
      lt_tcurx,
      wa_tcurx,
      l_num,
      l_typ,
      wa,
      l_int,
      l_counter.

    UNASSIGN:
      <f_fieldcat_line>,
      <f_excel_line>,
      <f_excel_column>,
      <f_fcat_column>.

*--------------------------------------------------------------------*
* SESSION 4: WRITE TO EXCEL
*--------------------------------------------------------------------*

    CLEAR: wa_tcurx.
    REFRESH: lt_tcurx.

*   if spreadsheet dun have proxy yet

    IF li_has IS INITIAL.
      l_retcode = c_oi_errors=>ret_interface_not_supported.
      CALL METHOD c_oi_errors=>create_error_for_retcode
        EXPORTING
          retcode  = l_retcode
          no_flush = no_flush
        IMPORTING
          error    = lo_error_w.
      EXIT.
    ENDIF.

    CREATE OBJECT l_error
      EXPORTING
        object_name = 'OLE_DOCUMENT_PROXY'
        method_name = 'get_ranges_names'.

    CALL METHOD c_oi_errors=>add_error
      EXPORTING
        error = l_error.


    DESCRIBE TABLE lt_sema LINES datareal.
    DESCRIBE TABLE <f_excel_tab> LINES datac.
    DESCRIBE TABLE lt_vkey LINES vkeycount.

    IF datac = 0.
      RAISE inv_data_range.
    ENDIF.


    IF vkeycount NE l_n_vrt_keys.
      RAISE dim_mismatch_vkey.
    ENDIF.

    all = l_n_vrt_keys + l_n_att_cols.

    IF datareal NE all.
      RAISE dim_mismatch_sema.
    ENDIF.

    DATA: decimal TYPE c.

* get decimal separator format ('.', ',', ...) in Office config

    CALL METHOD lo_proxy->get_application_property
      EXPORTING
        property_name    = 'INTERNATIONAL'
        subproperty_name = 'DECIMAL_SEPARATOR'
      CHANGING
        retvalue         = decimal.

    DATA: wa_usr TYPE usr01.
    SELECT * FROM usr01 INTO wa_usr WHERE bname = sy-uname.
    ENDSELECT.

    DATA: comma_elim(4) TYPE c.
    FIELD-SYMBOLS <g> TYPE any.
    DATA search_item(4) VALUE '   #'.

    CONCATENATE ',' decimal '.' decimal INTO comma_elim.

    DATA help TYPE i. " table (with subtotal) line number

    help = datac.

    DATA: rowmax TYPE i VALUE 1.    " header row number
    DATA: columnmax TYPE i VALUE 0. " header columns number

    LOOP AT lt_hkey INTO hkeyitem.
      IF hkeyitem-col_no > columnmax.
        columnmax = hkeyitem-col_no.
      ENDIF.

      IF hkeyitem-row_no > rowmax.
        rowmax = hkeyitem-row_no.
      ENDIF.
    ENDLOOP.

    DATA: hkeycolumns TYPE i. " header columns no

    hkeycolumns = columnmax.

    IF hkeycolumns <   l_n_att_cols.
      hkeycolumns = l_n_att_cols.
    ENDIF.

    columnmax = 0.

    LOOP AT lt_vkey INTO vkeyitem.
      IF vkeyitem-col_no > columnmax.
        columnmax = vkeyitem-col_no.
      ENDIF.
    ENDLOOP.

    DATA overflow TYPE i VALUE 1.
    DATA testname(10) TYPE c.
    DATA temp2 TYPE i.                " 1st item row position in excel
    DATA realmit TYPE i VALUE 1.
    DATA realoverflow TYPE i VALUE 1. " row index in content

    CALL METHOD lo_spreadsheet->screen_update
      EXPORTING
        updating = ''.

    CALL METHOD lo_spreadsheet->load_lib.

    DATA: str(40) TYPE c. " range names of columns range (w/o col header)
    DATA: rows TYPE i.    " row postion of 1st item line in ecxel

* calculate row position of data table

    DESCRIBE TABLE it_listheader LINES li_commentary_rows.

* if grid had title, add 1 empy line between title and table

    IF li_commentary_rows NE 0.
      ADD 1 TO li_commentary_rows.
    ENDIF.

* add top position of block data

    li_commentary_rows = li_commentary_rows + i_top - 1.

* write header (commentary rows)

    DATA: li_commentary_row_index TYPE i VALUE 1.
    DATA: li_content_index TYPE i VALUE 1.
    DATA: ls_index(10) TYPE c.
    DATA  ls_commentary_range(40) TYPE c VALUE 'TITLE'.
    DATA: li_font_bold    TYPE i.
    DATA: li_font_italic  TYPE i.
    DATA: li_font_size    TYPE i.

    LOOP AT it_listheader INTO wa_listheader.
      li_commentary_row_index = i_top + li_content_index - 1.
      ls_index = li_content_index.
      CONDENSE ls_index.
      CONCATENATE ls_commentary_range(5) ls_index
                  INTO ls_commentary_range.
      CONDENSE ls_commentary_range.

* insert title range

      CALL METHOD lo_spreadsheet->insert_range_dim
        EXPORTING
          name     = ls_commentary_range
          top      = li_commentary_row_index
          left     = i_left
          rows     = 1
          columns  = 1
          no_flush = no_flush.

* format range

      CASE wa_listheader-typ.
        WHEN 'H'. "title
          li_font_size    = 16.
          li_font_bold    = 1.
          li_font_italic  = -1.
        WHEN 'S'. "subtile
          li_font_size = -1.
          li_font_bold    = 1.
          li_font_italic  = -1.
        WHEN OTHERS. "'A' comment
          li_font_size = -1.
          li_font_bold    = -1.
          li_font_italic  = 1.
      ENDCASE.

      CALL METHOD lo_spreadsheet->set_font
        EXPORTING
          rangename = ls_commentary_range
          family    = ''
          size      = li_font_size
          bold      = li_font_bold
          italic    = li_font_italic
          align     = 0
          no_flush  = no_flush.

* title: range content

      rangeitem-name = ls_commentary_range.
      rangeitem-columns = 1.
      rangeitem-rows = 1.
      APPEND rangeitem TO ranges.

      contentsitem-row    = li_content_index.
      contentsitem-column = 1.
      CONCATENATE wa_listheader-key
                  wa_listheader-info
                  INTO contentsitem-value
                  SEPARATED BY space.
      CONDENSE contentsitem-value.
      APPEND contentsitem TO contents.

      ADD 1 TO li_content_index.

      CLEAR:
        rangeitem,
        contentsitem,
        ls_index.

    ENDLOOP.

* set range data title

    CALL METHOD lo_spreadsheet->set_ranges_data
      EXPORTING
        ranges   = ranges
        contents = contents
        no_flush = no_flush.

    REFRESH:
       ranges,
       contents.

    rows = rowmax + li_commentary_rows + 1.

    all = wa_usr-datfm.
    all = all + 3.

    LOOP AT lt_sema INTO semaitem.
      IF semaitem-col_typ = 'DAT' OR semaitem-col_typ = 'MON' OR
         semaitem-col_typ = 'N00' OR semaitem-col_typ = 'N01' OR
         semaitem-col_typ = 'N01' OR semaitem-col_typ = 'N02' OR
         semaitem-col_typ = 'N03' OR semaitem-col_typ = 'PCT' OR
         semaitem-col_typ = 'STR' OR semaitem-col_typ = 'NUM'.
        CLEAR str.
        str = semaitem-col_no.
        CONDENSE str.
        CONCATENATE 'DATA' str INTO str.
        mit = semaitem-col_no.
        li_col_pos = semaitem-col_no + i_left - 1.

* range from data1 to data(n), for each columns of table

        CALL METHOD lo_spreadsheet->insert_range_dim
          EXPORTING
            name     = str
            top      = rows
            left     = li_col_pos
            rows     = help
            columns  = 1
            no_flush = no_flush.

        DATA dec TYPE i VALUE -1.
        DATA typeinfo TYPE sydes_typeinfo.
        LOOP AT <f_excel_tab> ASSIGNING <line>.
          ASSIGN COMPONENT semaitem-col_no OF STRUCTURE <line> TO <item>.
          DESCRIBE FIELD <item> INTO td.
          READ TABLE td-types INDEX 1 INTO typeinfo.
          IF typeinfo-type = 'P'.
            dec = typeinfo-decimals.
          ELSEIF typeinfo-type = 'I'.
            dec = 0.
          ENDIF.

          DESCRIBE FIELD <line> TYPE typ COMPONENTS count.
          mit = 1.
          DO count TIMES.
            IF mit = semaitem-col_src.
              ASSIGN COMPONENT sy-index OF STRUCTURE <line> TO <item>.
              DESCRIBE FIELD <item> INTO td.
              READ TABLE td-types INDEX 1 INTO typeinfo.
              IF typeinfo-type = 'P'.
                dec = typeinfo-decimals.
              ENDIF.
              EXIT.
            ENDIF.
            mit = mit + 1.
          ENDDO.
          EXIT.
        ENDLOOP.

* format for each columns of table (w/o columns headers)

        IF semaitem-col_typ = 'DAT'.
          IF semaitem-col_no > vkeycount.
            CALL METHOD lo_spreadsheet->set_format
              EXPORTING
                rangename = str
                currency  = ''
                typ       = all
                no_flush  = no_flush.
          ELSE.
            CALL METHOD lo_spreadsheet->set_format
              EXPORTING
                rangename = str
                currency  = ''
                typ       = 0
                no_flush  = no_flush.
          ENDIF.
        ELSEIF semaitem-col_typ = 'STR'.
          CALL METHOD lo_spreadsheet->set_format
            EXPORTING
              rangename = str
              currency  = ''
              typ       = 0
              no_flush  = no_flush.
        ELSEIF semaitem-col_typ = 'MON'.
          CALL METHOD lo_spreadsheet->set_format
            EXPORTING
              rangename = str
              currency  = ''
              typ       = 10
              no_flush  = no_flush.
        ELSEIF semaitem-col_typ = 'N00'.
          CALL METHOD lo_spreadsheet->set_format
            EXPORTING
              rangename = str
              currency  = ''
              typ       = 1
              decimals  = 0
              no_flush  = no_flush.
        ELSEIF semaitem-col_typ = 'N01'.
          CALL METHOD lo_spreadsheet->set_format
            EXPORTING
              rangename = str
              currency  = ''
              typ       = 1
              decimals  = 1
              no_flush  = no_flush.
        ELSEIF semaitem-col_typ = 'N02'.
          CALL METHOD lo_spreadsheet->set_format
            EXPORTING
              rangename = str
              currency  = ''
              typ       = 1
              decimals  = 2
              no_flush  = no_flush.
        ELSEIF semaitem-col_typ = 'N03'.
          CALL METHOD lo_spreadsheet->set_format
            EXPORTING
              rangename = str
              currency  = ''
              typ       = 1
              decimals  = 3
              no_flush  = no_flush.
        ELSEIF semaitem-col_typ = 'N04'.
          CALL METHOD lo_spreadsheet->set_format
            EXPORTING
              rangename = str
              currency  = ''
              typ       = 1
              decimals  = 4
              no_flush  = no_flush.
        ELSEIF semaitem-col_typ = 'NUM'.
          IF dec EQ -1.
            CALL METHOD lo_spreadsheet->set_format
              EXPORTING
                rangename = str
                currency  = ''
                typ       = 1
                decimals  = 2
                no_flush  = no_flush.
          ELSE.
            CALL METHOD lo_spreadsheet->set_format
              EXPORTING
                rangename = str
                currency  = ''
                typ       = 1
                decimals  = dec
                no_flush  = no_flush.
          ENDIF.
        ELSEIF semaitem-col_typ = 'PCT'.
          CALL METHOD lo_spreadsheet->set_format
            EXPORTING
              rangename = str
              currency  = ''
              typ       = 3
              decimals  = 0
              no_flush  = no_flush.
        ENDIF.

      ENDIF.
    ENDLOOP.

* get item contents for set_range_data method
* get currency cell also

    mit = 1.

    DATA: currcells TYPE soi_cell_table.
    DATA: curritem  TYPE soi_cell_item.

    curritem-rows = 1.
    curritem-columns = 1.
    curritem-front = -1.
    curritem-back = -1.
    curritem-font = ''.
    curritem-size = -1.
    curritem-bold = -1.
    curritem-italic = -1.
    curritem-align = -1.
    curritem-frametyp = -1.
    curritem-framecolor = -1.
    curritem-currency = ''.
    curritem-number = 1.
    curritem-input = -1.

    DATA: const TYPE i.

*   Change for Correction request
*    Initial 10000 lines are missing in Excel Export
*    if there are only 2 columns in exported List object.

    IF datareal GT 2.
      const = 20000 / datareal.
    ELSE.
      const = 20000 / ( datareal + 2 ).
    ENDIF.

    DATA: lines TYPE i.
    DATA: innerlines TYPE i.
    DATA: counter TYPE i.
    DATA: curritem2 LIKE curritem.
    DATA: curritem3 LIKE curritem.
    DATA: length TYPE i.
    DATA: found.

* append content table (for method set_range_content)

    LOOP AT <f_excel_tab> ASSIGNING <line>.

* save line index to compare with lt_subtot_indexs,
* to discover line is a subtotal / totale line or not
* ex use to set 'dun display zero in subtotal / total line'

      l_save_index = sy-tabix.

      DO datareal TIMES.
        READ TABLE lt_sema INTO semaitem WITH KEY col_no = sy-index.
        IF semaitem-col_src NE 0.
          ASSIGN COMPONENT semaitem-col_src
                 OF STRUCTURE <line> TO <item>.
        ELSE.
          ASSIGN COMPONENT sy-index
                 OF STRUCTURE <line> TO <item>.
        ENDIF.

        contentsitem-row = realoverflow.

        IF sy-subrc = 0.
          MOVE semaitem-col_ops TO search_item(3).
          SEARCH 'ADD#CNT#MIN#MAX#AVG#NOP#DFT#'
                            FOR search_item.
          IF sy-subrc NE 0.
            RAISE error_in_sema.
          ENDIF.
          MOVE semaitem-col_typ TO search_item(3).
          SEARCH 'NUM#N00#N01#N02#N03#N04#PCT#DAT#MON#STR#'
                            FOR search_item.
          IF sy-subrc NE 0.
            RAISE error_in_sema.
          ENDIF.
          contentsitem-column = sy-index.
          IF semaitem-col_typ EQ 'DAT' OR semaitem-col_typ EQ 'MON'.
            IF semaitem-col_no > vkeycount.

              " Hinweis 512418
              " EXCEL bezieht Datumsangaben
              " auf den 31.12.1899, behandelt
              " aber 1900 als ein Schaltjahr
              " d.h. ab 1.3.1900 korrekt
              " 1.3.1900 als Zahl = 61

              DATA: genesis TYPE d VALUE '18991230'.
              DATA: number_of_days TYPE p.
* change for date in char format & sema_type = X
              DATA: temp_date TYPE d.

              IF NOT <item> IS INITIAL AND NOT <item> CO ' ' AND NOT
              <item> CO '0'.
* change for date in char format & sema_type = X starts
                IF sema_type = 'X'.
                  DESCRIBE FIELD <item> TYPE typ.
                  IF typ = 'C'.
                    temp_date = <item>.
                    number_of_days = temp_date - genesis.
                  ELSE.
                    number_of_days = <item> - genesis.
                  ENDIF.
                ELSE.
                  number_of_days = <item> - genesis.
                ENDIF.
* change for date in char format & sema_type = X ends
                IF number_of_days < 61.
                  number_of_days = number_of_days - 1.
                ENDIF.

                SET COUNTRY 'DE'.
                WRITE number_of_days TO contentsitem-value
                NO-GROUPING
                                          LEFT-JUSTIFIED.
                SET COUNTRY space.
                TRANSLATE contentsitem-value USING comma_elim.
              ELSE.
                CLEAR contentsitem-value.
              ENDIF.
            ELSE.
              MOVE <item> TO contentsitem-value.
            ENDIF.
          ELSEIF semaitem-col_typ EQ 'NUM' OR
                 semaitem-col_typ EQ 'N00' OR
                 semaitem-col_typ EQ 'N01' OR
                 semaitem-col_typ EQ 'N02' OR
                 semaitem-col_typ EQ 'N03' OR
                 semaitem-col_typ EQ 'N04' OR
                 semaitem-col_typ EQ 'PCT'.
            SET COUNTRY 'DE'.
            DESCRIBE FIELD <item> TYPE typ.

            IF semaitem-col_cur IS INITIAL.
              IF typ NE 'F'.
                WRITE <item> TO contentsitem-value NO-GROUPING
                                                   NO-SIGN DECIMALS 14.
              ELSE.
                WRITE <item> TO contentsitem-value NO-GROUPING
                                                   NO-SIGN.
              ENDIF.
            ELSE.
* Treat of fixed curreny for column >>Y9CK007319
              IF semaitem-col_cur < 0.
                semaitem-col_cur = semaitem-col_cur * ( -1 ).
                SELECT * FROM tcurx INTO TABLE lt_tcurx.
                SORT lt_tcurx.
                READ TABLE lt_tcurx INTO
                                    wa_tcurx INDEX semaitem-col_cur.
                IF sy-subrc = 0.
                  IF typ NE 'F'.
                    WRITE <item> TO contentsitem-value NO-GROUPING
                     CURRENCY wa_tcurx-currkey NO-SIGN DECIMALS 14.
                  ELSE.
                    WRITE <item> TO contentsitem-value NO-GROUPING
                     CURRENCY wa_tcurx-currkey NO-SIGN.
                  ENDIF.
                ENDIF.
              ELSE.
                ASSIGN COMPONENT semaitem-col_cur
                     OF STRUCTURE <line> TO <g>.
* mit = index of recent row
                curritem-top  = rowmax + mit + li_commentary_rows.

                li_col_pos =  sy-index + i_left - 1.
                curritem-left = li_col_pos.

* if filed is quantity field (qfieldname ne space)
* or amount field (cfieldname ne space), then format decimal place
* corresponding with config

                CLEAR: l_def.
                READ TABLE lt_fieldcat_kkblo ASSIGNING <f_fieldcat_line>
                WITH KEY  tabname = l_tabname
                          tech    = space
                          no_out  = space
                          col_pos = semaitem-col_no.
                IF sy-subrc = 0.
                  IF <f_fieldcat_line>-cfieldname IS NOT INITIAL.
                    l_def = 'C'.
                  ELSE."if <f_fieldcat_line>-qfieldname is not initial.
                    l_def = 'Q'.
                  ENDIF.
                ENDIF.

* if field is amount field
* exporting of amount field base on currency decimal table: TCURX
                IF l_def = 'C'. "field is amount field
                  SELECT SINGLE * FROM tcurx INTO wa_tcurx
                    WHERE currkey = <g>.
* if amount ref to un-know currency -> default decimal  = 2
                  IF sy-subrc EQ 0.
                    curritem-decimals = wa_tcurx-currdec.
                  ELSE.
                    curritem-decimals = 2.
                  ENDIF.

                  APPEND curritem TO currcells.
                  IF typ NE 'F'.
                    WRITE <item> TO contentsitem-value
                                        CURRENCY <g>
                       NO-SIGN NO-GROUPING.
                  ELSE.
                    WRITE <item> TO contentsitem-value
                       DECIMALS 14      CURRENCY <g>
                       NO-SIGN NO-GROUPING.
                  ENDIF.

* if field is quantity field
* exporting of quantity field base on quantity decimal table: T006

                ELSE."if l_def = 'Q'. " field is quantity field
                  CLEAR: wa_t006.
                  SELECT SINGLE * FROM t006 INTO wa_t006
                    WHERE msehi = <g>.
* if quantity ref to un-know unit-> default decimal  = 2
                  IF sy-subrc EQ 0.
                    curritem-decimals = wa_t006-decan.
                  ELSE.
                    curritem-decimals = 2.
                  ENDIF.
                  APPEND curritem TO currcells.

                  WRITE <item> TO contentsitem-value
                                      UNIT <g>
                     NO-SIGN NO-GROUPING.
                  CONDENSE contentsitem-value.

                ENDIF.

              ENDIF.                                        "Y9CK007319
            ENDIF.
            CONDENSE contentsitem-value.

* add function fieldcat-no zero display

            LOOP AT lt_fieldcat_kkblo ASSIGNING <f_fieldcat_line>
            WHERE tabname = l_tabname
            AND   tech NE 'X'
            AND   no_out NE 'X'.
              IF <f_fieldcat_line>-col_pos = semaitem-col_no.
                IF <f_fieldcat_line>-no_zero = 'X'.
                  IF <item> = '0'.
                    CLEAR: contentsitem-value.
                  ENDIF.

* dun display zero in total/subtotal line too

                ELSE.
                  CLEAR: wa_subtot_indexs.
                  READ TABLE lt_subtot_indexs INTO wa_subtot_indexs
                  WITH KEY index = l_save_index.
                  IF sy-subrc = 0 AND <item> = '0'.
                    CLEAR: contentsitem-value.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDLOOP.
            UNASSIGN: <f_fieldcat_line>.

            IF <item> LT 0.
              SEARCH contentsitem-value FOR 'E'.
              IF sy-fdpos EQ 0.

* use prefix notation for signed numbers

                TRANSLATE contentsitem-value USING '- '.
                CONDENSE contentsitem-value NO-GAPS.
                CONCATENATE '-' contentsitem-value
                           INTO contentsitem-value.
              ELSE.
                CONCATENATE '-' contentsitem-value
                           INTO contentsitem-value.
              ENDIF.
            ENDIF.
            SET COUNTRY space.
* Hier wird nur die korrekte Kommaseparatierung gemacht, wenn die
* Zeichen einer
* Zahl enthalten sind. Das ist für Timestamps, die auch ":" enthalten.
* Für die
* darf keine Kommaseparierung stattfinden.
* Changing for correction request - Y6BK041073
            IF contentsitem-value CO '0123456789.,-+E '.
              TRANSLATE contentsitem-value USING comma_elim.
            ENDIF.
          ELSE.
            CLEAR contentsitem-value.

* if type is not numeric -> dun display with zero

            WRITE <item> TO contentsitem-value NO-ZERO.

            SHIFT contentsitem-value LEFT DELETING LEADING space.

          ENDIF.
          APPEND contentsitem TO contents.
        ENDIF.
      ENDDO.

      realmit = realmit + 1.
      realoverflow = realoverflow + 1.

      mit = mit + 1.
*   overflow = current row index in content table
      overflow = overflow + 1.
    ENDLOOP.

    UNASSIGN: <f_fieldcat_line>.

* set item range for set_range_data method

    testname = mit / const.
    CONDENSE testname.

    CONCATENATE 'TEST' testname INTO testname.

    realoverflow = realoverflow - 1.
    realmit = realmit - 1.
    help = realoverflow.

    rangeitem-name = testname.
    rangeitem-columns = datareal.
    rangeitem-rows = help.
    APPEND rangeitem TO ranges.

* insert item range dim

    temp2 = rowmax + 1 + li_commentary_rows + realmit - realoverflow.

* items data

    CALL METHOD lo_spreadsheet->insert_range_dim
      EXPORTING
        name     = testname
        top      = temp2
        left     = i_left
        rows     = help
        columns  = datareal
        no_flush = no_flush.

* get columns header contents for set_range_data method
* export columns header only if no columns header option = space

    DATA: rowcount TYPE i.
    DATA: columncount TYPE i.

    IF i_columns_header = 'X'.

* append columns header to contents: hkey

      rowcount = 1.
      DO rowmax TIMES.
        columncount = 1.
        DO hkeycolumns TIMES.
          LOOP AT lt_hkey INTO hkeyitem WHERE col_no = columncount
                                           AND row_no   = rowcount.
          ENDLOOP.
          IF sy-subrc = 0.
            str = hkeyitem-col_name.
            contentsitem-value = hkeyitem-col_name.
          ELSE.
            contentsitem-value = str.
          ENDIF.
          contentsitem-column = columncount.
          contentsitem-row = rowcount.
          APPEND contentsitem TO contents.
          columncount = columncount + 1.
        ENDDO.
        rowcount = rowcount + 1.
      ENDDO.

* incase columns header in multiline

      DATA: rowmaxtemp TYPE i.
      IF rowmax > 1.
        rowmaxtemp = rowmax - 1.
        rowcount = 1.
        DO rowmaxtemp TIMES.
          columncount = 1.
          DO columnmax TIMES.
            contentsitem-column = columncount.
            contentsitem-row    = rowcount.
            contentsitem-value  = ''.
            APPEND contentsitem TO contents.
            columncount = columncount + 1.
          ENDDO.
          rowcount = rowcount + 1.
        ENDDO.
      ENDIF.

* append columns header to contents: vkey

      columncount = 1.
      DO columnmax TIMES.
        LOOP AT lt_vkey INTO vkeyitem WHERE col_no = columncount.
        ENDLOOP.
        contentsitem-value = vkeyitem-col_name.
        contentsitem-row = rowmax.
        contentsitem-column = columncount.
        APPEND contentsitem TO contents.
        columncount = columncount + 1.
      ENDDO.
*--------------------------------------------------------------------*
* set header range for method set_range_data
* insert header keys range dim

      li_head_top = li_commentary_rows + 1.
      li_col_pos = i_left.

* insert range headers

      IF hkeycolumns NE 0.
        rangeitem-name = 'TESTHKEY'.
        rangeitem-rows = rowmax.
        rangeitem-columns = hkeycolumns.
        APPEND rangeitem TO ranges.
        CLEAR: rangeitem.

        CALL METHOD lo_spreadsheet->insert_range_dim
          EXPORTING
            name     = 'TESTHKEY'
            top      = li_head_top
            left     = li_col_pos
            rows     = rowmax
            columns  = hkeycolumns
            no_flush = no_flush.
      ENDIF.
    ENDIF.

* format for columns header + total + subtotal
* ------------------------------------------

    help = rowmax + realmit. " table + header lines

    DATA: lt_format     TYPE soi_format_table.
    DATA: wa_format     LIKE LINE OF lt_format.
    DATA: wa_format_temp LIKE LINE OF lt_format.

    FIELD-SYMBOLS: <f_source> TYPE any.
    FIELD-SYMBOLS: <f_des>    TYPE any.

* columns header format

    wa_format-front       = -1.
    wa_format-back        = 15. "grey
    wa_format-font        = space.
    wa_format-size        = -1.
    wa_format-bold        = 1.
    wa_format-align       = 0.
    wa_format-frametyp    = -1.
    wa_format-framecolor  = -1.

* get column header format from input record
* -> map input format

    IF i_columns_header = 'X'.
      wa_format-name        = 'TESTHKEY'.
      IF i_format_col_header IS NOT INITIAL.
        DESCRIBE FIELD i_format_col_header TYPE l_typ COMPONENTS
        li_col_num.
        DO li_col_num TIMES.
          IF sy-index NE 1. " dun map range name
            ASSIGN COMPONENT sy-index OF STRUCTURE i_format_col_header
            TO <f_source>.
            IF <f_source> IS NOT INITIAL.
              ASSIGN COMPONENT sy-index OF STRUCTURE wa_format TO <f_des>.
              <f_des> = <f_source>.
              UNASSIGN: <f_des>.
            ENDIF.
            UNASSIGN: <f_source>.
          ENDIF.
        ENDDO.

        CLEAR: li_col_num.
      ENDIF.

      APPEND wa_format TO lt_format.
    ENDIF.

* Zusammenfassen der Spalten mit gleicher Nachkommastellenzahl
* collect vertical cells (col)  with the same number of decimal places
* to increase perfomance in currency cell format

    DESCRIBE TABLE currcells LINES lines.
    lines = lines - 1.
    DO lines TIMES.
      DESCRIBE TABLE currcells LINES innerlines.
      innerlines = innerlines - 1.
      SORT currcells BY left top.
      CLEAR found.
      DO innerlines TIMES.
        READ TABLE currcells INDEX sy-index INTO curritem.
        counter = sy-index + 1.
        READ TABLE currcells INDEX counter INTO curritem2.
        IF curritem-left EQ curritem2-left.
          length = curritem-top + curritem-rows.
          IF length EQ curritem2-top AND curritem-decimals EQ curritem2-decimals.
            MOVE curritem TO curritem3.
            curritem3-rows = curritem3-rows + curritem2-rows.
            curritem-left = -1.
            MODIFY currcells INDEX sy-index FROM curritem.
            curritem2-left = -1.
            MODIFY currcells INDEX counter FROM curritem2.
            APPEND curritem3 TO currcells.
            found = 'X'.
          ENDIF.
        ENDIF.
      ENDDO.
      IF found IS INITIAL.
        EXIT.
      ENDIF.
      DELETE currcells WHERE left = -1.
    ENDDO.

* Zusammenfassen der Zeilen mit gleicher Nachkommastellenzahl
* collect horizontal cells (row) with the same number of decimal places
* to increase perfomance in currency cell format

    DESCRIBE TABLE currcells LINES lines.
    lines = lines - 1.
    DO lines TIMES.
      DESCRIBE TABLE currcells LINES innerlines.
      innerlines = innerlines - 1.
      SORT currcells BY top left.
      CLEAR found.
      DO innerlines TIMES.
        READ TABLE currcells INDEX sy-index INTO curritem.
        counter = sy-index + 1.
        READ TABLE currcells INDEX counter INTO curritem2.
        IF curritem-top EQ curritem2-top AND curritem-rows EQ
        curritem2-rows.
          length = curritem-left + curritem-columns.
          IF length EQ curritem2-left AND curritem-decimals EQ curritem2-decimals.
            MOVE curritem TO curritem3.
            curritem3-columns = curritem3-columns + curritem2-columns.
            curritem-left = -1.
            MODIFY currcells INDEX sy-index FROM curritem.
            curritem2-left = -1.
            MODIFY currcells INDEX counter FROM curritem2.
            APPEND curritem3 TO currcells.
            found = 'X'.
          ENDIF.
        ENDIF.
      ENDDO.
      IF found IS INITIAL.
        EXIT.
      ENDIF.
      DELETE currcells WHERE left = -1.
    ENDDO.
* Ende der Zusammenfassung


* item data: format for currency cell, corresponding with currency

    CALL METHOD lo_spreadsheet->cell_format
      EXPORTING
        cells    = currcells
        no_flush = no_flush.

* item data: write item table content

    CALL METHOD lo_spreadsheet->set_ranges_data
      EXPORTING
        ranges   = ranges
        contents = contents
        no_flush = no_flush.

* whole table range to format all table

    IF i_columns_header = 'X'.
      li_head_top = li_commentary_rows + 1.
    ELSE.
      li_head_top = li_commentary_rows + 2.
      help = help - 1.
    ENDIF.

    CALL METHOD lo_spreadsheet->insert_range_dim
      EXPORTING
        name     = 'WHOLE_TABLE'
        top      = li_head_top
        left     = i_left
        rows     = help
        columns  = datareal
        no_flush = no_flush.

* columns width auto fix
* this parameter = space in case use with exist template

    IF i_columns_autofit = 'X'.
      CALL METHOD lo_spreadsheet->fit_widest
        EXPORTING
          name     = 'WHOLE_TABLE'
          no_flush = no_flush.
    ENDIF.

* frame
* The parameter has 8 bits
*0 Left margin
*1 Top marginT
*2 Bottom margin
*3 Right margin
*4 Horizontal line
*5 Vertical line
*6 Thinness
*7 Thickness
* here 127 = 1111111 6-5-4-3-2-1 mean Thin-ver-hor-right-bot-top-left

* ( final DOI method call, set no_flush = space
* equal to call method CL_GUI_CFW=>FLUSH )

    CALL METHOD lo_spreadsheet->set_frame
      EXPORTING
        rangename = 'WHOLE_TABLE'
        typ       = 127
        color     = 1
        no_flush  = space
      IMPORTING
        error     = lo_error
        retcode   = lc_retcode.

    error_doi.

* reformat subtotal / total line after format wholw table

    LOOP AT subranges INTO subrangeitem.
      l_sub_index = subrangeitem-rows + li_commentary_rows + rowmax.

      CALL METHOD lo_spreadsheet->insert_range_dim
        EXPORTING
          name     = subrangeitem-name
          left     = i_left
          top      = l_sub_index
          rows     = 1
          columns  = datareal
          no_flush = no_flush.

      wa_format-name    = subrangeitem-name.

*   default format:
*     - clolor: subtotal = light yellow, subtotal = yellow
*     - frame: box

      IF  subrangeitem-name(3) = 'SUB'.
        wa_format-back = 36. "subtotal line
        wa_format_temp = i_format_subtotal.
      ELSE.
        wa_format-back = 27. "total line
        wa_format_temp = i_format_total.
      ENDIF.
      wa_format-frametyp = 79.
      wa_format-framecolor = 1.
      wa_format-number  = -1.
      wa_format-align   = -1.

*   get subtoal + total format from intput parameter
*   overwrite default format

      IF wa_format_temp IS NOT INITIAL.
        DESCRIBE FIELD wa_format_temp TYPE l_typ COMPONENTS li_col_num.
        DO li_col_num TIMES.
          IF sy-index NE 1. " dun map range name
            ASSIGN COMPONENT sy-index OF STRUCTURE wa_format_temp
            TO <f_source>.
            IF <f_source> IS NOT INITIAL.
              ASSIGN COMPONENT sy-index OF STRUCTURE wa_format TO <f_des>.
              <f_des> = <f_source>.
              UNASSIGN: <f_des>.
            ENDIF.
            UNASSIGN: <f_source>.
          ENDIF.
        ENDDO.

        CLEAR: li_col_num.
      ENDIF.

      APPEND wa_format TO lt_format.
      CLEAR: wa_format-name.
      CLEAR: l_sub_index.
      CLEAR: wa_format_temp.

    ENDLOOP.

    IF lt_format[] IS NOT INITIAL.
      CALL METHOD lo_spreadsheet->set_ranges_format
        EXPORTING
          formattable = lt_format
          no_flush    = no_flush.
      REFRESH: lt_format.
    ENDIF.
*--------------------------------------------------------------------*
    CALL METHOD lo_spreadsheet->screen_update
      EXPORTING
        updating = 'X'.

    CALL METHOD c_oi_errors=>flush_errors.

    lo_error_w = l_error.
    lc_retcode = lo_error_w->error_code.

** catch no_flush -> led to dump ( optional )
*    go_error = l_error.
*    gc_retcode = go_error->error_code.
*    error_doi.

    CLEAR:
      lt_sema,
      wa_sema,
      lt_hkey,
      wa_hkey,
      lt_vkey,
      wa_vkey,
      l_n_hrz_keys,
      l_n_att_cols,
      l_n_vrt_keys,
      count,
      datac,
      datareal,
      vkeycount,
      all,
      mit,
      li_col_pos,
      li_col_num,
      ranges,
      rangeitem,
      contents,
      contentsitem,
      semaitem,
      hkeyitem,
      vkeyitem,
      li_commentary_rows,
      l_retcode,
      li_head_top,
      <f_excel_tab>.

    CLEAR:
       lo_error_w.

    UNASSIGN:
    <line>,
    <item>,
    <f_excel_tab>.

*--------------------------------------------------------------------*
* SESSION 5: SAVE AND CLOSE FILE
*--------------------------------------------------------------------*

* ex of save path: 'FILE://C:\temp\test.xlsx'
    CONCATENATE 'FILE://' i_save_path
                INTO ls_path.

    CALL METHOD lo_proxy->save_document_to_url
      EXPORTING
        no_flush      = 'X'
        url           = ls_path
      IMPORTING
        error         = lo_error
        retcode       = lc_retcode
      CHANGING
        document_size = li_document_size.

    error_doi.

* if save successfully -> raise successful message
*  message i499(sy) with 'Document is Exported to ' p_path.
    MESSAGE i499(sy) WITH 'Data has been exported successfully'.

    CLEAR:
      ls_path,
      li_document_size.

    close_document.
  ENDMETHOD.                    "BIND_ALV_OLE2


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->BIND_TABLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_TABLE                       TYPE        STANDARD TABLE
* | [--->] IT_FIELD_CATALOG               TYPE        ZEXCEL_T_FIELDCATALOG(optional)
* | [--->] IS_TABLE_SETTINGS              TYPE        ZEXCEL_S_TABLE_SETTINGS(optional)
* | [--->] IV_DEFAULT_DESCR               TYPE        C(optional)
* | [--->] IV_NO_LINE_IF_EMPTY            TYPE        ABAP_BOOL (default =ABAP_FALSE)
* | [<---] ES_TABLE_SETTINGS              TYPE        ZEXCEL_S_TABLE_SETTINGS
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD bind_table.
*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmöcker,      (wi p)              2012-12-01
*              - ...
*          aligning code
*          message made to support multilinguality
*--------------------------------------------------------------------*
* issue #237   - Check if overlapping areas exist
*              - Alessandro Iannacci                        2012-12-01
* changes:     - Added raise if overlaps are detected
*--------------------------------------------------------------------*

    CONSTANTS:
      lc_top_left_column TYPE zexcel_cell_column_alpha VALUE 'A',
      lc_top_left_row    TYPE zexcel_cell_row VALUE 1.

    DATA:
      lv_row_int            TYPE zexcel_cell_row,
      lv_first_row          TYPE zexcel_cell_row,
      lv_last_row           TYPE zexcel_cell_row,
      lv_column_int         TYPE zexcel_cell_column,
      lv_column_alpha       TYPE zexcel_cell_column_alpha,
      lt_field_catalog      TYPE zexcel_t_fieldcatalog,
      lv_id                 TYPE i,
      lv_rows               TYPE i,
      lv_formula            TYPE string,
      ls_settings           TYPE zexcel_s_table_settings,
      lo_table              TYPE REF TO zcl_excel_table,
      lt_column_name_buffer TYPE SORTED TABLE OF string WITH UNIQUE KEY table_line,
      lv_value              TYPE string,
      lv_value_lowercase    TYPE string,
      lv_syindex            TYPE char3,
      lv_errormessage       TYPE string,                                            "ins issue #237

      lv_columns            TYPE i,
      lt_columns            TYPE zexcel_t_fieldcatalog,
      lv_maxcol             TYPE i,
      lv_maxrow             TYPE i,
      lo_iterator           TYPE REF TO cl_object_collection_iterator,
      lo_style_cond         TYPE REF TO zcl_excel_style_cond,
      lo_curtable           TYPE REF TO zcl_excel_table.

    FIELD-SYMBOLS:
      <ls_field_catalog>        TYPE zexcel_s_fieldcatalog,
      <ls_field_catalog_custom> TYPE zexcel_s_fieldcatalog,
      <fs_table_line>           TYPE any,
      <fs_fldval>               TYPE any.

    ls_settings = is_table_settings.

    IF ls_settings-top_left_column IS INITIAL.
      ls_settings-top_left_column = lc_top_left_column.
    ENDIF.

    IF ls_settings-table_style IS INITIAL.
      ls_settings-table_style = zcl_excel_table=>builtinstyle_medium2.
    ENDIF.

    IF ls_settings-top_left_row IS INITIAL.
      ls_settings-top_left_row = lc_top_left_row.
    ENDIF.

    IF it_field_catalog IS NOT SUPPLIED.
      lt_field_catalog = zcl_excel_common=>get_fieldcatalog( ip_table = ip_table ).
    ELSE.
      lt_field_catalog = it_field_catalog.
    ENDIF.

    SORT lt_field_catalog BY position.

*--------------------------------------------------------------------*
*  issue #237   Check if overlapping areas exist  Start
*--------------------------------------------------------------------*
    "Get the number of columns for the current table
    lt_columns = lt_field_catalog.
    DELETE lt_columns WHERE dynpfld NE abap_true.
    DESCRIBE TABLE lt_columns LINES lv_columns.

    "Calculate the top left row of the current table
    lv_column_int = zcl_excel_common=>convert_column2int( ls_settings-top_left_column ).
    lv_row_int    = ls_settings-top_left_row.

    "Get number of row for the current table
    DESCRIBE TABLE ip_table LINES lv_rows.

    "Calculate the bottom right row for the current table
    lv_maxcol                       = lv_column_int + lv_columns - 1.
    lv_maxrow                       = lv_row_int    + lv_rows - 1.
    ls_settings-bottom_right_column = zcl_excel_common=>convert_column2alpha( lv_maxcol ).
    ls_settings-bottom_right_row    = lv_maxrow.

    lv_column_int                   = zcl_excel_common=>convert_column2int( ls_settings-top_left_column ).

    lo_iterator = me->tables->if_object_collection~get_iterator( ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.

      lo_curtable ?= lo_iterator->if_object_collection_iterator~get_next( ).
      IF  (    (  ls_settings-top_left_row     GE lo_curtable->settings-top_left_row                             AND ls_settings-top_left_row     LE lo_curtable->settings-bottom_right_row )
            OR
               (  ls_settings-bottom_right_row GE lo_curtable->settings-top_left_row                             AND ls_settings-bottom_right_row LE lo_curtable->settings-bottom_right_row )
          )
        AND
          (    (  lv_column_int GE zcl_excel_common=>convert_column2int( lo_curtable->settings-top_left_column ) AND lv_column_int LE zcl_excel_common=>convert_column2int( lo_curtable->settings-bottom_right_column ) )
            OR
               (  lv_maxcol     GE zcl_excel_common=>convert_column2int( lo_curtable->settings-top_left_column ) AND lv_maxcol     LE zcl_excel_common=>convert_column2int( lo_curtable->settings-bottom_right_column ) )
          ).
        lv_errormessage = 'Table overlaps with previously bound table and will not be added to worksheet.'(400).
        zcx_excel=>raise_text( lv_errormessage ).
      ENDIF.

    ENDWHILE.
*--------------------------------------------------------------------*
*  issue #237   Check if overlapping areas exist  End
*--------------------------------------------------------------------*

    CREATE OBJECT lo_table.
    lo_table->settings = ls_settings.
    lo_table->set_data( ir_data = ip_table ).
    lv_id = me->excel->get_next_table_id( ).
    lo_table->set_id( iv_id = lv_id ).
*  lo_table->fieldcat = lt_field_catalog[].

    me->tables->add( lo_table ).

* It is better to loop column by column (only visible column)
    LOOP AT lt_field_catalog ASSIGNING <ls_field_catalog> WHERE dynpfld EQ abap_true.

      lv_column_alpha = zcl_excel_common=>convert_column2alpha( lv_column_int ).

      " Due restrinction of new table object we cannot have two column with the same name
      " Check if a column with the same name exists, if exists add a counter
      " If no medium description is provided we try to use small or long
*    lv_value = <ls_field_catalog>-scrtext_m.
      FIELD-SYMBOLS: <scrtxt1> TYPE any,
                     <scrtxt2> TYPE any,
                     <scrtxt3> TYPE any.

      CASE iv_default_descr.
        WHEN 'M'.
          ASSIGN <ls_field_catalog>-scrtext_m TO <scrtxt1>.
          ASSIGN <ls_field_catalog>-scrtext_s TO <scrtxt2>.
          ASSIGN <ls_field_catalog>-scrtext_l TO <scrtxt3>.
        WHEN 'S'.
          ASSIGN <ls_field_catalog>-scrtext_s TO <scrtxt1>.
          ASSIGN <ls_field_catalog>-scrtext_m TO <scrtxt2>.
          ASSIGN <ls_field_catalog>-scrtext_l TO <scrtxt3>.
        WHEN 'L'.
          ASSIGN <ls_field_catalog>-scrtext_l TO <scrtxt1>.
          ASSIGN <ls_field_catalog>-scrtext_m TO <scrtxt2>.
          ASSIGN <ls_field_catalog>-scrtext_s TO <scrtxt3>.
        WHEN OTHERS.
          ASSIGN <ls_field_catalog>-scrtext_m TO <scrtxt1>.
          ASSIGN <ls_field_catalog>-scrtext_s TO <scrtxt2>.
          ASSIGN <ls_field_catalog>-scrtext_l TO <scrtxt3>.
      ENDCASE.


      IF <scrtxt1> IS NOT INITIAL.
        lv_value = <scrtxt1>.
        <ls_field_catalog>-scrtext_l = lv_value.
      ELSEIF <scrtxt2> IS NOT INITIAL.
        lv_value = <scrtxt2>.
        <ls_field_catalog>-scrtext_l = lv_value.
      ELSEIF <scrtxt3> IS NOT INITIAL.
        lv_value = <scrtxt3>.
        <ls_field_catalog>-scrtext_l = lv_value.
      ELSE.
        lv_value = 'Column'.  " default value as Excel does
        <ls_field_catalog>-scrtext_l = lv_value.
      ENDIF.
      WHILE 1 = 1.
        lv_value_lowercase = lv_value.
        TRANSLATE lv_value_lowercase TO LOWER CASE.
        READ TABLE lt_column_name_buffer TRANSPORTING NO FIELDS WITH KEY table_line = lv_value_lowercase BINARY SEARCH.
        IF sy-subrc <> 0.
          <ls_field_catalog>-scrtext_l = lv_value.
          INSERT lv_value_lowercase INTO TABLE lt_column_name_buffer.
          EXIT.
        ELSE.
          lv_syindex = sy-index.
          CONCATENATE <ls_field_catalog>-scrtext_l lv_syindex INTO lv_value.
        ENDIF.

      ENDWHILE.
      " First of all write column header
      IF <ls_field_catalog>-style_header IS NOT INITIAL.
        me->set_cell( ip_column = lv_column_alpha
                      ip_row    = lv_row_int
                      ip_value  = lv_value
                      ip_style  = <ls_field_catalog>-style_header ).
      ELSE.
        me->set_cell( ip_column = lv_column_alpha
                      ip_row    = lv_row_int
                      ip_value  = lv_value ).
      ENDIF.

      ADD 1 TO lv_row_int.
      LOOP AT ip_table ASSIGNING <fs_table_line>.

        ASSIGN COMPONENT <ls_field_catalog>-fieldname OF STRUCTURE <fs_table_line> TO <fs_fldval>.
        " issue #290 Add formula support in table
        IF <ls_field_catalog>-formula EQ abap_true.
          IF <ls_field_catalog>-style IS NOT INITIAL.
            IF <ls_field_catalog>-abap_type IS NOT INITIAL.
              me->set_cell( ip_column   = lv_column_alpha
                          ip_row      = lv_row_int
                          ip_formula  = <fs_fldval>
                          ip_abap_type = <ls_field_catalog>-abap_type
                          ip_style    = <ls_field_catalog>-style ).
            ELSE.
              me->set_cell( ip_column   = lv_column_alpha
                            ip_row      = lv_row_int
                            ip_formula  = <fs_fldval>
                            ip_style    = <ls_field_catalog>-style ).
            ENDIF.
          ELSEIF <ls_field_catalog>-abap_type IS NOT INITIAL.
            me->set_cell( ip_column   = lv_column_alpha
                          ip_row      = lv_row_int
                          ip_formula  = <fs_fldval>
                          ip_abap_type = <ls_field_catalog>-abap_type ).
          ELSE.
            me->set_cell( ip_column   = lv_column_alpha
                          ip_row      = lv_row_int
                          ip_formula  = <fs_fldval> ).
          ENDIF.
        ELSE.
          IF <ls_field_catalog>-style IS NOT INITIAL.
            IF <ls_field_catalog>-abap_type IS NOT INITIAL.
              me->set_cell( ip_column = lv_column_alpha
                          ip_row    = lv_row_int
                          ip_value  = <fs_fldval>
                          ip_abap_type = <ls_field_catalog>-abap_type
                          ip_style  = <ls_field_catalog>-style ).
            ELSE.
              me->set_cell( ip_column = lv_column_alpha
                            ip_row    = lv_row_int
                            ip_value  = <fs_fldval>
                            ip_style  = <ls_field_catalog>-style ).
            ENDIF.
          ELSE.
            IF <ls_field_catalog>-abap_type IS NOT INITIAL.
              me->set_cell( ip_column = lv_column_alpha
                          ip_row    = lv_row_int
                          ip_abap_type = <ls_field_catalog>-abap_type
                          ip_value  = <fs_fldval> ).
            ELSE.
              me->set_cell( ip_column = lv_column_alpha
                            ip_row    = lv_row_int
                            ip_value  = <fs_fldval> ).
            ENDIF.
          ENDIF.
        ENDIF.
        ADD 1 TO lv_row_int.

      ENDLOOP.
      IF sy-subrc <> 0 AND iv_no_line_if_empty = abap_false. "create empty row if table has no data
        me->set_cell( ip_column = lv_column_alpha
                      ip_row    = lv_row_int
                      ip_value  = space ).
        ADD 1 TO lv_row_int.
      ENDIF.

*--------------------------------------------------------------------*
      " totals
*--------------------------------------------------------------------*
      IF <ls_field_catalog>-totals_function IS NOT INITIAL.
        lv_formula = lo_table->get_totals_formula( ip_column = <ls_field_catalog>-scrtext_l ip_function = <ls_field_catalog>-totals_function ).
        IF <ls_field_catalog>-style_total IS NOT INITIAL.
          me->set_cell( ip_column   = lv_column_alpha
                        ip_row      = lv_row_int
                        ip_formula  = lv_formula
                        ip_style    = <ls_field_catalog>-style_total ).
        ELSE.
          me->set_cell( ip_column   = lv_column_alpha
                        ip_row      = lv_row_int
                        ip_formula  = lv_formula ).
        ENDIF.
      ENDIF.

      lv_row_int = ls_settings-top_left_row.
      ADD 1 TO lv_column_int.

*--------------------------------------------------------------------*
      " conditional formatting
*--------------------------------------------------------------------*
      IF <ls_field_catalog>-style_cond IS NOT INITIAL.
        lv_first_row    = ls_settings-top_left_row + 1. " +1 to exclude header
        lv_last_row     = ls_settings-top_left_row + lv_rows.
        lo_style_cond = me->get_style_cond( <ls_field_catalog>-style_cond ).
        lo_style_cond->set_range( ip_start_column  = lv_column_alpha
                                  ip_start_row     = lv_first_row
                                  ip_stop_column   = lv_column_alpha
                                  ip_stop_row      = lv_last_row ).
      ENDIF.

    ENDLOOP.

*--------------------------------------------------------------------*
    " Set field catalog
*--------------------------------------------------------------------*
    lo_table->fieldcat = lt_field_catalog[].

    es_table_settings = ls_settings.
    es_table_settings-bottom_right_column = lv_column_alpha.
    " >> Issue #291
    IF ip_table IS INITIAL.
      es_table_settings-bottom_right_row    = ls_settings-top_left_row + 2.           "Last rows
    ELSE.
      es_table_settings-bottom_right_row    = ls_settings-top_left_row + lv_rows + 1. "Last rows
    ENDIF.
    " << Issue #291

  ENDMETHOD.                    "BIND_TABLE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_WORKSHEET->CALCULATE_CELL_WIDTH
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [<-()] EP_WIDTH                       TYPE        FLOAT
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD calculate_cell_width.
*--------------------------------------------------------------------*
* issue #293   - Roberto Bianco
*              - Christian Assig                            2014-03-14
*
* changes: - Calculate widths using SAPscript font metrics
*            (transaction SE73)
*          - Calculate the width of dates
*          - Add additional width for auto filter buttons
*          - Add cell padding to simulate Excel behavior
*--------------------------------------------------------------------*

    CONSTANTS:
      lc_default_font_name   TYPE zexcel_style_font_name VALUE 'Calibri', "#EC NOTEXT
      lc_default_font_height TYPE tdfontsize VALUE '110',
      lc_excel_cell_padding  TYPE float VALUE '0.75'.

    DATA: ld_cell_value                TYPE zexcel_cell_value,
          ld_current_character         TYPE c LENGTH 1,
          ld_style_guid                TYPE zexcel_cell_style,
          ls_stylemapping              TYPE zexcel_s_stylemapping,
          lo_table_object              TYPE REF TO object,
          lo_table                     TYPE REF TO zcl_excel_table,
          ld_table_top_left_column     TYPE zexcel_cell_column,
          ld_table_bottom_right_column TYPE zexcel_cell_column,
          ld_flag_contains_auto_filter TYPE abap_bool VALUE abap_false,
          ld_flag_bold                 TYPE abap_bool VALUE abap_false,
          ld_flag_italic               TYPE abap_bool VALUE abap_false,
          ld_date                      TYPE d,
          ld_date_char                 TYPE c LENGTH 50,
          ld_font_height               TYPE tdfontsize VALUE lc_default_font_height,
          lt_itcfc                     TYPE STANDARD TABLE OF itcfc,
          ld_offset                    TYPE i,
          ld_length                    TYPE i,
          ld_uccp                      TYPE i,
          ls_font_metric               TYPE mty_s_font_metric,
          ld_width_from_font_metrics   TYPE i,
          ld_font_family               TYPE itcfh-tdfamily,
          ld_font_name                 TYPE zexcel_style_font_name VALUE lc_default_font_name,
          lt_font_families             LIKE STANDARD TABLE OF ld_font_family,
          ls_font_cache                TYPE mty_s_font_cache.

    FIELD-SYMBOLS: <ls_font_cache>  TYPE mty_s_font_cache,
                   <ls_font_metric> TYPE mty_s_font_metric,
                   <ls_itcfc>       TYPE itcfc.

    " Determine cell content and cell style
    me->get_cell( EXPORTING ip_column = ip_column
                            ip_row    = ip_row
                  IMPORTING ep_value  = ld_cell_value
                            ep_guid   = ld_style_guid ).

    " ABAP2XLSX uses tables to define areas containing headers and
    " auto-filters. Find out if the current cell is in the header
    " of one of these tables.
    LOOP AT me->tables->collection INTO lo_table_object.
      " Downcast: OBJECT -> ZCL_EXCEL_TABLE
      lo_table ?= lo_table_object.

      " Convert column letters to corresponding integer values
      ld_table_top_left_column =
        zcl_excel_common=>convert_column2int(
          lo_table->settings-top_left_column ).

      ld_table_bottom_right_column =
        zcl_excel_common=>convert_column2int(
          lo_table->settings-bottom_right_column ).

      " Is the current cell part of the table header?
      IF ip_column BETWEEN ld_table_top_left_column AND
                           ld_table_bottom_right_column AND
         ip_row    EQ lo_table->settings-top_left_row.
        " Current cell is part of the table header
        " -> Assume that an auto filter is present and that the font is
        "    bold
        ld_flag_contains_auto_filter = abap_true.
        ld_flag_bold = abap_true.
      ENDIF.
    ENDLOOP.

    " If a style GUID is present, read style attributes
    IF ld_style_guid IS NOT INITIAL.
      TRY.
          " Read style attributes
          ls_stylemapping = me->excel->get_style_to_guid( ld_style_guid ).

          " If the current cell contains the default date format,
          " convert the cell value to a date and calculate its length
          IF ls_stylemapping-complete_style-number_format-format_code =
             zcl_excel_style_number_format=>c_format_date_std.

            " Convert excel date to ABAP date
            ld_date =
              zcl_excel_common=>excel_string_to_date( ld_cell_value ).

            " Format ABAP date using user's formatting settings
            WRITE ld_date TO ld_date_char.

            " Remember the formatted date to calculate the cell size
            ld_cell_value = ld_date_char.

          ENDIF.

          " Read the font size and convert it to the font height
          " used by SAPscript (multiplication by 10)
          IF ls_stylemapping-complete_stylex-font-size = abap_true.
            ld_font_height = ls_stylemapping-complete_style-font-size * 10.
          ENDIF.

          " If set, remember the font name
          IF ls_stylemapping-complete_stylex-font-name = abap_true.
            ld_font_name = ls_stylemapping-complete_style-font-name.
          ENDIF.

          " If set, remember whether font is bold and italic.
          IF ls_stylemapping-complete_stylex-font-bold = abap_true.
            ld_flag_bold = ls_stylemapping-complete_style-font-bold.
          ENDIF.

          IF ls_stylemapping-complete_stylex-font-italic = abap_true.
            ld_flag_italic = ls_stylemapping-complete_style-font-italic.
          ENDIF.

        CATCH zcx_excel.                                "#EC NO_HANDLER
          " Style GUID is present, but style was not found
          " Continue with default values

      ENDTRY.
    ENDIF.

    " Check if the same font (font name and font attributes) was already
    " used before
    READ TABLE mth_font_cache
      WITH TABLE KEY
        font_name   = ld_font_name
        font_height = ld_font_height
        flag_bold   = ld_flag_bold
        flag_italic = ld_flag_italic
      ASSIGNING <ls_font_cache>.

    IF sy-subrc <> 0.
      " Font is used for the first time
      " Add the font to our local font cache
      ls_font_cache-font_name   = ld_font_name.
      ls_font_cache-font_height = ld_font_height.
      ls_font_cache-flag_bold   = ld_flag_bold.
      ls_font_cache-flag_italic = ld_flag_italic.
      INSERT ls_font_cache INTO TABLE mth_font_cache
        ASSIGNING <ls_font_cache>.

      " Determine the SAPscript font family name from the Excel
      " font name
      SELECT tdfamily
        FROM tfo01
        INTO TABLE lt_font_families
        UP TO 1 ROWS
        WHERE tdtext = ld_font_name
        ORDER BY PRIMARY KEY.

      " Check if a matching font family was found
      " Fonts can be uploaded from TTF files using transaction SE73
      IF lines( lt_font_families ) > 0.
        READ TABLE lt_font_families INDEX 1 INTO ld_font_family.

        " Load font metrics (returns a table with the size of each letter
        " in the font)
        CALL FUNCTION 'LOAD_FONT'
          EXPORTING
            family      = ld_font_family
            height      = ld_font_height
            printer     = 'SWIN'
            bold        = ld_flag_bold
            italic      = ld_flag_italic
          TABLES
            metric      = lt_itcfc
          EXCEPTIONS
            font_family = 1
            codepage    = 2
            device_type = 3
            OTHERS      = 4.
        IF sy-subrc <> 0.
          CLEAR lt_itcfc.
        ENDIF.

        " For faster access, convert each character number to the actual
        " character, and store the characters and their sizes in a hash
        " table
        LOOP AT lt_itcfc ASSIGNING <ls_itcfc>.
          ld_uccp = <ls_itcfc>-cpcharno.
          ls_font_metric-char =
            cl_abap_conv_in_ce=>uccpi( ld_uccp ).
          ls_font_metric-char_width = <ls_itcfc>-tdcwidths.
          INSERT ls_font_metric
            INTO TABLE <ls_font_cache>-th_font_metrics.
        ENDLOOP.

      ENDIF.
    ENDIF.

    " Calculate the cell width
    " If available, use font metrics
    IF lines( <ls_font_cache>-th_font_metrics ) = 0.
      " Font metrics are not available
      " -> Calculate the cell width using only the font size
      ld_length = strlen( ld_cell_value ).
      ep_width = ld_length * ld_font_height / lc_default_font_height + lc_excel_cell_padding.

    ELSE.
      " Font metrics are available

      " Calculate the size of the text by adding the sizes of each
      " letter
      ld_length = strlen( ld_cell_value ).
      DO ld_length TIMES.
        " Subtract 1, because the first character is at offset 0
        ld_offset = sy-index - 1.

        " Read the current character from the cell value
        ld_current_character = ld_cell_value+ld_offset(1).

        " Look up the size of the current letter
        READ TABLE <ls_font_cache>-th_font_metrics
          WITH TABLE KEY char = ld_current_character
          ASSIGNING <ls_font_metric>.
        IF sy-subrc = 0.
          " The size of the letter is known
          " -> Add the actual size of the letter
          ADD <ls_font_metric>-char_width TO ld_width_from_font_metrics.
        ELSE.
          " The size of the letter is unknown
          " -> Add the font height as the default letter size
          ADD ld_font_height TO ld_width_from_font_metrics.
        ENDIF.
      ENDDO.

      " Add cell padding (Excel makes columns a bit wider than the space
      " that is needed for the text itself) and convert unit
      " (division by 100)
      ep_width = ld_width_from_font_metrics / 100 + lc_excel_cell_padding.
    ENDIF.

    " If the current cell contains an auto filter, make it a bit wider.
    " The size used by the auto filter button does not depend on the font
    " size.
    IF ld_flag_contains_auto_filter = abap_true.
      ADD 2 TO ep_width.
    ENDIF.

  ENDMETHOD.                    "CALCULATE_CELL_WIDTH


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->CALCULATE_COLUMN_WIDTHS
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD calculate_column_widths.
    TYPES:
      BEGIN OF t_auto_size,
        col_index TYPE int4,
        width     TYPE float,
      END   OF t_auto_size.
    TYPES: tt_auto_size TYPE TABLE OF t_auto_size.

    DATA: lo_column_iterator TYPE REF TO cl_object_collection_iterator,
          lo_column          TYPE REF TO zcl_excel_column.

    DATA: auto_size   TYPE flag.
    DATA: auto_sizes  TYPE tt_auto_size.
    DATA: count       TYPE int4.
    DATA: highest_row TYPE int4.
    DATA: width       TYPE float.

    FIELD-SYMBOLS: <auto_size>        LIKE LINE OF auto_sizes.

    lo_column_iterator = me->get_columns_iterator( ).
    WHILE lo_column_iterator->has_next( ) = abap_true.
      lo_column ?= lo_column_iterator->get_next( ).
      auto_size = lo_column->get_auto_size( ).
      IF auto_size = abap_true.
        APPEND INITIAL LINE TO auto_sizes ASSIGNING <auto_size>.
        <auto_size>-col_index = lo_column->get_column_index( ).
        <auto_size>-width     = -1.
      ENDIF.
    ENDWHILE.

    " There is only something to do if there are some auto-size columns
    IF NOT auto_sizes IS INITIAL.
      highest_row = me->get_highest_row( ).
      LOOP AT auto_sizes ASSIGNING <auto_size>.
        count = 1.
        WHILE count <= highest_row.
* Do not check merged cells
          IF is_cell_merged(
              ip_column    = <auto_size>-col_index
              ip_row       = count ) = abap_false.
            width = calculate_cell_width( ip_column = <auto_size>-col_index     " issue #155 - less restrictive typing for ip_column
                                          ip_row    = count ).
            IF width > <auto_size>-width.
              <auto_size>-width = width.
            ENDIF.
          ENDIF.
          count = count + 1.
        ENDWHILE.
        lo_column = me->get_column( <auto_size>-col_index ). " issue #155 - less restrictive typing for ip_column
        lo_column->set_width( <auto_size>-width ).
      ENDLOOP.
    ENDIF.

  ENDMETHOD.                    "CALCULATE_COLUMN_WIDTHS


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->CHANGE_CELL_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_COMPLETE                    TYPE        ZEXCEL_S_CSTYLE_COMPLETE(optional)
* | [--->] IP_XCOMPLETE                   TYPE        ZEXCEL_S_CSTYLEX_COMPLETE(optional)
* | [--->] IP_FONT                        TYPE        ZEXCEL_S_CSTYLE_FONT(optional)
* | [--->] IP_XFONT                       TYPE        ZEXCEL_S_CSTYLEX_FONT(optional)
* | [--->] IP_FILL                        TYPE        ZEXCEL_S_CSTYLE_FILL(optional)
* | [--->] IP_XFILL                       TYPE        ZEXCEL_S_CSTYLEX_FILL(optional)
* | [--->] IP_BORDERS                     TYPE        ZEXCEL_S_CSTYLE_BORDERS(optional)
* | [--->] IP_XBORDERS                    TYPE        ZEXCEL_S_CSTYLEX_BORDERS(optional)
* | [--->] IP_ALIGNMENT                   TYPE        ZEXCEL_S_CSTYLE_ALIGNMENT(optional)
* | [--->] IP_XALIGNMENT                  TYPE        ZEXCEL_S_CSTYLEX_ALIGNMENT(optional)
* | [--->] IP_NUMBER_FORMAT_FORMAT_CODE   TYPE        ZEXCEL_NUMBER_FORMAT(optional)
* | [--->] IP_PROTECTION                  TYPE        ZEXCEL_S_CSTYLE_PROTECTION(optional)
* | [--->] IP_XPROTECTION                 TYPE        ZEXCEL_S_CSTYLEX_PROTECTION(optional)
* | [--->] IP_FONT_BOLD                   TYPE        FLAG(optional)
* | [--->] IP_FONT_COLOR                  TYPE        ZEXCEL_S_STYLE_COLOR(optional)
* | [--->] IP_FONT_COLOR_RGB              TYPE        ZEXCEL_STYLE_COLOR_ARGB(optional)
* | [--->] IP_FONT_COLOR_INDEXED          TYPE        ZEXCEL_STYLE_COLOR_INDEXED(optional)
* | [--->] IP_FONT_COLOR_THEME            TYPE        ZEXCEL_STYLE_COLOR_THEME(optional)
* | [--->] IP_FONT_COLOR_TINT             TYPE        ZEXCEL_STYLE_COLOR_TINT(optional)
* | [--->] IP_FONT_FAMILY                 TYPE        ZEXCEL_STYLE_FONT_FAMILY(optional)
* | [--->] IP_FONT_ITALIC                 TYPE        FLAG(optional)
* | [--->] IP_FONT_NAME                   TYPE        ZEXCEL_STYLE_FONT_NAME(optional)
* | [--->] IP_FONT_SCHEME                 TYPE        ZEXCEL_STYLE_FONT_SCHEME(optional)
* | [--->] IP_FONT_SIZE                   TYPE        ZEXCEL_STYLE_FONT_SIZE(optional)
* | [--->] IP_FONT_STRIKETHROUGH          TYPE        FLAG(optional)
* | [--->] IP_FONT_UNDERLINE              TYPE        FLAG(optional)
* | [--->] IP_FONT_UNDERLINE_MODE         TYPE        ZEXCEL_STYLE_FONT_UNDERLINE(optional)
* | [--->] IP_FILL_FILLTYPE               TYPE        ZEXCEL_FILL_TYPE(optional)
* | [--->] IP_FILL_ROTATION               TYPE        ZEXCEL_ROTATION(optional)
* | [--->] IP_FILL_FGCOLOR                TYPE        ZEXCEL_S_STYLE_COLOR(optional)
* | [--->] IP_FILL_FGCOLOR_RGB            TYPE        ZEXCEL_STYLE_COLOR_ARGB(optional)
* | [--->] IP_FILL_FGCOLOR_INDEXED        TYPE        ZEXCEL_STYLE_COLOR_INDEXED(optional)
* | [--->] IP_FILL_FGCOLOR_THEME          TYPE        ZEXCEL_STYLE_COLOR_THEME(optional)
* | [--->] IP_FILL_FGCOLOR_TINT           TYPE        ZEXCEL_STYLE_COLOR_TINT(optional)
* | [--->] IP_FILL_BGCOLOR                TYPE        ZEXCEL_S_STYLE_COLOR(optional)
* | [--->] IP_FILL_BGCOLOR_RGB            TYPE        ZEXCEL_STYLE_COLOR_ARGB(optional)
* | [--->] IP_FILL_BGCOLOR_INDEXED        TYPE        ZEXCEL_STYLE_COLOR_INDEXED(optional)
* | [--->] IP_FILL_BGCOLOR_THEME          TYPE        ZEXCEL_STYLE_COLOR_THEME(optional)
* | [--->] IP_FILL_BGCOLOR_TINT           TYPE        ZEXCEL_STYLE_COLOR_TINT(optional)
* | [--->] IP_BORDERS_ALLBORDERS          TYPE        ZEXCEL_S_CSTYLE_BORDER(optional)
* | [--->] IP_FILL_GRADTYPE_TYPE          TYPE        ZEXCEL_S_GRADIENT_TYPE-TYPE(optional)
* | [--->] IP_FILL_GRADTYPE_DEGREE        TYPE        ZEXCEL_S_GRADIENT_TYPE-DEGREE(optional)
* | [--->] IP_XBORDERS_ALLBORDERS         TYPE        ZEXCEL_S_CSTYLEX_BORDER(optional)
* | [--->] IP_BORDERS_DIAGONAL            TYPE        ZEXCEL_S_CSTYLE_BORDER(optional)
* | [--->] IP_FILL_GRADTYPE_BOTTOM        TYPE        ZEXCEL_S_GRADIENT_TYPE-BOTTOM(optional)
* | [--->] IP_FILL_GRADTYPE_TOP           TYPE        ZEXCEL_S_GRADIENT_TYPE-TOP(optional)
* | [--->] IP_XBORDERS_DIAGONAL           TYPE        ZEXCEL_S_CSTYLEX_BORDER(optional)
* | [--->] IP_BORDERS_DIAGONAL_MODE       TYPE        ZEXCEL_DIAGONAL(optional)
* | [--->] IP_FILL_GRADTYPE_RIGHT         TYPE        ZEXCEL_S_GRADIENT_TYPE-RIGHT(optional)
* | [--->] IP_BORDERS_DOWN                TYPE        ZEXCEL_S_CSTYLE_BORDER(optional)
* | [--->] IP_FILL_GRADTYPE_LEFT          TYPE        ZEXCEL_S_GRADIENT_TYPE-LEFT(optional)
* | [--->] IP_FILL_GRADTYPE_POSITION1     TYPE        ZEXCEL_S_GRADIENT_TYPE-POSITION1(optional)
* | [--->] IP_XBORDERS_DOWN               TYPE        ZEXCEL_S_CSTYLEX_BORDER(optional)
* | [--->] IP_BORDERS_LEFT                TYPE        ZEXCEL_S_CSTYLE_BORDER(optional)
* | [--->] IP_FILL_GRADTYPE_POSITION2     TYPE        ZEXCEL_S_GRADIENT_TYPE-POSITION2(optional)
* | [--->] IP_FILL_GRADTYPE_POSITION3     TYPE        ZEXCEL_S_GRADIENT_TYPE-POSITION3(optional)
* | [--->] IP_XBORDERS_LEFT               TYPE        ZEXCEL_S_CSTYLEX_BORDER(optional)
* | [--->] IP_BORDERS_RIGHT               TYPE        ZEXCEL_S_CSTYLE_BORDER(optional)
* | [--->] IP_XBORDERS_RIGHT              TYPE        ZEXCEL_S_CSTYLEX_BORDER(optional)
* | [--->] IP_BORDERS_TOP                 TYPE        ZEXCEL_S_CSTYLE_BORDER(optional)
* | [--->] IP_XBORDERS_TOP                TYPE        ZEXCEL_S_CSTYLEX_BORDER(optional)
* | [--->] IP_ALIGNMENT_HORIZONTAL        TYPE        ZEXCEL_ALIGNMENT(optional)
* | [--->] IP_ALIGNMENT_VERTICAL          TYPE        ZEXCEL_ALIGNMENT(optional)
* | [--->] IP_ALIGNMENT_TEXTROTATION      TYPE        ZEXCEL_TEXT_ROTATION(optional)
* | [--->] IP_ALIGNMENT_WRAPTEXT          TYPE        FLAG(optional)
* | [--->] IP_ALIGNMENT_SHRINKTOFIT       TYPE        FLAG(optional)
* | [--->] IP_ALIGNMENT_INDENT            TYPE        ZEXCEL_INDENT(optional)
* | [--->] IP_PROTECTION_HIDDEN           TYPE        ZEXCEL_CELL_PROTECTION(optional)
* | [--->] IP_PROTECTION_LOCKED           TYPE        ZEXCEL_CELL_PROTECTION(optional)
* | [--->] IP_BORDERS_ALLBORDERS_STYLE    TYPE        ZEXCEL_BORDER(optional)
* | [--->] IP_BORDERS_ALLBORDERS_COLOR    TYPE        ZEXCEL_S_STYLE_COLOR(optional)
* | [--->] IP_BORDERS_ALLBO_COLOR_RGB     TYPE        ZEXCEL_STYLE_COLOR_ARGB(optional)
* | [--->] IP_BORDERS_ALLBO_COLOR_INDEXED TYPE        ZEXCEL_STYLE_COLOR_INDEXED(optional)
* | [--->] IP_BORDERS_ALLBO_COLOR_THEME   TYPE        ZEXCEL_STYLE_COLOR_THEME(optional)
* | [--->] IP_BORDERS_ALLBO_COLOR_TINT    TYPE        ZEXCEL_STYLE_COLOR_TINT(optional)
* | [--->] IP_BORDERS_DIAGONAL_STYLE      TYPE        ZEXCEL_BORDER(optional)
* | [--->] IP_BORDERS_DIAGONAL_COLOR      TYPE        ZEXCEL_S_STYLE_COLOR(optional)
* | [--->] IP_BORDERS_DIAGONAL_COLOR_RGB  TYPE        ZEXCEL_STYLE_COLOR_ARGB(optional)
* | [--->] IP_BORDERS_DIAGONAL_COLOR_INDE TYPE        ZEXCEL_STYLE_COLOR_INDEXED(optional)
* | [--->] IP_BORDERS_DIAGONAL_COLOR_THEM TYPE        ZEXCEL_STYLE_COLOR_THEME(optional)
* | [--->] IP_BORDERS_DIAGONAL_COLOR_TINT TYPE        ZEXCEL_STYLE_COLOR_TINT(optional)
* | [--->] IP_BORDERS_DOWN_STYLE          TYPE        ZEXCEL_BORDER(optional)
* | [--->] IP_BORDERS_DOWN_COLOR          TYPE        ZEXCEL_S_STYLE_COLOR(optional)
* | [--->] IP_BORDERS_DOWN_COLOR_RGB      TYPE        ZEXCEL_STYLE_COLOR_ARGB(optional)
* | [--->] IP_BORDERS_DOWN_COLOR_INDEXED  TYPE        ZEXCEL_STYLE_COLOR_INDEXED(optional)
* | [--->] IP_BORDERS_DOWN_COLOR_THEME    TYPE        ZEXCEL_STYLE_COLOR_THEME(optional)
* | [--->] IP_BORDERS_DOWN_COLOR_TINT     TYPE        ZEXCEL_STYLE_COLOR_TINT(optional)
* | [--->] IP_BORDERS_LEFT_STYLE          TYPE        ZEXCEL_BORDER(optional)
* | [--->] IP_BORDERS_LEFT_COLOR          TYPE        ZEXCEL_S_STYLE_COLOR(optional)
* | [--->] IP_BORDERS_LEFT_COLOR_RGB      TYPE        ZEXCEL_STYLE_COLOR_ARGB(optional)
* | [--->] IP_BORDERS_LEFT_COLOR_INDEXED  TYPE        ZEXCEL_STYLE_COLOR_INDEXED(optional)
* | [--->] IP_BORDERS_LEFT_COLOR_THEME    TYPE        ZEXCEL_STYLE_COLOR_THEME(optional)
* | [--->] IP_BORDERS_LEFT_COLOR_TINT     TYPE        ZEXCEL_STYLE_COLOR_TINT(optional)
* | [--->] IP_BORDERS_RIGHT_STYLE         TYPE        ZEXCEL_BORDER(optional)
* | [--->] IP_BORDERS_RIGHT_COLOR         TYPE        ZEXCEL_S_STYLE_COLOR(optional)
* | [--->] IP_BORDERS_RIGHT_COLOR_RGB     TYPE        ZEXCEL_STYLE_COLOR_ARGB(optional)
* | [--->] IP_BORDERS_RIGHT_COLOR_INDEXED TYPE        ZEXCEL_STYLE_COLOR_INDEXED(optional)
* | [--->] IP_BORDERS_RIGHT_COLOR_THEME   TYPE        ZEXCEL_STYLE_COLOR_THEME(optional)
* | [--->] IP_BORDERS_RIGHT_COLOR_TINT    TYPE        ZEXCEL_STYLE_COLOR_TINT(optional)
* | [--->] IP_BORDERS_TOP_STYLE           TYPE        ZEXCEL_BORDER(optional)
* | [--->] IP_BORDERS_TOP_COLOR           TYPE        ZEXCEL_S_STYLE_COLOR(optional)
* | [--->] IP_BORDERS_TOP_COLOR_RGB       TYPE        ZEXCEL_STYLE_COLOR_ARGB(optional)
* | [--->] IP_BORDERS_TOP_COLOR_INDEXED   TYPE        ZEXCEL_STYLE_COLOR_INDEXED(optional)
* | [--->] IP_BORDERS_TOP_COLOR_THEME     TYPE        ZEXCEL_STYLE_COLOR_THEME(optional)
* | [--->] IP_BORDERS_TOP_COLOR_TINT      TYPE        ZEXCEL_STYLE_COLOR_TINT(optional)
* | [<-()] EP_GUID                        TYPE        ZEXCEL_CELL_STYLE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD change_cell_style.
    " issue # 139
    DATA: stylemapping    TYPE zexcel_s_stylemapping,

          complete_style  TYPE zexcel_s_cstyle_complete,
          complete_stylex TYPE zexcel_s_cstylex_complete,

          borderx         TYPE zexcel_s_cstylex_border,
          l_guid          TYPE zexcel_cell_style.   "issue # 177

* We have a lot of parameters.  Use some macros to make the coding more structured

    DEFINE clear_initial_colorxfields.
      if &1-rgb is initial.
        clear &2-rgb.
      endif.
      if &1-indexed is initial.
        clear &2-indexed.
      endif.
      if &1-theme is initial.
        clear &2-theme.
      endif.
      if &1-tint is initial.
        clear &2-tint.
      endif.
    END-OF-DEFINITION.

    DEFINE move_supplied_borders.
      if ip_&1 is supplied.  " only act if parameter was supplied
        if ip_x&1 is supplied.  "
          borderx = ip_x&1.          " use supplied x-parameter
        else.
          clear borderx with 'X'.
* clear in a way that would be expected to work easily
          if ip_&1-border_style is  initial.
            clear borderx-border_style.
          endif.
          clear_initial_colorxfields ip_&1-border_color borderx-border_color.
        endif.
        move-corresponding ip_&1   to complete_style-&2.
        move-corresponding borderx to complete_stylex-&2.
      endif.
    END-OF-DEFINITION.

* First get current stylsettings
    TRY.
        me->get_cell( EXPORTING ip_column = ip_column  " Cell Column
                                ip_row    = ip_row      " Cell Row
                      IMPORTING ep_guid   = l_guid )." Cell Value ).  "issue # 177


        stylemapping = me->excel->get_style_to_guid( l_guid ).        "issue # 177
        complete_style  = stylemapping-complete_style.
        complete_stylex = stylemapping-complete_stylex.
      CATCH zcx_excel.
* Error --> use submitted style
    ENDTRY.

*  move_supplied_multistyles: complete.
    IF ip_complete IS SUPPLIED.
      IF ip_xcomplete IS NOT SUPPLIED.
        zcx_excel=>raise_text( 'Complete styleinfo has to be supplied with corresponding X-field' ).
      ENDIF.
      MOVE-CORRESPONDING ip_complete  TO complete_style.
      MOVE-CORRESPONDING ip_xcomplete TO complete_stylex.
    ENDIF.



    IF ip_font IS SUPPLIED.
      DATA: fontx LIKE ip_xfont.
      IF ip_xfont IS SUPPLIED.
        fontx = ip_xfont.
      ELSE.
* Only supplied values should be used - exception: Flags bold and italic strikethrough underline
        MOVE 'X' TO: fontx-bold,
                     fontx-italic,
                     fontx-strikethrough,
                     fontx-underline_mode.
        CLEAR fontx-color WITH 'X'.
        clear_initial_colorxfields ip_font-color fontx-color.
        IF ip_font-family IS NOT INITIAL.
          fontx-family = 'X'.
        ENDIF.
        IF ip_font-name IS NOT INITIAL.
          fontx-name = 'X'.
        ENDIF.
        IF ip_font-scheme IS NOT INITIAL.
          fontx-scheme = 'X'.
        ENDIF.
        IF ip_font-size IS NOT INITIAL.
          fontx-size = 'X'.
        ENDIF.
        IF ip_font-underline_mode IS NOT INITIAL.
          fontx-underline_mode = 'X'.
        ENDIF.
      ENDIF.
      MOVE-CORRESPONDING ip_font  TO complete_style-font.
      MOVE-CORRESPONDING fontx    TO complete_stylex-font.
* Correction for undeline mode
    ENDIF.

    IF ip_fill IS SUPPLIED.
      DATA: fillx LIKE ip_xfill.
      IF ip_xfill IS SUPPLIED.
        fillx = ip_xfill.
      ELSE.
        CLEAR fillx WITH 'X'.
        IF ip_fill-filltype IS INITIAL.
          CLEAR fillx-filltype.
        ENDIF.
        clear_initial_colorxfields ip_fill-fgcolor fillx-fgcolor.
        clear_initial_colorxfields ip_fill-bgcolor fillx-bgcolor.

      ENDIF.
      MOVE-CORRESPONDING ip_fill  TO complete_style-fill.
      MOVE-CORRESPONDING fillx    TO complete_stylex-fill.
    ENDIF.


    IF ip_borders IS SUPPLIED.
      DATA: bordersx LIKE ip_xborders.
      IF ip_xborders IS SUPPLIED.
        bordersx = ip_xborders.
      ELSE.
        CLEAR bordersx WITH 'X'.
        IF ip_borders-allborders-border_style IS INITIAL.
          CLEAR bordersx-allborders-border_style.
        ENDIF.
        IF ip_borders-diagonal-border_style IS INITIAL.
          CLEAR bordersx-diagonal-border_style.
        ENDIF.
        IF ip_borders-down-border_style IS INITIAL.
          CLEAR bordersx-down-border_style.
        ENDIF.
        IF ip_borders-left-border_style IS INITIAL.
          CLEAR bordersx-left-border_style.
        ENDIF.
        IF ip_borders-right-border_style IS INITIAL.
          CLEAR bordersx-right-border_style.
        ENDIF.
        IF ip_borders-top-border_style IS INITIAL.
          CLEAR bordersx-top-border_style.
        ENDIF.
        clear_initial_colorxfields ip_borders-allborders-border_color bordersx-allborders-border_color.
        clear_initial_colorxfields ip_borders-diagonal-border_color   bordersx-diagonal-border_color.
        clear_initial_colorxfields ip_borders-down-border_color       bordersx-down-border_color.
        clear_initial_colorxfields ip_borders-left-border_color       bordersx-left-border_color.
        clear_initial_colorxfields ip_borders-right-border_color      bordersx-right-border_color.
        clear_initial_colorxfields ip_borders-top-border_color        bordersx-top-border_color.

      ENDIF.
      MOVE-CORRESPONDING ip_borders  TO complete_style-borders.
      MOVE-CORRESPONDING bordersx    TO complete_stylex-borders.
    ENDIF.

    IF ip_alignment IS SUPPLIED.
      DATA: alignmentx LIKE ip_xalignment.
      IF ip_xalignment IS SUPPLIED.
        alignmentx = ip_xalignment.
      ELSE.
        CLEAR alignmentx WITH 'X'.
        IF ip_alignment-horizontal IS INITIAL.
          CLEAR alignmentx-horizontal.
        ENDIF.
        IF ip_alignment-vertical IS INITIAL.
          CLEAR alignmentx-vertical.
        ENDIF.
      ENDIF.
      MOVE-CORRESPONDING ip_alignment  TO complete_style-alignment.
      MOVE-CORRESPONDING alignmentx    TO complete_stylex-alignment.
    ENDIF.

    IF ip_protection IS SUPPLIED.
      MOVE-CORRESPONDING ip_protection  TO complete_style-protection.
      IF ip_xprotection IS SUPPLIED.
        MOVE-CORRESPONDING ip_xprotection TO complete_stylex-protection.
      ELSE.
        IF ip_protection-hidden IS NOT INITIAL.
          complete_stylex-protection-hidden = 'X'.
        ENDIF.
        IF ip_protection-locked IS NOT INITIAL.
          complete_stylex-protection-locked = 'X'.
        ENDIF.
      ENDIF.
    ENDIF.


    move_supplied_borders    : borders_allborders borders-allborders,
                               borders_diagonal   borders-diagonal  ,
                               borders_down       borders-down      ,
                               borders_left       borders-left      ,
                               borders_right      borders-right     ,
                               borders_top        borders-top       .

    DEFINE move_supplied_singlestyles.
      if ip_&1 is supplied.
        complete_style-&2 = ip_&1.
        complete_stylex-&2 = 'X'.
      endif.
    END-OF-DEFINITION.

    move_supplied_singlestyles: number_format_format_code  number_format-format_code,
                                font_bold                     font-bold,
                                font_color                    font-color,
                                font_color_rgb                font-color-rgb,
                                font_color_indexed            font-color-indexed,
                                font_color_theme              font-color-theme,
                                font_color_tint               font-color-tint,

                                font_family                   font-family,
                                font_italic                   font-italic,
                                font_name                     font-name,
                                font_scheme                   font-scheme,
                                font_size                     font-size,
                                font_strikethrough            font-strikethrough,
                                font_underline                font-underline,
                                font_underline_mode           font-underline_mode,
                                fill_filltype                 fill-filltype,
                                fill_rotation                 fill-rotation,
                                fill_fgcolor                  fill-fgcolor,
                                fill_fgcolor_rgb              fill-fgcolor-rgb,
                                fill_fgcolor_indexed          fill-fgcolor-indexed,
                                fill_fgcolor_theme            fill-fgcolor-theme,
                                fill_fgcolor_tint             fill-fgcolor-tint,

                                fill_bgcolor                  fill-bgcolor,
                                fill_bgcolor_rgb              fill-bgcolor-rgb,
                                fill_bgcolor_indexed          fill-bgcolor-indexed,
                                fill_bgcolor_theme            fill-bgcolor-theme,
                                fill_bgcolor_tint             fill-bgcolor-tint,

                                fill_gradtype_type            fill-gradtype-type,
                                fill_gradtype_degree          fill-gradtype-degree,
                                fill_gradtype_bottom          fill-gradtype-bottom,
                                fill_gradtype_left            fill-gradtype-left,
                                fill_gradtype_top             fill-gradtype-top,
                                fill_gradtype_right           fill-gradtype-right,
                                fill_gradtype_position1       fill-gradtype-position1,
                                fill_gradtype_position2       fill-gradtype-position2,
                                fill_gradtype_position3       fill-gradtype-position3,



                                borders_diagonal_mode         borders-diagonal_mode,
                                alignment_horizontal          alignment-horizontal,
                                alignment_vertical            alignment-vertical,
                                alignment_textrotation        alignment-textrotation,
                                alignment_wraptext            alignment-wraptext,
                                alignment_shrinktofit         alignment-shrinktofit,
                                alignment_indent              alignment-indent,
                                protection_hidden             protection-hidden,
                                protection_locked             protection-locked,

                                borders_allborders_style      borders-allborders-border_style,
                                borders_allborders_color      borders-allborders-border_color,
                                borders_allbo_color_rgb       borders-allborders-border_color-rgb,
                                borders_allbo_color_indexed   borders-allborders-border_color-indexed,
                                borders_allbo_color_theme     borders-allborders-border_color-theme,
                                borders_allbo_color_tint      borders-allborders-border_color-tint,

                                borders_diagonal_style        borders-diagonal-border_style,
                                borders_diagonal_color        borders-diagonal-border_color,
                                borders_diagonal_color_rgb    borders-diagonal-border_color-rgb,
                                borders_diagonal_color_inde   borders-diagonal-border_color-indexed,
                                borders_diagonal_color_them   borders-diagonal-border_color-theme,
                                borders_diagonal_color_tint   borders-diagonal-border_color-tint,

                                borders_down_style            borders-down-border_style,
                                borders_down_color            borders-down-border_color,
                                borders_down_color_rgb        borders-down-border_color-rgb,
                                borders_down_color_indexed    borders-down-border_color-indexed,
                                borders_down_color_theme      borders-down-border_color-theme,
                                borders_down_color_tint       borders-down-border_color-tint,

                                borders_left_style            borders-left-border_style,
                                borders_left_color            borders-left-border_color,
                                borders_left_color_rgb        borders-left-border_color-rgb,
                                borders_left_color_indexed    borders-left-border_color-indexed,
                                borders_left_color_theme      borders-left-border_color-theme,
                                borders_left_color_tint       borders-left-border_color-tint,

                                borders_right_style           borders-right-border_style,
                                borders_right_color           borders-right-border_color,
                                borders_right_color_rgb       borders-right-border_color-rgb,
                                borders_right_color_indexed   borders-right-border_color-indexed,
                                borders_right_color_theme     borders-right-border_color-theme,
                                borders_right_color_tint      borders-right-border_color-tint,

                                borders_top_style             borders-top-border_style,
                                borders_top_color             borders-top-border_color,
                                borders_top_color_rgb         borders-top-border_color-rgb,
                                borders_top_color_indexed     borders-top-border_color-indexed,
                                borders_top_color_theme       borders-top-border_color-theme,
                                borders_top_color_tint        borders-top-border_color-tint.


* Now we have a completly filled styles.
* This can be used to get the guid
* Return guid if requested.  Might be used if copy&paste of styles is requested
    ep_guid = me->excel->get_static_cellstyle_guid( ip_cstyle_complete  = complete_style
                                                    ip_cstylex_complete = complete_stylex  ).
    me->set_cell_style( ip_column = ip_column
                        ip_row    = ip_row
                        ip_style  = ep_guid ).

  ENDMETHOD.                    "CHANGE_CELL_STYLE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_EXCEL                       TYPE REF TO ZCL_EXCEL
* | [--->] IP_TITLE                       TYPE        ZEXCEL_SHEET_TITLE(optional)
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    DATA: lv_title TYPE zexcel_sheet_title.

    me->excel = ip_excel.

*  CALL FUNCTION 'GUID_CREATE'                                    " del issue #379 - function is outdated in newer releases
*    IMPORTING
*      ev_guid_16 = me->guid.
    me->guid = zcl_excel_obsolete_func_wrap=>guid_create( ).        " ins issue #379 - replacement for outdated function call

    IF ip_title IS NOT INITIAL.
      lv_title = ip_title.
    ELSE.
*    lv_title = me->guid.             " del issue #154 - Names of worksheets
      lv_title = me->generate_title( ). " ins issue #154 - Names of worksheets
    ENDIF.

    me->set_title( ip_title = lv_title ).

    CREATE OBJECT sheet_setup.
    CREATE OBJECT styles_cond.
    CREATE OBJECT data_validations.
    CREATE OBJECT tables.
    CREATE OBJECT columns.
    CREATE OBJECT rows.
    CREATE OBJECT ranges. " issue #163
    CREATE OBJECT mo_pagebreaks.
    CREATE OBJECT drawings
      EXPORTING
        ip_type = zcl_excel_drawing=>type_image.
    CREATE OBJECT charts
      EXPORTING
        ip_type = zcl_excel_drawing=>type_chart.
    me->zif_excel_sheet_protection~initialize( ).
    me->zif_excel_sheet_properties~initialize( ).
    CREATE OBJECT hyperlinks.
    CREATE OBJECT comments. " (+) Issue #180

* initialize active cell coordinates
    active_cell-cell_row = 1.
    active_cell-cell_column = 1.

* inizialize dimension range
    lower_cell-cell_row     = 1.
    lower_cell-cell_column  = 1.
    upper_cell-cell_row     = 1.
    upper_cell-cell_column  = 1.

  ENDMETHOD.                    "CONSTRUCTOR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->DELETE_MERGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_CELL_COLUMN                 TYPE        SIMPLE(optional)
* | [--->] IP_CELL_ROW                    TYPE        ZEXCEL_CELL_ROW(optional)
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD delete_merge.

    DATA: lv_column TYPE i.
*--------------------------------------------------------------------*
* If cell information is passed delete merge including this cell,
* otherwise delete all merges
*--------------------------------------------------------------------*
    IF   ip_cell_column IS INITIAL
      OR ip_cell_row    IS INITIAL.
      CLEAR me->mt_merged_cells.
    ELSE.
      lv_column = zcl_excel_common=>convert_column2int( ip_cell_column ).

      LOOP AT me->mt_merged_cells TRANSPORTING NO FIELDS
      WHERE
          ( row_from <= ip_cell_row AND row_to >= ip_cell_row )
      AND
          ( col_from <= lv_column AND col_to >= lv_column ).

        DELETE me->mt_merged_cells.
        EXIT.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.                    "DELETE_MERGE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->DELETE_ROW_OUTLINE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ROW_FROM                    TYPE        I
* | [--->] IV_ROW_TO                      TYPE        I
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD delete_row_outline.

    DELETE me->mt_row_outlines WHERE row_from = iv_row_from
                                 AND row_to   = iv_row_to.
    IF sy-subrc <> 0.  " didn't find outline that was to be deleted
      zcx_excel=>raise_text( 'Row outline to be deleted does not exist' ).
    ENDIF.

  ENDMETHOD.                    "DELETE_ROW_OUTLINE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->FREEZE_PANES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_NUM_COLUMNS                 TYPE        I(optional)
* | [--->] IP_NUM_ROWS                    TYPE        I(optional)
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD freeze_panes.

    IF ip_num_columns IS NOT SUPPLIED AND ip_num_rows IS NOT SUPPLIED.
      zcx_excel=>raise_text( 'Pleas provide number of rows and/or columns to freeze' ).
    ENDIF.

    IF ip_num_columns IS SUPPLIED AND ip_num_columns <= 0.
      zcx_excel=>raise_text( 'Number of columns to freeze should be positive' ).
    ENDIF.

    IF ip_num_rows IS SUPPLIED AND ip_num_rows <= 0.
      zcx_excel=>raise_text( 'Number of rows to freeze should be positive' ).
    ENDIF.

    freeze_pane_cell_column = ip_num_columns + 1.
    freeze_pane_cell_row = ip_num_rows + 1.
  ENDMETHOD.                    "FREEZE_PANES


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_WORKSHEET->GENERATE_TITLE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_TITLE                       TYPE        ZEXCEL_SHEET_TITLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD generate_title.
    DATA: lo_worksheets_iterator TYPE REF TO cl_object_collection_iterator,
          lo_worksheet           TYPE REF TO zcl_excel_worksheet.

    DATA: t_titles    TYPE HASHED TABLE OF zexcel_sheet_title WITH UNIQUE KEY table_line,
          title       TYPE zexcel_sheet_title,
          sheetnumber TYPE i.

* Get list of currently used titles
    lo_worksheets_iterator = me->excel->get_worksheets_iterator( ).
    WHILE lo_worksheets_iterator->has_next( ) = abap_true.
      lo_worksheet ?= lo_worksheets_iterator->get_next( ).
      title = lo_worksheet->get_title( ).
      INSERT title INTO TABLE t_titles.
      ADD 1 TO sheetnumber.
    ENDWHILE.

* Now build sheetnumber.  Increase counter until we hit a number that is not used so far
    ADD 1 TO sheetnumber.  " Start counting with next number
    DO.
      title = sheetnumber.
      SHIFT title LEFT DELETING LEADING space.
      CONCATENATE 'Sheet'(001) title INTO ep_title.
      INSERT ep_title INTO TABLE t_titles.
      IF sy-subrc = 0.  " Title not used so far --> take it
        EXIT.
      ENDIF.

      ADD 1 TO sheetnumber.
    ENDDO.
  ENDMETHOD.                    "GENERATE_TITLE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_ACTIVE_CELL
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_ACTIVE_CELL                 TYPE        STRING
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_active_cell.

    DATA: lv_active_column TYPE zexcel_cell_column_alpha,
          lv_active_row    TYPE string.

    lv_active_column = zcl_excel_common=>convert_column2alpha( active_cell-cell_column ).
    lv_active_row    = active_cell-cell_row.
    SHIFT lv_active_row RIGHT DELETING TRAILING space.
    SHIFT lv_active_row LEFT DELETING LEADING space.
    CONCATENATE lv_active_column lv_active_row INTO ep_active_cell.

  ENDMETHOD.                    "GET_ACTIVE_CELL


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_CELL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [<---] EP_VALUE                       TYPE        ZEXCEL_CELL_VALUE
* | [<---] EP_RC                          TYPE        SYSUBRC
* | [<---] EP_STYLE                       TYPE REF TO ZCL_EXCEL_STYLE
* | [<---] EP_GUID                        TYPE        ZEXCEL_CELL_STYLE
* | [<---] EP_FORMULA                     TYPE        ZEXCEL_CELL_FORMULA
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_cell.

    DATA: lv_column        TYPE zexcel_cell_column,
          ls_sheet_content TYPE zexcel_s_cell_data.

    lv_column = zcl_excel_common=>convert_column2int( ip_column ).

    READ TABLE sheet_content INTO ls_sheet_content WITH TABLE KEY cell_row     = ip_row
                                                                  cell_column  = lv_column.

    ep_rc = sy-subrc.
    ep_value    = ls_sheet_content-cell_value.
    ep_guid     = ls_sheet_content-cell_style.       " issue 139 - added this to be used for columnwidth calculation
    ep_formula  = ls_sheet_content-cell_formula.

    " Addition to solve issue #120, contribution by Stefan Schmöcker
    DATA: style_iterator TYPE REF TO cl_object_collection_iterator,
          style          TYPE REF TO zcl_excel_style.
    IF ep_style IS REQUESTED.
      style_iterator = me->excel->get_styles_iterator( ).
      WHILE style_iterator->has_next( ) = 'X'.
        style ?= style_iterator->get_next( ).
        IF style->get_guid( ) = ls_sheet_content-cell_style.
          ep_style = style.
          EXIT.
        ENDIF.
      ENDWHILE.
    ENDIF.
  ENDMETHOD.                    "GET_CELL


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_COLUMN
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [<-()] EO_COLUMN                      TYPE REF TO ZCL_EXCEL_COLUMN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_column.

    DATA: lv_column TYPE zexcel_cell_column.

    lv_column = zcl_excel_common=>convert_column2int( ip_column ).

    eo_column = me->columns->get( ip_index = lv_column ).

    IF eo_column IS NOT BOUND.
      eo_column = me->add_new_column( ip_column ).
    ENDIF.

  ENDMETHOD.                    "GET_COLUMN


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_COLUMNS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_COLUMNS                     TYPE REF TO ZCL_EXCEL_COLUMNS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_columns.
    eo_columns = me->columns.
  ENDMETHOD.                    "GET_COLUMNS


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_COLUMNS_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_columns_iterator.

    eo_iterator = me->columns->get_iterator( ).

  ENDMETHOD.                    "GET_COLUMNS_ITERATOR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_COMMENTS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_COMMENTS                     TYPE REF TO ZCL_EXCEL_COMMENTS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_comments.
    DATA: lo_comment  TYPE REF TO zcl_excel_comment,
          lo_iterator TYPE REF TO cl_object_collection_iterator.

    CREATE OBJECT r_comments.

    lo_iterator = comments->get_iterator( ).
    WHILE lo_iterator->has_next( ) = abap_true.
      lo_comment ?= lo_iterator->get_next( ).
      r_comments->include( lo_comment ).
    ENDWHILE.

  ENDMETHOD.                    "get_comments


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_COMMENTS_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_comments_iterator.
    eo_iterator = comments->get_iterator( ).

  ENDMETHOD.                    "get_comments_iterator


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_DATA_VALIDATIONS_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_data_validations_iterator.

    eo_iterator = me->data_validations->get_iterator( ).
  ENDMETHOD.                    "GET_DATA_VALIDATIONS_ITERATOR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_DATA_VALIDATIONS_SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_SIZE                        TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_data_validations_size.
    ep_size = me->data_validations->size( ).
  ENDMETHOD.                    "GET_DATA_VALIDATIONS_SIZE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_DEFAULT_COLUMN
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_COLUMN                      TYPE REF TO ZCL_EXCEL_COLUMN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_default_column.
    IF me->column_default IS NOT BOUND.
      CREATE OBJECT me->column_default
        EXPORTING
          ip_index     = 'A'         " ????
          ip_worksheet = me
          ip_excel     = me->excel.
    ENDIF.

    eo_column = me->column_default.
  ENDMETHOD.                    "GET_DEFAULT_COLUMN


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_DEFAULT_EXCEL_DATE_FORMAT
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_DEFAULT_EXCEL_DATE_FORMAT   TYPE        ZEXCEL_NUMBER_FORMAT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_default_excel_date_format.
    CONSTANTS: c_lang_e TYPE lang VALUE 'E'.

    IF default_excel_date_format IS NOT INITIAL.
      ep_default_excel_date_format = default_excel_date_format.
      RETURN.
    ENDIF.

    "try to get defaults
    TRY.
        cl_abap_datfm=>get_date_format_des( EXPORTING im_langu = c_lang_e
                                            IMPORTING ex_dateformat = default_excel_date_format ).
      CATCH cx_abap_datfm_format_unknown.

    ENDTRY.

    " and fallback to fixed format
    IF default_excel_date_format IS INITIAL.
      default_excel_date_format = zcl_excel_style_number_format=>c_format_date_ddmmyyyydot.
    ENDIF.

    ep_default_excel_date_format = default_excel_date_format.
  ENDMETHOD.                    "GET_DEFAULT_EXCEL_DATE_FORMAT


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_DEFAULT_EXCEL_TIME_FORMAT
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_DEFAULT_EXCEL_TIME_FORMAT   TYPE        ZEXCEL_NUMBER_FORMAT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_default_excel_time_format.
    DATA: l_timefm TYPE xutimefm.

    IF default_excel_time_format IS NOT INITIAL.
      ep_default_excel_time_format = default_excel_time_format.
      RETURN.
    ENDIF.

* Let's get default
    l_timefm = cl_abap_timefm=>get_environment_timefm( ).
    CASE l_timefm.
      WHEN 0.
*0  24 Hour Format (Example: 12:05:10)
        default_excel_time_format = zcl_excel_style_number_format=>c_format_date_time6.
      WHEN 1.
*1  12 Hour Format (Example: 12:05:10 PM)
        default_excel_time_format = zcl_excel_style_number_format=>c_format_date_time2.
      WHEN 2.
*2  12 Hour Format (Example: 12:05:10 pm) for now all the same. no chnage upper lower
        default_excel_time_format = zcl_excel_style_number_format=>c_format_date_time2.
      WHEN 3.
*3  Hours from 0 to 11 (Example: 00:05:10 PM)  for now all the same. no chnage upper lower
        default_excel_time_format = zcl_excel_style_number_format=>c_format_date_time2.
      WHEN 4.
*4  Hours from 0 to 11 (Example: 00:05:10 pm)  for now all the same. no chnage upper lower
        default_excel_time_format = zcl_excel_style_number_format=>c_format_date_time2.
      WHEN OTHERS.
        " and fallback to fixed format
        default_excel_time_format = zcl_excel_style_number_format=>c_format_date_time6.
    ENDCASE.

    ep_default_excel_time_format = default_excel_time_format.
  ENDMETHOD.                    "GET_DEFAULT_EXCEL_TIME_FORMAT


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_DEFAULT_ROW
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ROW                         TYPE REF TO ZCL_EXCEL_ROW
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_default_row.
    IF me->row_default IS NOT BOUND.
      CREATE OBJECT me->row_default.
    ENDIF.

    eo_row = me->row_default.
  ENDMETHOD.                    "GET_DEFAULT_ROW


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_DIMENSION_RANGE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_DIMENSION_RANGE             TYPE        STRING
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_dimension_range.

    me->update_dimension_range( ).
    IF upper_cell EQ lower_cell. "only one cell
      " Worksheet not filled
*    IF upper_cell-cell_coords = '0'.
      IF upper_cell-cell_coords IS INITIAL.
        ep_dimension_range = 'A1'.
      ELSE.
        ep_dimension_range = upper_cell-cell_coords.
      ENDIF.
    ELSE.
      CONCATENATE upper_cell-cell_coords ':' lower_cell-cell_coords INTO ep_dimension_range.
    ENDIF.

  ENDMETHOD.                    "GET_DIMENSION_RANGE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_DRAWINGS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_TYPE                        TYPE        ZEXCEL_DRAWING_TYPE(optional)
* | [<-()] R_DRAWINGS                     TYPE REF TO ZCL_EXCEL_DRAWINGS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_drawings.

    DATA: lo_drawing  TYPE REF TO zcl_excel_drawing,
          lo_iterator TYPE REF TO cl_object_collection_iterator.

    CASE ip_type.
      WHEN zcl_excel_drawing=>type_image.
        r_drawings = drawings.
      WHEN zcl_excel_drawing=>type_chart.
        r_drawings = charts.
      WHEN space.
        CREATE OBJECT r_drawings
          EXPORTING
            ip_type = ''.

        lo_iterator = drawings->get_iterator( ).
        WHILE lo_iterator->has_next( ) = abap_true.
          lo_drawing ?= lo_iterator->get_next( ).
          r_drawings->include( lo_drawing ).
        ENDWHILE.
        lo_iterator = charts->get_iterator( ).
        WHILE lo_iterator->has_next( ) = abap_true.
          lo_drawing ?= lo_iterator->get_next( ).
          r_drawings->include( lo_drawing ).
        ENDWHILE.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.                    "GET_DRAWINGS


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_DRAWINGS_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_TYPE                        TYPE        ZEXCEL_DRAWING_TYPE
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_drawings_iterator.
    CASE ip_type.
      WHEN zcl_excel_drawing=>type_image.
        eo_iterator = drawings->get_iterator( ).
      WHEN zcl_excel_drawing=>type_chart.
        eo_iterator = charts->get_iterator( ).
    ENDCASE.
  ENDMETHOD.                    "GET_DRAWINGS_ITERATOR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_FREEZE_CELL
* +-------------------------------------------------------------------------------------------------+
* | [<---] EP_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [<---] EP_COLUMN                      TYPE        ZEXCEL_CELL_COLUMN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_freeze_cell.
    ep_row = me->freeze_pane_cell_row.
    ep_column = me->freeze_pane_cell_column.
  ENDMETHOD.                    "GET_FREEZE_CELL


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_GUID
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_GUID                        TYPE        UUID
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_guid.

    ep_guid = me->guid.

  ENDMETHOD.                    "GET_GUID


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_HEADER_FOOTER_DRAWINGS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RT_DRAWINGS                    TYPE        ZEXCEL_T_DRAWINGS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_header_footer_drawings.
    DATA: ls_odd_header  TYPE zexcel_s_worksheet_head_foot,
          ls_odd_footer  TYPE zexcel_s_worksheet_head_foot,
          ls_even_header TYPE zexcel_s_worksheet_head_foot,
          ls_even_footer TYPE zexcel_s_worksheet_head_foot,
          ls_hd_ft       TYPE zexcel_s_worksheet_head_foot.

    FIELD-SYMBOLS: <fs_drawings> TYPE zexcel_s_drawings.

    me->sheet_setup->get_header_footer( IMPORTING ep_odd_header = ls_odd_header
                                                  ep_odd_footer = ls_odd_footer
                                                  ep_even_header = ls_even_header
                                                  ep_even_footer = ls_even_footer ).

**********************************************************************
*** Odd header
    ls_hd_ft = ls_odd_header.
    IF ls_hd_ft-left_image IS NOT INITIAL.
      APPEND INITIAL LINE TO rt_drawings ASSIGNING <fs_drawings>.
      <fs_drawings>-drawing = ls_hd_ft-left_image.
    ENDIF.
    IF ls_hd_ft-right_image IS NOT INITIAL.
      APPEND INITIAL LINE TO rt_drawings ASSIGNING <fs_drawings>.
      <fs_drawings>-drawing = ls_hd_ft-right_image.
    ENDIF.
    IF ls_hd_ft-center_image IS NOT INITIAL.
      APPEND INITIAL LINE TO rt_drawings ASSIGNING <fs_drawings>.
      <fs_drawings>-drawing = ls_hd_ft-center_image.
    ENDIF.

**********************************************************************
*** Odd footer
    ls_hd_ft = ls_odd_footer.
    IF ls_hd_ft-left_image IS NOT INITIAL.
      APPEND INITIAL LINE TO rt_drawings ASSIGNING <fs_drawings>.
      <fs_drawings>-drawing = ls_hd_ft-left_image.
    ENDIF.
    IF ls_hd_ft-right_image IS NOT INITIAL.
      APPEND INITIAL LINE TO rt_drawings ASSIGNING <fs_drawings>.
      <fs_drawings>-drawing = ls_hd_ft-right_image.
    ENDIF.
    IF ls_hd_ft-center_image IS NOT INITIAL.
      APPEND INITIAL LINE TO rt_drawings ASSIGNING <fs_drawings>.
      <fs_drawings>-drawing = ls_hd_ft-center_image.
    ENDIF.

**********************************************************************
*** Even header
    ls_hd_ft = ls_even_header.
    IF ls_hd_ft-left_image IS NOT INITIAL.
      APPEND INITIAL LINE TO rt_drawings ASSIGNING <fs_drawings>.
      <fs_drawings>-drawing = ls_hd_ft-left_image.
    ENDIF.
    IF ls_hd_ft-right_image IS NOT INITIAL.
      APPEND INITIAL LINE TO rt_drawings ASSIGNING <fs_drawings>.
      <fs_drawings>-drawing = ls_hd_ft-right_image.
    ENDIF.
    IF ls_hd_ft-center_image IS NOT INITIAL.
      APPEND INITIAL LINE TO rt_drawings ASSIGNING <fs_drawings>.
      <fs_drawings>-drawing = ls_hd_ft-center_image.
    ENDIF.

**********************************************************************
*** Even footer
    ls_hd_ft = ls_even_footer.
    IF ls_hd_ft-left_image IS NOT INITIAL.
      APPEND INITIAL LINE TO rt_drawings ASSIGNING <fs_drawings>.
      <fs_drawings>-drawing = ls_hd_ft-left_image.
    ENDIF.
    IF ls_hd_ft-right_image IS NOT INITIAL.
      APPEND INITIAL LINE TO rt_drawings ASSIGNING <fs_drawings>.
      <fs_drawings>-drawing = ls_hd_ft-right_image.
    ENDIF.
    IF ls_hd_ft-center_image IS NOT INITIAL.
      APPEND INITIAL LINE TO rt_drawings ASSIGNING <fs_drawings>.
      <fs_drawings>-drawing = ls_hd_ft-center_image.
    ENDIF.

  ENDMETHOD.                    "get_header_footer_drawings


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_HIGHEST_COLUMN
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_HIGHEST_COLUMN               TYPE        ZEXCEL_CELL_COLUMN
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_highest_column.
    me->update_dimension_range( ).
    r_highest_column = me->lower_cell-cell_column.
  ENDMETHOD.                    "GET_HIGHEST_COLUMN


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_HIGHEST_ROW
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_HIGHEST_ROW                  TYPE        INT4
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_highest_row.
    me->update_dimension_range( ).
    r_highest_row = me->lower_cell-cell_row.
  ENDMETHOD.                    "GET_HIGHEST_ROW


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_HYPERLINKS_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_hyperlinks_iterator.
    eo_iterator = hyperlinks->get_iterator( ).
  ENDMETHOD.                    "GET_HYPERLINKS_ITERATOR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_HYPERLINKS_SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_SIZE                        TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_hyperlinks_size.
    ep_size = hyperlinks->size( ).
  ENDMETHOD.                    "GET_HYPERLINKS_SIZE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_MERGE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] MERGE_RANGE                    TYPE        STRING_TABLE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_merge.

    FIELD-SYMBOLS: <ls_merged_cell> LIKE LINE OF me->mt_merged_cells.

    DATA: lv_col_from    TYPE string,
          lv_col_to      TYPE string,
          lv_row_from    TYPE string,
          lv_row_to      TYPE string,
          lv_merge_range TYPE string.

    LOOP AT me->mt_merged_cells ASSIGNING <ls_merged_cell>.

      lv_col_from = zcl_excel_common=>convert_column2alpha( <ls_merged_cell>-col_from ).
      lv_col_to   = zcl_excel_common=>convert_column2alpha( <ls_merged_cell>-col_to   ).
      lv_row_from = <ls_merged_cell>-row_from.
      lv_row_to   = <ls_merged_cell>-row_to  .
      CONCATENATE lv_col_from lv_row_from ':' lv_col_to lv_row_to
         INTO lv_merge_range.
      CONDENSE lv_merge_range NO-GAPS.
      APPEND lv_merge_range TO merge_range.

    ENDLOOP.

  ENDMETHOD.                    "GET_MERGE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_PAGEBREAKS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RO_PAGEBREAKS                  TYPE REF TO ZCL_EXCEL_WORKSHEET_PAGEBREAKS
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_pagebreaks.
    ro_pagebreaks = mo_pagebreaks.
  ENDMETHOD.                    "GET_PAGEBREAKS


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_RANGES_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_ranges_iterator.

    eo_iterator = me->ranges->get_iterator( ).

  ENDMETHOD.                    "GET_RANGES_ITERATOR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_ROW
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_ROW                         TYPE        INT4
* | [<-()] EO_ROW                         TYPE REF TO ZCL_EXCEL_ROW
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_row.
    eo_row = me->rows->get( ip_index = ip_row ).

    IF eo_row IS NOT BOUND.
      eo_row = me->add_new_row( ip_row ).
    ENDIF.
  ENDMETHOD.                    "GET_ROW


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_ROWS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ROWS                        TYPE REF TO ZCL_EXCEL_ROWS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_rows.
    eo_rows = me->rows.
  ENDMETHOD.                    "GET_ROWS


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_ROWS_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_rows_iterator.

    eo_iterator = me->rows->get_iterator( ).

  ENDMETHOD.                    "GET_ROWS_ITERATOR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_ROW_OUTLINES
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RT_ROW_OUTLINES                TYPE        MTY_TS_OUTLINES_ROW
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_row_outlines.

    rt_row_outlines = me->mt_row_outlines.

  ENDMETHOD.                    "GET_ROW_OUTLINES


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_STYLE_COND
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_GUID                        TYPE        ZEXCEL_CELL_STYLE
* | [<-()] EO_STYLE_COND                  TYPE REF TO ZCL_EXCEL_STYLE_COND
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_style_cond.

    DATA: lo_style_iterator TYPE REF TO cl_object_collection_iterator,
          lo_style_cond     TYPE REF TO zcl_excel_style_cond.

    lo_style_iterator = me->get_style_cond_iterator( ).
    WHILE lo_style_iterator->has_next( ) = abap_true.
      lo_style_cond ?= lo_style_iterator->get_next( ).
      IF lo_style_cond->get_guid( ) = ip_guid.
        eo_style_cond = lo_style_cond.
        EXIT.
      ENDIF.
    ENDWHILE.

  ENDMETHOD.                    "GET_STYLE_COND


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_STYLE_COND_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_style_cond_iterator.

    eo_iterator = styles_cond->get_iterator( ).
  ENDMETHOD.                    "GET_STYLE_COND_ITERATOR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_TABCOLOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EV_TABCOLOR                    TYPE        ZEXCEL_S_TABCOLOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_tabcolor.
    ev_tabcolor = me->tabcolor.
  ENDMETHOD.                    "GET_TABCOLOR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_TABLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_SKIPPED_ROWS                TYPE        INT4 (default =0)
* | [--->] IV_SKIPPED_COLS                TYPE        INT4 (default =0)
* | [--->] IV_MAX_COL                     TYPE        INT4(optional)
* | [--->] IV_MAX_ROW                     TYPE        INT4(optional)
* | [<---] ET_TABLE                       TYPE        STANDARD TABLE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_table.
*--------------------------------------------------------------------*
* Comment D. Rauchenstein
* With this method, we get a fully functional Excel Upload, which solves
* a few issues of the other excel upload tools
* ZBCABA_ALSM_EXCEL_UPLOAD_EXT: Reads only up to 50 signs per Cell, Limit
* in row-Numbers. Other have Limitations of Lines, or you are not able
* to ignore filters or choosing the right tab.
*
* To get a fully functional XLSX Upload, you can use it e.g. with method
* CL_EXCEL_READER_2007->ZIF_EXCEL_READER~LOAD_FILE()
*--------------------------------------------------------------------*

    FIELD-SYMBOLS: <ls_line> TYPE data.
    FIELD-SYMBOLS: <lv_value> TYPE data.

    DATA lv_actual_row TYPE int4.
    DATA lv_actual_row_string TYPE string.
    DATA lv_actual_col TYPE int4.
    DATA lv_actual_col_string TYPE string.
    DATA lv_errormessage TYPE string.
    DATA lv_max_col TYPE zexcel_cell_column.
    DATA lv_max_row TYPE int4.
    DATA lv_delta_col TYPE int4.
    DATA lv_value  TYPE zexcel_cell_value.
    DATA lv_rc  TYPE sysubrc.
    DATA lx_conversion_error TYPE REF TO cx_sy_conversion_error.
    DATA lv_float TYPE f.
    DATA lv_type.

    lv_max_col =  me->get_highest_column( ).
    IF iv_max_col IS SUPPLIED AND iv_max_col < lv_max_col.
      lv_max_col = iv_max_col.
    ENDIF.
    lv_max_row =  me->get_highest_row( ).
    IF iv_max_row IS SUPPLIED AND iv_max_row < lv_max_row.
      lv_max_row = iv_max_row.
    ENDIF.

*--------------------------------------------------------------------*
* The row counter begins with 1 and should be corrected with the skips
*--------------------------------------------------------------------*
    lv_actual_row =  iv_skipped_rows + 1.
    lv_actual_col =  iv_skipped_cols + 1.


    TRY.
*--------------------------------------------------------------------*
* Check if we the basic features are possible with given "any table"
*--------------------------------------------------------------------*
        APPEND INITIAL LINE TO et_table ASSIGNING <ls_line>.
        IF sy-subrc <> 0 OR <ls_line> IS NOT ASSIGNED.

          lv_errormessage = 'Error at inserting new Line to internal Table'(002).
          zcx_excel=>raise_text( lv_errormessage ).

        ELSE.
          lv_delta_col = lv_max_col - iv_skipped_cols.
          ASSIGN COMPONENT lv_delta_col OF STRUCTURE <ls_line> TO <lv_value>.
          IF sy-subrc <> 0 OR <lv_value> IS NOT ASSIGNED.
            lv_errormessage = 'Internal table has less columns than excel'(003).
            zcx_excel=>raise_text( lv_errormessage ).
          ELSE.
*--------------------------------------------------------------------*
*now we are ready for handle the table data
*--------------------------------------------------------------------*
            REFRESH et_table.
*--------------------------------------------------------------------*
* Handle each Row until end on right side
*--------------------------------------------------------------------*
            WHILE lv_actual_row <= lv_max_row .

*--------------------------------------------------------------------*
* Handle each Column until end on bottom
* First step is to step back on first column
*--------------------------------------------------------------------*
              lv_actual_col =  iv_skipped_cols + 1.

              UNASSIGN <ls_line>.
              APPEND INITIAL LINE TO et_table ASSIGNING <ls_line>.
              IF sy-subrc <> 0 OR <ls_line> IS NOT ASSIGNED.
                lv_errormessage = 'Error at inserting new Line to internal Table'(002).
                zcx_excel=>raise_text( lv_errormessage ).
              ENDIF.
              WHILE lv_actual_col <= lv_max_col.

                lv_delta_col = lv_actual_col - iv_skipped_cols.
                ASSIGN COMPONENT lv_delta_col OF STRUCTURE <ls_line> TO <lv_value>.
                IF sy-subrc <> 0.
                  lv_actual_col_string = lv_actual_col.
                  lv_actual_row_string = lv_actual_row.
                  CONCATENATE 'Error at assigning field (Col:'(004) lv_actual_col_string ' Row:'(005) lv_actual_row_string INTO lv_errormessage.
                  zcx_excel=>raise_text( lv_errormessage ).
                ENDIF.

                me->get_cell(
                  EXPORTING
                    ip_column  = lv_actual_col    " Cell Column
                    ip_row     = lv_actual_row    " Cell Row
                  IMPORTING
                    ep_value   = lv_value    " Cell Value
                    ep_rc      = lv_rc    " Return Value of ABAP Statements
                ).
                IF lv_rc <> 0
                  AND lv_rc <> 4                                                   "No found error means, zero/no value in cell
                  AND lv_rc <> 8. "rc is 8 when the last row contains cells with zero / no values
                  lv_actual_col_string = lv_actual_col.
                  lv_actual_row_string = lv_actual_row.
                  CONCATENATE 'Error at reading field value (Col:'(007) lv_actual_col_string ' Row:'(005) lv_actual_row_string INTO lv_errormessage.
                  zcx_excel=>raise_text( lv_errormessage ).
                ENDIF.

                TRY.
                    <lv_value> = lv_value. "Will raise exception if data type of <lv_value> is not float (or decfloat16/34) and excel delivers exponential number e.g. -2.9398924194538267E-2
                  CATCH cx_sy_conversion_error INTO lx_conversion_error.
                    "Another try with conversion to float...
                    DESCRIBE FIELD <lv_value> TYPE lv_type.
                    IF lv_type = 'P'.
                      <lv_value> = lv_float = lv_value.
                    ELSE.
                      RAISE EXCEPTION lx_conversion_error. "Pass on original exception
                    ENDIF.
                ENDTRY.

*  CATCH zcx_excel.    "
                ADD 1 TO lv_actual_col.
              ENDWHILE.
              ADD 1 TO lv_actual_row.
            ENDWHILE.
          ENDIF.


        ENDIF.

      CATCH cx_sy_assign_cast_illegal_cast.
        lv_actual_col_string = lv_actual_col.
        lv_actual_row_string = lv_actual_row.
        CONCATENATE 'Error at assigning field (Col:'(004) lv_actual_col_string ' Row:'(005) lv_actual_row_string INTO lv_errormessage.
        zcx_excel=>raise_text( lv_errormessage ).
      CATCH cx_sy_assign_cast_unknown_type.
        lv_actual_col_string = lv_actual_col.
        lv_actual_row_string = lv_actual_row.
        CONCATENATE 'Error at assigning field (Col:'(004) lv_actual_col_string ' Row:'(005) lv_actual_row_string INTO lv_errormessage.
        zcx_excel=>raise_text( lv_errormessage ).
      CATCH cx_sy_assign_out_of_range.
        lv_errormessage = 'Internal table has less columns than excel'(003).
        zcx_excel=>raise_text( lv_errormessage ).
      CATCH cx_sy_conversion_error.
        lv_actual_col_string = lv_actual_col.
        lv_actual_row_string = lv_actual_row.
        CONCATENATE 'Error at converting field value (Col:'(006) lv_actual_col_string ' Row:'(005) lv_actual_row_string INTO lv_errormessage.
        zcx_excel=>raise_text( lv_errormessage ).

    ENDTRY.
  ENDMETHOD.                    "get_table


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_TABLES_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_tables_iterator.
    eo_iterator = tables->if_object_collection~get_iterator( ).
  ENDMETHOD.                    "GET_TABLES_ITERATOR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_TABLES_SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_SIZE                        TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_tables_size.
    ep_size = tables->if_object_collection~size( ).
  ENDMETHOD.                    "GET_TABLES_SIZE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->GET_TITLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_ESCAPED                     TYPE        FLAG (default ='')
* | [<-()] EP_TITLE                       TYPE        ZEXCEL_SHEET_TITLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_title.
    DATA lv_value TYPE string.
    IF ip_escaped EQ abap_true.
      lv_value = me->title.
      ep_title = zcl_excel_common=>escape_string( lv_value ).
    ELSE.
      ep_title = me->title.
    ENDIF.
  ENDMETHOD.                    "GET_TITLE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_WORKSHEET->GET_VALUE_TYPE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        SIMPLE
* | [<---] EP_VALUE                       TYPE        SIMPLE
* | [<---] EP_VALUE_TYPE                  TYPE        ABAP_TYPEKIND
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_value_type.
    DATA: lo_addit    TYPE REF TO cl_abap_elemdescr,
          ls_dfies    TYPE dfies,
          l_function  TYPE funcname,
          l_value(50) TYPE c.

    ep_value = ip_value.
    ep_value_type = cl_abap_typedescr=>typekind_string. " Thats our default if something goes wrong.

    TRY.
        lo_addit            ?= cl_abap_typedescr=>describe_by_data( ip_value ).
      CATCH cx_sy_move_cast_error.
        CLEAR lo_addit.
    ENDTRY.
    IF lo_addit IS BOUND.
      lo_addit->get_ddic_field( RECEIVING  p_flddescr   = ls_dfies
                                EXCEPTIONS not_found    = 1
                                           no_ddic_type = 2
                                           OTHERS       = 3 ) .
      IF sy-subrc = 0.
        ep_value_type = ls_dfies-inttype.

        IF ls_dfies-convexit IS NOT INITIAL.
* We need to convert with output conversion function
          CONCATENATE 'CONVERSION_EXIT_' ls_dfies-convexit '_OUTPUT' INTO l_function.
          SELECT SINGLE funcname INTO l_function
                FROM tfdir
                WHERE funcname = l_function.
          IF sy-subrc = 0.
            CALL FUNCTION l_function
              EXPORTING
                input  = ip_value
              IMPORTING
*               LONG_TEXT  =
                output = l_value
*               SHORT_TEXT =
              EXCEPTIONS
                OTHERS = 1.
            IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
            ELSE.
              TRY.
                  ep_value = l_value.
                CATCH cx_root.
                  ep_value = ip_value.
              ENDTRY.
            ENDIF.
          ENDIF.
        ENDIF.
      ELSE.
        ep_value_type = lo_addit->get_data_type_kind( ip_value ).
      ENDIF.
    ENDIF.

  ENDMETHOD.                    "GET_VALUE_TYPE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->IS_CELL_MERGED
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [<-()] RP_IS_MERGED                   TYPE        ABAP_BOOL
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_cell_merged.

    DATA: lv_column TYPE i.

    FIELD-SYMBOLS: <ls_merged_cell> LIKE LINE OF me->mt_merged_cells.

    lv_column = zcl_excel_common=>convert_column2int( ip_column ).

    rp_is_merged = abap_false.                                        " Assume not in merged area

    LOOP AT me->mt_merged_cells ASSIGNING <ls_merged_cell>.

      IF    <ls_merged_cell>-col_from <= lv_column
        AND <ls_merged_cell>-col_to   >= lv_column
        AND <ls_merged_cell>-row_from <= ip_row
        AND <ls_merged_cell>-row_to   >= ip_row.
        rp_is_merged = abap_true.                                     " until we are proven different
        RETURN.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.                    "IS_CELL_MERGED


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_WORKSHEET->PRINT_TITLE_SET_RANGE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD print_title_set_range.
*--------------------------------------------------------------------*
* issue#235 - repeat rows/columns
*           - Stefan Schmoecker,                            2012-12-02
*--------------------------------------------------------------------*


    DATA: lo_range_iterator         TYPE REF TO cl_object_collection_iterator,
          lo_range                  TYPE REF TO zcl_excel_range,
          lv_repeat_range_sheetname TYPE string,
          lv_repeat_range_col       TYPE string,
          lv_row_char_from          TYPE char10,
          lv_row_char_to            TYPE char10,
          lv_repeat_range_row       TYPE string,
          lv_repeat_range           TYPE string.


*--------------------------------------------------------------------*
* Get range that represents printarea
* if non-existant, create it
*--------------------------------------------------------------------*
    lo_range_iterator = me->get_ranges_iterator( ).
    WHILE lo_range_iterator->has_next( ) = abap_true.

      lo_range ?= lo_range_iterator->get_next( ).
      IF lo_range->name = zif_excel_sheet_printsettings=>gcv_print_title_name.
        EXIT.  " Found it
      ENDIF.
      CLEAR lo_range.

    ENDWHILE.


    IF me->print_title_col_from IS INITIAL AND
       me->print_title_row_from IS INITIAL.
*--------------------------------------------------------------------*
* No print titles are present,
*--------------------------------------------------------------------*
      IF lo_range IS BOUND.
        me->ranges->remove( lo_range ).
      ENDIF.
    ELSE.
*--------------------------------------------------------------------*
* Print titles are present,
*--------------------------------------------------------------------*
      IF lo_range IS NOT BOUND.
        lo_range =  me->add_new_range( ).
        lo_range->name = zif_excel_sheet_printsettings=>gcv_print_title_name.
      ENDIF.

      lv_repeat_range_sheetname = me->get_title( ).
      lv_repeat_range_sheetname = zcl_excel_common=>escape_string( lv_repeat_range_sheetname ).

*--------------------------------------------------------------------*
* Repeat-columns
*--------------------------------------------------------------------*
      IF me->print_title_col_from IS NOT INITIAL.
        CONCATENATE lv_repeat_range_sheetname
                    '!$' me->print_title_col_from
                    ':$' me->print_title_col_to
            INTO lv_repeat_range_col.
      ENDIF.

*--------------------------------------------------------------------*
* Repeat-rows
*--------------------------------------------------------------------*
      IF me->print_title_row_from IS NOT INITIAL.
        lv_row_char_from = me->print_title_row_from.
        lv_row_char_to   = me->print_title_row_to.
        CONCATENATE '!$' lv_row_char_from
                    ':$' lv_row_char_to
            INTO lv_repeat_range_row.
        CONDENSE lv_repeat_range_row NO-GAPS.
        CONCATENATE lv_repeat_range_sheetname
                    lv_repeat_range_row
            INTO lv_repeat_range_row.
      ENDIF.

*--------------------------------------------------------------------*
* Concatenate repeat-rows and columns
*--------------------------------------------------------------------*
      IF lv_repeat_range_col IS INITIAL.
        lv_repeat_range = lv_repeat_range_row.
      ELSEIF lv_repeat_range_row IS INITIAL.
        lv_repeat_range = lv_repeat_range_col.
      ELSE.
        CONCATENATE lv_repeat_range_col lv_repeat_range_row
            INTO lv_repeat_range SEPARATED BY ','.
      ENDIF.


      lo_range->set_range_value( lv_repeat_range ).
    ENDIF.



  ENDMETHOD.                    "PRINT_TITLE_SET_RANGE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_AREA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN_START                TYPE        SIMPLE
* | [--->] IP_COLUMN_END                  TYPE        SIMPLE(optional)
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_ROW_TO                      TYPE        ZEXCEL_CELL_ROW(optional)
* | [--->] IP_VALUE                       TYPE        SIMPLE(optional)
* | [--->] IP_FORMULA                     TYPE        ZEXCEL_CELL_FORMULA(optional)
* | [--->] IP_STYLE                       TYPE        ZEXCEL_CELL_STYLE(optional)
* | [--->] IP_HYPERLINK                   TYPE REF TO ZCL_EXCEL_HYPERLINK(optional)
* | [--->] IP_DATA_TYPE                   TYPE        ZEXCEL_CELL_DATA_TYPE(optional)
* | [--->] IP_ABAP_TYPE                   TYPE        ABAP_TYPEKIND(optional)
* | [--->] IP_MERGE                       TYPE        ABAP_BOOL(optional)
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_area.

    DATA: lv_row              TYPE zexcel_cell_row,
          lv_row_end          TYPE zexcel_cell_row,
          lv_column_start     TYPE zexcel_cell_column_alpha,
          lv_column_end       TYPE zexcel_cell_column_alpha,
          lv_column_start_int TYPE zexcel_cell_column_alpha,
          lv_column_end_int   TYPE zexcel_cell_column_alpha.

    MOVE: ip_row_to TO lv_row_end,
          ip_row    TO lv_row.

    IF lv_row_end IS INITIAL OR ip_row_to IS NOT SUPPLIED.
      lv_row_end = lv_row.
    ENDIF.

    MOVE: ip_column_start TO lv_column_start,
          ip_column_end   TO lv_column_end.

    IF lv_column_end IS INITIAL OR ip_column_end IS NOT SUPPLIED.
      lv_column_end = lv_column_start.
    ENDIF.

    lv_column_start_int = zcl_excel_common=>convert_column2int( lv_column_start ).
    lv_column_end_int   = zcl_excel_common=>convert_column2int( lv_column_end ).

    IF lv_column_start_int > lv_column_end_int OR lv_row > lv_row_end.

      RAISE EXCEPTION TYPE zcx_excel
        EXPORTING
          error = 'Wrong Merging Parameters'.

    ENDIF.

    IF ip_data_type IS SUPPLIED OR
       ip_abap_type IS SUPPLIED.

      me->set_cell( ip_column    = lv_column_start
                    ip_row       = lv_row
                    ip_value     = ip_value
                    ip_formula   = ip_formula
                    ip_style     = ip_style
                    ip_hyperlink = ip_hyperlink
                    ip_data_type = ip_data_type
                    ip_abap_type = ip_abap_type ).

    ELSE.

      me->set_cell( ip_column    = lv_column_start
                    ip_row       = lv_row
                    ip_value     = ip_value
                    ip_formula   = ip_formula
                    ip_style     = ip_style
                    ip_hyperlink = ip_hyperlink ).

    ENDIF.

    IF ip_style IS SUPPLIED.

      me->set_area_style( ip_column_start = lv_column_start
                          ip_column_end   = lv_column_end
                          ip_row          = lv_row
                          ip_row_to       = lv_row_end
                          ip_style        = ip_style ).
    ENDIF.

    IF ip_merge IS SUPPLIED AND ip_merge = abap_true.

      me->set_merge( ip_column_start = lv_column_start
                     ip_column_end   = lv_column_end
                     ip_row          = lv_row
                     ip_row_to       = lv_row_end ).

    ENDIF.

  ENDMETHOD.                    "set_area


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_AREA_FORMULA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN_START                TYPE        SIMPLE
* | [--->] IP_COLUMN_END                  TYPE        SIMPLE(optional)
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_ROW_TO                      TYPE        ZEXCEL_CELL_ROW(optional)
* | [--->] IP_FORMULA                     TYPE        ZEXCEL_CELL_FORMULA
* | [--->] IP_MERGE                       TYPE        ABAP_BOOL(optional)
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_area_formula.
    DATA: ld_row            TYPE zexcel_cell_row,
          ld_row_end        TYPE zexcel_cell_row,
          ld_column         TYPE zexcel_cell_column_alpha,
          ld_column_end     TYPE zexcel_cell_column_alpha,
          ld_column_int     TYPE zexcel_cell_column_alpha,
          ld_column_end_int TYPE zexcel_cell_column_alpha.

    MOVE: ip_row_to TO ld_row_end,
          ip_row    TO ld_row.
    IF ld_row_end IS INITIAL OR ip_row_to IS NOT SUPPLIED.
      ld_row_end = ld_row.
    ENDIF.

    MOVE: ip_column_start TO ld_column,
          ip_column_end   TO ld_column_end.

    IF ld_column_end IS INITIAL OR ip_column_end IS NOT SUPPLIED.
      ld_column_end = ld_column.
    ENDIF.

    ld_column_int      = zcl_excel_common=>convert_column2int( ld_column ).
    ld_column_end_int  = zcl_excel_common=>convert_column2int( ld_column_end ).

    IF ld_column_int > ld_column_end_int OR ld_row > ld_row_end.
      RAISE EXCEPTION TYPE zcx_excel
        EXPORTING
          error = 'Wrong Merging Parameters'.
    ENDIF.

    me->set_cell_formula( ip_column = ld_column ip_row = ld_row
                          ip_formula = ip_formula ).

    IF ip_merge IS SUPPLIED AND ip_merge = abap_true.
      me->set_merge( ip_column_start = ld_column ip_row = ld_row
                     ip_column_end   = ld_column_end   ip_row_to = ld_row_end ).
    ENDIF.
  ENDMETHOD.                    "set_area_formula


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_AREA_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN_START                TYPE        SIMPLE
* | [--->] IP_COLUMN_END                  TYPE        SIMPLE(optional)
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_ROW_TO                      TYPE        ZEXCEL_CELL_ROW(optional)
* | [--->] IP_STYLE                       TYPE        ZEXCEL_CELL_STYLE
* | [--->] IP_MERGE                       TYPE        ABAP_BOOL(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_area_style.
    DATA: ld_row_start        TYPE zexcel_cell_row,
          ld_row_end          TYPE zexcel_cell_row,
          ld_column_start_int TYPE zexcel_cell_column,
          ld_column_end_int   TYPE zexcel_cell_column,
          ld_current_column   TYPE zexcel_cell_column_alpha,
          ld_current_row      TYPE zexcel_cell_row.

    MOVE: ip_row_to TO ld_row_end,
          ip_row    TO ld_row_start.
    IF ld_row_end IS INITIAL OR ip_row_to IS NOT SUPPLIED.
      ld_row_end = ld_row_start.
    ENDIF.
    ld_column_start_int = zcl_excel_common=>convert_column2int( ip_column_start ).
    ld_column_end_int   = zcl_excel_common=>convert_column2int( ip_column_end ).
    IF ld_column_end_int IS INITIAL OR ip_column_end IS NOT SUPPLIED.
      ld_column_end_int = ld_column_start_int.
    ENDIF.

    WHILE ld_column_start_int <= ld_column_end_int.
      ld_current_column = zcl_excel_common=>convert_column2alpha( ld_column_start_int ).
      ld_current_row = ld_row_start.
      WHILE ld_current_row <= ld_row_end.
        me->set_cell_style( ip_row = ld_current_row ip_column = ld_current_column
                            ip_style = ip_style ).
        ADD 1 TO ld_current_row.
      ENDWHILE.
      ADD 1 TO ld_column_start_int.
    ENDWHILE.
    IF ip_merge IS SUPPLIED AND ip_merge = abap_true.
      me->set_merge( ip_column_start = ip_column_start ip_row = ld_row_start
                     ip_column_end   = ld_current_column    ip_row_to = ld_row_end ).
    ENDIF.
  ENDMETHOD.                    "SET_AREA_STYLE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_CELL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_VALUE                       TYPE        SIMPLE(optional)
* | [--->] IP_FORMULA                     TYPE        ZEXCEL_CELL_FORMULA(optional)
* | [--->] IP_STYLE                       TYPE        ZEXCEL_CELL_STYLE(optional)
* | [--->] IP_HYPERLINK                   TYPE REF TO ZCL_EXCEL_HYPERLINK(optional)
* | [--->] IP_DATA_TYPE                   TYPE        ZEXCEL_CELL_DATA_TYPE(optional)
* | [--->] IP_ABAP_TYPE                   TYPE        ABAP_TYPEKIND(optional)
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_cell.

    DATA: lv_column        TYPE zexcel_cell_column,
          ls_sheet_content TYPE zexcel_s_cell_data,
          lv_row_alpha     TYPE string,
          lv_col_alpha     TYPE zexcel_cell_column_alpha,
          lv_value         TYPE zexcel_cell_value,
          lv_data_type     TYPE zexcel_cell_data_type,
          lv_value_type    TYPE abap_typekind,
          lv_style_guid    TYPE zexcel_cell_style,
          lo_addit         TYPE REF TO cl_abap_elemdescr,
          lo_value         TYPE REF TO data,
          lo_value_new     TYPE REF TO data.

    FIELD-SYMBOLS: <fs_sheet_content> TYPE zexcel_s_cell_data,
                   <fs_numeric>       TYPE numeric,
                   <fs_date>          TYPE d,
                   <fs_time>          TYPE t,
                   <fs_value>         TYPE simple.

    IF ip_value  IS NOT SUPPLIED AND ip_formula IS NOT SUPPLIED.
      zcx_excel=>raise_text( 'Please provide the value or formula' ).
    ENDIF.

* Begin of change issue #152 - don't touch exisiting style if only value is passed
*  lv_style_guid = ip_style.
    lv_column = zcl_excel_common=>convert_column2int( ip_column ).
    READ TABLE sheet_content ASSIGNING <fs_sheet_content> WITH TABLE KEY cell_row    = ip_row      " Changed to access via table key , Stefan Schmöcker, 2013-08-03
                                                                         cell_column = lv_column.
    IF sy-subrc = 0.
      IF ip_style IS INITIAL.
        " If no style is provided as method-parameter and cell is found use cell's current style
        lv_style_guid = <fs_sheet_content>-cell_style.
      ELSE.
        " Style provided as method-parameter --> use this
        lv_style_guid = ip_style.
      ENDIF.
    ELSE.
      " No cell found --> use supplied style even if empty
      lv_style_guid = ip_style.
    ENDIF.
* End of change issue #152 - don't touch exisiting style if only value is passed

    IF ip_value IS SUPPLIED.
      "if data type is passed just write the value. Otherwise map abap type to excel and perform conversion
      "IP_DATA_TYPE is passed by excel reader so source types are preserved
*First we get reference into local var.
      CREATE DATA lo_value LIKE ip_value.
      ASSIGN lo_value->* TO <fs_value>.
      <fs_value> = ip_value.
      IF ip_data_type IS SUPPLIED.
        IF ip_abap_type IS NOT SUPPLIED.
          get_value_type( EXPORTING ip_value      = ip_value
                          IMPORTING ep_value      = <fs_value> ) .
        ENDIF.
        lv_value = <fs_value>.
        lv_data_type = ip_data_type.
      ELSE.
        IF ip_abap_type IS SUPPLIED.
          lv_value_type = ip_abap_type.
        ELSE.
          get_value_type( EXPORTING ip_value      = ip_value
                          IMPORTING ep_value      = <fs_value>
                                    ep_value_type = lv_value_type ).
        ENDIF.
        CASE lv_value_type.
          WHEN cl_abap_typedescr=>typekind_int OR cl_abap_typedescr=>typekind_int1 OR cl_abap_typedescr=>typekind_int2
            OR '8'. "Allow INT8 types columns
            lo_addit = cl_abap_elemdescr=>get_i( ).
            CREATE DATA lo_value_new TYPE HANDLE lo_addit.
            ASSIGN lo_value_new->* TO <fs_numeric>.
            IF sy-subrc = 0.
              <fs_numeric> = <fs_value>.
              lv_value = zcl_excel_common=>number_to_excel_string( ip_value = <fs_numeric> ).
            ENDIF.

          WHEN cl_abap_typedescr=>typekind_float OR cl_abap_typedescr=>typekind_packed.
            lo_addit = cl_abap_elemdescr=>get_f( ).
            CREATE DATA lo_value_new TYPE HANDLE lo_addit.
            ASSIGN lo_value_new->* TO <fs_numeric>.
            IF sy-subrc = 0.
              <fs_numeric> = <fs_value>.
              lv_value = zcl_excel_common=>number_to_excel_string( ip_value = <fs_numeric> ).
            ENDIF.

          WHEN cl_abap_typedescr=>typekind_char OR cl_abap_typedescr=>typekind_string OR cl_abap_typedescr=>typekind_num OR
               cl_abap_typedescr=>typekind_hex.
            lv_value = <fs_value>.
            lv_data_type = 's'.

          WHEN cl_abap_typedescr=>typekind_date.
            lo_addit = cl_abap_elemdescr=>get_d( ).
            CREATE DATA lo_value_new TYPE HANDLE lo_addit.
            ASSIGN lo_value_new->* TO <fs_date>.
            IF sy-subrc = 0.
              <fs_date> = <fs_value>.
              lv_value = zcl_excel_common=>date_to_excel_string( ip_value = <fs_date> ) .
            ENDIF.
* Begin of change issue #152 - don't touch exisiting style if only value is passed
* Moved to end of routine - apply date-format even if other styleinformation is passed
*          IF ip_style IS NOT SUPPLIED. "get default date format in case parameter is initial
*            lo_style = excel->add_new_style( ).
*            lo_style->number_format->format_code = get_default_excel_date_format( ).
*            lv_style_guid = lo_style->get_guid( ).
*          ENDIF.
* End of change issue #152 - don't touch exisiting style if only value is passed

          WHEN cl_abap_typedescr=>typekind_time.
            lo_addit = cl_abap_elemdescr=>get_t( ).
            CREATE DATA lo_value_new TYPE HANDLE lo_addit.
            ASSIGN lo_value_new->* TO <fs_time>.
            IF sy-subrc = 0.
              <fs_time> = <fs_value>.
              lv_value = zcl_excel_common=>time_to_excel_string( ip_value = <fs_time> ).
            ENDIF.
* Begin of change issue #152 - don't touch exisiting style if only value is passed
* Moved to end of routine - apply time-format even if other styleinformation is passed
*          IF ip_style IS NOT SUPPLIED. "get default time format for user in case parameter is initial
*            lo_style = excel->add_new_style( ).
*            lo_style->number_format->format_code = zcl_excel_style_number_format=>c_format_date_time6.
*            lv_style_guid = lo_style->get_guid( ).
*          ENDIF.
* End of change issue #152 - don't touch exisiting style if only value is passed

          WHEN OTHERS.
            zcx_excel=>raise_text( 'Invalid data type of input value' ).
        ENDCASE.
      ENDIF.

    ENDIF.

    IF ip_hyperlink IS BOUND.
      ip_hyperlink->set_cell_reference( ip_column = ip_column
                                        ip_row = ip_row ).
      me->hyperlinks->add( ip_hyperlink ).
    ENDIF.

* Begin of change issue #152 - don't touch exisiting style if only value is passed
* Read table moved up, so that current style may be evaluated
*  lv_column = zcl_excel_common=>convert_column2int( ip_column ).

*  READ TABLE sheet_content ASSIGNING <fs_sheet_content> WITH KEY cell_row    = ip_row
*                                                                 cell_column = lv_column.
*
*  IF sy-subrc EQ 0.
    IF <fs_sheet_content> IS ASSIGNED.
* End of change issue #152 - don't touch exisiting style if only value is passed
      <fs_sheet_content>-cell_value   = lv_value.
      <fs_sheet_content>-cell_formula = ip_formula.
      <fs_sheet_content>-cell_style   = lv_style_guid.
      <fs_sheet_content>-data_type    = lv_data_type.
    ELSE.
      ls_sheet_content-cell_row     = ip_row.
      ls_sheet_content-cell_column  = lv_column.
      ls_sheet_content-cell_value   = lv_value.
      ls_sheet_content-cell_formula = ip_formula.
      ls_sheet_content-cell_style   = lv_style_guid.
      ls_sheet_content-data_type    = lv_data_type.
      lv_row_alpha = ip_row.
*    SHIFT lv_row_alpha RIGHT DELETING TRAILING space."del #152 - replaced with condense - should be faster
*    SHIFT lv_row_alpha LEFT DELETING LEADING space.  "del #152 - replaced with condense - should be faster
      CONDENSE lv_row_alpha NO-GAPS.                    "ins #152 - replaced 2 shifts      - should be faster
      lv_col_alpha = zcl_excel_common=>convert_column2alpha( ip_column ).       " issue #155 - less restrictive typing for ip_column
      CONCATENATE lv_col_alpha lv_row_alpha INTO ls_sheet_content-cell_coords.  " issue #155 - less restrictive typing for ip_column
      INSERT ls_sheet_content INTO TABLE sheet_content ASSIGNING <fs_sheet_content>. "ins #152 - Now <fs_sheet_content> always holds the data
*    APPEND ls_sheet_content TO sheet_content.
*    SORT sheet_content BY cell_row cell_column.
      " me->update_dimension_range( ).

    ENDIF.

* Begin of change issue #152 - don't touch exisiting style if only value is passed
* For Date- or Timefields change the formatcode if nothing is set yet
* Enhancement option:  Check if existing formatcode is a date/ or timeformat
*                      If not, use default
    DATA: lo_format_code_datetime TYPE zexcel_number_format.
    DATA: stylemapping    TYPE zexcel_s_stylemapping.
    CASE lv_value_type.
      WHEN cl_abap_typedescr=>typekind_date.
        TRY.
            stylemapping = me->excel->get_style_to_guid( <fs_sheet_content>-cell_style ).
          CATCH zcx_excel .
        ENDTRY.
        IF stylemapping-complete_stylex-number_format-format_code IS INITIAL OR
           stylemapping-complete_style-number_format-format_code IS INITIAL.
          lo_format_code_datetime = zcl_excel_style_number_format=>c_format_date_std.
        ELSE.
          lo_format_code_datetime = stylemapping-complete_style-number_format-format_code.
        ENDIF.
        me->change_cell_style( ip_column                      = ip_column
                               ip_row                         = ip_row
                               ip_number_format_format_code   = lo_format_code_datetime ).

      WHEN cl_abap_typedescr=>typekind_time.
        TRY.
            stylemapping = me->excel->get_style_to_guid( <fs_sheet_content>-cell_style ).
          CATCH zcx_excel .
        ENDTRY.
        IF stylemapping-complete_stylex-number_format-format_code IS INITIAL OR
           stylemapping-complete_style-number_format-format_code IS INITIAL.
          lo_format_code_datetime = zcl_excel_style_number_format=>c_format_date_time6.
        ELSE.
          lo_format_code_datetime = stylemapping-complete_style-number_format-format_code.
        ENDIF.
        me->change_cell_style( ip_column                      = ip_column
                               ip_row                         = ip_row
                               ip_number_format_format_code   = lo_format_code_datetime ).

    ENDCASE.
* End of change issue #152 - don't touch exisiting style if only value is passed

* Fix issue #162
    lv_value = ip_value.
    IF lv_value CS cl_abap_char_utilities=>cr_lf.
      me->change_cell_style( ip_column               = ip_column
                             ip_row                  = ip_row
                             ip_alignment_wraptext   = abap_true ).
    ENDIF.
* End of Fix issue #162

  ENDMETHOD.                    "SET_CELL


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_CELL_FORMULA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_FORMULA                     TYPE        ZEXCEL_CELL_FORMULA
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_cell_formula.
    DATA:
      lv_column        TYPE zexcel_cell_column,
      ls_sheet_content LIKE LINE OF me->sheet_content.

    FIELD-SYMBOLS:
                <sheet_content>                 LIKE LINE OF me->sheet_content.

*--------------------------------------------------------------------*
* Get cell to set formula into
*--------------------------------------------------------------------*
    lv_column = zcl_excel_common=>convert_column2int( ip_column ).
    READ TABLE me->sheet_content ASSIGNING <sheet_content> WITH TABLE KEY cell_row    = ip_row
                                                                          cell_column = lv_column.
    IF sy-subrc <> 0.                                                                           " Create new entry in sheet_content if necessary
      CHECK ip_formula IS INITIAL.                                                              " no need to create new entry in sheet_content when no formula is passed
      ls_sheet_content-cell_row    = ip_row.
      ls_sheet_content-cell_column = lv_column.
      INSERT ls_sheet_content INTO TABLE me->sheet_content ASSIGNING <sheet_content>.
    ENDIF.

*--------------------------------------------------------------------*
* Fieldsymbol now holds the relevant cell
*--------------------------------------------------------------------*
    <sheet_content>-cell_formula = ip_formula.


  ENDMETHOD.                    "SET_CELL_FORMULA


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_CELL_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [--->] IP_STYLE                       TYPE        ZEXCEL_CELL_STYLE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_cell_style.

    DATA: lv_column     TYPE zexcel_cell_column,
          lv_style_guid TYPE zexcel_cell_style.

    FIELD-SYMBOLS: <fs_sheet_content> TYPE zexcel_s_cell_data.

    lv_style_guid = ip_style.

    lv_column = zcl_excel_common=>convert_column2int( ip_column ).

    READ TABLE sheet_content ASSIGNING <fs_sheet_content> WITH KEY cell_row    = ip_row
                                                                   cell_column = lv_column.

    IF sy-subrc EQ 0.
      <fs_sheet_content>-cell_style   = lv_style_guid.
    ELSE.
      set_cell( ip_column = ip_column ip_row = ip_row ip_value = '' ip_style = ip_style ).
    ENDIF.

  ENDMETHOD.                    "SET_CELL_STYLE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_COLUMN_WIDTH
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        SIMPLE
* | [--->] IP_WIDTH_FIX                   TYPE        SIMPLE (default =0)
* | [--->] IP_WIDTH_AUTOSIZE              TYPE        FLAG (default ='X')
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_column_width.
    DATA: lo_column  TYPE REF TO zcl_excel_column.
    DATA: width             TYPE float.

    lo_column = me->get_column( ip_column ).

* if a fix size is supplied use this
    IF ip_width_fix IS SUPPLIED.
      TRY.
          width = ip_width_fix.
          IF width <= 0.
            zcx_excel=>raise_text( 'Please supply a positive number as column-width' ).
          ENDIF.
          lo_column->set_width( width ).
          EXIT.
        CATCH cx_sy_conversion_no_number.
* Strange stuff passed --> raise error
          zcx_excel=>raise_text( 'Unable to interpret supplied input as number' ).
      ENDTRY.
    ENDIF.

* If we get down to here, we have to use whatever is found in autosize.
    lo_column->set_auto_size( ip_width_autosize ).


  ENDMETHOD.                    "SET_COLUMN_WIDTH


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_DEFAULT_EXCEL_DATE_FORMAT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_DEFAULT_EXCEL_DATE_FORMAT   TYPE        ZEXCEL_NUMBER_FORMAT
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_default_excel_date_format.

    IF ip_default_excel_date_format IS INITIAL.
      zcx_excel=>raise_text( 'Default date format cannot be blank' ).
    ENDIF.

    default_excel_date_format = ip_default_excel_date_format.
  ENDMETHOD.                    "SET_DEFAULT_EXCEL_DATE_FORMAT


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_MERGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN_START                TYPE        SIMPLE (default =ZCL_EXCEL_COMMON=>C_EXCEL_SHEET_MIN_COL)
* | [--->] IP_COLUMN_END                  TYPE        SIMPLE (default =ZCL_EXCEL_COMMON=>C_EXCEL_SHEET_MAX_COL)
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW (default =ZCL_EXCEL_COMMON=>C_EXCEL_SHEET_MIN_ROW)
* | [--->] IP_ROW_TO                      TYPE        ZEXCEL_CELL_ROW (default =ZCL_EXCEL_COMMON=>C_EXCEL_SHEET_MAX_ROW)
* | [--->] IP_STYLE                       TYPE        ZEXCEL_CELL_STYLE(optional)
* | [--->] IP_VALUE                       TYPE        SIMPLE(optional)
* | [--->] IP_FORMULA                     TYPE        ZEXCEL_CELL_FORMULA(optional)
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_merge.

    DATA: ls_merge        TYPE mty_merge,
          lv_errormessage TYPE string.

    ...
    "just after variables definition
    IF ip_value IS SUPPLIED OR ip_formula IS SUPPLIED.
      " if there is a value or formula set the value to the top-left cell
      "maybe it is necessary to support other paramters for set_cell
      IF ip_value IS SUPPLIED.
        me->set_cell( ip_row = ip_row ip_column = ip_column_start
                      ip_value = ip_value ).
      ENDIF.
      IF ip_formula IS SUPPLIED.
        me->set_cell( ip_row = ip_row ip_column = ip_column_start
                      ip_value = ip_formula ).
      ENDIF.
    ENDIF.
    "call to set_merge_style to apply the style to all cells at the matrix
    IF ip_style IS SUPPLIED.
      me->set_merge_style( ip_row = ip_row ip_column_start = ip_column_start
                           ip_row_to = ip_row_to ip_column_end = ip_column_end
                           ip_style = ip_style ).
    ENDIF.
    ...
*--------------------------------------------------------------------*
* Build new range area to insert into range table
*--------------------------------------------------------------------*
    ls_merge-row_from = ip_row.
    IF ip_row IS SUPPLIED AND ip_row IS NOT INITIAL AND ip_row_to IS NOT SUPPLIED.
      ls_merge-row_to   = ls_merge-row_from.
    ELSE.
      ls_merge-row_to   = ip_row_to.
    ENDIF.
    IF ls_merge-row_from > ls_merge-row_to.
      lv_errormessage = 'Merge: First row larger then last row'(405).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.

    ls_merge-col_from = zcl_excel_common=>convert_column2int( ip_column_start ).
    IF ip_column_start IS SUPPLIED AND ip_column_start IS NOT INITIAL AND ip_column_end IS NOT SUPPLIED.
      ls_merge-col_to   = ls_merge-col_from.
    ELSE.
      ls_merge-col_to   = zcl_excel_common=>convert_column2int( ip_column_end ).
    ENDIF.
    IF ls_merge-col_from > ls_merge-col_to.
      lv_errormessage = 'Merge: First column larger then last column'(406).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.

*--------------------------------------------------------------------*
* Check merge not overlapping with existing merges
*--------------------------------------------------------------------*
    LOOP AT me->mt_merged_cells TRANSPORTING NO FIELDS WHERE NOT (    row_from > ls_merge-row_to
                                                                   OR row_to   < ls_merge-row_from
                                                                   OR col_from > ls_merge-col_to
                                                                   OR col_to   < ls_merge-col_from ).
      lv_errormessage = 'Overlapping merges'(404).
      zcx_excel=>raise_text( lv_errormessage ).

    ENDLOOP.

*--------------------------------------------------------------------*
* Everything seems ok --> add to merge table
*--------------------------------------------------------------------*
    INSERT ls_merge INTO TABLE me->mt_merged_cells.

  ENDMETHOD.                    "SET_MERGE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_MERGE_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN_START                TYPE        SIMPLE(optional)
* | [--->] IP_COLUMN_END                  TYPE        SIMPLE(optional)
* | [--->] IP_ROW                         TYPE        ZEXCEL_CELL_ROW(optional)
* | [--->] IP_ROW_TO                      TYPE        ZEXCEL_CELL_ROW(optional)
* | [--->] IP_STYLE                       TYPE        ZEXCEL_CELL_STYLE(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_merge_style.
    DATA: ld_row_start      TYPE zexcel_cell_row,
          ld_row_end        TYPE zexcel_cell_row,
          ld_column_start   TYPE zexcel_cell_column,
          ld_column_end     TYPE zexcel_cell_column,
          ld_current_column TYPE zexcel_cell_column_alpha,
          ld_current_row    TYPE zexcel_cell_row.

    MOVE: ip_row_to TO ld_row_end,
          ip_row    TO ld_row_start.
    IF ld_row_end IS INITIAL.
      ld_row_end = ld_row_start.
    ENDIF.
    ld_column_start = zcl_excel_common=>convert_column2int( ip_column_start ).
    ld_column_end   = zcl_excel_common=>convert_column2int( ip_column_end ).
    IF ld_column_end IS INITIAL.
      ld_column_end = ld_column_start.
    ENDIF.
    "set the style cell by cell
    WHILE ld_column_start <= ld_column_end.
      ld_current_column = zcl_excel_common=>convert_column2alpha( ld_column_start ).
      ld_current_row = ld_row_start.
      WHILE ld_current_row <= ld_row_end.
        me->set_cell_style( ip_row = ld_current_row ip_column = ld_current_column
                            ip_style = ip_style ).
        ADD 1 TO ld_current_row.
      ENDWHILE.
      ADD 1 TO ld_column_start.
    ENDWHILE.
  ENDMETHOD.                    "set_merge_style


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_PRINT_GRIDLINES
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_PRINT_GRIDLINES              TYPE        ZEXCEL_PRINT_GRIDLINES
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_print_gridlines.
    me->print_gridlines = i_print_gridlines.
  ENDMETHOD.                    "SET_PRINT_GRIDLINES


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_ROW_HEIGHT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_ROW                         TYPE        SIMPLE
* | [--->] IP_HEIGHT_FIX                  TYPE        SIMPLE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_row_height.
    DATA: lo_row  TYPE REF TO zcl_excel_row.
    DATA: height  TYPE float.

    lo_row = me->get_row( ip_row ).

* if a fix size is supplied use this
    TRY.
        height = ip_height_fix.
        IF height <= 0.
          zcx_excel=>raise_text( 'Please supply a positive number as row-height' ).
        ENDIF.
        lo_row->set_row_height( height ).
        EXIT.
      CATCH cx_sy_conversion_no_number.
* Strange stuff passed --> raise error
        zcx_excel=>raise_text( 'Unable to interpret supplied input as number' ).
    ENDTRY.

  ENDMETHOD.                    "SET_ROW_HEIGHT


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_ROW_OUTLINE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ROW_FROM                    TYPE        I
* | [--->] IV_ROW_TO                      TYPE        I
* | [--->] IV_COLLAPSED                   TYPE        ABAP_BOOL
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_row_outline.

    DATA: ls_row_outline LIKE LINE OF me->mt_row_outlines.
    FIELD-SYMBOLS: <ls_row_outline> LIKE LINE OF me->mt_row_outlines.

    READ TABLE me->mt_row_outlines ASSIGNING <ls_row_outline> WITH TABLE KEY row_from = iv_row_from
                                                                             row_to   = iv_row_to.
    IF sy-subrc <> 0.
      IF iv_row_from <= 0.
        zcx_excel=>raise_text( 'First row of outline must be a positive number' ).
      ENDIF.
      IF iv_row_to < iv_row_from.
        zcx_excel=>raise_text( 'Last row of outline may not be less than first line of outline' ).
      ENDIF.
      ls_row_outline-row_from = iv_row_from.
      ls_row_outline-row_to   = iv_row_to.
      INSERT ls_row_outline INTO TABLE me->mt_row_outlines ASSIGNING <ls_row_outline>.
    ENDIF.

    CASE iv_collapsed.

      WHEN abap_true
        OR abap_false.
        <ls_row_outline>-collapsed = iv_collapsed.

      WHEN OTHERS.
        zcx_excel=>raise_text( 'Unknown collapse state' ).

    ENDCASE.
  ENDMETHOD.                    "SET_ROW_OUTLINE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_SHOW_GRIDLINES
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_SHOW_GRIDLINES               TYPE        ZEXCEL_SHOW_GRIDLINES
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_gridlines.
    me->show_gridlines = i_show_gridlines.
  ENDMETHOD.                    "SET_SHOW_GRIDLINES


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_SHOW_ROWCOLHEADERS
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_SHOW_ROWCOLHEADERS           TYPE        ZEXCEL_SHOW_ROWCOLHEADER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_rowcolheaders.
    me->show_rowcolheaders = i_show_rowcolheaders.
  ENDMETHOD.                    "SET_SHOW_ROWCOLHEADERS


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_TABCOLOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TABCOLOR                    TYPE        ZEXCEL_S_TABCOLOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_tabcolor.
    me->tabcolor = iv_tabcolor.
  ENDMETHOD.                    "SET_TABCOLOR


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_TABLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_TABLE                       TYPE        STANDARD TABLE
* | [--->] IP_HDR_STYLE                   TYPE        ZEXCEL_CELL_STYLE(optional)
* | [--->] IP_BODY_STYLE                  TYPE        ZEXCEL_CELL_STYLE(optional)
* | [--->] IP_TABLE_TITLE                 TYPE        STRING
* | [--->] IP_TOP_LEFT_COLUMN             TYPE        ZEXCEL_CELL_COLUMN_ALPHA (default ='B')
* | [--->] IP_TOP_LEFT_ROW                TYPE        ZEXCEL_CELL_ROW (default =3)
* | [--->] IP_TRANSPOSE                   TYPE        XFELD(optional)
* | [--->] IP_NO_HEADER                   TYPE        XFELD(optional)
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_table.

    DATA: lo_tabdescr     TYPE REF TO cl_abap_structdescr,
          lr_data         TYPE REF TO data,
          ls_header       TYPE x030l,
          lt_dfies        TYPE ddfields,
          lv_row_int      TYPE zexcel_cell_row,
          lv_column_int   TYPE zexcel_cell_column,
          lv_column_alpha TYPE zexcel_cell_column_alpha,
          lv_cell_value   TYPE zexcel_cell_value.


    FIELD-SYMBOLS: <fs_table_line> TYPE any,
                   <fs_fldval>     TYPE any,
                   <fs_dfies>      TYPE dfies.

    lv_column_int = zcl_excel_common=>convert_column2int( ip_top_left_column ).
    lv_row_int    = ip_top_left_row.

    CREATE DATA lr_data LIKE LINE OF ip_table.

    lo_tabdescr ?= cl_abap_structdescr=>describe_by_data_ref( lr_data ).

    ls_header = lo_tabdescr->get_ddic_header( ).

    lt_dfies = lo_tabdescr->get_ddic_field_list( ).

* It is better to loop column by column
    LOOP AT lt_dfies ASSIGNING <fs_dfies>.
      lv_column_alpha = zcl_excel_common=>convert_column2alpha( lv_column_int ).

      IF ip_no_header = abap_false.
        " First of all write column header
        lv_cell_value = <fs_dfies>-scrtext_m.
        me->set_cell( ip_column = lv_column_alpha
                      ip_row    = lv_row_int
                      ip_value  = lv_cell_value
                      ip_style  = ip_hdr_style ).
        IF ip_transpose = abap_true.
          ADD 1 TO lv_column_int.
        ELSE.
          ADD 1 TO lv_row_int.
        ENDIF.
      ENDIF.

      LOOP AT ip_table ASSIGNING <fs_table_line>.
        lv_column_alpha = zcl_excel_common=>convert_column2alpha( lv_column_int ).
        ASSIGN COMPONENT <fs_dfies>-fieldname OF STRUCTURE <fs_table_line> TO <fs_fldval>.
        MOVE <fs_fldval> TO lv_cell_value.
        me->set_cell( ip_column = lv_column_alpha
                      ip_row    = lv_row_int
                      ip_value  = <fs_fldval>   "lv_cell_value
                      ip_style  = ip_body_style ).
        IF ip_transpose = abap_true.
          ADD 1 TO lv_column_int.
        ELSE.
          ADD 1 TO lv_row_int.
        ENDIF.
      ENDLOOP.
      IF ip_transpose = abap_true.
        lv_column_int = zcl_excel_common=>convert_column2int( ip_top_left_column ).
        ADD 1 TO lv_row_int.
      ELSE.
        lv_row_int = ip_top_left_row.
        ADD 1 TO lv_column_int.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.                    "SET_TABLE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->SET_TITLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_TITLE                       TYPE        ZEXCEL_SHEET_TITLE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_title.
*--------------------------------------------------------------------*
* ToDos:
*        2do §1  The current coding for replacing a named ranges name
*                after renaming a sheet should be checked if it is
*                really working if sheetname should be escaped
*--------------------------------------------------------------------*

*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,      (wip )              2012-12-08
*              - ...
* changes: aligning code
*          message made to support multilinguality
*--------------------------------------------------------------------*
* issue#243 - ' is not allowed as first character in sheet title
*              - Stefan Schmoecker,                          2012-12-02
* changes: added additional check for ' as first character
*--------------------------------------------------------------------*
    DATA: lo_worksheets_iterator TYPE REF TO cl_object_collection_iterator,
          lo_worksheet           TYPE REF TO zcl_excel_worksheet,
          errormessage           TYPE string,
          lv_rangesheetname_old  TYPE string,
          lv_rangesheetname_new  TYPE string,
          lo_ranges_iterator     TYPE REF TO cl_object_collection_iterator,
          lo_range               TYPE REF TO zcl_excel_range,
          lv_range_value         TYPE zexcel_range_value,
          lv_errormessage        TYPE string.                          " Can't pass '...'(abc) to exception-class


*--------------------------------------------------------------------*
* Check whether title consists only of allowed characters
* Illegal characters are: /	\	[	]	*	?	:  --> http://msdn.microsoft.com/en-us/library/ff837411.aspx
* Illegal characters not in documentation:   ' as first character
*--------------------------------------------------------------------*
    IF ip_title CA '/\[]*?:'.
      lv_errormessage = 'Found illegal character in sheetname. List of forbidden characters: /\[]*?:'(402).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.

    IF ip_title IS NOT INITIAL AND ip_title(1) = `'`.
      lv_errormessage = 'Sheetname may not start with &'(403).   " & used instead of ' to allow fallbacklanguage
      REPLACE '&' IN lv_errormessage WITH `'`.
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.


*--------------------------------------------------------------------*
* Check whether title is unique in workbook
*--------------------------------------------------------------------*
    lo_worksheets_iterator = me->excel->get_worksheets_iterator( ).
    WHILE lo_worksheets_iterator->has_next( ) = 'X'.

      lo_worksheet ?= lo_worksheets_iterator->get_next( ).
      CHECK me->guid <> lo_worksheet->get_guid( ).  " Don't check against itself
      IF ip_title = lo_worksheet->get_title( ).  " Not unique --> raise exception
        errormessage = 'Duplicate sheetname &'.
        REPLACE '&' IN errormessage WITH ip_title.
        zcx_excel=>raise_text( errormessage ).
      ENDIF.

    ENDWHILE.

*--------------------------------------------------------------------*
* Remember old sheetname and rename sheet to desired name
*--------------------------------------------------------------------*
    CONCATENATE me->title '!' INTO lv_rangesheetname_old.
    me->title = ip_title.

*--------------------------------------------------------------------*
* After changing this worksheet's title we have to adjust
* all ranges that are referring to this worksheet.
*--------------------------------------------------------------------*
* 2do §1  -  Check if the following quickfix is solid
*           I fear it isn't - but this implementation is better then
*           nothing at all since it handles a supposed majority of cases
*--------------------------------------------------------------------*
    CONCATENATE me->title '!' INTO lv_rangesheetname_new.

    lo_ranges_iterator = me->excel->get_ranges_iterator( ).
    WHILE lo_ranges_iterator->has_next( ) = 'X'.

      lo_range ?= lo_ranges_iterator->get_next( ).
      lv_range_value = lo_range->get_value( ).
      REPLACE ALL OCCURRENCES OF lv_rangesheetname_old IN lv_range_value WITH lv_rangesheetname_new.
      IF sy-subrc = 0.
        lo_range->set_range_value( lv_range_value ).
      ENDIF.

    ENDWHILE.


  ENDMETHOD.                    "SET_TITLE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_WORKSHEET->UPDATE_DIMENSION_RANGE
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_dimension_range.

    DATA: ls_sheet_content TYPE zexcel_s_cell_data,
          lv_row_alpha     TYPE string,
          lv_column_alpha  TYPE zexcel_cell_column_alpha.

    CHECK sheet_content IS NOT INITIAL.

    upper_cell-cell_row = zcl_excel_common=>c_excel_sheet_max_row.
    upper_cell-cell_column = zcl_excel_common=>c_excel_sheet_max_col.

    lower_cell-cell_row = zcl_excel_common=>c_excel_sheet_min_row.
    lower_cell-cell_column = zcl_excel_common=>c_excel_sheet_min_col.

    LOOP AT sheet_content INTO ls_sheet_content.
      IF upper_cell-cell_row > ls_sheet_content-cell_row.
        upper_cell-cell_row = ls_sheet_content-cell_row.
      ENDIF.
      IF upper_cell-cell_column > ls_sheet_content-cell_column.
        upper_cell-cell_column = ls_sheet_content-cell_column.
      ENDIF.
      IF lower_cell-cell_row < ls_sheet_content-cell_row.
        lower_cell-cell_row = ls_sheet_content-cell_row.
      ENDIF.
      IF lower_cell-cell_column < ls_sheet_content-cell_column.
        lower_cell-cell_column = ls_sheet_content-cell_column.
      ENDIF.
    ENDLOOP.

    lv_row_alpha = upper_cell-cell_row.
    lv_column_alpha = zcl_excel_common=>convert_column2alpha( upper_cell-cell_column ).
    SHIFT lv_row_alpha RIGHT DELETING TRAILING space.
    SHIFT lv_row_alpha LEFT DELETING LEADING space.
    CONCATENATE lv_column_alpha lv_row_alpha INTO upper_cell-cell_coords.

    lv_row_alpha = lower_cell-cell_row.
    lv_column_alpha = zcl_excel_common=>convert_column2alpha( lower_cell-cell_column ).
    SHIFT lv_row_alpha RIGHT DELETING TRAILING space.
    SHIFT lv_row_alpha LEFT DELETING LEADING space.
    CONCATENATE lv_column_alpha lv_row_alpha INTO lower_cell-cell_coords.

  ENDMETHOD.                    "UPDATE_DIMENSION_RANGE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ZIF_EXCEL_SHEET_PRINTSETTINGS~CLEAR_PRINT_REPEAT_COLUMNS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_sheet_printsettings~clear_print_repeat_columns.

*--------------------------------------------------------------------*
* adjust internal representation
*--------------------------------------------------------------------*
    CLEAR:  me->print_title_col_from,
            me->print_title_col_to  .


*--------------------------------------------------------------------*
* adjust corresponding range
*--------------------------------------------------------------------*
    me->print_title_set_range( ).


  ENDMETHOD.                    "ZIF_EXCEL_SHEET_PRINTSETTINGS~CLEAR_PRINT_REPEAT_COLUMNS


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ZIF_EXCEL_SHEET_PRINTSETTINGS~CLEAR_PRINT_REPEAT_ROWS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_sheet_printsettings~clear_print_repeat_rows.

*--------------------------------------------------------------------*
* adjust internal representation
*--------------------------------------------------------------------*
    CLEAR:  me->print_title_row_from,
            me->print_title_row_to  .


*--------------------------------------------------------------------*
* adjust corresponding range
*--------------------------------------------------------------------*
    me->print_title_set_range( ).


  ENDMETHOD.                    "ZIF_EXCEL_SHEET_PRINTSETTINGS~CLEAR_PRINT_REPEAT_ROWS


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ZIF_EXCEL_SHEET_PRINTSETTINGS~GET_PRINT_REPEAT_COLUMNS
* +-------------------------------------------------------------------------------------------------+
* | [<---] EV_COLUMNS_FROM                TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [<---] EV_COLUMNS_TO                  TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_sheet_printsettings~get_print_repeat_columns.
    ev_columns_from = me->print_title_col_from.
    ev_columns_to   = me->print_title_col_to.
  ENDMETHOD.                    "ZIF_EXCEL_SHEET_PRINTSETTINGS~GET_PRINT_REPEAT_COLUMNS


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ZIF_EXCEL_SHEET_PRINTSETTINGS~GET_PRINT_REPEAT_ROWS
* +-------------------------------------------------------------------------------------------------+
* | [<---] EV_ROWS_FROM                   TYPE        ZEXCEL_CELL_ROW
* | [<---] EV_ROWS_TO                     TYPE        ZEXCEL_CELL_ROW
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_sheet_printsettings~get_print_repeat_rows.
    ev_rows_from = me->print_title_row_from.
    ev_rows_to   = me->print_title_row_to.
  ENDMETHOD.                    "ZIF_EXCEL_SHEET_PRINTSETTINGS~GET_PRINT_REPEAT_ROWS


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ZIF_EXCEL_SHEET_PRINTSETTINGS~SET_PRINT_REPEAT_COLUMNS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_COLUMNS_FROM                TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [--->] IV_COLUMNS_TO                  TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_sheet_printsettings~set_print_repeat_columns.
*--------------------------------------------------------------------*
* issue#235 - repeat rows/columns
*           - Stefan Schmöcker,                             2012-12-02
*--------------------------------------------------------------------*

    DATA: lv_col_from_int TYPE i,
          lv_col_to_int   TYPE i,
          lv_errormessage TYPE string.


    lv_col_from_int = zcl_excel_common=>convert_column2int( iv_columns_from ).
    lv_col_to_int   = zcl_excel_common=>convert_column2int( iv_columns_to ).

*--------------------------------------------------------------------*
* Check if valid range is supplied
*--------------------------------------------------------------------*
    IF lv_col_from_int < 1.
      lv_errormessage = 'Invalid range supplied for print-title repeatable columns'(401).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.

    IF  lv_col_from_int > lv_col_to_int.
      lv_errormessage = 'Invalid range supplied for print-title repeatable columns'(401).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.

*--------------------------------------------------------------------*
* adjust internal representation
*--------------------------------------------------------------------*
    me->print_title_col_from = iv_columns_from.
    me->print_title_col_to   = iv_columns_to.


*--------------------------------------------------------------------*
* adjust corresponding range
*--------------------------------------------------------------------*
    me->print_title_set_range( ).

  ENDMETHOD.                    "ZIF_EXCEL_SHEET_PRINTSETTINGS~SET_PRINT_REPEAT_COLUMNS


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ZIF_EXCEL_SHEET_PRINTSETTINGS~SET_PRINT_REPEAT_ROWS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ROWS_FROM                   TYPE        ZEXCEL_CELL_ROW
* | [--->] IV_ROWS_TO                     TYPE        ZEXCEL_CELL_ROW
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_sheet_printsettings~set_print_repeat_rows.
*--------------------------------------------------------------------*
* issue#235 - repeat rows/columns
*           - Stefan Schmöcker,                             2012-12-02
*--------------------------------------------------------------------*

    DATA:     lv_errormessage                 TYPE string.


*--------------------------------------------------------------------*
* Check if valid range is supplied
*--------------------------------------------------------------------*
    IF iv_rows_from < 1.
      lv_errormessage = 'Invalid range supplied for print-title repeatable rowumns'(401).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.

    IF  iv_rows_from > iv_rows_to.
      lv_errormessage = 'Invalid range supplied for print-title repeatable rowumns'(401).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.

*--------------------------------------------------------------------*
* adjust internal representation
*--------------------------------------------------------------------*
    me->print_title_row_from = iv_rows_from.
    me->print_title_row_to   = iv_rows_to.


*--------------------------------------------------------------------*
* adjust corresponding range
*--------------------------------------------------------------------*
    me->print_title_set_range( ).


  ENDMETHOD.                    "ZIF_EXCEL_SHEET_PRINTSETTINGS~SET_PRINT_REPEAT_ROWS


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ZIF_EXCEL_SHEET_PROPERTIES~GET_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_STYLE                       TYPE        ZEXCEL_CELL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_sheet_properties~get_style.
    IF zif_excel_sheet_properties~style IS NOT INITIAL.
      ep_style = zif_excel_sheet_properties~style.
    ELSE.
      ep_style = me->excel->get_default_style( ).
    ENDIF.
  ENDMETHOD.                    "ZIF_EXCEL_SHEET_PROPERTIES~GET_STYLE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ZIF_EXCEL_SHEET_PROPERTIES~INITIALIZE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_sheet_properties~initialize.

    zif_excel_sheet_properties~show_zeros   = zif_excel_sheet_properties=>c_showzero.
    zif_excel_sheet_properties~summarybelow = zif_excel_sheet_properties=>c_below_on.
    zif_excel_sheet_properties~summaryright = zif_excel_sheet_properties=>c_right_on.

* inizialize zoomscale values
    zif_excel_sheet_properties~zoomscale = 100.
    zif_excel_sheet_properties~zoomscale_normal = 100.
    zif_excel_sheet_properties~zoomscale_pagelayoutview = 100 .
    zif_excel_sheet_properties~zoomscale_sheetlayoutview = 100 .
  ENDMETHOD.                    "ZIF_EXCEL_SHEET_PROPERTIES~INITIALIZE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ZIF_EXCEL_SHEET_PROPERTIES~SET_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_STYLE                       TYPE        ZEXCEL_CELL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_sheet_properties~set_style.
    zif_excel_sheet_properties~style = ip_style.
  ENDMETHOD.                    "ZIF_EXCEL_SHEET_PROPERTIES~SET_STYLE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ZIF_EXCEL_SHEET_PROTECTION~INITIALIZE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_sheet_protection~initialize.

    me->zif_excel_sheet_protection~protected = zif_excel_sheet_protection=>c_unprotected.
    CLEAR me->zif_excel_sheet_protection~password.
    me->zif_excel_sheet_protection~auto_filter            = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~delete_columns         = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~delete_rows            = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~format_cells           = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~format_columns         = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~format_rows            = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~insert_columns         = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~insert_hyperlinks      = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~insert_rows            = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~objects                = zif_excel_sheet_protection=>c_noactive.
*  me->zif_excel_sheet_protection~password               = zif_excel_sheet_protection=>c_noactive. "issue #68
    me->zif_excel_sheet_protection~pivot_tables           = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~protected              = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~scenarios              = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~select_locked_cells    = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~select_unlocked_cells  = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~sheet                  = zif_excel_sheet_protection=>c_noactive.
    me->zif_excel_sheet_protection~sort                   = zif_excel_sheet_protection=>c_noactive.

  ENDMETHOD.                    "ZIF_EXCEL_SHEET_PROTECTION~INITIALIZE


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ZIF_EXCEL_SHEET_VBA_PROJECT~SET_CODENAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_CODENAME                    TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_sheet_vba_project~set_codename.
    me->zif_excel_sheet_vba_project~codename = ip_codename.
  ENDMETHOD.                    "ZIF_EXCEL_SHEET_VBA_PROJECT~SET_CODENAME


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEET->ZIF_EXCEL_SHEET_VBA_PROJECT~SET_CODENAME_PR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_CODENAME_PR                 TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_sheet_vba_project~set_codename_pr.
    me->zif_excel_sheet_vba_project~codename_pr = ip_codename_pr.
  ENDMETHOD.                    "ZIF_EXCEL_SHEET_VBA_PROJECT~SET_CODENAME_PR
ENDCLASS.

CLASS zcl_excel_autofilter IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTER->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_SHEET                       TYPE REF TO ZCL_EXCEL_WORKSHEET
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    worksheet = io_sheet.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_AUTOFILTER->GET_COLUMN_FILTER
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_COLUMN                       TYPE        ZEXCEL_CELL_COLUMN
* | [<-()] RR_FILTER                      TYPE REF TO TS_FILTER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_column_filter.

    DATA: ls_filter LIKE LINE OF me->mt_filters.

    READ TABLE me->mt_filters REFERENCE INTO rr_filter WITH TABLE KEY column = i_column.
    IF sy-subrc <> 0.
      ls_filter-column = i_column.
      INSERT ls_filter INTO TABLE me->mt_filters REFERENCE INTO rr_filter.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTER->GET_FILTER_AREA
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RS_AREA                        TYPE        ZEXCEL_S_AUTOFILTER_AREA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_filter_area.

    validate_area( ).

    rs_area = filter_area.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTER->GET_FILTER_RANGE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_RANGE                        TYPE        ZEXCEL_CELL_VALUE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_filter_range.
    DATA: l_row_start_c TYPE string,
          l_row_end_c   TYPE string,
          l_col_start_c TYPE string,
          l_col_end_c   TYPE string.

    validate_area( ).

    l_row_end_c = filter_area-row_end.
    CONDENSE l_row_end_c NO-GAPS.

    l_row_start_c = filter_area-row_start.
    CONDENSE l_row_start_c NO-GAPS.

    l_col_start_c = zcl_excel_common=>convert_column2alpha( ip_column = filter_area-col_start ) .
    l_col_end_c   = zcl_excel_common=>convert_column2alpha( ip_column = filter_area-col_end ) .

    CONCATENATE l_col_start_c l_row_start_c ':' l_col_end_c l_row_end_c INTO r_range.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTER->GET_FILTER_REFERENCE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_REF                          TYPE        ZEXCEL_RANGE_VALUE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_filter_reference.
    DATA: l_row_start_c TYPE string,
          l_row_end_c   TYPE string,
          l_col_start_c TYPE string,
          l_col_end_c   TYPE string,
          l_value       TYPE string.

    validate_area( ).

    l_row_end_c = filter_area-row_end.
    CONDENSE l_row_end_c NO-GAPS.

    l_row_start_c = filter_area-row_start.
    CONDENSE l_row_start_c NO-GAPS.

    l_col_start_c = zcl_excel_common=>convert_column2alpha( ip_column = filter_area-col_start ) .
    l_col_end_c   = zcl_excel_common=>convert_column2alpha( ip_column = filter_area-col_end ) .
    l_value = worksheet->get_title( ) .

    r_ref = zcl_excel_common=>escape_string( ip_value = l_value ).

    CONCATENATE r_ref '!$' l_col_start_c '$' l_row_start_c ':$' l_col_end_c '$' l_row_end_c INTO r_ref.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTER->GET_VALUES
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RT_FILTER                      TYPE        ZEXCEL_T_AUTOFILTER_VALUES
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_values.

    FIELD-SYMBOLS: <ls_filter> LIKE LINE OF me->mt_filters,
                   <ls_value>  LIKE LINE OF <ls_filter>-t_values.

    DATA: ls_filter LIKE LINE OF rt_filter.

    LOOP AT me->mt_filters ASSIGNING <ls_filter> WHERE rule = mc_filter_rule_single_values.

      ls_filter-column = <ls_filter>-column.
      LOOP AT <ls_filter>-t_values ASSIGNING <ls_value>.
        ls_filter-value = <ls_value>.
        APPEND ls_filter TO rt_filter.
      ENDLOOP.

    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTER->IS_ROW_HIDDEN
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [<-()] RV_IS_HIDDEN                   TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_row_hidden.


    DATA: lr_filter TYPE REF TO ts_filter,
          lv_col    TYPE i.

    FIELD-SYMBOLS: <ls_filter> TYPE ts_filter.

    rv_is_hidden = abap_false.

*--------------------------------------------------------------------*
* 1st row of filter area is never hidden, because here the filter
* symbol is being shown
*--------------------------------------------------------------------*
    IF iv_row = me->filter_area-row_start.
      RETURN.
    ENDIF.


    lv_col = me->filter_area-col_start.


    WHILE lv_col <= me->filter_area-col_end.

      lr_filter = me->get_column_filter( lv_col ).
      ASSIGN lr_filter->* TO <ls_filter>.

      CASE <ls_filter>-rule.

        WHEN mc_filter_rule_single_values.
          rv_is_hidden = me->is_row_hidden_single_values( iv_row    = iv_row
                                                          iv_col    = lv_col
                                                          is_filter = <ls_filter> ).

        WHEN mc_filter_rule_text_pattern.
          rv_is_hidden = me->is_row_hidden_text_pattern(  iv_row    = iv_row
                                                          iv_col    = lv_col
                                                          is_filter = <ls_filter> ).

      ENDCASE.

      IF rv_is_hidden = abap_true.
        RETURN.
      ENDIF.


      ADD 1 TO lv_col.

    ENDWHILE.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_AUTOFILTER->IS_ROW_HIDDEN_SINGLE_VALUES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [--->] IV_COL                         TYPE        ZEXCEL_CELL_COLUMN
* | [--->] IS_FILTER                      TYPE        TS_FILTER
* | [<-()] RV_IS_HIDDEN                   TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_row_hidden_single_values.


    DATA: lv_value TYPE string.

    FIELD-SYMBOLS: <ls_sheet_content> LIKE LINE OF me->worksheet->sheet_content.

    rv_is_hidden = abap_false.   " Default setting is NOT HIDDEN = is in filter range

*--------------------------------------------------------------------*
* No filter values --> only symbol should be shown but nothing is being hidden
*--------------------------------------------------------------------*
    IF is_filter-t_values IS INITIAL.
      RETURN.
    ENDIF.

*--------------------------------------------------------------------*
* Get value of cell
*--------------------------------------------------------------------*
    READ TABLE me->worksheet->sheet_content ASSIGNING <ls_sheet_content> WITH TABLE KEY cell_row    = iv_row
                                                                                        cell_column = iv_col.
    IF sy-subrc = 0.
      lv_value = <ls_sheet_content>-cell_value.
    ELSE.
      CLEAR lv_value.
    ENDIF.

*--------------------------------------------------------------------*
* Check whether it is affected by filter
* this needs to be extended if we support other filtertypes
* other than single values
*--------------------------------------------------------------------*
    READ TABLE is_filter-t_values TRANSPORTING NO FIELDS WITH TABLE KEY table_line =  lv_value.
    IF sy-subrc <> 0.
      rv_is_hidden = abap_true.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_AUTOFILTER->IS_ROW_HIDDEN_TEXT_PATTERN
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ROW                         TYPE        ZEXCEL_CELL_ROW
* | [--->] IV_COL                         TYPE        ZEXCEL_CELL_COLUMN
* | [--->] IS_FILTER                      TYPE        TS_FILTER
* | [<-()] RV_IS_HIDDEN                   TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_row_hidden_text_pattern.



    DATA: lv_value TYPE string.

    FIELD-SYMBOLS: <ls_sheet_content> LIKE LINE OF me->worksheet->sheet_content.

    rv_is_hidden = abap_false.   " Default setting is NOT HIDDEN = is in filter range

*--------------------------------------------------------------------*
* Get value of cell
*--------------------------------------------------------------------*
    READ TABLE me->worksheet->sheet_content ASSIGNING <ls_sheet_content> WITH TABLE KEY cell_row    = iv_row
                                                                                        cell_column = iv_col.
    IF sy-subrc = 0.
      lv_value = <ls_sheet_content>-cell_value.
    ELSE.
      CLEAR lv_value.
    ENDIF.

*--------------------------------------------------------------------*
* Check whether it is affected by filter
* this needs to be extended if we support other filtertypes
* other than single values
*--------------------------------------------------------------------*
    IF lv_value NOT IN is_filter-tr_textfilter1.
      rv_is_hidden = abap_true.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTER->SET_FILTER_AREA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_AREA                        TYPE        ZEXCEL_S_AUTOFILTER_AREA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_filter_area.

    filter_area = is_area.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTER->SET_TEXT_FILTER
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_COLUMN                       TYPE        ZEXCEL_CELL_COLUMN
* | [--->] IV_TEXTFILTER1                 TYPE        CLIKE
* | [--->] IV_LOGICAL_OPERATOR            TYPE        TV_LOGICAL_OPERATOR (default =MC_LOGICAL_OPERATOR_NONE)
* | [--->] IV_TEXTFILTER2                 TYPE        CLIKE(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_text_filter.
*  see method documentation how to use this

    DATA: lr_filter TYPE REF TO ts_filter,
          ls_value1 TYPE LINE OF ts_filter-tr_textfilter1.

    FIELD-SYMBOLS: <ls_filter> TYPE ts_filter.


    lr_filter = me->get_column_filter(  i_column ).
    ASSIGN lr_filter->* TO <ls_filter>.

    <ls_filter>-rule     = mc_filter_rule_text_pattern.
    CLEAR <ls_filter>-tr_textfilter1.

    IF iv_textfilter1 CA '*+'. " Pattern
      ls_value1-sign   = 'I'.
      ls_value1-option = 'CP'.
      ls_value1-low    = iv_textfilter1.
    ELSE.
      ls_value1-sign   = 'I'.
      ls_value1-option = 'EQ'.
      ls_value1-low    = iv_textfilter1.
    ENDIF.
    APPEND ls_value1 TO <ls_filter>-tr_textfilter1.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTER->SET_VALUE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_COLUMN                       TYPE        ZEXCEL_CELL_COLUMN
* | [--->] I_VALUE                        TYPE        ZEXCEL_CELL_VALUE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_value.

    DATA: lr_filter TYPE REF TO ts_filter.

    FIELD-SYMBOLS: <ls_filter> TYPE ts_filter.


    lr_filter = me->get_column_filter(  i_column ).
    ASSIGN lr_filter->* TO <ls_filter>.

    <ls_filter>-rule     = mc_filter_rule_single_values.

    INSERT i_value INTO TABLE <ls_filter>-t_values.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTER->SET_VALUES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_VALUES                      TYPE        ZEXCEL_T_AUTOFILTER_VALUES
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_values.

    FIELD-SYMBOLS: <ls_value> LIKE LINE OF it_values.

    LOOP AT it_values ASSIGNING <ls_value>.

      me->set_value( i_column = <ls_value>-column
                     i_value  = <ls_value>-value ).

    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_AUTOFILTER->VALIDATE_AREA
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD validate_area.
    DATA: l_col TYPE zexcel_cell_column,
          l_row TYPE zexcel_cell_row.

    l_row = worksheet->get_highest_row( ) .
    l_col = worksheet->get_highest_column( ) .

    IF filter_area IS INITIAL.
      filter_area-row_start = 1.
      filter_area-col_start = 1.
      filter_area-row_end   = l_row .
      filter_area-col_end   = l_col .
    ENDIF.

    IF filter_area-row_start < 1.
      filter_area-row_start = 1.
    ENDIF.
    IF filter_area-col_start < 1.
      filter_area-col_start = 1.
    ENDIF.
    IF filter_area-row_end > l_row OR
       filter_area-row_end < 1.
      filter_area-row_end = l_row.
    ENDIF.
    IF filter_area-col_end > l_col OR
       filter_area-col_end < 1.
      filter_area-col_end = l_col.
    ENDIF.
    IF filter_area-row_start >= filter_area-row_end.
      filter_area-row_start = filter_area-row_end - 1.
      IF filter_area-row_start < 1.
        filter_area-row_start = 1.
        filter_area-row_end = 2.
      ENDIF.
    ENDIF.
    IF filter_area-col_start > filter_area-col_end.
      filter_area-col_start = filter_area-col_end.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_autofilters IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTERS->ADD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_SHEET                       TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [<-()] RO_AUTOFILTER                  TYPE REF TO ZCL_EXCEL_AUTOFILTER
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add.

    DATA: ls_autofilter LIKE LINE OF me->mt_autofilters.

    FIELD-SYMBOLS: <ls_autofilter> LIKE LINE OF me->mt_autofilters.

    READ TABLE me->mt_autofilters ASSIGNING <ls_autofilter> WITH TABLE KEY worksheet = io_sheet.
    IF sy-subrc = 0.
      RAISE EXCEPTION TYPE zcx_excel. " adding another autofilter to sheet is not allowed
    ENDIF.

    CREATE OBJECT ro_autofilter
      EXPORTING
        io_sheet = io_sheet.

    ls_autofilter-worksheet  = io_sheet.
    ls_autofilter-autofilter = ro_autofilter.
    INSERT ls_autofilter INTO TABLE me->mt_autofilters.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTERS->CLEAR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD clear.

    CLEAR me->mt_autofilters.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTERS->GET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET(optional)
* | [--->] I_SHEET_GUID                   TYPE        UUID(optional)
* | [<-()] RO_AUTOFILTER                  TYPE REF TO ZCL_EXCEL_AUTOFILTER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get.

    FIELD-SYMBOLS: <ls_autofilter> LIKE LINE OF me->mt_autofilters.

    READ TABLE me->mt_autofilters ASSIGNING <ls_autofilter> WITH TABLE KEY worksheet = io_worksheet.
    IF sy-subrc = 0.
      ro_autofilter = <ls_autofilter>-autofilter.
    ELSE.
      CLEAR ro_autofilter.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTERS->IS_EMPTY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_EMPTY                        TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_empty.
    IF me->mt_autofilters IS INITIAL.
      r_empty = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTERS->REMOVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_SHEET                       TYPE        ANY
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD remove.

    DATA: lo_worksheet  TYPE REF TO zcl_excel_worksheet.

    DELETE TABLE me->mt_autofilters WITH TABLE KEY worksheet = lo_worksheet.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_AUTOFILTERS->SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_SIZE                         TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD size.
    DESCRIBE TABLE me->mt_autofilters LINES r_size.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_theme_font_scheme IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_FONT_SCHEME->BUILD_XML
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_DOCUMENT                    TYPE REF TO IF_IXML_DOCUMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD build_xml.
    DATA: lo_scheme_element TYPE REF TO if_ixml_element.
    DATA: lo_font TYPE REF TO if_ixml_element.
    DATA: lo_latin TYPE REF TO if_ixml_element.
    DATA: lo_ea TYPE REF TO if_ixml_element.
    DATA: lo_cs TYPE REF TO if_ixml_element.
    DATA: lo_major TYPE REF TO if_ixml_element.
    DATA: lo_minor TYPE REF TO if_ixml_element.
    DATA: lo_elements TYPE REF TO if_ixml_element.
    FIELD-SYMBOLS: <font> TYPE t_font.
    CHECK io_document IS BOUND.
    lo_elements ?= io_document->find_from_name_ns( name = zcl_excel_theme=>c_theme_elements ).
    IF lo_elements IS BOUND.
      lo_scheme_element ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = zcl_excel_theme_elements=>c_font_scheme
                                                               parent = lo_elements ).
      lo_scheme_element->set_attribute( name = c_name value = font_scheme-name ).

      lo_major ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_major
                                                      parent = lo_scheme_element ).
      IF lo_major IS BOUND.
        lo_latin ?=  io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_latin
                                                         parent = lo_major ).
        lo_latin->set_attribute( name = c_typeface value = font_scheme-major-latin-typeface ).
        IF font_scheme-major-latin-panose IS NOT INITIAL.
          lo_latin->set_attribute( name = c_panose value = font_scheme-major-latin-panose ).
        ENDIF.
        IF font_scheme-major-latin-pitchfamily IS NOT INITIAL.
          lo_latin->set_attribute( name = c_pitchfamily value = font_scheme-major-latin-pitchfamily ).
        ENDIF.
        IF font_scheme-major-latin-charset IS NOT INITIAL.
          lo_latin->set_attribute( name = c_charset value = font_scheme-major-latin-charset ).
        ENDIF.

        lo_ea ?=  io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_ea
                                                         parent = lo_major ).
        lo_ea->set_attribute( name = c_typeface value = font_scheme-major-ea-typeface ).
        IF font_scheme-major-ea-panose IS NOT INITIAL.
          lo_ea->set_attribute( name = c_panose value = font_scheme-major-ea-panose ).
        ENDIF.
        IF font_scheme-major-ea-pitchfamily IS NOT INITIAL.
          lo_ea->set_attribute( name = c_pitchfamily value = font_scheme-major-ea-pitchfamily ).
        ENDIF.
        IF font_scheme-major-ea-charset IS NOT INITIAL.
          lo_ea->set_attribute( name = c_charset value = font_scheme-major-ea-charset ).
        ENDIF.

        lo_cs ?=  io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_cs
                                                      parent = lo_major ).
        lo_cs->set_attribute( name = c_typeface value = font_scheme-major-cs-typeface ).
        IF font_scheme-major-cs-panose IS NOT INITIAL.
          lo_cs->set_attribute( name = c_panose value = font_scheme-major-cs-panose ).
        ENDIF.
        IF font_scheme-major-cs-pitchfamily IS NOT INITIAL.
          lo_cs->set_attribute( name = c_pitchfamily value = font_scheme-major-cs-pitchfamily ).
        ENDIF.
        IF font_scheme-major-cs-charset IS NOT INITIAL.
          lo_cs->set_attribute( name = c_charset value = font_scheme-major-cs-charset ).
        ENDIF.

        LOOP AT font_scheme-major-fonts ASSIGNING <font>.
          IF <font>-script IS NOT INITIAL AND <font>-typeface IS NOT INITIAL.
            CLEAR lo_font.
            lo_font ?=  io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_font
                                                           parent = lo_major ).
            lo_font->set_attribute( name = c_script value = <font>-script ).
            lo_font->set_attribute( name = c_typeface value = <font>-typeface ).
          ENDIF.
        ENDLOOP.
        CLEAR: lo_latin, lo_ea, lo_cs, lo_font.
      ENDIF.

      lo_minor ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_minor
                                                      parent = lo_scheme_element ).
      IF lo_minor IS BOUND.
        lo_latin ?=  io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_latin
                                                         parent = lo_minor ).
        lo_latin->set_attribute( name = c_typeface value = font_scheme-minor-latin-typeface ).
        IF font_scheme-minor-latin-panose IS NOT INITIAL.
          lo_latin->set_attribute( name = c_panose value = font_scheme-minor-latin-panose ).
        ENDIF.
        IF font_scheme-minor-latin-pitchfamily IS NOT INITIAL.
          lo_latin->set_attribute( name = c_pitchfamily value = font_scheme-minor-latin-pitchfamily ).
        ENDIF.
        IF font_scheme-minor-latin-charset IS NOT INITIAL.
          lo_latin->set_attribute( name = c_charset value = font_scheme-minor-latin-charset ).
        ENDIF.

        lo_ea ?=  io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_ea
                                                         parent = lo_minor ).
        lo_ea->set_attribute( name = c_typeface value = font_scheme-minor-ea-typeface ).
        IF font_scheme-minor-ea-panose IS NOT INITIAL.
          lo_ea->set_attribute( name = c_panose value = font_scheme-minor-ea-panose ).
        ENDIF.
        IF font_scheme-minor-ea-pitchfamily IS NOT INITIAL.
          lo_ea->set_attribute( name = c_pitchfamily value = font_scheme-minor-ea-pitchfamily ).
        ENDIF.
        IF font_scheme-minor-ea-charset IS NOT INITIAL.
          lo_ea->set_attribute( name = c_charset value = font_scheme-minor-ea-charset ).
        ENDIF.

        lo_cs ?=  io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_cs
                                                      parent = lo_minor ).
        lo_cs->set_attribute( name = c_typeface value = font_scheme-minor-cs-typeface ).
        IF font_scheme-minor-cs-panose IS NOT INITIAL.
          lo_cs->set_attribute( name = c_panose value = font_scheme-minor-cs-panose ).
        ENDIF.
        IF font_scheme-minor-cs-pitchfamily IS NOT INITIAL.
          lo_cs->set_attribute( name = c_pitchfamily value = font_scheme-minor-cs-pitchfamily ).
        ENDIF.
        IF font_scheme-minor-cs-charset IS NOT INITIAL.
          lo_cs->set_attribute( name = c_charset value = font_scheme-minor-cs-charset ).
        ENDIF.

        LOOP AT font_scheme-minor-fonts ASSIGNING <font>.
          IF <font>-script IS NOT INITIAL AND <font>-typeface IS NOT INITIAL.
            CLEAR lo_font.
            lo_font ?=  io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_font
                                                           parent = lo_minor ).
            lo_font->set_attribute( name = c_script value = <font>-script ).
            lo_font->set_attribute( name = c_typeface value = <font>-typeface ).
          ENDIF.
        ENDLOOP.
      ENDIF.


    ENDIF.
  ENDMETHOD.                    "build_xml


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_FONT_SCHEME->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    set_defaults( ).
  ENDMETHOD.                    "constructor


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_FONT_SCHEME->LOAD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_FONT_SCHEME                 TYPE REF TO IF_IXML_ELEMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load.
    DATA: lo_scheme_children TYPE REF TO if_ixml_node_list.
    DATA: lo_scheme_iterator TYPE REF TO if_ixml_node_iterator.
    DATA: lo_scheme_element TYPE REF TO if_ixml_element.
    DATA: lo_major_children TYPE REF TO if_ixml_node_list.
    DATA: lo_major_iterator TYPE REF TO if_ixml_node_iterator.
    DATA: lo_major_element TYPE REF TO if_ixml_element.
    DATA: lo_minor_children TYPE REF TO if_ixml_node_list.
    DATA: lo_minor_iterator TYPE REF TO if_ixml_node_iterator.
    DATA: lo_minor_element TYPE REF TO if_ixml_element.
    DATA: ls_font TYPE t_font.
    CHECK io_font_scheme IS NOT INITIAL.
    CLEAR font_scheme.
    font_scheme-name =  io_font_scheme->get_attribute( name = c_name ).
    lo_scheme_children = io_font_scheme->get_children( ).
    lo_scheme_iterator = lo_scheme_children->create_iterator( ).
    lo_scheme_element ?= lo_scheme_iterator->get_next( ).
    WHILE lo_scheme_element IS BOUND.
      CASE lo_scheme_element->get_name( ).
        WHEN c_major.
          lo_major_children = lo_scheme_element->get_children( ).
          lo_major_iterator = lo_major_children->create_iterator( ).
          lo_major_element ?= lo_major_iterator->get_next( ).
          WHILE lo_major_element IS BOUND.
            CASE lo_major_element->get_name( ).
              WHEN c_latin.
                font_scheme-major-latin-typeface = lo_major_element->get_attribute(  name = c_typeface ).
                font_scheme-major-latin-panose = lo_major_element->get_attribute(  name = c_panose ).
                font_scheme-major-latin-pitchfamily = lo_major_element->get_attribute(  name = c_pitchfamily ).
                font_scheme-major-latin-charset = lo_major_element->get_attribute(  name = c_charset ).
              WHEN c_ea.
                font_scheme-major-ea-typeface = lo_major_element->get_attribute(  name = c_typeface ).
                font_scheme-major-ea-panose = lo_major_element->get_attribute(  name = c_panose ).
                font_scheme-major-ea-pitchfamily = lo_major_element->get_attribute(  name = c_pitchfamily ).
                font_scheme-major-ea-charset = lo_major_element->get_attribute(  name = c_charset ).
              WHEN c_cs.
                font_scheme-major-cs-typeface = lo_major_element->get_attribute(  name = c_typeface ).
                font_scheme-major-cs-panose = lo_major_element->get_attribute(  name = c_panose ).
                font_scheme-major-cs-pitchfamily = lo_major_element->get_attribute(  name = c_pitchfamily ).
                font_scheme-major-cs-charset = lo_major_element->get_attribute(  name = c_charset ).
              WHEN c_font.
                CLEAR ls_font.
                ls_font-script = lo_major_element->get_attribute(  name = c_script ).
                ls_font-typeface = lo_major_element->get_attribute(  name = c_typeface ).
                TRY.
                    INSERT ls_font INTO TABLE font_scheme-major-fonts.
                  CATCH cx_root. "not the best but just to avoid duplicate lines dump

                ENDTRY.
            ENDCASE.
            lo_major_element ?= lo_major_iterator->get_next( ).
          ENDWHILE.
        WHEN c_minor.
          lo_minor_children = lo_scheme_element->get_children( ).
          lo_minor_iterator = lo_minor_children->create_iterator( ).
          lo_minor_element ?= lo_minor_iterator->get_next( ).
          WHILE lo_minor_element IS BOUND.
            CASE lo_minor_element->get_name( ).
              WHEN c_latin.
                font_scheme-minor-latin-typeface = lo_minor_element->get_attribute(  name = c_typeface ).
                font_scheme-minor-latin-panose = lo_minor_element->get_attribute(  name = c_panose ).
                font_scheme-minor-latin-pitchfamily = lo_minor_element->get_attribute(  name = c_pitchfamily ).
                font_scheme-minor-latin-charset = lo_minor_element->get_attribute(  name = c_charset ).
              WHEN c_ea.
                font_scheme-minor-ea-typeface = lo_minor_element->get_attribute(  name = c_typeface ).
                font_scheme-minor-ea-panose = lo_minor_element->get_attribute(  name = c_panose ).
                font_scheme-minor-ea-pitchfamily = lo_minor_element->get_attribute(  name = c_pitchfamily ).
                font_scheme-minor-ea-charset = lo_minor_element->get_attribute(  name = c_charset ).
              WHEN c_cs.
                font_scheme-minor-cs-typeface = lo_minor_element->get_attribute(  name = c_typeface ).
                font_scheme-minor-cs-panose = lo_minor_element->get_attribute(  name = c_panose ).
                font_scheme-minor-cs-pitchfamily = lo_minor_element->get_attribute(  name = c_pitchfamily ).
                font_scheme-minor-cs-charset = lo_minor_element->get_attribute(  name = c_charset ).
              WHEN c_font.
                CLEAR ls_font.
                ls_font-script = lo_minor_element->get_attribute(  name = c_script ).
                ls_font-typeface = lo_minor_element->get_attribute(  name = c_typeface ).
                TRY.
                    INSERT ls_font INTO TABLE font_scheme-minor-fonts.
                  CATCH cx_root. "not the best but just to avoid duplicate lines dump

                ENDTRY.
            ENDCASE.
            lo_minor_element ?= lo_minor_iterator->get_next( ).
          ENDWHILE.
      ENDCASE.
      lo_scheme_element ?= lo_scheme_iterator->get_next( ).
    ENDWHILE.
  ENDMETHOD.                    "load


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_FONT_SCHEME->MODIFY_CS_FONT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TYPE                        TYPE        STRING
* | [--->] IV_TYPEFACE                    TYPE        STRING
* | [--->] IV_PANOSE                      TYPE        STRING(optional)
* | [--->] IV_PITCHFAMILY                 TYPE        STRING(optional)
* | [--->] IV_CHARSET                     TYPE        STRING(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD modify_cs_font.
    modify_lec_fonts(
      EXPORTING
        iv_type        = iv_type
        iv_font_type   = c_cs
        iv_typeface    = iv_typeface
        iv_panose      = iv_panose
        iv_pitchfamily = iv_pitchfamily
        iv_charset     = iv_charset
    ).
  ENDMETHOD.                    "modify_latin_font


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_FONT_SCHEME->MODIFY_EA_FONT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TYPE                        TYPE        STRING
* | [--->] IV_TYPEFACE                    TYPE        STRING
* | [--->] IV_PANOSE                      TYPE        STRING(optional)
* | [--->] IV_PITCHFAMILY                 TYPE        STRING(optional)
* | [--->] IV_CHARSET                     TYPE        STRING(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD modify_ea_font.
    modify_lec_fonts(
      EXPORTING
        iv_type        = iv_type
        iv_font_type   = c_ea
        iv_typeface    = iv_typeface
        iv_panose      = iv_panose
        iv_pitchfamily = iv_pitchfamily
        iv_charset     = iv_charset
    ).
  ENDMETHOD.                    "modify_latin_font


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_FONT_SCHEME->MODIFY_FONT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TYPE                        TYPE        STRING
* | [--->] IV_SCRIPT                      TYPE        STRING
* | [--->] IV_TYPEFACE                    TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD modify_font.
    DATA: ls_font TYPE t_font.
    FIELD-SYMBOLS: <font> TYPE t_font.
    ls_font-script = iv_script.
    ls_font-typeface = iv_typeface.
    TRY.
        CASE iv_type.
          WHEN c_major.
            READ TABLE font_scheme-major-fonts WITH KEY script = iv_script ASSIGNING <font>.
            IF sy-subrc EQ 0.
              <font> = ls_font.
            ELSE.
              INSERT ls_font INTO TABLE font_scheme-major-fonts.
            ENDIF.
          WHEN c_minor.
            READ TABLE font_scheme-minor-fonts WITH KEY script = iv_script ASSIGNING <font>.
            IF sy-subrc EQ 0.
              <font> = ls_font.
            ELSE.
              INSERT ls_font INTO TABLE font_scheme-minor-fonts.
            ENDIF.
        ENDCASE.
      CATCH cx_root. "not the best but just to avoid duplicate lines dump
    ENDTRY.
  ENDMETHOD.                    "add_font


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_FONT_SCHEME->MODIFY_LATIN_FONT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TYPE                        TYPE        STRING
* | [--->] IV_TYPEFACE                    TYPE        STRING
* | [--->] IV_PANOSE                      TYPE        STRING(optional)
* | [--->] IV_PITCHFAMILY                 TYPE        STRING(optional)
* | [--->] IV_CHARSET                     TYPE        STRING(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD modify_latin_font.
    modify_lec_fonts(
      EXPORTING
        iv_type        = iv_type
        iv_font_type   = c_latin
        iv_typeface    = iv_typeface
        iv_panose      = iv_panose
        iv_pitchfamily = iv_pitchfamily
        iv_charset     = iv_charset
    ).
  ENDMETHOD.                    "modify_latin_font


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_THEME_FONT_SCHEME->MODIFY_LEC_FONTS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TYPE                        TYPE        STRING
* | [--->] IV_FONT_TYPE                   TYPE        STRING
* | [--->] IV_TYPEFACE                    TYPE        STRING
* | [--->] IV_PANOSE                      TYPE        STRING(optional)
* | [--->] IV_PITCHFAMILY                 TYPE        STRING(optional)
* | [--->] IV_CHARSET                     TYPE        STRING(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD modify_lec_fonts.
    FIELD-SYMBOLS: <type> TYPE t_fonts,
                   <font> TYPE t_fonttype.
    CASE iv_type.
      WHEN c_minor.
        ASSIGN font_scheme-minor TO <type>.
      WHEN c_major.
        ASSIGN font_scheme-major TO <type>.
      WHEN OTHERS.
        RETURN.
    ENDCASE.
    CHECK <type> IS ASSIGNED.
    CASE iv_font_type.
      WHEN c_latin.
        ASSIGN <type>-latin TO <font>.
      WHEN c_ea.
        ASSIGN <type>-ea TO <font>.
      WHEN c_cs.
        ASSIGN <type>-cs TO <font>.
      WHEN OTHERS.
        RETURN.
    ENDCASE.
    CHECK <font> IS ASSIGNED.
    <font>-typeface = iv_typeface.
    <font>-panose = iv_panose.
    <font>-pitchfamily = iv_pitchfamily.
    <font>-charset = iv_charset.
  ENDMETHOD.                    "modify_lec_fonts


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_THEME_FONT_SCHEME->SET_DEFAULTS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_defaults.
    CLEAR font_scheme.
    font_scheme-name = 'Office'.
    font_scheme-major-latin-typeface = 'Calibri Light'.
    font_scheme-major-latin-panose = '020F0302020204030204'.
    modify_font( iv_type = c_major iv_script = 'Jpan' iv_typeface = 'ＭＳ Ｐゴシック' ).
    modify_font( iv_type = c_major iv_script = 'Hang' iv_typeface = '맑은 고딕' ).
    modify_font( iv_type = c_major iv_script = 'Hans' iv_typeface = '宋体' ).
    modify_font( iv_type = c_major iv_script = 'Hant' iv_typeface = '新細明體' ).
    modify_font( iv_type = c_major iv_script = 'Arab' iv_typeface = 'Times New Roman' ).
    modify_font( iv_type = c_major iv_script = 'Hebr' iv_typeface = 'Times New Roman' ).
    modify_font( iv_type = c_major iv_script = 'Thai' iv_typeface = 'Tahoma' ).
    modify_font( iv_type = c_major iv_script = 'Ethi' iv_typeface = 'Nyala' ).
    modify_font( iv_type = c_major iv_script = 'Beng' iv_typeface = 'Vrinda' ).
    modify_font( iv_type = c_major iv_script = 'Gujr' iv_typeface = 'Shruti' ).
    modify_font( iv_type = c_major iv_script = 'Khmr' iv_typeface = 'MoolBoran' ).
    modify_font( iv_type = c_major iv_script = 'Knda' iv_typeface = 'Tunga' ).
    modify_font( iv_type = c_major iv_script = 'Guru' iv_typeface = 'Raavi' ).
    modify_font( iv_type = c_major iv_script = 'Cans' iv_typeface = 'Euphemia' ).
    modify_font( iv_type = c_major iv_script = 'Cher' iv_typeface = 'Plantagenet Cherokee' ).
    modify_font( iv_type = c_major iv_script = 'Yiii' iv_typeface = 'Microsoft Yi Baiti' ).
    modify_font( iv_type = c_major iv_script = 'Tibt' iv_typeface = 'Microsoft Himalaya' ).
    modify_font( iv_type = c_major iv_script = 'Thaa' iv_typeface = 'MV Boli' ).
    modify_font( iv_type = c_major iv_script = 'Deva' iv_typeface = 'Mangal' ).
    modify_font( iv_type = c_major iv_script = 'Telu' iv_typeface = 'Gautami' ).
    modify_font( iv_type = c_major iv_script = 'Taml' iv_typeface = 'Latha' ).
    modify_font( iv_type = c_major iv_script = 'Syrc' iv_typeface = 'Estrangelo Edessa' ).
    modify_font( iv_type = c_major iv_script = 'Orya' iv_typeface = 'Kalinga' ).
    modify_font( iv_type = c_major iv_script = 'Mlym' iv_typeface = 'Kartika' ).
    modify_font( iv_type = c_major iv_script = 'Laoo' iv_typeface = 'DokChampa' ).
    modify_font( iv_type = c_major iv_script = 'Sinh' iv_typeface = 'Iskoola Pota' ).
    modify_font( iv_type = c_major iv_script = 'Mong' iv_typeface = 'Mongolian Baiti' ).
    modify_font( iv_type = c_major iv_script = 'Viet' iv_typeface = 'Times New Roman' ).
    modify_font( iv_type = c_major iv_script = 'Uigh' iv_typeface = 'Microsoft Uighur' ).
    modify_font( iv_type = c_major iv_script = 'Geor' iv_typeface = 'Sylfaen' ).

    font_scheme-minor-latin-typeface = 'Calibri'.
    font_scheme-minor-latin-panose = '020F0502020204030204'.
    modify_font( iv_type = c_minor iv_script = 'Jpan' iv_typeface = 'ＭＳ Ｐゴシック' ).
    modify_font( iv_type = c_minor iv_script = 'Hang' iv_typeface = '맑은 고딕' ).
    modify_font( iv_type = c_minor iv_script = 'Hans' iv_typeface = '宋体' ).
    modify_font( iv_type = c_minor iv_script = 'Hant' iv_typeface = '新細明體' ).
    modify_font( iv_type = c_minor iv_script = 'Arab' iv_typeface = 'Arial' ).
    modify_font( iv_type = c_minor iv_script = 'Hebr' iv_typeface = 'Arial' ).
    modify_font( iv_type = c_minor iv_script = 'Thai' iv_typeface = 'Tahoma' ).
    modify_font( iv_type = c_minor iv_script = 'Ethi' iv_typeface = 'Nyala' ).
    modify_font( iv_type = c_minor iv_script = 'Beng' iv_typeface = 'Vrinda' ).
    modify_font( iv_type = c_minor iv_script = 'Gujr' iv_typeface = 'Shruti' ).
    modify_font( iv_type = c_minor iv_script = 'Khmr' iv_typeface = 'DaunPenh' ).
    modify_font( iv_type = c_minor iv_script = 'Knda' iv_typeface = 'Tunga' ).
    modify_font( iv_type = c_minor iv_script = 'Guru' iv_typeface = 'Raavi' ).
    modify_font( iv_type = c_minor iv_script = 'Cans' iv_typeface = 'Euphemia' ).
    modify_font( iv_type = c_minor iv_script = 'Cher' iv_typeface = 'Plantagenet Cherokee' ).
    modify_font( iv_type = c_minor iv_script = 'Yiii' iv_typeface = 'Microsoft Yi Baiti' ).
    modify_font( iv_type = c_minor iv_script = 'Tibt' iv_typeface = 'Microsoft Himalaya' ).
    modify_font( iv_type = c_minor iv_script = 'Thaa' iv_typeface = 'MV Boli' ).
    modify_font( iv_type = c_minor iv_script = 'Deva' iv_typeface = 'Mangal' ).
    modify_font( iv_type = c_minor iv_script = 'Telu' iv_typeface = 'Gautami' ).
    modify_font( iv_type = c_minor iv_script = 'Taml' iv_typeface = 'Latha' ).
    modify_font( iv_type = c_minor iv_script = 'Syrc' iv_typeface = 'Estrangelo Edessa' ).
    modify_font( iv_type = c_minor iv_script = 'Orya' iv_typeface = 'Kalinga' ).
    modify_font( iv_type = c_minor iv_script = 'Mlym' iv_typeface = 'Kartika' ).
    modify_font( iv_type = c_minor iv_script = 'Laoo' iv_typeface = 'DokChampa' ).
    modify_font( iv_type = c_minor iv_script = 'Sinh' iv_typeface = 'Iskoola Pota' ).
    modify_font( iv_type = c_minor iv_script = 'Mong' iv_typeface = 'Mongolian Baiti' ).
    modify_font( iv_type = c_minor iv_script = 'Viet' iv_typeface = 'Arial' ).
    modify_font( iv_type = c_minor iv_script = 'Uigh' iv_typeface = 'Microsoft Uighur' ).
    modify_font( iv_type = c_minor iv_script = 'Geor' iv_typeface = 'Sylfaen' ).

  ENDMETHOD.                    "set_defaults


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_FONT_SCHEME->SET_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NAME                        TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_name.
    font_scheme-name = iv_name.
  ENDMETHOD.                    "set_name
ENDCLASS.

CLASS zcl_excel_theme_fmt_scheme IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_FMT_SCHEME->BUILD_XML
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_DOCUMENT                    TYPE REF TO IF_IXML_DOCUMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD build_xml.
    DATA: lo_xml TYPE REF TO cl_xml_document.
    DATA: lo_node TYPE REF TO if_ixml_node.
    DATA: lo_elements TYPE REF TO if_ixml_element.
    CHECK io_document IS BOUND.
    lo_elements ?= io_document->find_from_name_ns( name = zcl_excel_theme=>c_theme_elements ).
    IF lo_elements IS BOUND.

      IF fmt_scheme IS INITIAL.
        CREATE OBJECT lo_xml.
        DATA default_fmt TYPE string.
        default_fmt = get_default_fmt( ).
        lo_xml->parse_string( default_fmt ).
        lo_node = lo_xml->get_first_node( ).
        lo_elements->append_child( new_child = lo_node ).
      ELSE.
        lo_elements->append_child( new_child = fmt_scheme ).
      ENDIF.
    ENDIF.
  ENDMETHOD.                    "build_xml


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_THEME_FMT_SCHEME->GET_DEFAULT_FMT
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_STRING                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_default_fmt.
    CONCATENATE    '<a:fmtScheme name="Office">'
    '      <a:fillStyleLst>'
    '        <a:solidFill>'
    '          <a:schemeClr val="phClr"/>'
    '        </a:solidFill>'
    '        <a:gradFill rotWithShape="1">'
    '          <a:gsLst>'
    '            <a:gs pos="0">'
    '              <a:schemeClr val="phClr">'
    '                <a:lumMod val="110000"/>'
    '                <a:satMod val="105000"/>'
    '                <a:tint val="67000"/>'
    '              </a:schemeClr>'
    '            </a:gs>'
    '            <a:gs pos="50000">'
    '              <a:schemeClr val="phClr">'
    '                <a:lumMod val="105000"/>'
    '                <a:satMod val="103000"/>'
    '                <a:tint val="73000"/>'
    '              </a:schemeClr>'
    '            </a:gs>'
    '            <a:gs pos="100000">'
    '              <a:schemeClr val="phClr">'
    '                <a:lumMod val="105000"/>'
    '                <a:satMod val="109000"/>'
    '                <a:tint val="81000"/>'
    '              </a:schemeClr>'
    '            </a:gs>'
    '          </a:gsLst>'
    '          <a:lin ang="5400000" scaled="0"/>'
    '        </a:gradFill>'
    '        <a:gradFill rotWithShape="1">'
    '          <a:gsLst>'
    '            <a:gs pos="0">'
    '              <a:schemeClr val="phClr">'
    '                <a:satMod val="103000"/>'
    '                <a:lumMod val="102000"/>'
    '                <a:tint val="94000"/>'
    '              </a:schemeClr>'
    '            </a:gs>'
    '            <a:gs pos="50000">'
    '              <a:schemeClr val="phClr">'
    '                <a:satMod val="110000"/>'
    '                <a:lumMod val="100000"/>'
    '                <a:shade val="100000"/>'
    '              </a:schemeClr>'
    '            </a:gs>'
    '            <a:gs pos="100000">'
    '              <a:schemeClr val="phClr">'
    '                <a:lumMod val="99000"/>'
    '                <a:satMod val="120000"/>'
    '                <a:shade val="78000"/>'
    '              </a:schemeClr>'
    '            </a:gs>'
    '          </a:gsLst>'
    '          <a:lin ang="5400000" scaled="0"/>'
    '        </a:gradFill>'
    '      </a:fillStyleLst>'
    '      <a:lnStyleLst>'
    '        <a:ln w="6350" cap="flat" cmpd="sng" algn="ctr">'
    '          <a:solidFill>'
    '            <a:schemeClr val="phClr"/>'
    '          </a:solidFill>'
    '          <a:prstDash val="solid"/>'
    '          <a:miter lim="800000"/>'
    '        </a:ln>'
    '        <a:ln w="12700" cap="flat" cmpd="sng" algn="ctr">'
    '          <a:solidFill>'
    '            <a:schemeClr val="phClr"/>'
    '          </a:solidFill>'
    '          <a:prstDash val="solid"/>'
    '          <a:miter lim="800000"/>'
    '        </a:ln>'
    '        <a:ln w="19050" cap="flat" cmpd="sng" algn="ctr">'
    '          <a:solidFill>'
    '            <a:schemeClr val="phClr"/>'
    '          </a:solidFill>'
    '          <a:prstDash val="solid"/>'
    '          <a:miter lim="800000"/>'
    '        </a:ln>'
    '      </a:lnStyleLst>'
    '      <a:effectStyleLst>'
    '        <a:effectStyle>'
    '          <a:effectLst/>'
    '        </a:effectStyle>'
    '        <a:effectStyle>'
    '          <a:effectLst/>'
    '        </a:effectStyle>'
    '        <a:effectStyle>'
    '          <a:effectLst>'
    '            <a:outerShdw blurRad="57150" dist="19050" dir="5400000" algn="ctr" rotWithShape="0">'
    '              <a:srgbClr val="000000">'
    '                <a:alpha val="63000"/>'
    '              </a:srgbClr>'
    '            </a:outerShdw>'
    '          </a:effectLst>'
    '        </a:effectStyle>'
    '      </a:effectStyleLst>'
    '      <a:bgFillStyleLst>'
    '        <a:solidFill>'
    '          <a:schemeClr val="phClr"/>'
    '        </a:solidFill>'
    '        <a:solidFill>'
    '          <a:schemeClr val="phClr">'
    '            <a:tint val="95000"/>'
    '            <a:satMod val="170000"/>'
    '          </a:schemeClr>'
    '        </a:solidFill>'
    '        <a:gradFill rotWithShape="1">'
    '          <a:gsLst>'
    '            <a:gs pos="0">'
    '              <a:schemeClr val="phClr">'
    '                <a:tint val="93000"/>'
    '                <a:satMod val="150000"/>'
    '                <a:shade val="98000"/>'
    '                <a:lumMod val="102000"/>'
    '              </a:schemeClr>'
    '            </a:gs>'
    '            <a:gs pos="50000">'
    '              <a:schemeClr val="phClr">'
    '                <a:tint val="98000"/>'
    '                <a:satMod val="130000"/>'
    '                <a:shade val="90000"/>'
    '                <a:lumMod val="103000"/>'
    '              </a:schemeClr>'
    '            </a:gs>'
    '            <a:gs pos="100000">'
    '              <a:schemeClr val="phClr">'
    '                <a:shade val="63000"/>'
    '                <a:satMod val="120000"/>'
    '              </a:schemeClr>'
    '            </a:gs>'
    '          </a:gsLst>'
    '          <a:lin ang="5400000" scaled="0"/>'
    '        </a:gradFill>'
    '      </a:bgFillStyleLst>'
    '    </a:fmtScheme>'
    INTO rv_string .
  ENDMETHOD.                    "get_default_fmt


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_FMT_SCHEME->LOAD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_FMT_SCHEME                  TYPE REF TO IF_IXML_ELEMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load.
    "! so far copy only existing values
    fmt_scheme ?= io_fmt_scheme.
  ENDMETHOD.                    "load
ENDCLASS.

CLASS zcl_excel_theme_elements IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_ELEMENTS->BUILD_XML
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_DOCUMENT                    TYPE REF TO IF_IXML_DOCUMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD build_xml.
    DATA: lo_theme_element TYPE REF TO if_ixml_element.
    DATA: lo_theme TYPE REF TO if_ixml_element.
    CHECK io_document IS BOUND.
    lo_theme ?= io_document->get_root_element( ).
    IF lo_theme IS BOUND.
      lo_theme_element ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix
                                                                 name   = c_theme_elements
                                                              parent = lo_theme ).

      color_scheme->build_xml( io_document = io_document ).
      font_scheme->build_xml( io_document = io_document ).
      fmt_scheme->build_xml( io_document = io_document ).
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_ELEMENTS->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    CREATE OBJECT color_scheme.
    CREATE OBJECT font_scheme.
    CREATE OBJECT fmt_scheme.
  ENDMETHOD.                    "constructor


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_ELEMENTS->LOAD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_ELEMENTS                    TYPE REF TO IF_IXML_ELEMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load.
    DATA: lo_elements_children TYPE REF TO if_ixml_node_list.
    DATA: lo_elements_iterator TYPE REF TO if_ixml_node_iterator.
    DATA: lo_elements_element TYPE REF TO if_ixml_element.
    CHECK io_elements IS NOT INITIAL.

    lo_elements_children = io_elements->get_children( ).
    lo_elements_iterator = lo_elements_children->create_iterator( ).
    lo_elements_element ?= lo_elements_iterator->get_next( ).
    WHILE lo_elements_element IS BOUND.
      CASE lo_elements_element->get_name( ).
        WHEN c_color_scheme.
          color_scheme->load( io_color_scheme = lo_elements_element ).
        WHEN c_font_scheme.
          font_scheme->load( io_font_scheme = lo_elements_element ).
        WHEN c_fmt_scheme.
          fmt_scheme->load( io_fmt_scheme = lo_elements_element ).
      ENDCASE.
      lo_elements_element ?= lo_elements_iterator->get_next( ).
    ENDWHILE.
  ENDMETHOD.                    "load
ENDCLASS.

CLASS zcl_excel_theme_color_scheme IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_COLOR_SCHEME->BUILD_XML
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_DOCUMENT                    TYPE REF TO IF_IXML_DOCUMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD build_xml.
    DATA: lo_scheme_element TYPE REF TO if_ixml_element.
    DATA: lo_color TYPE REF TO if_ixml_element.
    DATA: lo_syscolor TYPE REF TO if_ixml_element.
    DATA: lo_srgb TYPE REF TO if_ixml_element.
    DATA: lo_elements TYPE REF TO if_ixml_element.

    CHECK io_document IS BOUND.
    lo_elements ?= io_document->find_from_name_ns( name   = zcl_excel_theme=>c_theme_elements ).
    IF lo_elements IS BOUND.
      lo_scheme_element ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix
                                                                  name   = zcl_excel_theme_elements=>c_color_scheme
                                                               parent = lo_elements ).
      lo_scheme_element->set_attribute( name = c_name value = name ).

      "! Adding colors to scheme
      lo_color ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix
                                                                  name   = c_dark1
                                                      parent = lo_scheme_element ).
      IF lo_color IS BOUND.
        IF dark1-srgb IS NOT INITIAL.
          lo_srgb ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_srgbcolor
                                                         parent = lo_color ).
          lo_srgb->set_attribute( name = c_val value = dark1-srgb ).
        ELSE.
          lo_syscolor ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_syscolor
                                                          parent = lo_color ).
          lo_syscolor->set_attribute( name = c_val value = dark1-syscolor-val ).
          lo_syscolor->set_attribute( name = c_lastclr value = dark1-syscolor-lastclr ).
        ENDIF.
        CLEAR: lo_color, lo_srgb, lo_syscolor.
      ENDIF.

      lo_color ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_light1
                                                      parent = lo_scheme_element ).
      IF lo_color IS BOUND.
        IF light1-srgb IS NOT INITIAL.
          lo_srgb ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_srgbcolor
                                                         parent = lo_color ).
          lo_srgb->set_attribute( name = c_val value = light1-srgb ).
        ELSE.
          lo_syscolor ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_syscolor
                                                          parent = lo_color ).
          lo_syscolor->set_attribute( name = c_val value = light1-syscolor-val ).
          lo_syscolor->set_attribute( name = c_lastclr value = light1-syscolor-lastclr ).
        ENDIF.
        CLEAR: lo_color, lo_srgb, lo_syscolor.
      ENDIF.


      lo_color ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_dark2
                                                      parent = lo_scheme_element ).
      IF lo_color IS BOUND.
        IF dark2-srgb IS NOT INITIAL.
          lo_srgb ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_srgbcolor
                                                         parent = lo_color ).
          lo_srgb->set_attribute( name = c_val value = dark2-srgb ).
        ELSE.
          lo_syscolor ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_syscolor
                                                          parent = lo_color ).
          lo_syscolor->set_attribute( name = c_val value = dark2-syscolor-val ).
          lo_syscolor->set_attribute( name = c_lastclr value = dark2-syscolor-lastclr ).
        ENDIF.
        CLEAR: lo_color, lo_srgb, lo_syscolor.
      ENDIF.

      lo_color ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_light2
                                                      parent = lo_scheme_element ).
      IF lo_color IS BOUND.
        IF light2-srgb IS NOT INITIAL.
          lo_srgb ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_srgbcolor
                                                         parent = lo_color ).
          lo_srgb->set_attribute( name = c_val value = light2-srgb ).
        ELSE.
          lo_syscolor ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_syscolor
                                                          parent = lo_color ).
          lo_syscolor->set_attribute( name = c_val value = light2-syscolor-val ).
          lo_syscolor->set_attribute( name = c_lastclr value = light2-syscolor-lastclr ).
        ENDIF.
        CLEAR: lo_color, lo_srgb, lo_syscolor.
      ENDIF.


      lo_color ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_accent1
                                                      parent = lo_scheme_element ).
      IF lo_color IS BOUND.
        IF accent1-srgb IS NOT INITIAL.
          lo_srgb ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_srgbcolor
                                                         parent = lo_color ).
          lo_srgb->set_attribute( name = c_val value = accent1-srgb ).
        ELSE.
          lo_syscolor ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_syscolor
                                                          parent = lo_color ).
          lo_syscolor->set_attribute( name = c_val value = accent1-syscolor-val ).
          lo_syscolor->set_attribute( name = c_lastclr value = accent1-syscolor-lastclr ).
        ENDIF.
        CLEAR: lo_color, lo_srgb, lo_syscolor.
      ENDIF.


      lo_color ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_accent2
                                                      parent = lo_scheme_element ).
      IF lo_color IS BOUND.
        IF accent2-srgb IS NOT INITIAL.
          lo_srgb ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_srgbcolor
                                                         parent = lo_color ).
          lo_srgb->set_attribute( name = c_val value = accent2-srgb ).
        ELSE.
          lo_syscolor ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_syscolor
                                                          parent = lo_color ).
          lo_syscolor->set_attribute( name = c_val value = accent2-syscolor-val ).
          lo_syscolor->set_attribute( name = c_lastclr value = accent2-syscolor-lastclr ).
        ENDIF.
        CLEAR: lo_color, lo_srgb, lo_syscolor.
      ENDIF.


      lo_color ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_accent3
                                                      parent = lo_scheme_element ).
      IF lo_color IS BOUND.
        IF accent3-srgb IS NOT INITIAL.
          lo_srgb ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_srgbcolor
                                                         parent = lo_color ).
          lo_srgb->set_attribute( name = c_val value = accent3-srgb ).
        ELSE.
          lo_syscolor ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_syscolor
                                                          parent = lo_color ).
          lo_syscolor->set_attribute( name = c_val value = accent3-syscolor-val ).
          lo_syscolor->set_attribute( name = c_lastclr value = accent3-syscolor-lastclr ).
        ENDIF.
        CLEAR: lo_color, lo_srgb, lo_syscolor.
      ENDIF.


      lo_color ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_accent4
                                                      parent = lo_scheme_element ).
      IF lo_color IS BOUND.
        IF accent4-srgb IS NOT INITIAL.
          lo_srgb ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_srgbcolor
                                                         parent = lo_color ).
          lo_srgb->set_attribute( name = c_val value = accent4-srgb ).
        ELSE.
          lo_syscolor ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_syscolor
                                                          parent = lo_color ).
          lo_syscolor->set_attribute( name = c_val value = accent4-syscolor-val ).
          lo_syscolor->set_attribute( name = c_lastclr value = accent4-syscolor-lastclr ).
        ENDIF.
        CLEAR: lo_color, lo_srgb, lo_syscolor.
      ENDIF.


      lo_color ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_accent5
                                                      parent = lo_scheme_element ).
      IF lo_color IS BOUND.
        IF accent5-srgb IS NOT INITIAL.
          lo_srgb ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_srgbcolor
                                                         parent = lo_color ).
          lo_srgb->set_attribute( name = c_val value = accent5-srgb ).
        ELSE.
          lo_syscolor ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_syscolor
                                                          parent = lo_color ).
          lo_syscolor->set_attribute( name = c_val value = accent5-syscolor-val ).
          lo_syscolor->set_attribute( name = c_lastclr value = accent5-syscolor-lastclr ).
        ENDIF.
        CLEAR: lo_color, lo_srgb, lo_syscolor.
      ENDIF.


      lo_color ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_accent6
                                                      parent = lo_scheme_element ).
      IF lo_color IS BOUND.
        IF accent6-srgb IS NOT INITIAL.
          lo_srgb ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_srgbcolor
                                                         parent = lo_color ).
          lo_srgb->set_attribute( name = c_val value = accent6-srgb ).
        ELSE.
          lo_syscolor ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_syscolor
                                                          parent = lo_color ).
          lo_syscolor->set_attribute( name = c_val value = accent6-syscolor-val ).
          lo_syscolor->set_attribute( name = c_lastclr value = accent6-syscolor-lastclr ).
        ENDIF.
        CLEAR: lo_color, lo_srgb, lo_syscolor.
      ENDIF.

      lo_color ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_hlink
                                                      parent = lo_scheme_element ).
      IF lo_color IS BOUND.
        IF hlink-srgb IS NOT INITIAL.
          lo_srgb ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_srgbcolor
                                                         parent = lo_color ).
          lo_srgb->set_attribute( name = c_val value = hlink-srgb ).
        ELSE.
          lo_syscolor ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_syscolor
                                                          parent = lo_color ).
          lo_syscolor->set_attribute( name = c_val value = hlink-syscolor-val ).
          lo_syscolor->set_attribute( name = c_lastclr value = hlink-syscolor-lastclr ).
        ENDIF.
        CLEAR: lo_color, lo_srgb, lo_syscolor.
      ENDIF.

      lo_color ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_folhlink
                                                      parent = lo_scheme_element ).
      IF lo_color IS BOUND.
        IF folhlink-srgb IS NOT INITIAL.
          lo_srgb ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_srgbcolor
                                                         parent = lo_color ).
          lo_srgb->set_attribute( name = c_val value = folhlink-srgb ).
        ELSE.
          lo_syscolor ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix  name   = c_syscolor
                                                          parent = lo_color ).
          lo_syscolor->set_attribute( name = c_val value = folhlink-syscolor-val ).
          lo_syscolor->set_attribute( name = c_lastclr value = folhlink-syscolor-lastclr ).
        ENDIF.
      ENDIF.


    ENDIF.
  ENDMETHOD.                    "build_xml


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_COLOR_SCHEME->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    set_defaults( ).
  ENDMETHOD.                    "constructor


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_THEME_COLOR_SCHEME->GET_COLOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_OBJECT                      TYPE REF TO IF_IXML_ELEMENT
* | [<-()] RV_COLOR                       TYPE        T_COLOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_color.
    DATA: lo_color_children TYPE REF TO if_ixml_node_list.
    DATA: lo_color_iterator TYPE REF TO if_ixml_node_iterator.
    DATA: lo_color_element TYPE REF TO if_ixml_element.
    CHECK io_object  IS NOT INITIAL.

    lo_color_children = io_object->get_children( ).
    lo_color_iterator = lo_color_children->create_iterator( ).
    lo_color_element ?= lo_color_iterator->get_next( ).
    IF lo_color_element IS BOUND.
      CASE lo_color_element->get_name( ).
        WHEN c_srgbcolor.
          rv_color-srgb = lo_color_element->get_attribute( name = c_val ).
        WHEN c_syscolor.
          rv_color-syscolor-val = lo_color_element->get_attribute( name = c_val ).
          rv_color-syscolor-lastclr = lo_color_element->get_attribute( name = c_lastclr ).
      ENDCASE.
    ENDIF.
  ENDMETHOD.                    "get_color


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_COLOR_SCHEME->LOAD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_COLOR_SCHEME                TYPE REF TO IF_IXML_ELEMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load.
    DATA: lo_scheme_children TYPE REF TO if_ixml_node_list.
    DATA: lo_scheme_iterator TYPE REF TO if_ixml_node_iterator.
    DATA: lo_scheme_element TYPE REF TO if_ixml_element.
    CHECK io_color_scheme  IS NOT INITIAL.

    name = io_color_scheme->get_attribute( name = c_name ).
    lo_scheme_children = io_color_scheme->get_children( ).
    lo_scheme_iterator = lo_scheme_children->create_iterator( ).
    lo_scheme_element ?= lo_scheme_iterator->get_next( ).
    WHILE lo_scheme_element IS BOUND.
      CASE lo_scheme_element->get_name( ).
        WHEN c_dark1.
          dark1 = me->get_color( lo_scheme_element ).
        WHEN c_dark2.
          dark2 = me->get_color( lo_scheme_element ).
        WHEN c_light1.
          light1 = me->get_color( lo_scheme_element ).
        WHEN c_light2.
          light2 = me->get_color( lo_scheme_element ).
        WHEN c_accent1.
          accent1 = me->get_color( lo_scheme_element ).
        WHEN c_accent2.
          accent2 = me->get_color( lo_scheme_element ).
        WHEN c_accent3.
          accent3 = me->get_color( lo_scheme_element ).
        WHEN c_accent4.
          accent4 = me->get_color( lo_scheme_element ).
        WHEN c_accent5.
          accent5 = me->get_color( lo_scheme_element ).
        WHEN c_accent6.
          accent6 = me->get_color( lo_scheme_element ).
        WHEN c_hlink.
          hlink = me->get_color( lo_scheme_element ).
        WHEN c_folhlink.
          folhlink = me->get_color( lo_scheme_element ).
      ENDCASE.
      lo_scheme_element ?= lo_scheme_iterator->get_next( ).
    ENDWHILE.
  ENDMETHOD.                    "load


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_COLOR_SCHEME->SET_COLOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TYPE                        TYPE        STRING
* | [--->] IV_SRGB                        TYPE        T_SRGB(optional)
* | [--->] IV_SYSCOLORNAME                TYPE        STRING(optional)
* | [--->] IV_SYSCOLORLAST                TYPE        T_SRGB
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_color.
    FIELD-SYMBOLS: <color> TYPE t_color.
    CHECK iv_type IS NOT INITIAL.
    CHECK iv_srgb IS NOT INITIAL OR  iv_syscolorname IS NOT INITIAL.
    CASE iv_type.
      WHEN c_dark1.
        ASSIGN dark1 TO <color>.
      WHEN c_dark2.
        ASSIGN dark2 TO <color>.
      WHEN c_light1.
        ASSIGN light1 TO <color>.
      WHEN c_light2.
        ASSIGN light2 TO <color>.
      WHEN c_accent1.
        ASSIGN accent1 TO <color>.
      WHEN c_accent2.
        ASSIGN accent2 TO <color>.
      WHEN c_accent3.
        ASSIGN accent3 TO <color>.
      WHEN c_accent4.
        ASSIGN accent4 TO <color>.
      WHEN c_accent5.
        ASSIGN accent5 TO <color>.
      WHEN c_accent6.
        ASSIGN accent6 TO <color>.
      WHEN c_hlink.
        ASSIGN hlink TO <color>.
      WHEN c_folhlink.
        ASSIGN folhlink TO <color>.
    ENDCASE.
    CHECK <color> IS ASSIGNED.
    CLEAR <color>.
    IF iv_srgb IS NOT INITIAL.
      <color>-srgb = iv_srgb.
    ELSE.
      <color>-syscolor-val = iv_syscolorname.
      IF iv_syscolorlast IS NOT INITIAL.
        <color>-syscolor-lastclr = iv_syscolorlast.
      ELSE.
        <color>-syscolor-lastclr = '000000'.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    "set_color


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_THEME_COLOR_SCHEME->SET_DEFAULTS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_defaults.
    name = 'Office'.
    dark1-syscolor-val = 'windowText'.
    dark1-syscolor-lastclr = '000000'.
    light1-syscolor-val = 'window'.
    light1-syscolor-lastclr = 'FFFFFF'.
    dark2-srgb = '44546A'.
    light2-srgb = 'E7E6E6'.
    accent1-srgb = '5B9BD5'.
    accent2-srgb = 'ED7D31'.
    accent3-srgb = 'A5A5A5'.
    accent4-srgb = 'FFC000'.
    accent5-srgb = '4472C4'.
    accent6-srgb = '70AD47'.
    hlink-srgb   = '0563C1'.
    folhlink-srgb = '954F72'.
  ENDMETHOD.                    "set_defaults


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_COLOR_SCHEME->SET_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NAME                        TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_name.
    IF strlen( iv_name ) > 50.
      name = iv_name(50).
    ELSE.
      name = iv_name.
    ENDIF.
  ENDMETHOD.                    "set_name
ENDCLASS.

CLASS zcl_excel_theme_objectdefaults IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_OBJECTDEFAULTS->BUILD_XML
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_DOCUMENT                    TYPE REF TO IF_IXML_DOCUMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD build_xml.
    DATA: lo_theme TYPE REF TO if_ixml_element.
    DATA: lo_theme_objdef TYPE REF TO if_ixml_element.
    CHECK io_document IS BOUND.
    lo_theme ?= io_document->get_root_element( ).
    CHECK lo_theme IS BOUND.
    IF objectdefaults IS INITIAL.
      lo_theme_objdef ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix
                                                                name   = zcl_excel_theme=>c_theme_object_def
                                                                parent = lo_theme ).
    ELSE.
      lo_theme->append_child( new_child = objectdefaults ).
    ENDIF.
  ENDMETHOD.                    "build_xml


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_OBJECTDEFAULTS->LOAD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_OBJECT_DEF                  TYPE REF TO IF_IXML_ELEMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load.
    "! so far copy only existing values
    objectdefaults ?= io_object_def.
  ENDMETHOD.                    "load
ENDCLASS.

CLASS zcl_excel_theme_eclrschemelst IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_ECLRSCHEMELST->BUILD_XML
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_DOCUMENT                    TYPE REF TO IF_IXML_DOCUMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD build_xml.
    DATA: lo_theme TYPE REF TO if_ixml_element.
    DATA: lo_theme_objdef TYPE REF TO if_ixml_element.
    CHECK io_document IS BOUND.
    lo_theme ?= io_document->get_root_element( ).
    CHECK lo_theme IS BOUND.
    IF extracolor IS INITIAL.
      lo_theme_objdef ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix
                                                                name   = zcl_excel_theme=>c_theme_extra_color
                                                                parent = lo_theme ).

    ELSE.
      lo_theme->append_child( new_child = extracolor ).
    ENDIF.

  ENDMETHOD.                    "build_xml


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_ECLRSCHEMELST->LOAD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_EXTRA_COLOR                 TYPE REF TO IF_IXML_ELEMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load.
    "! so far copy only existing values
    extracolor ?= io_extra_color.
  ENDMETHOD.                    "load
ENDCLASS.

CLASS zcl_excel_theme_extlst IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_EXTLST->BUILD_XML
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_DOCUMENT                    TYPE REF TO IF_IXML_DOCUMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD build_xml.
    DATA: lo_theme TYPE REF TO if_ixml_element.
    DATA: lo_theme_objdef TYPE REF TO if_ixml_element.
    CHECK io_document IS BOUND.

    lo_theme ?= io_document->get_root_element( ).
    CHECK lo_theme IS BOUND.
    IF extlst IS INITIAL.
      lo_theme_objdef ?= io_document->create_simple_element_ns( prefix = zcl_excel_theme=>c_theme_prefix
                                                                name   = zcl_excel_theme=>c_theme_extlst
                                                                parent = lo_theme ).

    ELSE.
      lo_theme->append_child( new_child = extlst ).
    ENDIF.
  ENDMETHOD.                    "build_xml


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME_EXTLST->LOAD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_EXTLST                      TYPE REF TO IF_IXML_ELEMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load.
    "! so far copy only existing values
    extlst ?= io_extlst.
  ENDMETHOD.                    "load
ENDCLASS.

CLASS zcl_excel_theme IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    CREATE OBJECT elements.
    CREATE OBJECT objectdefaults.
    CREATE OBJECT extclrschemelst.
    CREATE OBJECT extlst.
  ENDMETHOD.                    "class_constructor


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME->READ_THEME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_THEME_XML                   TYPE REF TO IF_IXML_DOCUMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD read_theme.
    DATA: lo_node_theme TYPE REF TO if_ixml_element.
    DATA: lo_theme_children TYPE REF TO if_ixml_node_list.
    DATA: lo_theme_iterator TYPE REF TO if_ixml_node_iterator.
    DATA: lo_theme_element TYPE REF TO if_ixml_element.
    CHECK io_theme_xml IS NOT INITIAL.

    lo_node_theme  = io_theme_xml->get_root_element( )."   find_from_name( name = c_theme ).
    IF lo_node_theme IS BOUND.
      name = lo_node_theme->get_attribute( name = c_theme_name ).
      xmls_a = lo_node_theme->get_attribute( name = c_theme_xmlns ).
      lo_theme_children = lo_node_theme->get_children( ).
      lo_theme_iterator = lo_theme_children->create_iterator( ).
      lo_theme_element ?= lo_theme_iterator->get_next( ).
      WHILE lo_theme_element IS BOUND.
        CASE lo_theme_element->get_name( ).
          WHEN c_theme_elements.
            elements->load( io_elements = lo_theme_element ).
          WHEN c_theme_object_def.
            objectdefaults->load( io_object_def = lo_theme_element ).
          WHEN c_theme_extra_color.
            extclrschemelst->load( io_extra_color = lo_theme_element ).
          WHEN c_theme_extlst.
            extlst->load( io_extlst = lo_theme_element ).
        ENDCASE.
        lo_theme_element ?= lo_theme_iterator->get_next( ).
      ENDWHILE.
    ENDIF.
  ENDMETHOD.                    "read_theme


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME->SET_COLOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TYPE                        TYPE        STRING
* | [--->] IV_SRGB                        TYPE        ZCL_EXCEL_THEME_COLOR_SCHEME=>T_SRGB(optional)
* | [--->] IV_SYSCOLORNAME                TYPE        STRING(optional)
* | [--->] IV_SYSCOLORLAST                TYPE        ZCL_EXCEL_THEME_COLOR_SCHEME=>T_SRGB(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_color.
    elements->color_scheme->set_color(
      EXPORTING
        iv_type         = iv_type
        iv_srgb         = iv_srgb
        iv_syscolorname = iv_syscolorname
        iv_syscolorlast = iv_syscolorlast
    ).
  ENDMETHOD.                    "set_color


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME->SET_COLOR_SCHEME_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NAME                        TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_color_scheme_name.
    elements->color_scheme->set_name( iv_name = iv_name ).
  ENDMETHOD.                    "set_color_scheme_name


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME->SET_CS_FONT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TYPE                        TYPE        STRING
* | [--->] IV_TYPEFACE                    TYPE        STRING
* | [--->] IV_PANOSE                      TYPE        STRING(optional)
* | [--->] IV_PITCHFAMILY                 TYPE        STRING(optional)
* | [--->] IV_CHARSET                     TYPE        STRING(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_cs_font.
    elements->font_scheme->modify_cs_font(
      EXPORTING
        iv_type        = iv_type
        iv_typeface    = iv_typeface
        iv_panose      = iv_panose
        iv_pitchfamily = iv_pitchfamily
        iv_charset     = iv_charset
    ).
  ENDMETHOD.                    "set_cs_font


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME->SET_EA_FONT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TYPE                        TYPE        STRING
* | [--->] IV_TYPEFACE                    TYPE        STRING
* | [--->] IV_PANOSE                      TYPE        STRING(optional)
* | [--->] IV_PITCHFAMILY                 TYPE        STRING(optional)
* | [--->] IV_CHARSET                     TYPE        STRING(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_ea_font.
    elements->font_scheme->modify_ea_font(
      EXPORTING
        iv_type        = iv_type
        iv_typeface    = iv_typeface
        iv_panose      = iv_panose
        iv_pitchfamily = iv_pitchfamily
        iv_charset     = iv_charset
    ).
  ENDMETHOD.                    "set_ea_font


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME->SET_FONT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TYPE                        TYPE        STRING
* | [--->] IV_SCRIPT                      TYPE        STRING
* | [--->] IV_TYPEFACE                    TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_font.
    elements->font_scheme->modify_font(
      EXPORTING
        iv_type     = iv_type
        iv_script   = iv_script
        iv_typeface = iv_typeface
    ).
  ENDMETHOD.                    "set_font


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME->SET_FONT_SCHEME_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NAME                        TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_font_scheme_name.
    elements->font_scheme->set_name( iv_name = iv_name ).
  ENDMETHOD.                    "set_font_scheme_name


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME->SET_LATIN_FONT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TYPE                        TYPE        STRING
* | [--->] IV_TYPEFACE                    TYPE        STRING
* | [--->] IV_PANOSE                      TYPE        STRING(optional)
* | [--->] IV_PITCHFAMILY                 TYPE        STRING(optional)
* | [--->] IV_CHARSET                     TYPE        STRING(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_latin_font.
    elements->font_scheme->modify_latin_font(
      EXPORTING
        iv_type        = iv_type
        iv_typeface    = iv_typeface
        iv_panose      = iv_panose
        iv_pitchfamily = iv_pitchfamily
        iv_charset     = iv_charset
    ).
  ENDMETHOD.                    "set_latin_font


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME->SET_THEME_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NAME                        TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_theme_name.
    name = iv_name.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_THEME->WRITE_THEME
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_XSTRING                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD write_theme.
    DATA:   lo_ixml         TYPE REF TO if_ixml,
            lo_element_root TYPE REF TO if_ixml_element,
            lo_encoding     TYPE REF TO if_ixml_encoding.
    DATA: lo_streamfactory  TYPE REF TO if_ixml_stream_factory.
    DATA: lo_ostream TYPE REF TO if_ixml_ostream.
    DATA: lo_renderer TYPE REF TO if_ixml_renderer.
    DATA: lo_document TYPE REF TO if_ixml_document.
    lo_ixml = cl_ixml=>create( ).

    lo_encoding = lo_ixml->create_encoding( byte_order = if_ixml_encoding=>co_platform_endian
                                            character_set = 'UTF-8' ).
    lo_document = lo_ixml->create_document( ).
    lo_document->set_encoding( lo_encoding ).
    lo_document->set_standalone( abap_true ).
    lo_document->set_namespace_prefix( prefix = 'a' ).

    lo_element_root = lo_document->create_simple_element_ns( prefix = c_theme_prefix
                                                             name   = c_theme
                                                            parent = lo_document
                                                            ).
    lo_element_root->set_attribute_ns( name  = c_theme_xmlns
                                       value = c_theme_xmlns_val ).
    lo_element_root->set_attribute_ns( name  = c_theme_name
                                       value = name ).

    elements->build_xml( io_document = lo_document ).
    objectdefaults->build_xml( io_document = lo_document ).
    extclrschemelst->build_xml( io_document = lo_document ).
    extlst->build_xml( io_document = lo_document ).

    lo_streamfactory = lo_ixml->create_stream_factory( ).
    lo_ostream = lo_streamfactory->create_ostream_xstring( string = rv_xstring ).
    lo_renderer = lo_ixml->create_renderer( ostream  = lo_ostream document = lo_document ).
    lo_renderer->render( ).

  ENDMETHOD.                    "write_theme
ENDCLASS.

CLASS zcl_excel_worksheets IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEETS->ADD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add.

    worksheets->add( ip_worksheet ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEETS->CLEAR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD clear.

    worksheets->clear( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEETS->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.

    CREATE OBJECT worksheets.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEETS->GET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        ZEXCEL_ACTIVE_WORKSHEET
* | [<-()] EO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get.

    DATA lv_index TYPE i.
    lv_index = ip_index.
    eo_worksheet ?= worksheets->if_object_collection~get( lv_index ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEETS->GET_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_iterator.

    eo_iterator ?= worksheets->if_object_collection~get_iterator( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEETS->IS_EMPTY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] IS_EMPTY                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_empty.

    is_empty = worksheets->if_object_collection~is_empty( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEETS->REMOVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD remove.

    worksheets->remove( ip_worksheet ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WORKSHEETS->SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_SIZE                        TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD size.

    ep_size = worksheets->if_object_collection~size( ).

  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_styles IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES->ADD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_STYLE                       TYPE REF TO ZCL_EXCEL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add.


    styles->add( ip_style ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES->CLEAR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD clear.


    styles->clear( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.


    CREATE OBJECT styles.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES->GET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INDEX                       TYPE        I
* | [<-()] EO_STYLE                       TYPE REF TO ZCL_EXCEL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get.


    eo_style ?= styles->if_object_collection~get( ip_index ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES->GET_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_iterator.


    eo_iterator ?= styles->if_object_collection~get_iterator( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES->IS_EMPTY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] IS_EMPTY                       TYPE        FLAG
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_empty.


    is_empty = styles->if_object_collection~is_empty( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES->REGISTER_NEW_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_STYLE                       TYPE REF TO ZCL_EXCEL_STYLE
* | [<-()] EP_STYLE_CODE                  TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD register_new_style.


    me->add( io_style ).
    ep_style_code = me->size( ) - 1. "style count starts from 0
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES->REMOVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_STYLE                       TYPE REF TO ZCL_EXCEL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD remove.


    styles->remove( ip_style ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_STYLES->SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_SIZE                        TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD size.


    ep_size = styles->if_object_collection~size( ).
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->ADD_NEW_AUTOFILTER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_SHEET                       TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [<-()] RO_AUTOFILTER                  TYPE REF TO ZCL_EXCEL_AUTOFILTER
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_new_autofilter.
* Check for autofilter reference: new or overwrite; only one per sheet
    ro_autofilter = autofilters->add( io_sheet ) .
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->ADD_NEW_COMMENT
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_COMMENT                     TYPE REF TO ZCL_EXCEL_COMMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_new_comment.
    CREATE OBJECT eo_comment.

    comments->add( eo_comment ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->ADD_NEW_DRAWING
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_TYPE                        TYPE        ZEXCEL_DRAWING_TYPE (default =ZCL_EXCEL_DRAWING=>TYPE_IMAGE)
* | [--->] IP_TITLE                       TYPE        CLIKE(optional)
* | [<-()] EO_DRAWING                     TYPE REF TO ZCL_EXCEL_DRAWING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_new_drawing.
* Create default blank worksheet
    CREATE OBJECT eo_drawing
      EXPORTING
        ip_type  = ip_type
        ip_title = ip_title.

    CASE ip_type.
      WHEN 'image'.
        drawings->add( eo_drawing ).
      WHEN 'hd_ft'.
        drawings->add( eo_drawing ).
      WHEN 'chart'.
        charts->add( eo_drawing ).
    ENDCASE.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->ADD_NEW_RANGE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_RANGE                       TYPE REF TO ZCL_EXCEL_RANGE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_new_range.
* Create default blank range
    CREATE OBJECT eo_range.
    ranges->add( eo_range ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->ADD_NEW_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_GUID                        TYPE        ZEXCEL_CELL_STYLE(optional)
* | [<-()] EO_STYLE                       TYPE REF TO ZCL_EXCEL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_new_style.
* Start of deletion # issue 139 - Dateretention of cellstyles
*  CREATE OBJECT eo_style.
*  styles->add( eo_style ).
* End of deletion # issue 139 - Dateretention of cellstyles
* Start of insertion # issue 139 - Dateretention of cellstyles
* Create default style
    CREATE OBJECT eo_style
      EXPORTING
        ip_guid = ip_guid.
    styles->add( eo_style ).

    DATA: style2 TYPE zexcel_s_stylemapping.
* Copy to new representations
    style2 = stylemapping_dynamic_style( eo_style ).
    INSERT style2 INTO TABLE t_stylemapping1.
    INSERT style2 INTO TABLE t_stylemapping2.
* End of insertion # issue 139 - Dateretention of cellstyles

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->ADD_NEW_WORKSHEET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_TITLE                       TYPE        ZEXCEL_SHEET_TITLE(optional)
* | [<-()] EO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_new_worksheet.

* Create default blank worksheet
    CREATE OBJECT eo_worksheet
      EXPORTING
        ip_excel = me
        ip_title = ip_title.

    worksheets->add( eo_worksheet ).
    worksheets->active_worksheet = worksheets->size( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->ADD_STATIC_STYLES
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_static_styles.
    " # issue 139
    FIELD-SYMBOLS: <style1> LIKE LINE OF t_stylemapping1,
                   <style2> LIKE LINE OF t_stylemapping2.
    DATA: style TYPE REF TO zcl_excel_style.

    LOOP AT me->t_stylemapping1 ASSIGNING <style1> WHERE added_to_iterator IS INITIAL.
      READ TABLE me->t_stylemapping2 ASSIGNING <style2> WITH TABLE KEY guid = <style1>-guid.
      CHECK sy-subrc = 0.  " Should always be true since these tables are being filled parallel

      style = me->add_new_style( <style1>-guid ).

      zcl_excel_common=>recursive_struct_to_class( EXPORTING i_source  = <style1>-complete_style
                                                             i_sourcex = <style1>-complete_stylex
                                                   CHANGING  e_target  = style ).

    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    DATA: lo_style      TYPE REF TO zcl_excel_style.

* Inizialize instance objects
    CREATE OBJECT security.
    CREATE OBJECT worksheets.
    CREATE OBJECT ranges.
    CREATE OBJECT styles.
    CREATE OBJECT drawings
      EXPORTING
        ip_type = zcl_excel_drawing=>type_image.
    CREATE OBJECT charts
      EXPORTING
        ip_type = zcl_excel_drawing=>type_chart.
    CREATE OBJECT comments.
    CREATE OBJECT legacy_palette.
    CREATE OBJECT autofilters.

    me->zif_excel_book_protection~initialize( ).
    me->zif_excel_book_properties~initialize( ).

    TRY.
        me->add_new_worksheet( ).
      CATCH zcx_excel. " suppress syntax check error
        ASSERT 1 = 2.  " some error processing anyway
    ENDTRY.

    me->add_new_style( ). " Standard style
    lo_style = me->add_new_style( ). " Standard style with fill gray125
    lo_style->fill->filltype = zcl_excel_style_fill=>c_fill_pattern_gray125.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->DELETE_WORKSHEET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD delete_worksheet.

    DATA: lo_worksheet    TYPE REF TO zcl_excel_worksheet,
          l_size          TYPE i,
          lv_errormessage TYPE string.

    l_size = get_worksheets_size( ).
    IF l_size = 1.  " Only 1 worksheet left --> check whether this is the worksheet to be deleted
      lo_worksheet = me->get_worksheet_by_index( 1 ).
      IF lo_worksheet = io_worksheet.
        lv_errormessage = 'Deleting last remaining worksheet is not allowed'(002).
        zcx_excel=>raise_text( lv_errormessage ).
      ENDIF.
    ENDIF.

    me->worksheets->remove( io_worksheet ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->DELETE_WORKSHEET_BY_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_INDEX                       TYPE        NUMERIC
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD delete_worksheet_by_index.

    DATA: lo_worksheet    TYPE REF TO zcl_excel_worksheet,
          lv_errormessage TYPE string.

    lo_worksheet = me->get_worksheet_by_index( iv_index ).
    IF lo_worksheet IS NOT BOUND.
      lv_errormessage = 'Worksheet not existing'(001).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.
    me->delete_worksheet( lo_worksheet ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->DELETE_WORKSHEET_BY_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TITLE                       TYPE        CLIKE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD delete_worksheet_by_name.

    DATA: lo_worksheet    TYPE REF TO zcl_excel_worksheet,
          lv_errormessage TYPE string.

    lo_worksheet = me->get_worksheet_by_name( iv_title ).
    IF lo_worksheet IS NOT BOUND.
      lv_errormessage = 'Worksheet not existing'(001).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.
    me->delete_worksheet( lo_worksheet ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_ACTIVE_SHEET_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_ACTIVE_WORKSHEET             TYPE        ZEXCEL_ACTIVE_WORKSHEET
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_active_sheet_index.
    r_active_worksheet = me->worksheets->active_worksheet.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_ACTIVE_WORKSHEET
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_active_worksheet.

    eo_worksheet = me->worksheets->get( me->worksheets->active_worksheet ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_AUTOFILTERS_REFERENCE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RO_AUTOFILTERS                 TYPE REF TO ZCL_EXCEL_AUTOFILTERS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_autofilters_reference.

    ro_autofilters = autofilters.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_DEFAULT_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_STYLE                       TYPE        ZEXCEL_CELL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_default_style.
    ep_style = me->default_style.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_DRAWINGS_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_TYPE                        TYPE        ZEXCEL_DRAWING_TYPE
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_drawings_iterator.

    CASE ip_type.
      WHEN zcl_excel_drawing=>type_image.
        eo_iterator = me->drawings->get_iterator( ).
      WHEN zcl_excel_drawing=>type_chart.
        eo_iterator = me->charts->get_iterator( ).
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_NEXT_TABLE_ID
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_ID                          TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_next_table_id.
    DATA: lo_worksheet    TYPE REF TO zcl_excel_worksheet,
          lo_iterator     TYPE REF TO cl_object_collection_iterator,
          lv_tables_count TYPE i.

    lo_iterator = me->get_worksheets_iterator( ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_worksheet ?= lo_iterator->if_object_collection_iterator~get_next( ).

      lv_tables_count = lo_worksheet->get_tables_size( ).
      ADD lv_tables_count TO ep_id.

    ENDWHILE.

    ADD 1 TO ep_id.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_RANGES_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_ranges_iterator.

    eo_iterator = me->ranges->get_iterator( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_STATIC_CELLSTYLE_GUID
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_CSTYLE_COMPLETE             TYPE        ZEXCEL_S_CSTYLE_COMPLETE
* | [--->] IP_CSTYLEX_COMPLETE            TYPE        ZEXCEL_S_CSTYLEX_COMPLETE
* | [<-()] EP_GUID                        TYPE        ZEXCEL_CELL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_static_cellstyle_guid.
    " # issue 139
    DATA: style LIKE LINE OF me->t_stylemapping1.

    READ TABLE me->t_stylemapping1 INTO style
      WITH TABLE KEY dynamic_style_guid = style-guid  " no dynamic style  --> look for initial guid here
                     complete_style     = ip_cstyle_complete
                     complete_stylex    = ip_cstylex_complete.
    IF sy-subrc <> 0.
      style-complete_style  = ip_cstyle_complete.
      style-complete_stylex = ip_cstylex_complete.
*    CALL FUNCTION 'GUID_CREATE'                               " del issue #379 - function is outdated in newer releases
*      IMPORTING
*        ev_guid_16 = style-guid.
      style-guid = zcl_excel_obsolete_func_wrap=>guid_create( ). " ins issue #379 - replacement for outdated function call
      INSERT style INTO TABLE me->t_stylemapping1.
      INSERT style INTO TABLE me->t_stylemapping2.

    ENDIF.

    ep_guid = style-guid.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_STYLES_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_styles_iterator.

    eo_iterator = me->styles->get_iterator( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL->GET_STYLE_FROM_GUID
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_GUID                        TYPE        ZEXCEL_CELL_STYLE
* | [<-()] EO_STYLE                       TYPE REF TO ZCL_EXCEL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_style_from_guid.

    DATA: lo_style    TYPE REF TO zcl_excel_style,
          lo_iterator TYPE REF TO cl_object_collection_iterator.

    lo_iterator = styles->get_iterator( ).
    WHILE lo_iterator->has_next( ) = abap_true.
      lo_style ?= lo_iterator->get_next( ).
      IF lo_style->get_guid( ) = ip_guid.
        eo_style = lo_style.
        RETURN.
      ENDIF.
    ENDWHILE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_STYLE_INDEX_IN_STYLES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_GUID                        TYPE        ZEXCEL_CELL_STYLE
* | [<-()] EP_INDEX                       TYPE        SYTABIX
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_style_index_in_styles.
    DATA: index TYPE syindex.
    DATA: lo_iterator TYPE REF TO cl_object_collection_iterator,
          lo_style    TYPE REF TO zcl_excel_style.

    CHECK ip_guid IS NOT INITIAL.


    lo_iterator = me->get_styles_iterator( ).
    WHILE lo_iterator->has_next( ) = 'X'.
      ADD 1 TO index.
      lo_style ?= lo_iterator->get_next( ).
      IF lo_style->get_guid( ) = ip_guid.
        ep_index = index.
        EXIT.
      ENDIF.
    ENDWHILE.

    IF ep_index IS INITIAL.
      zcx_excel=>raise_text( 'Index not found' ).
    ELSE.
      SUBTRACT 1 FROM ep_index.  " In excel list starts with "0"
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_STYLE_TO_GUID
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_GUID                        TYPE        ZEXCEL_CELL_STYLE
* | [<-()] EP_STYLEMAPPING                TYPE        ZEXCEL_S_STYLEMAPPING
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_style_to_guid.
    DATA: lo_style TYPE REF TO zcl_excel_style.
    " # issue 139
    READ TABLE me->t_stylemapping2 INTO ep_stylemapping WITH TABLE KEY guid = ip_guid.
    IF sy-subrc <> 0.
      zcx_excel=>raise_text( 'GUID not found' ).
    ENDIF.

    IF ep_stylemapping-dynamic_style_guid IS NOT INITIAL.
      lo_style = me->get_style_from_guid( ip_guid ).
      zcl_excel_common=>recursive_class_to_struct( EXPORTING i_source = lo_style
                                                   CHANGING  e_target =  ep_stylemapping-complete_style
                                                             e_targetx = ep_stylemapping-complete_stylex ).
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_THEME
* +-------------------------------------------------------------------------------------------------+
* | [<---] EO_THEME                       TYPE REF TO ZCL_EXCEL_THEME
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_theme.
    eo_theme = theme.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_WORKSHEETS_ITERATOR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EO_ITERATOR                    TYPE REF TO CL_OBJECT_COLLECTION_ITERATOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_worksheets_iterator.

    eo_iterator = me->worksheets->get_iterator( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_WORKSHEETS_NAME
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_NAME                        TYPE        ZEXCEL_WORKSHEETS_NAME
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_worksheets_name.

    ep_name = me->worksheets->name.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_WORKSHEETS_SIZE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_SIZE                        TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_worksheets_size.

    ep_size = me->worksheets->size( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_WORKSHEET_BY_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_INDEX                       TYPE        NUMERIC
* | [<-()] EO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_worksheet_by_index.


    DATA: lv_index TYPE zexcel_active_worksheet.

    lv_index = iv_index.
    eo_worksheet = me->worksheets->get( lv_index ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->GET_WORKSHEET_BY_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_SHEET_NAME                  TYPE        ZEXCEL_SHEET_TITLE
* | [<-()] EO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_worksheet_by_name.

    DATA: lv_index TYPE zexcel_active_worksheet,
          l_size   TYPE i.

    l_size = get_worksheets_size( ).

    DO l_size TIMES.
      lv_index = sy-index.
      eo_worksheet = me->worksheets->get( lv_index ).
      IF eo_worksheet->get_title( ) = ip_sheet_name.
        RETURN.
      ENDIF.
    ENDDO.

    CLEAR eo_worksheet.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->SET_ACTIVE_SHEET_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_ACTIVE_WORKSHEET             TYPE        ZEXCEL_ACTIVE_WORKSHEET
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_active_sheet_index.
    DATA: lo_worksheet    TYPE REF TO zcl_excel_worksheet,
          lv_errormessage TYPE string.

*--------------------------------------------------------------------*
* Check whether worksheet exists
*--------------------------------------------------------------------*
    lo_worksheet = me->get_worksheet_by_index( i_active_worksheet ).
    IF lo_worksheet IS NOT BOUND.
      lv_errormessage = 'Worksheet not existing'(001).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.

    me->worksheets->active_worksheet = i_active_worksheet.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->SET_ACTIVE_SHEET_INDEX_BY_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_WORKSHEET_NAME               TYPE        ZEXCEL_WORKSHEETS_NAME
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_active_sheet_index_by_name.

    DATA: ws_it    TYPE REF TO cl_object_collection_iterator,
          ws       TYPE REF TO zcl_excel_worksheet,
          lv_title TYPE zexcel_sheet_title,
          count    TYPE i VALUE 1.

    ws_it = me->worksheets->get_iterator( ).

    WHILE ws_it->if_object_collection_iterator~has_next( ) = abap_true.
      ws ?= ws_it->if_object_collection_iterator~get_next( ).
      lv_title = ws->get_title( ).
      IF lv_title = i_worksheet_name.
        me->worksheets->active_worksheet = count.
        EXIT.
      ENDIF.
      count = count + 1.
    ENDWHILE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->SET_DEFAULT_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_STYLE                       TYPE        ZEXCEL_CELL_STYLE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_default_style.
    me->default_style = ip_style.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->SET_THEME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_THEME                       TYPE REF TO ZCL_EXCEL_THEME
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_theme.
    theme = io_theme.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL->STYLEMAPPING_DYNAMIC_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_STYLE                       TYPE REF TO ZCL_EXCEL_STYLE
* | [<-()] EO_STYLE2                      TYPE        ZEXCEL_S_STYLEMAPPING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD stylemapping_dynamic_style.
    " # issue 139
    eo_style2-dynamic_style_guid  = ip_style->get_guid( ).
    eo_style2-guid                = eo_style2-dynamic_style_guid.
    eo_style2-added_to_iterator   = abap_true.

* don't care about attributes here, since this data may change
* dynamically

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->ZIF_EXCEL_BOOK_PROPERTIES~INITIALIZE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_book_properties~initialize.
    DATA: lv_timestamp TYPE timestampl.

    me->zif_excel_book_properties~application     = 'Microsoft Excel'.
    me->zif_excel_book_properties~appversion      = '12.0000'.

    GET TIME STAMP FIELD lv_timestamp.
    me->zif_excel_book_properties~created         = lv_timestamp.
    me->zif_excel_book_properties~creator         = sy-uname.
    me->zif_excel_book_properties~description     = zcl_excel=>version.
    me->zif_excel_book_properties~modified        = lv_timestamp.
    me->zif_excel_book_properties~lastmodifiedby  = sy-uname.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->ZIF_EXCEL_BOOK_PROTECTION~INITIALIZE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_book_protection~initialize.
    me->zif_excel_book_protection~protected      = zif_excel_book_protection=>c_unprotected.
    me->zif_excel_book_protection~lockrevision   = zif_excel_book_protection=>c_unlocked.
    me->zif_excel_book_protection~lockstructure  = zif_excel_book_protection=>c_unlocked.
    me->zif_excel_book_protection~lockwindows    = zif_excel_book_protection=>c_unlocked.
    CLEAR me->zif_excel_book_protection~workbookpassword.
    CLEAR me->zif_excel_book_protection~revisionspassword.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->ZIF_EXCEL_BOOK_VBA_PROJECT~SET_CODENAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_CODENAME                    TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_book_vba_project~set_codename.
    me->zif_excel_book_vba_project~codename = ip_codename.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->ZIF_EXCEL_BOOK_VBA_PROJECT~SET_CODENAME_PR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_CODENAME_PR                 TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_book_vba_project~set_codename_pr.
    me->zif_excel_book_vba_project~codename_pr = ip_codename_pr.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL->ZIF_EXCEL_BOOK_VBA_PROJECT~SET_VBAPROJECT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VBAPROJECT                  TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_book_vba_project~set_vbaproject.
    me->zif_excel_book_vba_project~vbaproject = ip_vbaproject.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_obsolete_func_wrap IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_OBSOLETE_FUNC_WRAP=>GUID_CREATE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_GUID_16                     TYPE        GUID_16
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD guid_create.

*    TRY.
*        rv_guid_16 = cl_system_uuid=>if_system_uuid_static~create_uuid_x16( ).
*      CATCH cx_uuid_error.
*    ENDTRY.

*--------------------------------------------------------------------*
* If you are on a release that does not yet have the class cl_system_uuid
* please use the following coding instead which is using the function
* call that was used before but which has been flagged as obsolete
* in newer SAP releases
*--------------------------------------------------------------------*

  CALL FUNCTION 'GUID_CREATE'
    IMPORTING
      ev_guid_16 = rv_guid_16.

  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_style_color IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_STYLE_COLOR=>CREATE_NEW_ARBG_INT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_RED                         TYPE        NUMERIC
* | [--->] IV_GREEN                       TYPE        NUMERIC
* | [--->] IV_BLUE                        TYPE        NUMERIC
* | [<-()] RV_COLOR_ARGB                  TYPE        ZEXCEL_STYLE_COLOR_ARGB
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_new_arbg_int.
    DATA: lv_red        TYPE int1,
          lv_green      TYPE int1,
          lv_blue       TYPE int1,
          lv_hex        TYPE x,
          lv_char_red   TYPE zexcel_style_color_component,
          lv_char_green TYPE zexcel_style_color_component,
          lv_char_blue  TYPE zexcel_style_color_component.

    lv_red    = iv_red MOD 256.
    lv_green  = iv_green MOD 256.
    lv_blue   = iv_blue  MOD 256.

    lv_hex        = lv_red.
    lv_char_red   = lv_hex.

    lv_hex        = lv_green.
    lv_char_green = lv_hex.

    lv_hex        = lv_blue.
    lv_char_blue  = lv_hex.


    CONCATENATE zcl_excel_style_color=>c_alpha lv_char_red lv_char_green lv_char_blue INTO rv_color_argb.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_STYLE_COLOR=>CREATE_NEW_ARGB
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_RED                         TYPE        ZEXCEL_STYLE_COLOR_COMPONENT
* | [--->] IP_GREEN                       TYPE        ZEXCEL_STYLE_COLOR_COMPONENT
* | [--->] IP_BLU                         TYPE        ZEXCEL_STYLE_COLOR_COMPONENT
* | [<-()] EP_COLOR_ARGB                  TYPE        ZEXCEL_STYLE_COLOR_ARGB
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_new_argb.

    CONCATENATE zcl_excel_style_color=>c_alpha ip_red ip_green ip_blu INTO ep_color_argb.

  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_graph_bars IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_BARS->CREATE_AX
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_AXID                        TYPE        STRING(optional)
* | [--->] IP_TYPE                        TYPE        CHAR5
* | [--->] IP_ORIENTATION                 TYPE        STRING(optional)
* | [--->] IP_DELETE                      TYPE        STRING(optional)
* | [--->] IP_AXPOS                       TYPE        STRING(optional)
* | [--->] IP_FORMATCODE                  TYPE        STRING(optional)
* | [--->] IP_SOURCELINKED                TYPE        STRING(optional)
* | [--->] IP_MAJORTICKMARK               TYPE        STRING(optional)
* | [--->] IP_MINORTICKMARK               TYPE        STRING(optional)
* | [--->] IP_TICKLBLPOS                  TYPE        STRING(optional)
* | [--->] IP_CROSSAX                     TYPE        STRING(optional)
* | [--->] IP_CROSSES                     TYPE        STRING(optional)
* | [--->] IP_AUTO                        TYPE        STRING(optional)
* | [--->] IP_LBLALGN                     TYPE        STRING(optional)
* | [--->] IP_LBLOFFSET                   TYPE        STRING(optional)
* | [--->] IP_NOMULTILVLLBL               TYPE        STRING(optional)
* | [--->] IP_CROSSBETWEEN                TYPE        STRING(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_ax.
    DATA ls_ax TYPE s_ax.
    ls_ax-type = ip_type.

    IF ip_type = c_catax.
      IF ip_axid IS SUPPLIED.
        ls_ax-axid = ip_axid.
      ELSE.
        ls_ax-axid = '1'.
      ENDIF.
      IF ip_orientation IS SUPPLIED.
        ls_ax-orientation = ip_orientation.
      ELSE.
        ls_ax-orientation = 'minMax'.
      ENDIF.
      IF ip_delete IS SUPPLIED.
        ls_ax-delete = ip_delete.
      ELSE.
        ls_ax-delete = '0'.
      ENDIF.
      IF ip_axpos IS SUPPLIED.
        ls_ax-axpos = ip_axpos.
      ELSE.
        ls_ax-axpos = 'b'.
      ENDIF.
      IF ip_formatcode IS SUPPLIED.
        ls_ax-formatcode = ip_formatcode.
      ELSE.
        ls_ax-formatcode = 'General'.
      ENDIF.
      IF ip_sourcelinked IS SUPPLIED.
        ls_ax-sourcelinked = ip_sourcelinked.
      ELSE.
        ls_ax-sourcelinked = '1'.
      ENDIF.
      IF ip_majortickmark IS SUPPLIED.
        ls_ax-majortickmark = ip_majortickmark.
      ELSE.
        ls_ax-majortickmark = 'out'.
      ENDIF.
      IF ip_minortickmark IS SUPPLIED.
        ls_ax-minortickmark = ip_minortickmark.
      ELSE.
        ls_ax-minortickmark = 'none'.
      ENDIF.
      IF ip_ticklblpos IS SUPPLIED.
        ls_ax-ticklblpos = ip_ticklblpos.
      ELSE.
        ls_ax-ticklblpos = 'nextTo'.
      ENDIF.
      IF ip_crossax IS SUPPLIED.
        ls_ax-crossax = ip_crossax.
      ELSE.
        ls_ax-crossax = '2'.
      ENDIF.
      IF ip_crosses IS SUPPLIED.
        ls_ax-crosses = ip_crosses.
      ELSE.
        ls_ax-crosses = 'autoZero'.
      ENDIF.
      IF ip_auto IS SUPPLIED.
        ls_ax-auto = ip_auto.
      ELSE.
        ls_ax-auto = '1'.
      ENDIF.
      IF ip_lblalgn IS SUPPLIED.
        ls_ax-lblalgn = ip_lblalgn.
      ELSE.
        ls_ax-lblalgn = 'ctr'.
      ENDIF.
      IF ip_lbloffset IS SUPPLIED.
        ls_ax-lbloffset = ip_lbloffset.
      ELSE.
        ls_ax-lbloffset = '100'.
      ENDIF.
      IF ip_nomultilvllbl IS SUPPLIED.
        ls_ax-nomultilvllbl = ip_nomultilvllbl.
      ELSE.
        ls_ax-nomultilvllbl = '0'.
      ENDIF.
    ELSEIF ip_type = c_valax.
      IF ip_axid IS SUPPLIED.
        ls_ax-axid = ip_axid.
      ELSE.
        ls_ax-axid = '2'.
      ENDIF.
      IF ip_orientation IS SUPPLIED.
        ls_ax-orientation = ip_orientation.
      ELSE.
        ls_ax-orientation = 'minMax'.
      ENDIF.
      IF ip_delete IS SUPPLIED.
        ls_ax-delete = ip_delete.
      ELSE.
        ls_ax-delete = '0'.
      ENDIF.
      IF ip_axpos IS SUPPLIED.
        ls_ax-axpos = ip_axpos.
      ELSE.
        ls_ax-axpos = 'l'.
      ENDIF.
      IF ip_formatcode IS SUPPLIED.
        ls_ax-formatcode = ip_formatcode.
      ELSE.
        ls_ax-formatcode = 'General'.
      ENDIF.
      IF ip_sourcelinked IS SUPPLIED.
        ls_ax-sourcelinked = ip_sourcelinked.
      ELSE.
        ls_ax-sourcelinked = '1'.
      ENDIF.
      IF ip_majortickmark IS SUPPLIED.
        ls_ax-majortickmark = ip_majortickmark.
      ELSE.
        ls_ax-majortickmark = 'out'.
      ENDIF.
      IF ip_minortickmark IS SUPPLIED.
        ls_ax-minortickmark = ip_minortickmark.
      ELSE.
        ls_ax-minortickmark = 'none'.
      ENDIF.
      IF ip_ticklblpos IS SUPPLIED.
        ls_ax-ticklblpos = ip_ticklblpos.
      ELSE.
        ls_ax-ticklblpos = 'nextTo'.
      ENDIF.
      IF ip_crossax IS SUPPLIED.
        ls_ax-crossax = ip_crossax.
      ELSE.
        ls_ax-crossax = '1'.
      ENDIF.
      IF ip_crosses IS SUPPLIED.
        ls_ax-crosses = ip_crosses.
      ELSE.
        ls_ax-crosses = 'autoZero'.
      ENDIF.
      IF ip_crossbetween IS SUPPLIED.
        ls_ax-crossbetween = ip_crossbetween.
      ELSE.
        ls_ax-crossbetween = 'between'.
      ENDIF.
    ENDIF.

    APPEND ls_ax TO me->axes.
    SORT me->axes BY axid ASCENDING.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_BARS->SET_SHOW_CAT_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_cat_name.
    ns_showcatnameval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_BARS->SET_SHOW_LEGEND_KEY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_legend_key.
    ns_showlegendkeyval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_BARS->SET_SHOW_PERCENT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_percent.
    ns_showpercentval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_BARS->SET_SHOW_SER_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_ser_name.
    ns_showsernameval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_BARS->SET_SHOW_VALUES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_values.
    ns_showvalval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_BARS->SET_VARYCOLOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_varycolor.
    ns_varycolorsval = ip_value.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_graph_pie IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_PIE->SET_SHOW_CAT_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_cat_name.
    ns_showcatnameval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_PIE->SET_SHOW_LEADER_LINES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_leader_lines.
    ns_showleaderlinesval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_PIE->SET_SHOW_LEGEND_KEY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_legend_key.
    ns_showlegendkeyval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_PIE->SET_SHOW_PERCENT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_percent.
    ns_showpercentval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_PIE->SET_SHOW_SER_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_ser_name.
    ns_showsernameval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_PIE->SET_SHOW_VALUES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_values.
    ns_showvalval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_PIE->SET_VARYCOLOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_varycolor.
    ns_varycolorsval = ip_value.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_graph_line IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_LINE->CREATE_AX
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_AXID                        TYPE        STRING(optional)
* | [--->] IP_TYPE                        TYPE        CHAR5
* | [--->] IP_ORIENTATION                 TYPE        STRING(optional)
* | [--->] IP_DELETE                      TYPE        STRING(optional)
* | [--->] IP_AXPOS                       TYPE        STRING(optional)
* | [--->] IP_FORMATCODE                  TYPE        STRING(optional)
* | [--->] IP_SOURCELINKED                TYPE        STRING(optional)
* | [--->] IP_MAJORTICKMARK               TYPE        STRING(optional)
* | [--->] IP_MINORTICKMARK               TYPE        STRING(optional)
* | [--->] IP_TICKLBLPOS                  TYPE        STRING(optional)
* | [--->] IP_CROSSAX                     TYPE        STRING(optional)
* | [--->] IP_CROSSES                     TYPE        STRING(optional)
* | [--->] IP_AUTO                        TYPE        STRING(optional)
* | [--->] IP_LBLALGN                     TYPE        STRING(optional)
* | [--->] IP_LBLOFFSET                   TYPE        STRING(optional)
* | [--->] IP_NOMULTILVLLBL               TYPE        STRING(optional)
* | [--->] IP_CROSSBETWEEN                TYPE        STRING(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_ax.
    DATA ls_ax TYPE s_ax.
    ls_ax-type = ip_type.

    IF ip_type = c_catax.
      IF ip_axid IS SUPPLIED.
        ls_ax-axid = ip_axid.
      ELSE.
        ls_ax-axid = '1'.
      ENDIF.
      IF ip_orientation IS SUPPLIED.
        ls_ax-orientation = ip_orientation.
      ELSE.
        ls_ax-orientation = 'minMax'.
      ENDIF.
      IF ip_delete IS SUPPLIED.
        ls_ax-delete = ip_delete.
      ELSE.
        ls_ax-delete = '0'.
      ENDIF.
      IF ip_axpos IS SUPPLIED.
        ls_ax-axpos = ip_axpos.
      ELSE.
        ls_ax-axpos = 'b'.
      ENDIF.
      IF ip_formatcode IS SUPPLIED.
        ls_ax-formatcode = ip_formatcode.
      ELSE.
        ls_ax-formatcode = 'General'.
      ENDIF.
      IF ip_sourcelinked IS SUPPLIED.
        ls_ax-sourcelinked = ip_sourcelinked.
      ELSE.
        ls_ax-sourcelinked = '1'.
      ENDIF.
      IF ip_majortickmark IS SUPPLIED.
        ls_ax-majortickmark = ip_majortickmark.
      ELSE.
        ls_ax-majortickmark = 'out'.
      ENDIF.
      IF ip_minortickmark IS SUPPLIED.
        ls_ax-minortickmark = ip_minortickmark.
      ELSE.
        ls_ax-minortickmark = 'none'.
      ENDIF.
      IF ip_ticklblpos IS SUPPLIED.
        ls_ax-ticklblpos = ip_ticklblpos.
      ELSE.
        ls_ax-ticklblpos = 'nextTo'.
      ENDIF.
      IF ip_crossax IS SUPPLIED.
        ls_ax-crossax = ip_crossax.
      ELSE.
        ls_ax-crossax = '2'.
      ENDIF.
      IF ip_crosses IS SUPPLIED.
        ls_ax-crosses = ip_crosses.
      ELSE.
        ls_ax-crosses = 'autoZero'.
      ENDIF.
      IF ip_auto IS SUPPLIED.
        ls_ax-auto = ip_auto.
      ELSE.
        ls_ax-auto = '1'.
      ENDIF.
      IF ip_lblalgn IS SUPPLIED.
        ls_ax-lblalgn = ip_lblalgn.
      ELSE.
        ls_ax-lblalgn = 'ctr'.
      ENDIF.
      IF ip_lbloffset IS SUPPLIED.
        ls_ax-lbloffset = ip_lbloffset.
      ELSE.
        ls_ax-lbloffset = '100'.
      ENDIF.
      IF ip_nomultilvllbl IS SUPPLIED.
        ls_ax-nomultilvllbl = ip_nomultilvllbl.
      ELSE.
        ls_ax-nomultilvllbl = '0'.
      ENDIF.
    ELSEIF ip_type = c_valax.
      IF ip_axid IS SUPPLIED.
        ls_ax-axid = ip_axid.
      ELSE.
        ls_ax-axid = '2'.
      ENDIF.
      IF ip_orientation IS SUPPLIED.
        ls_ax-orientation = ip_orientation.
      ELSE.
        ls_ax-orientation = 'minMax'.
      ENDIF.
      IF ip_delete IS SUPPLIED.
        ls_ax-delete = ip_delete.
      ELSE.
        ls_ax-delete = '0'.
      ENDIF.
      IF ip_axpos IS SUPPLIED.
        ls_ax-axpos = ip_axpos.
      ELSE.
        ls_ax-axpos = 'l'.
      ENDIF.
      IF ip_formatcode IS SUPPLIED.
        ls_ax-formatcode = ip_formatcode.
      ELSE.
        ls_ax-formatcode = 'General'.
      ENDIF.
      IF ip_sourcelinked IS SUPPLIED.
        ls_ax-sourcelinked = ip_sourcelinked.
      ELSE.
        ls_ax-sourcelinked = '1'.
      ENDIF.
      IF ip_majortickmark IS SUPPLIED.
        ls_ax-majortickmark = ip_majortickmark.
      ELSE.
        ls_ax-majortickmark = 'out'.
      ENDIF.
      IF ip_minortickmark IS SUPPLIED.
        ls_ax-minortickmark = ip_minortickmark.
      ELSE.
        ls_ax-minortickmark = 'none'.
      ENDIF.
      IF ip_ticklblpos IS SUPPLIED.
        ls_ax-ticklblpos = ip_ticklblpos.
      ELSE.
        ls_ax-ticklblpos = 'nextTo'.
      ENDIF.
      IF ip_crossax IS SUPPLIED.
        ls_ax-crossax = ip_crossax.
      ELSE.
        ls_ax-crossax = '1'.
      ENDIF.
      IF ip_crosses IS SUPPLIED.
        ls_ax-crosses = ip_crosses.
      ELSE.
        ls_ax-crosses = 'autoZero'.
      ENDIF.
      IF ip_crossbetween IS SUPPLIED.
        ls_ax-crossbetween = ip_crossbetween.
      ELSE.
        ls_ax-crossbetween = 'between'.
      ENDIF.
    ENDIF.

    APPEND ls_ax TO me->axes.
    SORT me->axes BY axid ASCENDING.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_LINE->SET_SHOW_CAT_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_cat_name.
    ns_showcatnameval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_LINE->SET_SHOW_LEGEND_KEY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_legend_key.
    ns_showlegendkeyval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_LINE->SET_SHOW_PERCENT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_percent.
    ns_showpercentval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_LINE->SET_SHOW_SER_NAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_ser_name.
    ns_showsernameval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_LINE->SET_SHOW_VALUES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_show_values.
    ns_showvalval = ip_value.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_GRAPH_LINE->SET_VARYCOLOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_VALUE                       TYPE        C
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_varycolor.
    ns_varycolorsval = ip_value.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_abap_zip_archive IMPLEMENTATION.
  METHOD create.
    CREATE OBJECT r_zip TYPE lcl_abap_zip_archive
      EXPORTING
        i_data = i_data.
  ENDMETHOD.                    "create
  METHOD constructor.
    DATA: lv_errormessage TYPE string.
    super->constructor( ).
    CREATE OBJECT abap_zip.
    abap_zip->load(
               EXPORTING
                 zip = i_data
               EXCEPTIONS
                 zip_parse_error = 1
                 OTHERS          = 2 ).
    IF sy-subrc <> 0.
      lv_errormessage = 'ZIP parse error'(002).
      RAISE EXCEPTION TYPE zcx_excel
        EXPORTING
          error = lv_errormessage.
    ENDIF.

  ENDMETHOD.                    "constructor
  METHOD read.
    DATA: lv_errormessage TYPE string.
    CALL METHOD abap_zip->get
      EXPORTING
        name                    = i_filename
      IMPORTING
        content                 = r_content
      EXCEPTIONS
        zip_index_error         = 1
        zip_decompression_error = 2
        OTHERS                  = 3.
    IF sy-subrc <> 0.
      lv_errormessage = 'File not found in zip-archive'(003).
      RAISE EXCEPTION TYPE zcx_excel
        EXPORTING
          error = lv_errormessage.
    ENDIF.

  ENDMETHOD.                    "read
ENDCLASS.

CLASS lcl_alternate_zip_archive IMPLEMENTATION.
  METHOD create.
    CREATE OBJECT r_zip TYPE lcl_alternate_zip_archive
      EXPORTING
        i_alternate_zip_class = i_alternate_zip_class
        i_data                = i_data.
  ENDMETHOD.                    "create
  METHOD constructor.
    DATA: lv_errormessage TYPE string.
    super->constructor( ).
    CREATE OBJECT alternate_zip TYPE (i_alternate_zip_class).
    TRY.
        CALL METHOD alternate_zip->('LOAD')
          EXPORTING
            zip             = i_data
          EXCEPTIONS
            zip_parse_error = 1
            OTHERS          = 2.
      CATCH cx_sy_dyn_call_illegal_method.
        lv_errormessage = 'Method LOAD missing in alternative zipclass'. "#EC NOTEXT   This is a workaround until class CL_ABAP_ZIP is fixed
        RAISE EXCEPTION TYPE zcx_excel
          EXPORTING
            error = lv_errormessage.
    ENDTRY.

    IF sy-subrc <> 0.
      lv_errormessage = 'ZIP parse error'(002).
      RAISE EXCEPTION TYPE zcx_excel
        EXPORTING
          error = lv_errormessage.
    ENDIF.

  ENDMETHOD.                    "constructor
  METHOD read.
    DATA: lv_errormessage TYPE string.
    TRY.
        CALL METHOD alternate_zip->('GET')
          EXPORTING
            name                    = i_filename
          IMPORTING
            content                 = r_content    " Contents
          EXCEPTIONS
            zip_index_error         = 1
            zip_decompression_error = 2
            OTHERS                  = 3.
      CATCH cx_sy_dyn_call_illegal_method.
        lv_errormessage = 'Method GET missing in alternative zipclass'. "#EC NOTEXT   This is a workaround until class CL_ABAP_ZIP is fixed
        RAISE EXCEPTION TYPE zcx_excel
          EXPORTING
            error = lv_errormessage.
    ENDTRY.
    IF sy-subrc <> 0.
      lv_errormessage = 'File not found in zip-archive'(003).
      RAISE EXCEPTION TYPE zcx_excel
        EXPORTING
          error = lv_errormessage.
    ENDIF.

  ENDMETHOD.                    "read
ENDCLASS.

CLASS zcl_excel_reader_2007 IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_READER_2007->CREATE_ZIP_ARCHIVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_XLSX_BINARY                  TYPE        XSTRING
* | [--->] I_USE_ALTERNATE_ZIP            TYPE        SEOCLSNAME(optional)
* | [<-()] E_ZIP                          TYPE REF TO LCL_ZIP_ARCHIVE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_zip_archive.
    CASE i_use_alternate_zip.
      WHEN space.
        e_zip = lcl_abap_zip_archive=>create( i_xlsx_binary ).
      WHEN OTHERS.
        e_zip = lcl_alternate_zip_archive=>create( i_data                = i_xlsx_binary
                                                   i_alternate_zip_class = i_use_alternate_zip ).
    ENDCASE.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->FILL_ROW_OUTLINES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD fill_row_outlines.

    TYPES: BEGIN OF lts_row_data,
             row           TYPE i,
             outline_level TYPE i,
           END OF lts_row_data,
           ltt_row_data TYPE SORTED TABLE OF lts_row_data WITH UNIQUE KEY row.

    DATA: lt_row_data             TYPE ltt_row_data,
          ls_row_data             LIKE LINE OF lt_row_data,
          lt_collapse_rows        TYPE HASHED TABLE OF i WITH UNIQUE KEY table_line,

          lv_collapsed            TYPE abap_bool,

          lv_outline_level        TYPE i,
          lv_next_consecutive_row TYPE i,
          lt_outline_rows         TYPE zcl_excel_worksheet=>mty_ts_outlines_row,
          ls_outline_row          LIKE LINE OF lt_outline_rows,
          lo_row                  TYPE REF TO zcl_excel_row,
          lo_row_iterator         TYPE REF TO cl_object_collection_iterator,
          lv_row_offset           TYPE i,
          lv_row_collapse_flag    TYPE i.


    FIELD-SYMBOLS: <ls_row_data>      LIKE LINE OF lt_row_data.

* First collect information about outlines ( outline leven and collapsed state )
    lo_row_iterator = io_worksheet->get_rows_iterator( ).
    WHILE lo_row_iterator->has_next( ) = abap_true.
      lo_row ?= lo_row_iterator->get_next( ).
      ls_row_data-row           = lo_row->get_row_index( ).
      ls_row_data-outline_level = lo_row->get_outline_level( ).
      IF ls_row_data-outline_level IS NOT INITIAL.
        INSERT ls_row_data INTO TABLE lt_row_data.
      ENDIF.

      lv_collapsed = lo_row->get_collapsed( ).
      IF lv_collapsed = abap_true.
        DATA row_index TYPE int4.
        row_index = lo_row->get_row_index( ).
        INSERT row_index INTO TABLE lt_collapse_rows.
      ENDIF.
    ENDWHILE.

* Now parse this information - we need consecutive rows - any gap will create a new outline
    DO 7 TIMES.  " max number of outlines allowed
      lv_outline_level = sy-index.
      CLEAR lv_next_consecutive_row.
      CLEAR ls_outline_row.
      LOOP AT lt_row_data ASSIGNING <ls_row_data> WHERE outline_level >= lv_outline_level.

        IF lv_next_consecutive_row    <> <ls_row_data>-row   " A gap --> close all open outlines
          AND lv_next_consecutive_row IS NOT INITIAL.        " First time in loop.
          INSERT ls_outline_row INTO TABLE lt_outline_rows.
          CLEAR: ls_outline_row.
        ENDIF.

        IF ls_outline_row-row_from IS INITIAL.
          ls_outline_row-row_from = <ls_row_data>-row.
        ENDIF.
        ls_outline_row-row_to = <ls_row_data>-row.

        lv_next_consecutive_row = <ls_row_data>-row + 1.

      ENDLOOP.
      IF ls_outline_row-row_from IS NOT INITIAL.
        INSERT ls_outline_row INTO TABLE lt_outline_rows.
      ENDIF.
    ENDDO.

* lt_outline_rows holds all outline information
* we now need to determine whether the outline is collapsed or not
    LOOP AT lt_outline_rows INTO ls_outline_row.

      IF io_worksheet->zif_excel_sheet_properties~summarybelow = zif_excel_sheet_properties=>c_below_off.
        lv_row_collapse_flag = ls_outline_row-row_from - 1.
      ELSE.
        lv_row_collapse_flag = ls_outline_row-row_to + 1.
      ENDIF.
      READ TABLE lt_collapse_rows TRANSPORTING NO FIELDS WITH TABLE KEY table_line = lv_row_collapse_flag.
      IF sy-subrc = 0.
        ls_outline_row-collapsed = abap_true.
      ENDIF.
      io_worksheet->set_row_outline( iv_row_from  = ls_outline_row-row_from
                                     iv_row_to    = ls_outline_row-row_to
                                     iv_collapsed = ls_outline_row-collapsed ).

    ENDLOOP.

* Finally purge outline information ( collapsed state, outline leve)  from row_dimensions, since we want to keep these in the outline-table
    lo_row_iterator = io_worksheet->get_rows_iterator( ).
    WHILE lo_row_iterator->has_next( ) = abap_true.
      lo_row ?= lo_row_iterator->get_next( ).

      lo_row->set_outline_level( 0 ).
      lo_row->set_collapsed( abap_false ).

    ENDWHILE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_READER_2007=>FILL_STRUCT_FROM_ATTRIBUTES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_ELEMENT                     TYPE REF TO IF_IXML_ELEMENT
* | [<-->] CP_STRUCTURE                   TYPE        ANY
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD fill_struct_from_attributes.
*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,      (done)              2012-11-07
*              - ...
* changes: renaming variables to naming conventions
*          aligning code
*          adding comments to explain what we are trying to achieve
*--------------------------------------------------------------------*

    DATA:       lv_name       TYPE string,
                lo_attributes TYPE REF TO if_ixml_named_node_map,
                lo_attribute  TYPE REF TO if_ixml_attribute,
                lo_iterator   TYPE REF TO if_ixml_node_iterator.

    FIELD-SYMBOLS: <component>                  TYPE any.

*--------------------------------------------------------------------*
* The values of named attributes of a tag are being read and moved into corresponding
* fields of given structure
* Behaves like move-corresonding tag to structure

* Example:
*     <Relationship Target="docProps/app.xml" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties" Id="rId3"/>
*   Here the attributes are Target, Type and Id.  Thus if the passed
*   structure has fieldnames Id and Target these would be filled with
*   "rId3" and "docProps/app.xml" respectively
*--------------------------------------------------------------------*
    CLEAR cp_structure.

    lo_attributes  = ip_element->get_attributes( ).
    lo_iterator    = lo_attributes->create_iterator( ).
    lo_attribute  ?= lo_iterator->get_next( ).
    WHILE lo_attribute IS BOUND.

      lv_name = lo_attribute->get_name( ).
      TRANSLATE lv_name TO UPPER CASE.
      ASSIGN COMPONENT lv_name OF STRUCTURE cp_structure TO <component>.
      IF sy-subrc = 0.
        <component> = lo_attribute->get_value( ).
      ENDIF.
      lo_attribute ?= lo_iterator->get_next( ).

    ENDWHILE.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->GET_DXF_STYLE_GUID
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_IXML_DXF                    TYPE REF TO IF_IXML_ELEMENT
* | [--->] IO_EXCEL                       TYPE REF TO ZCL_EXCEL
* | [<-()] RV_STYLE_GUID                  TYPE        ZEXCEL_CELL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_dxf_style_guid.
    DATA: lo_ixml_dxf_children          TYPE REF TO if_ixml_node_list,
          lo_ixml_iterator_dxf_children TYPE REF TO if_ixml_node_iterator,
          lo_ixml_dxf_child             TYPE REF TO if_ixml_element,

          lv_dxf_child_type             TYPE string,

          lo_ixml_element               TYPE REF TO if_ixml_element,
          lo_ixml_element2              TYPE REF TO if_ixml_element,
          lv_val                        TYPE string.

    DATA: ls_cstyle  TYPE zexcel_s_cstyle_complete,
          ls_cstylex TYPE zexcel_s_cstylex_complete.



    lo_ixml_dxf_children = io_ixml_dxf->get_children( ).
    lo_ixml_iterator_dxf_children = lo_ixml_dxf_children->create_iterator( ).
    lo_ixml_dxf_child ?= lo_ixml_iterator_dxf_children->get_next( ).
    WHILE lo_ixml_dxf_child IS BOUND.

      lv_dxf_child_type = lo_ixml_dxf_child->get_name( ).
      CASE lv_dxf_child_type.

        WHEN 'font'.
*--------------------------------------------------------------------*
* italic
*--------------------------------------------------------------------*
          lo_ixml_element = lo_ixml_dxf_child->find_from_name( 'i' ).
          IF lo_ixml_element IS BOUND.
            CLEAR lv_val.
            lv_val  = lo_ixml_element->get_attribute_ns( 'val' ).
            IF lv_val <> '0'.
              ls_cstyle-font-italic  = 'X'.
              ls_cstylex-font-italic = 'X'.
            ENDIF.

          ENDIF.
*--------------------------------------------------------------------*
* bold
*--------------------------------------------------------------------*
          lo_ixml_element = lo_ixml_dxf_child->find_from_name( 'b' ).
          IF lo_ixml_element IS BOUND.
            CLEAR lv_val.
            lv_val  = lo_ixml_element->get_attribute_ns( 'val' ).
            IF lv_val <> '0'.
              ls_cstyle-font-bold  = 'X'.
              ls_cstylex-font-bold = 'X'.
            ENDIF.

          ENDIF.
*--------------------------------------------------------------------*
* strikethrough
*--------------------------------------------------------------------*
          lo_ixml_element = lo_ixml_dxf_child->find_from_name( 'strike' ).
          IF lo_ixml_element IS BOUND.
            CLEAR lv_val.
            lv_val  = lo_ixml_element->get_attribute_ns( 'val' ).
            IF lv_val <> '0'.
              ls_cstyle-font-strikethrough  = 'X'.
              ls_cstylex-font-strikethrough = 'X'.
            ENDIF.

          ENDIF.
*--------------------------------------------------------------------*
* color
*--------------------------------------------------------------------*
          lo_ixml_element = lo_ixml_dxf_child->find_from_name( 'color' ).
          IF lo_ixml_element IS BOUND.
            CLEAR lv_val.
            lv_val  = lo_ixml_element->get_attribute_ns( 'rgb' ).
            ls_cstyle-font-color-rgb  = lv_val.
            ls_cstylex-font-color-rgb = 'X'.
          ENDIF.

        WHEN 'fill'.
          lo_ixml_element = lo_ixml_dxf_child->find_from_name( 'patternFill' ).
          IF lo_ixml_element IS BOUND.
            lo_ixml_element2 = lo_ixml_element->find_from_name( 'bgColor' ).
            IF lo_ixml_element2 IS BOUND.
              CLEAR lv_val.
              lv_val  = lo_ixml_element2->get_attribute_ns( 'rgb' ).
              IF lv_val IS NOT INITIAL.
                ls_cstyle-fill-filltype       = zcl_excel_style_fill=>c_fill_solid.
                ls_cstyle-fill-bgcolor-rgb    = lv_val.
                ls_cstylex-fill-filltype      = 'X'.
                ls_cstylex-fill-bgcolor-rgb   = 'X'.
              ENDIF.
              CLEAR lv_val.
              lv_val  = lo_ixml_element2->get_attribute_ns( 'theme' ).
              IF lv_val IS NOT INITIAL.
                ls_cstyle-fill-filltype         = zcl_excel_style_fill=>c_fill_solid.
                ls_cstyle-fill-bgcolor-theme    = lv_val.
                ls_cstylex-fill-filltype        = 'X'.
                ls_cstylex-fill-bgcolor-theme   = 'X'.
              ENDIF.
              CLEAR lv_val.
            ENDIF.
          ENDIF.

* 2do - borders into dxf-styles.  Here and in writerclass
*      WHEN 'border'.
*        lo_ixml_element = lo_ixml_dxf_child->find_from_name( 'left' ).
*        IF lo_ixml_element IS BOUND.
*          CLEAR lv_val.
*          lv_val  = lo_ixml_element2->get_attribute_ns( 'style' ).
*          IF lv_val IS NOT INITIAL.
*            ls_cstyle-borders-left-border_style  = lv_val.
*            ls_cstylex-borders-left-border_style = 'X'.
*          ENDIF.
*        ENDIF.

      ENDCASE.

      lo_ixml_dxf_child ?= lo_ixml_iterator_dxf_children->get_next( ).

    ENDWHILE.




    rv_style_guid = io_excel->get_static_cellstyle_guid( ip_cstyle_complete  = ls_cstyle
                                                         ip_cstylex_complete = ls_cstylex  ).


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->GET_FROM_ZIP_ARCHIVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_FILENAME                     TYPE        STRING
* | [<-()] R_CONTENT                      TYPE        XSTRING
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_from_zip_archive.

    ASSERT zip IS BOUND. " zip object has to exist at this point

    r_content = zip->read(  i_filename ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->GET_IXML_FROM_ZIP_ARCHIVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_FILENAME                     TYPE        STRING
* | [--->] IS_NORMALIZING                 TYPE        BOOLEAN (default ='X')
* | [<-()] R_IXML                         TYPE REF TO IF_IXML_DOCUMENT
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_ixml_from_zip_archive.

    DATA:       lv_content       TYPE xstring,
                lo_ixml          TYPE REF TO if_ixml,
                lo_streamfactory TYPE REF TO if_ixml_stream_factory,
                lo_istream       TYPE REF TO if_ixml_istream,
                lo_parser        TYPE REF TO if_ixml_parser.

*--------------------------------------------------------------------*
* Load XML file from archive into an input stream,
* and parse that stream into an ixml object
*--------------------------------------------------------------------*
    lv_content        = me->get_from_zip_archive( i_filename ).
    lo_ixml           = cl_ixml=>create( ).
    lo_streamfactory  = lo_ixml->create_stream_factory( ).
    lo_istream        = lo_streamfactory->create_istream_xstring( lv_content ).
    r_ixml            = lo_ixml->create_document( ).
    lo_parser         = lo_ixml->create_parser( stream_factory = lo_streamfactory
                                                istream        = lo_istream
                                                document       = r_ixml ).
    lo_parser->set_normalizing( is_normalizing ).
    lo_parser->set_validating( mode = if_ixml_parser=>co_no_validation ).
    lo_parser->parse( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_DRAWING_ANCHOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_ANCHOR_ELEMENT              TYPE REF TO IF_IXML_ELEMENT
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [--->] IT_RELATED_DRAWINGS            TYPE        T_REL_DRAWINGS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_drawing_anchor.

    TYPES: BEGIN OF t_c_nv_pr,
             name TYPE string,
             id   TYPE string,
           END OF t_c_nv_pr.

    TYPES: BEGIN OF t_blip,
             cstate TYPE string,
             embed  TYPE string,
           END OF t_blip.

    TYPES: BEGIN OF t_chart,
             id TYPE string,
           END OF t_chart.

    TYPES: BEGIN OF t_ext,
             cx TYPE string,
             cy TYPE string,
           END OF t_ext.

    CONSTANTS: lc_xml_attr_true     TYPE string VALUE 'true',
               lc_xml_attr_true_int TYPE string VALUE '1'.
    CONSTANTS: lc_rel_chart TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart',
               lc_rel_image TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image'.

    DATA: lo_drawing     TYPE REF TO zcl_excel_drawing,
          node           TYPE REF TO if_ixml_element,
          node2          TYPE REF TO if_ixml_element,
          node3          TYPE REF TO if_ixml_element,
          node4          TYPE REF TO if_ixml_element,

          ls_upper       TYPE zexcel_drawing_location,
          ls_lower       TYPE zexcel_drawing_location,
          ls_size        TYPE zexcel_drawing_size,
          ext            TYPE t_ext,
          lv_content     TYPE xstring,
          lv_relation_id TYPE string,
          lv_title       TYPE string,

          cnvpr          TYPE t_c_nv_pr,
          blip           TYPE t_blip,
          chart          TYPE t_chart,
          drawing_type   TYPE zexcel_drawing_type,

          rel_drawing    TYPE t_rel_drawing.

    node ?= io_anchor_element->find_from_name( name = 'from' namespace = 'xdr' ).
    CHECK node IS NOT INITIAL.
    node2 ?= node->find_from_name( name = 'col' namespace = 'xdr' ).
    ls_upper-col = node2->get_value( ).
    node2 ?= node->find_from_name( name = 'row' namespace = 'xdr' ).
    ls_upper-row = node2->get_value( ).
    node2 ?= node->find_from_name( name = 'colOff' namespace = 'xdr' ).
    ls_upper-col_offset = node2->get_value( ).
    node2 ?= node->find_from_name( name = 'rowOff' namespace = 'xdr' ).
    ls_upper-row_offset = node2->get_value( ).

    node ?= io_anchor_element->find_from_name( name = 'ext' namespace = 'xdr' ).
    IF node IS INITIAL.
      CLEAR ls_size.
    ELSE.
      me->fill_struct_from_attributes( EXPORTING ip_element = node CHANGING cp_structure = ext ).
      ls_size-width = ext-cx.
      ls_size-height = ext-cy.
      TRY.
          ls_size-width  = zcl_excel_drawing=>emu2pixel( ls_size-width ).
        CATCH cx_root.
      ENDTRY.
      TRY.
          ls_size-height = zcl_excel_drawing=>emu2pixel( ls_size-height ).
        CATCH cx_root.
      ENDTRY.
    ENDIF.

    node ?= io_anchor_element->find_from_name( name = 'to' namespace = 'xdr' ).
    IF node IS INITIAL.
      CLEAR ls_lower.
    ELSE.
      node2 ?= node->find_from_name( name = 'col' namespace = 'xdr' ).
      ls_lower-col = node2->get_value( ).
      node2 ?= node->find_from_name( name = 'row' namespace = 'xdr' ).
      ls_lower-row = node2->get_value( ).
      node2 ?= node->find_from_name( name = 'colOff' namespace = 'xdr' ).
      ls_lower-col_offset = node2->get_value( ).
      node2 ?= node->find_from_name( name = 'rowOff' namespace = 'xdr' ).
      ls_lower-row_offset = node2->get_value( ).
    ENDIF.

    node ?= io_anchor_element->find_from_name( name = 'pic' namespace = 'xdr' ).
    IF node IS NOT INITIAL.
      node2 ?= node->find_from_name( name = 'nvPicPr' namespace = 'xdr' ).
      CHECK node2 IS NOT INITIAL.
      node3 ?= node2->find_from_name( name = 'cNvPr' namespace = 'xdr' ).
      CHECK node3 IS NOT INITIAL.
      me->fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = cnvpr ).
      lv_title = cnvpr-name.

      node2 ?= node->find_from_name( name = 'blipFill' namespace = 'xdr' ).
      CHECK node2 IS NOT INITIAL.
      node3 ?= node2->find_from_name( name = 'blip' namespace = 'a' ).
      CHECK node3 IS NOT INITIAL.
      me->fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = blip ).
      lv_relation_id = blip-embed.

      drawing_type = zcl_excel_drawing=>type_image.
    ENDIF.

    node ?= io_anchor_element->find_from_name( name = 'graphicFrame' namespace = 'xdr' ).
    IF node IS NOT INITIAL.
      node2 ?= node->find_from_name( name = 'nvGraphicFramePr' namespace = 'xdr' ).
      CHECK node2 IS NOT INITIAL.
      node3 ?= node2->find_from_name( name = 'cNvPr' namespace = 'xdr' ).
      CHECK node3 IS NOT INITIAL.
      me->fill_struct_from_attributes( EXPORTING ip_element = node3 CHANGING cp_structure = cnvpr ).
      lv_title = cnvpr-name.

      node2 ?= node->find_from_name( name = 'graphic' namespace = 'a' ).
      CHECK node2 IS NOT INITIAL.
      node3 ?= node2->find_from_name( name = 'graphicData' namespace = 'a' ).
      CHECK node3 IS NOT INITIAL.
      node4 ?= node2->find_from_name( name = 'chart' namespace = 'c' ).
      CHECK node4 IS NOT INITIAL.
      me->fill_struct_from_attributes( EXPORTING ip_element = node4 CHANGING cp_structure = chart ).
      lv_relation_id = chart-id.

      drawing_type = zcl_excel_drawing=>type_chart.
    ENDIF.

    lo_drawing = io_worksheet->excel->add_new_drawing(
                      ip_type  = drawing_type
                      ip_title = lv_title ).
    io_worksheet->add_drawing( lo_drawing ).

    lo_drawing->set_position2(
      EXPORTING
        ip_from   = ls_upper
        ip_to     = ls_lower ).

    READ TABLE it_related_drawings INTO rel_drawing
          WITH KEY id = lv_relation_id.

    lo_drawing->set_media(
      EXPORTING
        ip_media = rel_drawing-content
        ip_media_type = rel_drawing-file_ext
        ip_width = ls_size-width
        ip_height = ls_size-height ).

    IF drawing_type = zcl_excel_drawing=>type_chart.
*  Begin fix for Issue #551
      DATA: lo_tmp_node_2                TYPE REF TO if_ixml_element.
      lo_tmp_node_2 ?= rel_drawing-content_xml->find_from_name( name = 'pieChart' namespace = 'c' ).
      IF lo_tmp_node_2 IS NOT INITIAL.
        lo_drawing->graph_type = zcl_excel_drawing=>c_graph_pie.
      ELSE.
        lo_tmp_node_2 ?= rel_drawing-content_xml->find_from_name( name = 'barChart' namespace = 'c' ).
        IF lo_tmp_node_2 IS NOT INITIAL.
          lo_drawing->graph_type = zcl_excel_drawing=>c_graph_bars.
        ELSE.
          lo_tmp_node_2 ?= rel_drawing-content_xml->find_from_name( name = 'lineChart' namespace = 'c' ).
          IF lo_tmp_node_2 IS NOT INITIAL.
            lo_drawing->graph_type = zcl_excel_drawing=>c_graph_line.
          ENDIF.
        ENDIF.
      ENDIF.
* End fix for issue #551
      "-------------Added by Alessandro Iannacci - Should load chart attributes
      lo_drawing->load_chart_attributes( rel_drawing-content_xml ).
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_DXF_STYLES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PATH                        TYPE        STRING
* | [--->] IO_EXCEL                       TYPE REF TO ZCL_EXCEL
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_dxf_styles.

    DATA:        lo_styles_xml   TYPE REF TO if_ixml_document,
                 lo_node_dxfs    TYPE REF TO if_ixml_element,

                 lo_nodes_dxf    TYPE REF TO if_ixml_node_collection,
                 lo_iterator_dxf TYPE REF TO if_ixml_node_iterator,
                 lo_node_dxf     TYPE REF TO if_ixml_element,

                 lv_dxf_count    TYPE i.

    FIELD-SYMBOLS: <ls_dxf_style> LIKE LINE OF mt_dxf_styles.

*--------------------------------------------------------------------*
* Look for dxfs-node
*--------------------------------------------------------------------*
    lo_styles_xml = me->get_ixml_from_zip_archive( iv_path ).
    lo_node_dxfs  = lo_styles_xml->find_from_name( 'dxfs' ).
    CHECK lo_node_dxfs IS BOUND.


*--------------------------------------------------------------------*
* loop through all dxf-nodes and create style for each
*--------------------------------------------------------------------*
    lo_nodes_dxf ?= lo_node_dxfs->get_elements_by_tag_name( 'dxf' ).
    lo_iterator_dxf = lo_nodes_dxf->create_iterator( ).
    lo_node_dxf ?= lo_iterator_dxf->get_next( ).
    WHILE lo_node_dxf IS BOUND.

      APPEND INITIAL LINE TO mt_dxf_styles ASSIGNING <ls_dxf_style>.
      <ls_dxf_style>-dxf = lv_dxf_count. " We start counting at 0
      ADD 1 TO lv_dxf_count.             " prepare next entry

      <ls_dxf_style>-guid = get_dxf_style_guid( io_ixml_dxf = lo_node_dxf
                                                io_excel    = io_excel ).
      lo_node_dxf ?= lo_iterator_dxf->get_next( ).

    ENDWHILE.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_SHARED_STRINGS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_PATH                        TYPE        STRING
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_shared_strings.
*--------------------------------------------------------------------*
* ToDos:
*        2do§1   Support partial formatting of strings in cells
*--------------------------------------------------------------------*

*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,      (done)              2012-11-11
*              - ...
* changes: renaming variables to naming conventions
*          renaming variables to indicate what they are used for
*          aligning code
*          adding comments to explain what we are trying to achieve
*          rewriting code for better readibility
*--------------------------------------------------------------------*



    DATA:
      lo_shared_strings_xml TYPE REF TO if_ixml_document,
      lo_node_si            TYPE REF TO if_ixml_element,
      lo_node_si_child      TYPE REF TO if_ixml_element,
      lo_node_r_child_t     TYPE REF TO if_ixml_element,
      lv_tag_name           TYPE string,
      lv_node_value         TYPE string.

    FIELD-SYMBOLS: <lv_shared_string>           LIKE LINE OF me->shared_strings.

*--------------------------------------------------------------------*

* §1  Parse shared strings file and get into internal table
*   So far I have encountered 2 ways how a string can be represented in the shared strings file
*   §1.1 - "simple" strings
*   §1.2 - rich text formatted strings

*     Following is an example how this file could be set up; 2 strings in simple formatting, 3rd string rich textformatted


*        <?xml version="1.0" encoding="UTF-8" standalone="true"?>
*        <sst uniqueCount="6" count="6" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">
*            <si>
*                <t>This is a teststring 1</t>
*            </si>
*            <si>
*                <t>This is a teststring 2</t>
*            </si>
*            <si>
*                <r>
*                  <t>T</t>
*                </r>
*                <r>
*                    <rPr>
*                        <sz val="11"/>
*                        <color rgb="FFFF0000"/>
*                        <rFont val="Calibri"/>
*                        <family val="2"/>
*                        <scheme val="minor"/>
*                    </rPr>
*                    <t xml:space="preserve">his is a </t>
*                </r>
*                <r>
*                    <rPr>
*                        <sz val="11"/>
*                        <color theme="1"/>
*                        <rFont val="Calibri"/>
*                        <family val="2"/>
*                        <scheme val="minor"/>
*                    </rPr>
*                    <t>teststring 3</t>
*                </r>
*            </si>
*        </sst>
*--------------------------------------------------------------------*

    lo_shared_strings_xml = me->get_ixml_from_zip_archive( i_filename     = ip_path
                                                           is_normalizing = space ).  " NO!!! normalizing - otherwise leading blanks will be omitted and that is not really desired for the stringtable
    lo_node_si ?= lo_shared_strings_xml->find_from_name( 'si' ).
    WHILE lo_node_si IS BOUND.

      APPEND INITIAL LINE TO me->shared_strings ASSIGNING <lv_shared_string>.            " Each <si>-entry in the xml-file must lead to an entry in our stringtable
      lo_node_si_child ?= lo_node_si->get_first_child( ).
      IF lo_node_si_child IS BOUND.
        lv_tag_name = lo_node_si_child->get_name( ).
        IF lv_tag_name = 't'.
*--------------------------------------------------------------------*
*   §1.1 - "simple" strings
*                Example:  see above
*--------------------------------------------------------------------*
          <lv_shared_string> = lo_node_si_child->get_value( ).
        ELSE.
*--------------------------------------------------------------------*
*   §1.2 - rich text formatted strings
*       it is sufficient to strip the <t>...</t> tag from each <r>-tag and concatenate these
*       as long as rich text formatting is not supported (2do§1) ignore all info about formatting
*                Example:  see above
*--------------------------------------------------------------------*
          WHILE lo_node_si_child IS BOUND.                                             " actually these children of <si> are <r>-tags

            lo_node_r_child_t ?= lo_node_si_child->find_from_name( 't' ).              " extract the <t>...</t> part of each <r>-tag
            IF lo_node_r_child_t IS BOUND.
              lv_node_value = lo_node_r_child_t->get_value( ).
              CONCATENATE <lv_shared_string> lv_node_value INTO <lv_shared_string> RESPECTING BLANKS.
            ENDIF.

            lo_node_si_child ?= lo_node_si_child->get_next( ).

          ENDWHILE.
        ENDIF.
      ENDIF.

      lo_node_si ?= lo_node_si->get_next( ).
    ENDWHILE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_STYLES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_PATH                        TYPE        STRING
* | [--->] IP_EXCEL                       TYPE REF TO ZCL_EXCEL
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_styles.

*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,      (wip )              2012-11-25
*              - ...
* changes: renaming variables and types to naming conventions
*          aligning code
*          adding comments to explain what we are trying to achieve
*--------------------------------------------------------------------*
    TYPES:  BEGIN OF lty_xf,
              applyalignment    TYPE string,
              applyborder       TYPE string,
              applyfill         TYPE string,
              applyfont         TYPE string,
              applynumberformat TYPE string,
              applyprotection   TYPE string,
              borderid          TYPE string,
              fillid            TYPE string,
              fontid            TYPE string,
              numfmtid          TYPE string,
              pivotbutton       TYPE string,
              quoteprefix       TYPE string,
              xfid              TYPE string,
            END OF lty_xf.

    TYPES:  BEGIN OF lty_alignment,
              horizontal      TYPE string,
              indent          TYPE string,
              justifylastline TYPE string,
              readingorder    TYPE string,
              relativeindent  TYPE string,
              shrinktofit     TYPE string,
              textrotation    TYPE string,
              vertical        TYPE string,
              wraptext        TYPE string,
            END OF lty_alignment.

    TYPES:  BEGIN OF lty_protection,
              hidden TYPE string,
              locked TYPE string,
            END OF lty_protection.

    DATA:       lo_styles_xml                 TYPE REF TO if_ixml_document,
                lo_style                      TYPE REF TO zcl_excel_style,

                lt_num_formats                TYPE zcl_excel_style_number_format=>t_num_formats,
                lt_fills                      TYPE t_fills,
                lt_borders                    TYPE t_borders,
                lt_fonts                      TYPE t_fonts,

                ls_num_format                 TYPE zcl_excel_style_number_format=>t_num_format,
                ls_fill                       TYPE REF TO zcl_excel_style_fill,
                ls_cell_border                TYPE REF TO zcl_excel_style_borders,
                ls_font                       TYPE REF TO zcl_excel_style_font,

                lo_node_cellxfs               TYPE REF TO if_ixml_element,
                lo_node_cellxfs_xf            TYPE REF TO if_ixml_element,
                lo_node_cellxfs_xf_alignment  TYPE REF TO if_ixml_element,
                lo_node_cellxfs_xf_protection TYPE REF TO if_ixml_element,

                lo_nodes_xf                   TYPE REF TO if_ixml_node_collection,
                lo_iterator_cellxfs           TYPE REF TO if_ixml_node_iterator,

                ls_xf                         TYPE lty_xf,
                ls_alignment                  TYPE lty_alignment,
                ls_protection                 TYPE lty_protection,
                lv_index                      TYPE i.

*--------------------------------------------------------------------*
* To build a complete style that fully describes how a cell looks like
* we need the various parts
* §1 - Numberformat
* §2 - Fillstyle
* §3 - Borders
* §4 - Font
* §5 - Alignment
* §6 - Protection

*          Following is an example how this part of a file could be set up
*              ...
*              parts with various formatinformation - see §1,§2,§3,§4
*              ...
*          <cellXfs count="26">
*              <xf numFmtId="0" borderId="0" fillId="0" fontId="0" xfId="0"/>
*              <xf numFmtId="0" borderId="0" fillId="2" fontId="0" xfId="0" applyFill="1"/>
*              <xf numFmtId="0" borderId="1" fillId="3" fontId="0" xfId="0" applyFill="1" applyBorder="1"/>
*              <xf numFmtId="0" borderId="2" fillId="3" fontId="0" xfId="0" applyFill="1" applyBorder="1"/>
*              <xf numFmtId="0" borderId="3" fillId="3" fontId="0" xfId="0" applyFill="1" applyBorder="1"/>
*              <xf numFmtId="0" borderId="4" fillId="3" fontId="0" xfId="0" applyFill="1" applyBorder="1"/>
*              <xf numFmtId="0" borderId="0" fillId="3" fontId="0" xfId="0" applyFill="1" applyBorder="1"/>
*              ...
*          </cellXfs>
*--------------------------------------------------------------------*

    lo_styles_xml = me->get_ixml_from_zip_archive( ip_path ).

*--------------------------------------------------------------------*
* The styles are build up from
* §1 number formats
* §2 fill styles
* §3 border styles
* §4 fonts
* These need to be read before we can try to build up a complete
* style that describes the look of a cell
*--------------------------------------------------------------------*
    lt_num_formats   = load_style_num_formats( lo_styles_xml ).   " §1
    lt_fills         = load_style_fills( lo_styles_xml ).         " §2
    lt_borders       = load_style_borders( lo_styles_xml ).       " §3
    lt_fonts         = load_style_fonts( lo_styles_xml ).         " §4

*--------------------------------------------------------------------*
* Now everything is prepared to build a "full" style
*--------------------------------------------------------------------*
    lo_node_cellxfs  = lo_styles_xml->find_from_name( name = 'cellXfs' ).
    IF lo_node_cellxfs IS BOUND.
      lo_nodes_xf         = lo_node_cellxfs->get_elements_by_tag_name( name = 'xf' ).
      lo_iterator_cellxfs = lo_nodes_xf->create_iterator( ).
      lo_node_cellxfs_xf ?= lo_iterator_cellxfs->get_next( ).
      WHILE lo_node_cellxfs_xf IS BOUND.

        lo_style = ip_excel->add_new_style( ).
        fill_struct_from_attributes( EXPORTING
                                       ip_element   =  lo_node_cellxfs_xf
                                     CHANGING
                                       cp_structure = ls_xf ).
*--------------------------------------------------------------------*
* §2 fill style
*--------------------------------------------------------------------*
        IF ls_xf-applyfill = '1' AND ls_xf-fillid IS NOT INITIAL.
          lv_index = ls_xf-fillid + 1.
          READ TABLE lt_fills INTO ls_fill INDEX lv_index.
          IF sy-subrc = 0.
            lo_style->fill = ls_fill.
          ENDIF.
        ENDIF.

*--------------------------------------------------------------------*
* §1 number format
*--------------------------------------------------------------------*
        IF ls_xf-numfmtid IS NOT INITIAL.
          READ TABLE lt_num_formats INTO ls_num_format WITH TABLE KEY id = ls_xf-numfmtid.
          IF sy-subrc = 0.
            lo_style->number_format = ls_num_format-format.
          ENDIF.
        ENDIF.

*--------------------------------------------------------------------*
* §3 border style
*--------------------------------------------------------------------*
        IF ls_xf-applyborder = '1' AND ls_xf-borderid IS NOT INITIAL.
          lv_index = ls_xf-borderid + 1.
          READ TABLE lt_borders INTO ls_cell_border INDEX lv_index.
          IF sy-subrc = 0.
            lo_style->borders = ls_cell_border.
          ENDIF.
        ENDIF.

*--------------------------------------------------------------------*
* §4 font
*--------------------------------------------------------------------*
        IF ls_xf-applyfont = '1' AND ls_xf-fontid IS NOT INITIAL.
          lv_index = ls_xf-fontid + 1.
          READ TABLE lt_fonts INTO ls_font INDEX lv_index.
          IF sy-subrc = 0.
            lo_style->font = ls_font.
          ENDIF.
        ENDIF.

*--------------------------------------------------------------------*
* §5 - Alignment
*--------------------------------------------------------------------*
        lo_node_cellxfs_xf_alignment ?= lo_node_cellxfs_xf->find_from_name( 'alignment' ).
        IF lo_node_cellxfs_xf_alignment IS BOUND.
          fill_struct_from_attributes( EXPORTING
                                         ip_element   =  lo_node_cellxfs_xf_alignment
                                       CHANGING
                                         cp_structure = ls_alignment ).
          IF ls_alignment-horizontal IS NOT INITIAL.
            lo_style->alignment->horizontal = ls_alignment-horizontal.
          ENDIF.

          IF ls_alignment-vertical IS NOT INITIAL.
            lo_style->alignment->vertical = ls_alignment-vertical.
          ENDIF.

          IF ls_alignment-textrotation IS NOT INITIAL.
            lo_style->alignment->textrotation = ls_alignment-textrotation.
          ENDIF.

          IF ls_alignment-wraptext = '1' OR ls_alignment-wraptext = 'true'.
            lo_style->alignment->wraptext = abap_true.
          ENDIF.

          IF ls_alignment-shrinktofit = '1' OR ls_alignment-shrinktofit = 'true'.
            lo_style->alignment->shrinktofit = abap_true.
          ENDIF.

          IF ls_alignment-indent IS NOT INITIAL.
            lo_style->alignment->indent = ls_alignment-indent.
          ENDIF.
        ENDIF.

*--------------------------------------------------------------------*
* §6 - Protection
*--------------------------------------------------------------------*
        lo_node_cellxfs_xf_protection ?= lo_node_cellxfs_xf->find_from_name( 'protection' ).
        IF lo_node_cellxfs_xf_protection IS BOUND.
          fill_struct_from_attributes( EXPORTING
                                         ip_element   = lo_node_cellxfs_xf_protection
                                       CHANGING
                                         cp_structure = ls_protection ).
          IF ls_protection-locked = '1' OR ls_protection-locked = 'true'.
            lo_style->protection->locked = zcl_excel_style_protection=>c_protection_locked.
          ELSE.
            lo_style->protection->locked = zcl_excel_style_protection=>c_protection_unlocked.
          ENDIF.

          IF ls_protection-hidden = '1' OR ls_protection-hidden = 'true'.
            lo_style->protection->hidden = zcl_excel_style_protection=>c_protection_hidden.
          ELSE.
            lo_style->protection->hidden = zcl_excel_style_protection=>c_protection_unhidden.
          ENDIF.

        ENDIF.

        INSERT lo_style INTO TABLE me->styles.

        lo_node_cellxfs_xf ?= lo_iterator_cellxfs->get_next( ).

      ENDWHILE.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_STYLE_BORDERS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_XML                         TYPE REF TO IF_IXML_DOCUMENT
* | [<-()] EP_BORDERS                     TYPE        T_BORDERS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_style_borders.

*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,      (done)              2012-11-25
*              - ...
* changes: renaming variables and types to naming conventions
*          aligning code
*          renaming variables to indicate what they are used for
*          adding comments to explain what we are trying to achieve
*--------------------------------------------------------------------*
    DATA:       lo_node_border      TYPE REF TO if_ixml_element,
                lo_node_bordertype  TYPE REF TO if_ixml_element,
                lo_node_bordercolor TYPE REF TO if_ixml_element,
                lo_cell_border      TYPE REF TO zcl_excel_style_borders,
                lo_border           TYPE REF TO zcl_excel_style_border,
                ls_color            TYPE t_color.

*--------------------------------------------------------------------*
* We need a table of used borderformats to build up our styles
* §1    A cell has 4 outer borders and 2 diagonal "borders"
*       These borders can be formatted separately but the diagonal borders
*       are always being formatted the same
*       We'll parse through the <border>-tag for each of the bordertypes
* §2    and read the corresponding formatting information

*          Following is an example how this part of a file could be set up
*          <border diagonalDown="1">
*              <left style="mediumDashDotDot">
*                  <color rgb="FFFF0000"/>
*              </left>
*              <right/>
*              <top style="thick">
*                  <color rgb="FFFF0000"/>
*              </top>
*              <bottom style="thick">
*                  <color rgb="FFFF0000"/>
*              </bottom>
*              <diagonal style="thick">
*                  <color rgb="FFFF0000"/>
*              </diagonal>
*          </border>
*--------------------------------------------------------------------*
    lo_node_border ?= ip_xml->find_from_name( 'border' ).
    WHILE lo_node_border IS BOUND.

      CREATE OBJECT lo_cell_border.

*--------------------------------------------------------------------*
* Diagonal borderlines are formatted the equally.  Determine what kind of diagonal borders are present if any
*--------------------------------------------------------------------*
* DiagonalNone = 0
* DiagonalUp   = 1
* DiagonalDown = 2
* DiagonalBoth = 3
*--------------------------------------------------------------------*
      IF lo_node_border->get_attribute( 'diagonalDown' ) IS NOT INITIAL.
        ADD zcl_excel_style_borders=>c_diagonal_down TO lo_cell_border->diagonal_mode.
      ENDIF.

      IF lo_node_border->get_attribute( 'diagonalUp' ) IS NOT INITIAL.
        ADD zcl_excel_style_borders=>c_diagonal_up TO lo_cell_border->diagonal_mode.
      ENDIF.

      lo_node_bordertype ?= lo_node_border->get_first_child( ).
      WHILE lo_node_bordertype IS BOUND.
*--------------------------------------------------------------------*
* §1 Determine what kind of border we are talking about
*--------------------------------------------------------------------*
* Up, down, left, right, diagonal
*--------------------------------------------------------------------*
        CREATE OBJECT lo_border.

        CASE lo_node_bordertype->get_name( ).

          WHEN 'left'.
            lo_cell_border->left = lo_border.

          WHEN 'right'.
            lo_cell_border->right = lo_border.

          WHEN 'top'.
            lo_cell_border->top = lo_border.

          WHEN 'bottom'.
            lo_cell_border->down = lo_border.

          WHEN 'diagonal'.
            lo_cell_border->diagonal = lo_border.

        ENDCASE.

*--------------------------------------------------------------------*
* §2 Read the border-formatting
*--------------------------------------------------------------------*
        lo_border->border_style = lo_node_bordertype->get_attribute( 'style' ).
        lo_node_bordercolor ?= lo_node_bordertype->find_from_name( 'color' ).
        IF lo_node_bordercolor IS BOUND.
          fill_struct_from_attributes( EXPORTING
                                         ip_element   =  lo_node_bordercolor
                                       CHANGING
                                         cp_structure = ls_color ).

          lo_border->border_color-rgb = ls_color-rgb.
          IF ls_color-indexed IS NOT INITIAL.
            lo_border->border_color-indexed = ls_color-indexed.
          ENDIF.

          IF ls_color-theme IS NOT INITIAL.
            lo_border->border_color-theme = ls_color-theme.
          ENDIF.
          lo_border->border_color-tint = ls_color-tint.
        ENDIF.

        lo_node_bordertype ?= lo_node_bordertype->get_next( ).

      ENDWHILE.

      INSERT lo_cell_border INTO TABLE ep_borders.

      lo_node_border ?= lo_node_border->get_next( ).

    ENDWHILE.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_STYLE_FILLS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_XML                         TYPE REF TO IF_IXML_DOCUMENT
* | [<-()] EP_FILLS                       TYPE        T_FILLS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_style_fills.
*--------------------------------------------------------------------*
* ToDos:
*        2do§1   Support gradientFill
*--------------------------------------------------------------------*

*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,      (done)              2012-11-25
*              - ...
* changes: renaming variables and types to naming conventions
*          aligning code
*          commenting on problems/future enhancements/todos we already know of or should decide upon
*          adding comments to explain what we are trying to achieve
*          renaming variables to indicate what they are used for
*--------------------------------------------------------------------*
    DATA:    lv_value           TYPE string,
             lo_node_fill       TYPE REF TO if_ixml_element,
             lo_node_fill_child TYPE REF TO if_ixml_element,
             lo_node_bgcolor    TYPE REF TO if_ixml_element,
             lo_node_fgcolor    TYPE REF TO if_ixml_element,
             lo_node_stop       TYPE REF TO if_ixml_element,
             lo_fill            TYPE REF TO zcl_excel_style_fill,
             ls_color           TYPE t_color.

*--------------------------------------------------------------------*
* We need a table of used fillformats to build up our styles

*          Following is an example how this part of a file could be set up
*          <fill>
*              <patternFill patternType="gray125"/>
*          </fill>
*          <fill>
*              <patternFill patternType="solid">
*                  <fgColor rgb="FFFFFF00"/>
*                  <bgColor indexed="64"/>
*              </patternFill>
*          </fill>
*--------------------------------------------------------------------*

    lo_node_fill ?= ip_xml->find_from_name( 'fill' ).
    WHILE lo_node_fill IS BOUND.

      CREATE OBJECT lo_fill.
      lo_node_fill_child ?= lo_node_fill->get_first_child( ).
      lv_value            = lo_node_fill_child->get_name( ).
      CASE lv_value.

*--------------------------------------------------------------------*
* Patternfill
*--------------------------------------------------------------------*
        WHEN 'patternFill'.
          lo_fill->filltype = lo_node_fill_child->get_attribute( 'patternType' ).
*--------------------------------------------------------------------*
* Patternfill - background color
*--------------------------------------------------------------------*
          lo_node_bgcolor = lo_node_fill_child->find_from_name( 'bgColor' ).
          IF lo_node_bgcolor IS BOUND.
            fill_struct_from_attributes( EXPORTING
                                           ip_element   = lo_node_bgcolor
                                         CHANGING
                                           cp_structure = ls_color ).

            lo_fill->bgcolor-rgb = ls_color-rgb.
            IF ls_color-indexed IS NOT INITIAL.
              lo_fill->bgcolor-indexed = ls_color-indexed.
            ENDIF.

            IF ls_color-theme IS NOT INITIAL.
              lo_fill->bgcolor-theme = ls_color-theme.
            ENDIF.
            lo_fill->bgcolor-tint = ls_color-tint.
          ENDIF.

*--------------------------------------------------------------------*
* Patternfill - foreground color
*--------------------------------------------------------------------*
          lo_node_fgcolor = lo_node_fill->find_from_name( 'fgColor' ).
          IF lo_node_fgcolor IS BOUND.
            fill_struct_from_attributes( EXPORTING
                                           ip_element   = lo_node_fgcolor
                                         CHANGING
                                           cp_structure = ls_color ).

            lo_fill->fgcolor-rgb = ls_color-rgb.
            IF ls_color-indexed IS NOT INITIAL.
              lo_fill->fgcolor-indexed = ls_color-indexed.
            ENDIF.

            IF ls_color-theme IS NOT INITIAL.
              lo_fill->fgcolor-theme = ls_color-theme.
            ENDIF.
            lo_fill->fgcolor-tint = ls_color-tint.
          ENDIF.


*--------------------------------------------------------------------*
* gradientFill
*--------------------------------------------------------------------*
        WHEN 'gradientFill'.
          lo_fill->gradtype-type   = lo_node_fill_child->get_attribute( 'type' ).
          lo_fill->gradtype-top    = lo_node_fill_child->get_attribute( 'top' ).
          lo_fill->gradtype-left   = lo_node_fill_child->get_attribute( 'left' ).
          lo_fill->gradtype-right  = lo_node_fill_child->get_attribute( 'right' ).
          lo_fill->gradtype-bottom = lo_node_fill_child->get_attribute( 'bottom' ).
          lo_fill->gradtype-degree = lo_node_fill_child->get_attribute( 'degree' ).
          FREE lo_node_stop.
          lo_node_stop ?= lo_node_fill_child->find_from_name( 'stop' ).
          WHILE lo_node_stop IS BOUND.
            IF lo_fill->gradtype-position1 IS INITIAL.
              lo_fill->gradtype-position1 = lo_node_stop->get_attribute( 'position' ).
              lo_node_bgcolor = lo_node_stop->find_from_name( 'color' ).
              IF lo_node_bgcolor IS BOUND.
                fill_struct_from_attributes( EXPORTING
                                                ip_element   = lo_node_bgcolor
                                              CHANGING
                                                cp_structure = ls_color ).

                lo_fill->bgcolor-rgb = ls_color-rgb.
                IF ls_color-indexed IS NOT INITIAL.
                  lo_fill->bgcolor-indexed = ls_color-indexed.
                ENDIF.

                IF ls_color-theme IS NOT INITIAL.
                  lo_fill->bgcolor-theme = ls_color-theme.
                ENDIF.
                lo_fill->bgcolor-tint = ls_color-tint.
              ENDIF.
            ELSEIF lo_fill->gradtype-position2 IS INITIAL.
              lo_fill->gradtype-position2 = lo_node_stop->get_attribute( 'position' ).
              lo_node_fgcolor = lo_node_stop->find_from_name( 'color' ).
              IF lo_node_fgcolor IS BOUND.
                fill_struct_from_attributes( EXPORTING
                                               ip_element   = lo_node_fgcolor
                                             CHANGING
                                               cp_structure = ls_color ).

                lo_fill->fgcolor-rgb = ls_color-rgb.
                IF ls_color-indexed IS NOT INITIAL.
                  lo_fill->fgcolor-indexed = ls_color-indexed.
                ENDIF.

                IF ls_color-theme IS NOT INITIAL.
                  lo_fill->fgcolor-theme = ls_color-theme.
                ENDIF.
                lo_fill->fgcolor-tint = ls_color-tint.
              ENDIF.
            ELSEIF lo_fill->gradtype-position3 IS INITIAL.
              lo_fill->gradtype-position3 = lo_node_stop->get_attribute( 'position' ).
              "BGColor is filled already with position 1 no need to check again
            ENDIF.

            lo_node_stop ?= lo_node_stop->get_next( ).
          ENDWHILE.

        WHEN OTHERS.

      ENDCASE.


      INSERT lo_fill INTO TABLE ep_fills.

      lo_node_fill ?= lo_node_fill->get_next( ).

    ENDWHILE.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_STYLE_FONTS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_XML                         TYPE REF TO IF_IXML_DOCUMENT
* | [<-()] EP_FONTS                       TYPE        T_FONTS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_style_fonts.

*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,      (done)              2012-11-25
*              - ...
* changes: renaming variables and types to naming conventions
*          aligning code
*          removing unused variables
*          adding comments to explain what we are trying to achieve
*--------------------------------------------------------------------*
    DATA:       lo_node_font TYPE REF TO if_ixml_element,
                lo_node2     TYPE REF TO if_ixml_element,
                lo_font      TYPE REF TO zcl_excel_style_font,
                ls_color     TYPE t_color.

*--------------------------------------------------------------------*
* We need a table of used fonts to build up our styles

*          Following is an example how this part of a file could be set up
*          <font>
*              <sz val="11"/>
*              <color theme="1"/>
*              <name val="Calibri"/>
*              <family val="2"/>
*              <scheme val="minor"/>
*          </font>
*--------------------------------------------------------------------*
    lo_node_font ?= ip_xml->find_from_name( 'font' ).
    WHILE lo_node_font IS BOUND.

      CREATE OBJECT lo_font.
*--------------------------------------------------------------------*
*   Bold
*--------------------------------------------------------------------*
      IF lo_node_font->find_from_name( 'b' ) IS BOUND.
        lo_font->bold = abap_true.
      ENDIF.

*--------------------------------------------------------------------*
*   Italic
*--------------------------------------------------------------------*
      IF lo_node_font->find_from_name( 'i' ) IS BOUND.
        lo_font->italic = abap_true.
      ENDIF.

*--------------------------------------------------------------------*
*   Underline
*--------------------------------------------------------------------*
      lo_node2 = lo_node_font->find_from_name( 'u' ).
      IF lo_node2 IS BOUND.
        lo_font->underline      = abap_true.
        lo_font->underline_mode = lo_node2->get_attribute( 'val' ).
      ENDIF.

*--------------------------------------------------------------------*
*   StrikeThrough
*--------------------------------------------------------------------*
      IF lo_node_font->find_from_name( 'strike' ) IS BOUND.
        lo_font->strikethrough = abap_true.
      ENDIF.

*--------------------------------------------------------------------*
*   Fontsize
*--------------------------------------------------------------------*
      lo_node2 = lo_node_font->find_from_name( 'sz' ).
      IF lo_node2 IS BOUND.
        lo_font->size = lo_node2->get_attribute( 'val' ).
      ENDIF.

*--------------------------------------------------------------------*
*   Fontname
*--------------------------------------------------------------------*
      lo_node2 = lo_node_font->find_from_name( 'name' ).
      IF lo_node2 IS BOUND.
        lo_font->name = lo_node2->get_attribute( 'val' ).
      ENDIF.

*--------------------------------------------------------------------*
*   Fontfamily
*--------------------------------------------------------------------*
      lo_node2 = lo_node_font->find_from_name( 'family' ).
      IF lo_node2 IS BOUND.
        lo_font->family = lo_node2->get_attribute( 'val' ).
      ENDIF.

*--------------------------------------------------------------------*
*   Fontscheme
*--------------------------------------------------------------------*
      lo_node2 = lo_node_font->find_from_name( 'scheme' ).
      IF lo_node2 IS BOUND.
        lo_font->scheme = lo_node2->get_attribute( 'val' ).
      ELSE.
        CLEAR lo_font->scheme.
      ENDIF.

*--------------------------------------------------------------------*
*   Fontcolor
*--------------------------------------------------------------------*
      lo_node2 = lo_node_font->find_from_name( 'color' ).
      IF lo_node2 IS BOUND.
        fill_struct_from_attributes( EXPORTING
                                       ip_element   =  lo_node2
                                     CHANGING
                                       cp_structure = ls_color ).
        lo_font->color-rgb = ls_color-rgb.
        IF ls_color-indexed IS NOT INITIAL.
          lo_font->color-indexed = ls_color-indexed.
        ENDIF.

        IF ls_color-theme IS NOT INITIAL.
          lo_font->color-theme = ls_color-theme.
        ENDIF.
        lo_font->color-tint = ls_color-tint.
      ENDIF.

      INSERT lo_font INTO TABLE ep_fonts.

      lo_node_font ?= lo_node_font->get_next( ).

    ENDWHILE.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_STYLE_NUM_FORMATS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_XML                         TYPE REF TO IF_IXML_DOCUMENT
* | [<-()] EP_NUM_FORMATS                 TYPE        ZCL_EXCEL_STYLE_NUMBER_FORMAT=>T_NUM_FORMATS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_style_num_formats.
*--------------------------------------------------------------------*
* ToDos:
*        2do§1   Explain gaps in predefined formats
*--------------------------------------------------------------------*

*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,      (done)              2012-11-25
*              - ...
* changes: renaming variables and types to naming conventions
*          adding comments to explain what we are trying to achieve
*          aligning code
*--------------------------------------------------------------------*
    DATA:       lo_node_numfmt TYPE REF TO if_ixml_element,
                ls_num_format  TYPE zcl_excel_style_number_format=>t_num_format.

*--------------------------------------------------------------------*
* We need a table of used numberformats to build up our styles
* there are two kinds of numberformats
* §1 built-in numberformats
* §2 and those that have been explicitly added by the createor of the excel-file
*--------------------------------------------------------------------*

*--------------------------------------------------------------------*
* §1 built-in numberformats
*--------------------------------------------------------------------*
    ep_num_formats = zcl_excel_style_number_format=>mt_built_in_num_formats.

*--------------------------------------------------------------------*
* §2   Get non-internal numberformats that are found in the file explicitly

*         Following is an example how this part of a file could be set up
*         <numFmts count="1">
*             <numFmt formatCode="#,###,###,###,##0.00" numFmtId="164"/>
*         </numFmts>
*--------------------------------------------------------------------*
    lo_node_numfmt ?= ip_xml->find_from_name( 'numFmt' ).
    WHILE lo_node_numfmt IS BOUND.

      CLEAR ls_num_format.

      CREATE OBJECT ls_num_format-format.
      ls_num_format-format->format_code = lo_node_numfmt->get_attribute( 'formatCode' ).
      ls_num_format-id                  = lo_node_numfmt->get_attribute( 'numFmtId' ).
      INSERT ls_num_format INTO TABLE ep_num_formats.

      lo_node_numfmt                          ?= lo_node_numfmt->get_next( ).

    ENDWHILE.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_THEME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PATH                        TYPE        STRING
* | [--->] IP_EXCEL                       TYPE REF TO ZCL_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_theme.
    DATA theme TYPE REF TO zcl_excel_theme.
    DATA: lo_theme_xml TYPE REF TO if_ixml_document.
    CREATE OBJECT theme.
    lo_theme_xml = me->get_ixml_from_zip_archive( iv_path ).
    theme->read_theme( io_theme_xml = lo_theme_xml  ).
    ip_excel->set_theme( io_theme = theme ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_WORKBOOK
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_WORKBOOK_FULL_FILENAME      TYPE        STRING
* | [--->] IO_EXCEL                       TYPE REF TO ZCL_EXCEL
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_workbook.
*--------------------------------------------------------------------*
* ToDos:
*        2do§1   Move macro-reading from zcl_excel_reader_xlsm to this class
*                autodetect existance of macro/vba content
*                Allow inputparameter to explicitly tell reader to ignore vba-content
*--------------------------------------------------------------------*

*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,      (done)              2012-11-10
*              - ...
* changes: renaming variables to naming conventions
*          aligning code
*          removing unused variables
*          adding me-> where possible
*          renaming variables to indicate what they are used for
*          adding comments to explain what we are trying to achieve
*          renaming i/o parameters:  previous input-parameter ip_path  holds a (full) filename and not a path   --> rename to iv_workbook_full_filename
*                                                             ip_excel renamed while being at it                --> rename to io_excel
*--------------------------------------------------------------------*
* issue #232   - Read worksheetstate hidden/veryHidden
*              - Stefan Schmoecker,                          2012-11-11
*--------------------------------------------------------------------*
* issue#235 - repeat rows/columns
*           - Stefan Schmoecker,                             2012-12-02
* changes:    correction in named ranges to correctly attach
*             sheetlocal names/ranges to the correct sheet
*--------------------------------------------------------------------*
* issue#284 - Copied formulae ignored when reading excelfile
*           - Stefan Schmoecker,                             2013-08-02
* changes:    initialize area to hold referenced formulaedata
*             after all worksheets have been read resolve formuae
*--------------------------------------------------------------------*

    CONSTANTS:  lcv_shared_strings             TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings',
                lcv_worksheet                  TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet',
                lcv_styles                     TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',
                lcv_vba_project                TYPE string VALUE 'http://schemas.microsoft.com/office/2006/relationships/vbaProject', "#EC NEEDED     for future incorporation of XLSM-reader
                lcv_theme                      TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme',
*--------------------------------------------------------------------*
* #232: Read worksheetstate hidden/veryHidden - begin data declarations
*--------------------------------------------------------------------*
                lcv_worksheet_state_hidden     TYPE string VALUE 'hidden',
                lcv_worksheet_state_veryhidden TYPE string VALUE 'veryHidden'.
*--------------------------------------------------------------------*
* #232: Read worksheetstate hidden/veryHidden - end data declarations
*--------------------------------------------------------------------*

    DATA:
      lv_path                    TYPE string,
      lv_filename                TYPE chkfile,
      lv_full_filename           TYPE string,

      lo_rels_workbook           TYPE REF TO if_ixml_document,
      lt_worksheets              TYPE STANDARD TABLE OF t_relationship WITH NON-UNIQUE DEFAULT KEY,
      lo_workbook                TYPE REF TO if_ixml_document,
      lv_workbook_index          TYPE i,
      lv_worksheet_path          TYPE string,
      ls_sheet                   TYPE t_sheet,

      lo_node                    TYPE REF TO if_ixml_element,
      ls_relationship            TYPE t_relationship,
      lo_worksheet               TYPE REF TO zcl_excel_worksheet,
      lo_range                   TYPE REF TO zcl_excel_range,
      lv_worksheet_title         TYPE zexcel_sheet_title,
      lv_tabix                   TYPE sytabix,            " #235 - repeat rows/cols.  Needed to link defined name to correct worksheet

      ls_range                   TYPE t_range,
      lv_range_value             TYPE zexcel_range_value,
*--------------------------------------------------------------------*
* #229: Set active worksheet - begin data declarations
*--------------------------------------------------------------------*
      lv_active_sheet_string     TYPE string,
      lv_zexcel_active_worksheet TYPE zexcel_active_worksheet,
*--------------------------------------------------------------------*
* issue#235 - repeat rows/columns  - added autofilter support while changing this section
      lo_autofilter              TYPE REF TO zcl_excel_autofilter,
      ls_area                    TYPE zexcel_s_autofilter_area,
      lv_col_start_alpha         TYPE zexcel_cell_column_alpha,
      lv_col_end_alpha           TYPE zexcel_cell_column_alpha,
      lv_row_start               TYPE zexcel_cell_row,
      lv_row_end                 TYPE zexcel_cell_row,
      lv_regex                   TYPE string,
      lv_range_value_1           TYPE zexcel_range_value,
      lv_range_value_2           TYPE zexcel_range_value.
*--------------------------------------------------------------------*
* #229: Set active worksheet - end data declarations
*--------------------------------------------------------------------*
    FIELD-SYMBOLS: <worksheet> TYPE t_relationship.


*--------------------------------------------------------------------*

* §1  Get the position of files related to this workbook
*         Usually this will be <root>/xl/workbook.xml
*         Thus the workbookroot will be <root>/xl/
*         The position of all related files will be given in file
*         <workbookroot>/_rels/<workbookfilename>.rels and their positions
*         be be given relative to the workbookroot

*     Following is an example how this file could be set up

*        <?xml version="1.0" encoding="UTF-8" standalone="true"?>
*        <Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
*            <Relationship Target="styles.xml" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles" Id="rId6"/>
*            <Relationship Target="theme/theme1.xml" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme" Id="rId5"/>
*            <Relationship Target="worksheets/sheet1.xml" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Id="rId1"/>
*            <Relationship Target="worksheets/sheet2.xml" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Id="rId2"/>
*            <Relationship Target="worksheets/sheet3.xml" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Id="rId3"/>
*            <Relationship Target="worksheets/sheet4.xml" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Id="rId4"/>
*            <Relationship Target="sharedStrings.xml" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings" Id="rId7"/>
*        </Relationships>
*
* §2  Load data that is relevant to the complete workbook
*     Currently supported is:
*   §2.1    Shared strings  - This holds all strings that are used in all worksheets
*   §2.2    Styles          - This holds all styles that are used in all worksheets
*   §2.3    Worksheets      - For each worksheet in the workbook one entry appears here to point to the file that holds the content of this worksheet
*   §2.4    [Themes]                - not supported
*   §2.5    [VBA (Macro)]           - supported in class zcl_excel_reader_xlsm but should be moved here and autodetect
*   ...
*
* §3  Some information is held in the workbookfile as well
*   §3.1    Names and order of of worksheets
*   §3.2    Active worksheet
*   §3.3    Defined names
*   ...
*     Following is an example how this file could be set up

*        <?xml version="1.0" encoding="UTF-8" standalone="true"?>
*        <workbook xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">
*            <fileVersion rupBuild="4506" lowestEdited="4" lastEdited="4" appName="xl"/>
*            <workbookPr defaultThemeVersion="124226"/>
*            <bookViews>
*                <workbookView activeTab="1" windowHeight="8445" windowWidth="19035" yWindow="120" xWindow="120"/>
*            </bookViews>
*            <sheets>
*                <sheet r:id="rId1" sheetId="1" name="Sheet1"/>
*                <sheet r:id="rId2" sheetId="2" name="Sheet2"/>
*                <sheet r:id="rId3" sheetId="3" name="Sheet3" state="hidden"/>
*                <sheet r:id="rId4" sheetId="4" name="Sheet4"/>
*            </sheets>
*            <definedNames/>
*            <calcPr calcId="125725"/>
*        </workbook>
*--------------------------------------------------------------------*

    CLEAR me->mt_ref_formulae.                                                                              " ins issue#284

*--------------------------------------------------------------------*
* §1  Get the position of files related to this workbook
*     Entry into this method is with the filename of the workbook
*--------------------------------------------------------------------*
    CALL FUNCTION 'TRINT_SPLIT_FILE_AND_PATH'
      EXPORTING
        full_name     = iv_workbook_full_filename
      IMPORTING
        stripped_name = lv_filename
        file_path     = lv_path.

    CONCATENATE lv_path '_rels/' lv_filename '.rels'
        INTO lv_full_filename.
    lo_rels_workbook = me->get_ixml_from_zip_archive( lv_full_filename ).

    lo_node ?= lo_rels_workbook->find_from_name( 'Relationship' ). "#EC NOTEXT
    WHILE lo_node IS BOUND.

      me->fill_struct_from_attributes( EXPORTING ip_element = lo_node CHANGING cp_structure = ls_relationship ).

      CASE ls_relationship-type.

*--------------------------------------------------------------------*
*   §2.1    Shared strings  - This holds all strings that are used in all worksheets
*--------------------------------------------------------------------*
        WHEN lcv_shared_strings.
          CONCATENATE lv_path ls_relationship-target
              INTO lv_full_filename.
          me->load_shared_strings( lv_full_filename ).

*--------------------------------------------------------------------*
*   §2.3    Worksheets
*           For each worksheet in the workbook one entry appears here to point to the file that holds the content of this worksheet
*           Shared strings and styles have to be present before we can start with creating the worksheets
*           thus we only store this information for use when parsing the workbookfile for sheetinformations
*--------------------------------------------------------------------*
        WHEN lcv_worksheet.
          APPEND ls_relationship TO lt_worksheets.

*--------------------------------------------------------------------*
*   §2.2    Styles           - This holds the styles that are used in all worksheets
*--------------------------------------------------------------------*
        WHEN lcv_styles.
          CONCATENATE lv_path ls_relationship-target
              INTO lv_full_filename.
          me->load_styles( ip_path  = lv_full_filename
                           ip_excel = io_excel ).
          me->load_dxf_styles( iv_path  = lv_full_filename
                               io_excel = io_excel ).
        WHEN lcv_theme.
          CONCATENATE lv_path ls_relationship-target
              INTO lv_full_filename.
          me->load_theme(
                  EXPORTING
                    iv_path  = lv_full_filename
                    ip_excel = io_excel   " Excel creator
                    ).
        WHEN OTHERS.

      ENDCASE.

      lo_node ?= lo_node->get_next( ).

    ENDWHILE.

*--------------------------------------------------------------------*
* §3  Some information held in the workbookfile
*--------------------------------------------------------------------*
    lo_workbook = me->get_ixml_from_zip_archive( iv_workbook_full_filename ).

*--------------------------------------------------------------------*
*   §3.1    Names and order of of worksheets
*--------------------------------------------------------------------*
    lo_node           ?= lo_workbook->find_from_name( 'sheet' ).
    lv_workbook_index  = 1.
    WHILE lo_node IS BOUND.

      me->fill_struct_from_attributes( EXPORTING
                                         ip_element   = lo_node
                                       CHANGING
                                         cp_structure = ls_sheet ).
*--------------------------------------------------------------------*
*       Create new worksheet in workbook with correct name
*--------------------------------------------------------------------*
      lv_worksheet_title = ls_sheet-name.
      IF lv_workbook_index = 1.                                               " First sheet has been added automatically by creating io_excel
        lo_worksheet = io_excel->get_active_worksheet( ).
        lo_worksheet->set_title( lv_worksheet_title ).
      ELSE.
        lo_worksheet = io_excel->add_new_worksheet( lv_worksheet_title ).
      ENDIF.
*--------------------------------------------------------------------*
* #232   - Read worksheetstate hidden/veryHidden - begin of coding
*       Set status hidden if necessary
*--------------------------------------------------------------------*
      CASE ls_sheet-state.

        WHEN lcv_worksheet_state_hidden.
          lo_worksheet->zif_excel_sheet_properties~hidden = zif_excel_sheet_properties=>c_hidden.

        WHEN lcv_worksheet_state_veryhidden.
          lo_worksheet->zif_excel_sheet_properties~hidden = zif_excel_sheet_properties=>c_veryhidden.

      ENDCASE.
*--------------------------------------------------------------------*
* #232   - Read worksheetstate hidden/veryHidden - end of coding
*--------------------------------------------------------------------*
*--------------------------------------------------------------------*
*       Load worksheetdata
*--------------------------------------------------------------------*
      READ TABLE lt_worksheets ASSIGNING <worksheet> WITH KEY id = ls_sheet-id.
      IF sy-subrc = 0.
        <worksheet>-sheetid = ls_sheet-sheetid.                                "ins #235 - repeat rows/cols - needed to identify correct sheet
        CONCATENATE lv_path <worksheet>-target
            INTO lv_worksheet_path.
        me->load_worksheet( ip_path      = lv_worksheet_path
                            io_worksheet = lo_worksheet ).
        <worksheet>-worksheet = lo_worksheet.
      ENDIF.

      lo_node ?= lo_node->get_next( ).
      ADD 1 TO lv_workbook_index.

    ENDWHILE.
    SORT lt_worksheets BY sheetid.                                              " needed for localSheetid -referencing

*--------------------------------------------------------------------*
*   #284: Set active worksheet - Resolve referenced formulae to
*                                explicit formulae those cells
*--------------------------------------------------------------------*
    me->resolve_referenced_formulae( ).
    " ins issue#284
*--------------------------------------------------------------------*
*   #229: Set active worksheet - begin coding
*   §3.2    Active worksheet
*--------------------------------------------------------------------*
    lv_zexcel_active_worksheet = 1.                                 " First sheet = active sheet if nothing else specified.
    lo_node ?=  lo_workbook->find_from_name( 'workbookView' ).
    IF lo_node IS BOUND.
      lv_active_sheet_string = lo_node->get_attribute( 'activeTab' ).
      TRY.
          lv_zexcel_active_worksheet = lv_active_sheet_string + 1.  " EXCEL numbers the sheets from 0 onwards --> index into worksheettable is increased by one
        CATCH cx_sy_conversion_error. "#EC NO_HANDLER    - error here --> just use the default 1st sheet
      ENDTRY.
    ENDIF.
    io_excel->set_active_sheet_index( lv_zexcel_active_worksheet ).
*--------------------------------------------------------------------*
* #229: Set active worksheet - end coding
*--------------------------------------------------------------------*


*--------------------------------------------------------------------*
*   §3.3    Defined names
*           So far I have encountered these
*             - named ranges      - sheetlocal
*             - named ranges      - workbookglobal
*             - autofilters       - sheetlocal  ( special range )
*             - repeat rows/cols  - sheetlocal ( special range )
*
*--------------------------------------------------------------------*
    lo_node ?=  lo_workbook->find_from_name( 'definedName' ).
    WHILE lo_node IS BOUND.

      CLEAR lo_range.                                                                                       "ins issue #235 - repeat rows/cols
      me->fill_struct_from_attributes(  EXPORTING
                                        ip_element   =  lo_node
                                       CHANGING
                                         cp_structure = ls_range ).
      lv_range_value = lo_node->get_value( ).

      IF ls_range-localsheetid IS NOT INITIAL.                                                              " issue #163+
*      READ TABLE lt_worksheets ASSIGNING <worksheet> WITH KEY id = ls_range-localsheetid.                "del issue #235 - repeat rows/cols " issue #163+
*        lo_range = <worksheet>-worksheet->add_new_range( ).                                              "del issue #235 - repeat rows/cols " issue #163+
*--------------------------------------------------------------------*
* issue#235 - repeat rows/columns - begin
*--------------------------------------------------------------------*
        lv_tabix = ls_range-localsheetid + 1.
        READ TABLE lt_worksheets ASSIGNING <worksheet> INDEX lv_tabix.
        IF sy-subrc = 0.
          CASE ls_range-name.

*--------------------------------------------------------------------*
* insert autofilters
*--------------------------------------------------------------------*
            WHEN zcl_excel_autofilters=>c_autofilter.
              " begin Dennis Schaaf
              TRY.
                  zcl_excel_common=>convert_range2column_a_row( EXPORTING i_range        = lv_range_value
                                                                IMPORTING e_column_start = lv_col_start_alpha
                                                                          e_column_end   = lv_col_end_alpha
                                                                          e_row_start    = ls_area-row_start
                                                                          e_row_end      = ls_area-row_end ).
                  ls_area-col_start = zcl_excel_common=>convert_column2int( lv_col_start_alpha ).
                  ls_area-col_end   = zcl_excel_common=>convert_column2int( lv_col_end_alpha ).
                  lo_autofilter = io_excel->add_new_autofilter( io_sheet = <worksheet>-worksheet ) .
                  lo_autofilter->set_filter_area( is_area = ls_area ).
                CATCH zcx_excel.
                  " we expected a range but it was not usable, so just ignore it
              ENDTRY.
              " end Dennis Schaaf

*--------------------------------------------------------------------*
* repeat print rows/columns
*--------------------------------------------------------------------*
            WHEN zif_excel_sheet_printsettings=>gcv_print_title_name.
              lo_range = <worksheet>-worksheet->add_new_range( ).
*--------------------------------------------------------------------*
* This might be a temporary solution.  Maybe ranges get be reworked
* to support areas consisting of multiple rectangles
* But for now just split the range into row and columnpart
*--------------------------------------------------------------------*
              CLEAR:lv_range_value_1,
                    lv_range_value_2.
              IF lv_range_value IS INITIAL.
* Empty --> nothing to do
              ELSE.
                IF lv_range_value(1) = `'`.  " Escaped
                  lv_regex = `^('[^']*')+![^,]*,`.
                ELSE.
                  lv_regex = `^[^!]*![^,]*,`.
                ENDIF.
* Split into two ranges if necessary
                FIND REGEX lv_regex IN lv_range_value MATCH LENGTH sy-fdpos.
                IF sy-subrc = 0 AND sy-fdpos > 0.
                  lv_range_value_2 = lv_range_value+sy-fdpos.
                  SUBTRACT 1 FROM sy-fdpos.
                  lv_range_value_1 = lv_range_value(sy-fdpos).
                ELSE.
                  lv_range_value_1 = lv_range_value.
                ENDIF.
              ENDIF.
* 1st range
              zcl_excel_common=>convert_range2column_a_row( EXPORTING i_range        = lv_range_value_1
                                                            IMPORTING e_column_start = lv_col_start_alpha
                                                                      e_column_end   = lv_col_end_alpha
                                                                      e_row_start    = lv_row_start
                                                                      e_row_end      = lv_row_end ).
              IF lv_col_start_alpha IS NOT INITIAL.
                <worksheet>-worksheet->zif_excel_sheet_printsettings~set_print_repeat_columns( iv_columns_from = lv_col_start_alpha
                                                                                      iv_columns_to   = lv_col_end_alpha ).
              ENDIF.
              IF lv_row_start IS NOT INITIAL.
                <worksheet>-worksheet->zif_excel_sheet_printsettings~set_print_repeat_rows( iv_rows_from = lv_row_start
                                                                                   iv_rows_to   = lv_row_end ).
              ENDIF.

* 2nd range
              zcl_excel_common=>convert_range2column_a_row( EXPORTING i_range        = lv_range_value_2
                                                            IMPORTING e_column_start = lv_col_start_alpha
                                                                      e_column_end   = lv_col_end_alpha
                                                                      e_row_start    = lv_row_start
                                                                      e_row_end      = lv_row_end ).
              IF lv_col_start_alpha IS NOT INITIAL.
                <worksheet>-worksheet->zif_excel_sheet_printsettings~set_print_repeat_columns( iv_columns_from = lv_col_start_alpha
                                                                                      iv_columns_to   = lv_col_end_alpha ).
              ENDIF.
              IF lv_row_start IS NOT INITIAL.
                <worksheet>-worksheet->zif_excel_sheet_printsettings~set_print_repeat_rows( iv_rows_from = lv_row_start
                                                                                   iv_rows_to   = lv_row_end ).
              ENDIF.

            WHEN OTHERS.

          ENDCASE.
        ENDIF.
*--------------------------------------------------------------------*
* issue#235 - repeat rows/columns - end
*--------------------------------------------------------------------*
      ELSE.                                                                                                 " issue #163+
        lo_range = io_excel->add_new_range( ).                                                              " issue #163+
      ENDIF.                                                                                                " issue #163+
*    lo_range = ip_excel->add_new_range( ).                                                               " issue #163-
      IF lo_range IS BOUND.                                                                                 "ins issue #235 - repeat rows/cols
        lo_range->name = ls_range-name.
        lo_range->set_range_value( lv_range_value ).
      ENDIF.                                                                                                "ins issue #235 - repeat rows/cols
      lo_node ?= lo_node->get_next( ).

    ENDWHILE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_WORKSHEET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_PATH                        TYPE        STRING
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_worksheet.
*--------------------------------------------------------------------*
* ToDos:
*        2do§1   Header/footer
*
*                Please don't just delete these ToDos if they are not
*                needed but leave a comment that states this
*--------------------------------------------------------------------*

*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,
*              - ...
* changes: renaming variables to naming conventions
*          aligning code                                            (started)
*          add a list of open ToDos here
*          adding comments to explain what we are trying to achieve (started)
*--------------------------------------------------------------------*
* issue #345 - Dump on small pagemargins
*              Took the chance to modularize this very long method
*              by extracting the code that needed correction into
*              own method ( load_worksheet_pagemargins )
*--------------------------------------------------------------------*
    TYPES: BEGIN OF lty_cell,
             r TYPE string,
             t TYPE string,
             s TYPE string,
           END OF lty_cell.

    TYPES: BEGIN OF lty_column,
             min          TYPE string,
             max          TYPE string,
             width        TYPE float,
             customwidth  TYPE string,
             style        TYPE string,
             bestfit      TYPE string,
             collapsed    TYPE string,
             hidden       TYPE string,
             outlinelevel TYPE string,
           END OF lty_column.

    TYPES: BEGIN OF lty_sheetview,
             showgridlines     TYPE zexcel_show_gridlines,
             tabselected       TYPE string,
             zoomscalenormal   TYPE string,
             workbookviewid    TYPE string,
             showrowcolheaders TYPE string,
           END OF lty_sheetview.

    TYPES: BEGIN OF lty_mergecell,
             ref TYPE string,
           END OF lty_mergecell.

    TYPES: BEGIN OF lty_row,
             r            TYPE string,
             customheight TYPE string,
             ht           TYPE float,
             spans        TYPE string,
             thickbot     TYPE string,
             customformat TYPE string,
             thicktop     TYPE string,
             collapsed    TYPE string,
             hidden       TYPE string,
             outlinelevel TYPE string,
           END OF lty_row.

    TYPES: BEGIN OF lty_page_setup,
             id          TYPE string,
             orientation TYPE string,
             scale       TYPE string,
             fittoheight TYPE string,
             fittowidth  TYPE string,
             papersize   TYPE string,
           END OF lty_page_setup.

    TYPES: BEGIN OF lty_sheetformatpr,
             customheight     TYPE string,
             defaultrowheight TYPE string,
             customwidth      TYPE string,
             defaultcolwidth  TYPE string,
           END OF lty_sheetformatpr.

    TYPES: BEGIN OF lty_headerfooter,
             alignwithmargins TYPE string,
             differentoddeven TYPE string,
           END OF lty_headerfooter.

    TYPES: BEGIN OF lty_tabcolor,
             rgb   TYPE string,
             theme TYPE string,
           END OF lty_tabcolor.

    TYPES: BEGIN OF lty_datavalidation,
             type             TYPE zexcel_data_val_type,
             allowblank       TYPE flag,
             showinputmessage TYPE flag,
             showerrormessage TYPE flag,
             showdropdown     TYPE flag,
             operator         TYPE zexcel_data_val_operator,
             formula1         TYPE zexcel_validation_formula1,
             formula2         TYPE zexcel_validation_formula1,
             sqref            TYPE string,
             cell_column      TYPE zexcel_cell_column_alpha,
             cell_column_to   TYPE zexcel_cell_column_alpha,
             cell_row         TYPE zexcel_cell_row,
             cell_row_to      TYPE zexcel_cell_row,
             error            TYPE string,
             errortitle       TYPE string,
             prompt           TYPE string,
             prompttitle      TYPE string,
             errorstyle       TYPE zexcel_data_val_error_style,
           END OF lty_datavalidation.



    CONSTANTS: lc_xml_attr_true     TYPE string VALUE 'true',
               lc_xml_attr_true_int TYPE string VALUE '1',
               lc_rel_drawing       TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',
               lc_rel_hyperlink     TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink',
               lc_rel_printer       TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/printerSettings'.

    DATA: lo_ixml_worksheet           TYPE REF TO if_ixml_document,
          lo_ixml_cells               TYPE REF TO if_ixml_node_collection,
          lo_ixml_iterator            TYPE REF TO if_ixml_node_iterator,
          lo_ixml_iterator2           TYPE REF TO if_ixml_node_iterator,
          lo_ixml_row_elem            TYPE REF TO if_ixml_element,
          lo_ixml_cell_elem           TYPE REF TO if_ixml_element,
          ls_cell                     TYPE lty_cell,
          lv_index                    TYPE i,
          lo_ixml_value_elem          TYPE REF TO if_ixml_element,
          lo_ixml_formula_elem        TYPE REF TO if_ixml_element,
          lv_cell_value               TYPE zexcel_cell_value,
          lv_cell_formula             TYPE zexcel_cell_formula,
          lv_cell_column              TYPE zexcel_cell_column_alpha,
          lv_cell_row                 TYPE zexcel_cell_row,
          lo_excel_style              TYPE REF TO zcl_excel_style,
          lv_style_guid               TYPE zexcel_cell_style,

          lo_ixml_imension_elem       TYPE REF TO if_ixml_element, "#+234
          lv_dimension_range          TYPE string,  "#+234

          lo_ixml_sheetview_elem      TYPE REF TO if_ixml_element,
          ls_sheetview                TYPE lty_sheetview,
          lo_ixml_pane_elem           TYPE REF TO if_ixml_element,
          ls_excel_pane               TYPE zexcel_pane,
          lv_pane_cell_row            TYPE zexcel_cell_row,
          lv_pane_cell_col_a          TYPE zexcel_cell_column_alpha,
          lv_pane_cell_col            TYPE zexcel_cell_column,

          lo_ixml_mergecells          TYPE REF TO if_ixml_node_collection,
          lo_ixml_mergecell_elem      TYPE REF TO if_ixml_element,
          ls_mergecell                TYPE lty_mergecell,
          lv_merge_column_start       TYPE zexcel_cell_column_alpha,
          lv_merge_column_end         TYPE zexcel_cell_column_alpha,
          lv_merge_row_start          TYPE zexcel_cell_row,
          lv_merge_row_end            TYPE zexcel_cell_row,

          lo_ixml_sheetformatpr_elem  TYPE REF TO if_ixml_element,
          ls_sheetformatpr            TYPE lty_sheetformatpr,
          lv_height                   TYPE float,

          lo_ixml_headerfooter_elem   TYPE REF TO if_ixml_element,
          ls_headerfooter             TYPE lty_headerfooter,
          ls_odd_header               TYPE zexcel_s_worksheet_head_foot,
          ls_odd_footer               TYPE zexcel_s_worksheet_head_foot,
          ls_even_header              TYPE zexcel_s_worksheet_head_foot,
          ls_even_footer              TYPE zexcel_s_worksheet_head_foot,
          lo_ixml_hf_value_elem       TYPE REF TO if_ixml_element,

          lo_ixml_pagesetup_elem      TYPE REF TO if_ixml_element,
          lo_ixml_sheetpr             TYPE REF TO if_ixml_element,
          lv_fit_to_page              TYPE string,
          ls_pagesetup                TYPE lty_page_setup,

          lo_ixml_columns             TYPE REF TO if_ixml_node_collection,
          lo_ixml_column_elem         TYPE REF TO if_ixml_element,
          ls_column                   TYPE lty_column,
          lv_column_alpha             TYPE zexcel_cell_column_alpha,
          lo_column                   TYPE REF TO zcl_excel_column,
          lv_outline_level            TYPE int4,

          lo_ixml_tabcolor            TYPE REF TO if_ixml_element,
          ls_tabcolor                 TYPE lty_tabcolor,
          ls_excel_s_tabcolor         TYPE zexcel_s_tabcolor,

          lo_ixml_rows                TYPE REF TO if_ixml_node_collection,
          ls_row                      TYPE lty_row,
          lv_max_col                  TYPE i,     "for use with SPANS element
*              lv_min_col                     TYPE i,     "for use with SPANS element                    " not in use currently
          lv_max_col_s                TYPE char10,     "for use with SPANS element
          lv_min_col_s                TYPE char10,     "for use with SPANS element
          lo_row                      TYPE REF TO zcl_excel_row,
*---    End of current code aligning -------------------------------------------------------------------

          lv_path                     TYPE string,
          lo_ixml_node                TYPE REF TO if_ixml_element,
          ls_relationship             TYPE t_relationship,
          lo_ixml_rels_worksheet      TYPE REF TO if_ixml_document,
          lv_rels_worksheet_path      TYPE string,
          lv_stripped_name            TYPE chkfile,
          lv_dirname                  TYPE string,

          lt_external_hyperlinks      TYPE gtt_external_hyperlinks,
          ls_external_hyperlink       LIKE LINE OF lt_external_hyperlinks,

          lo_ixml_datavalidations     TYPE REF TO if_ixml_node_collection,
          lo_ixml_datavalidation_elem TYPE REF TO if_ixml_element,
          ls_datavalidation           TYPE lty_datavalidation,
          lo_data_validation          TYPE REF TO zcl_excel_data_validation,
          lv_datavalidation_range     TYPE string,
          lt_datavalidation_range     TYPE TABLE OF string,
          ex                          TYPE REF TO cx_root.

*--------------------------------------------------------------------*
* §2  We need to read the the file "\\_rels\.rels" because it tells
*     us where in this folder structure the data for the workbook
*     is located in the xlsx zip-archive
*
*     The xlsx Zip-archive has generally the following folder structure:
*       <root> |
*              |-->  _rels
*              |-->  doc_Props
*              |-->  xl |
*                       |-->  _rels
*                       |-->  theme
*                       |-->  worksheets
*--------------------------------------------------------------------*

    " Read Workbook Relationships
    CALL FUNCTION 'TRINT_SPLIT_FILE_AND_PATH'
      EXPORTING
        full_name     = ip_path
      IMPORTING
        stripped_name = lv_stripped_name
        file_path     = lv_dirname.
    CONCATENATE lv_dirname '_rels/' lv_stripped_name '.rels'
      INTO lv_rels_worksheet_path.
    TRY.                                                                          " +#222  _rels/xxx.rels might not be present.  If not found there can be no drawings --> just ignore this section
        lo_ixml_rels_worksheet = me->get_ixml_from_zip_archive( lv_rels_worksheet_path ).
        lo_ixml_node ?= lo_ixml_rels_worksheet->find_from_name( 'Relationship' ).
      CATCH zcx_excel.                            "#EC NO_HANDLER +#222
        " +#222   No errorhandling necessary - node will be unbound if error occurs
    ENDTRY.                                                   " +#222
    WHILE lo_ixml_node IS BOUND.
      fill_struct_from_attributes( EXPORTING
                                     ip_element = lo_ixml_node
                                   CHANGING
                                     cp_structure = ls_relationship ).
      CONCATENATE lv_dirname ls_relationship-target INTO lv_path.
      lv_path = resolve_path( lv_path ).

      CASE ls_relationship-type.
        WHEN lc_rel_drawing.
          " Read Drawings
* Issue # 339       Not all drawings are in the path mentioned below.
*                   Some Excel elements like textfields (which we don't support ) have a drawing-part in the relationsships
*                   but no "xl/drawings/_rels/drawing____.xml.rels" part.
*                   Since we don't support these there is no need to read them.  Catching exceptions thrown
*                   in the "load_worksheet_drawing" shouldn't lead to an abortion of the reading
          TRY.
              me->load_worksheet_drawing( ip_path      = lv_path
                                        io_worksheet = io_worksheet ).
            CATCH zcx_excel. "--> then ignore it
          ENDTRY.

        WHEN lc_rel_printer.
          " Read Printer settings

        WHEN lc_rel_hyperlink.
          MOVE-CORRESPONDING ls_relationship TO ls_external_hyperlink.
          INSERT ls_external_hyperlink INTO TABLE lt_external_hyperlinks.

        WHEN OTHERS.
      ENDCASE.

      lo_ixml_node ?= lo_ixml_node->get_next( ).
    ENDWHILE.


    lo_ixml_worksheet = me->get_ixml_from_zip_archive( ip_path ).


    lo_ixml_tabcolor ?= lo_ixml_worksheet->find_from_name( 'tabColor' ).
    IF lo_ixml_tabcolor IS BOUND.
      fill_struct_from_attributes( EXPORTING
                                     ip_element = lo_ixml_tabcolor
                                  CHANGING
                                    cp_structure = ls_tabcolor ).
* Theme not supported yet
      IF ls_tabcolor-rgb IS NOT INITIAL.
        ls_excel_s_tabcolor-rgb = ls_tabcolor-rgb.
        io_worksheet->set_tabcolor( ls_excel_s_tabcolor ).
      ENDIF.
    ENDIF.

    lo_ixml_rows = lo_ixml_worksheet->get_elements_by_tag_name( name = 'row' ).
    lo_ixml_iterator = lo_ixml_rows->create_iterator( ).
    lo_ixml_row_elem ?= lo_ixml_iterator->get_next( ).
    WHILE lo_ixml_row_elem IS BOUND.

      fill_struct_from_attributes( EXPORTING
                                     ip_element = lo_ixml_row_elem
                                   CHANGING
                                     cp_structure = ls_row ).
      SPLIT ls_row-spans AT ':' INTO lv_min_col_s lv_max_col_s.
      lv_index = lv_max_col_s.
      IF lv_index > lv_max_col.
        lv_max_col = lv_index.
      ENDIF.
      lv_cell_row = ls_row-r.
      IF   ls_row-customheight  = '1'
        OR ls_row-collapsed     = lc_xml_attr_true
        OR ls_row-collapsed     = lc_xml_attr_true_int
        OR ls_row-hidden        = lc_xml_attr_true
        OR ls_row-hidden        = lc_xml_attr_true_int
        OR ls_row-outlinelevel  > '0'.
        lo_row = io_worksheet->get_row( lv_cell_row ).
        IF ls_row-customheight = '1'.
          lo_row->set_row_height( ls_row-ht ).
        ENDIF.

        IF   ls_row-collapsed = lc_xml_attr_true
          OR ls_row-collapsed = lc_xml_attr_true_int.
          lo_row->set_collapsed( abap_true ).
        ENDIF.

        IF   ls_row-hidden = lc_xml_attr_true
          OR ls_row-hidden = lc_xml_attr_true_int.
          lo_row->set_visible( abap_false ).
        ENDIF.

        IF ls_row-outlinelevel > ''.
*        outline_level = condense( row-outlineLevel ).  "For basis 7.02 and higher
          CONDENSE  ls_row-outlinelevel.
          lv_outline_level = ls_row-outlinelevel.
          IF lv_outline_level > 0.
            lo_row->set_outline_level( lv_outline_level ).
          ENDIF.
        ENDIF.
      ENDIF.

      lo_ixml_cells = lo_ixml_row_elem->get_elements_by_tag_name( name = 'c' ).
      lo_ixml_iterator2 = lo_ixml_cells->create_iterator( ).
      lo_ixml_cell_elem ?= lo_ixml_iterator2->get_next( ).
      WHILE lo_ixml_cell_elem IS BOUND.
        CLEAR: lv_cell_value,
               lv_cell_formula,
               lv_style_guid.

        fill_struct_from_attributes( EXPORTING ip_element = lo_ixml_cell_elem CHANGING cp_structure = ls_cell ).

        lo_ixml_value_elem = lo_ixml_cell_elem->find_from_name( name = 'v' ).

        CASE ls_cell-t.
          WHEN 's'. " String values are stored as index in shared string table
            lv_index = lo_ixml_value_elem->get_value( ) + 1.
            READ TABLE shared_strings INTO lv_cell_value INDEX lv_index.
          WHEN 'inlineStr'. " inlineStr values are kept in special node
            lo_ixml_value_elem = lo_ixml_cell_elem->find_from_name( name = 'is' ).
            IF lo_ixml_value_elem IS BOUND.
              lv_cell_value = lo_ixml_value_elem->get_value( ).
            ENDIF.
          WHEN OTHERS. "other types are stored directly
            IF lo_ixml_value_elem IS BOUND.
              lv_cell_value = lo_ixml_value_elem->get_value( ).
            ENDIF.
        ENDCASE.

        CLEAR lv_style_guid.
        "read style based on index
        IF ls_cell-s IS NOT INITIAL.
          lv_index = ls_cell-s + 1.
          READ TABLE styles INTO lo_excel_style INDEX lv_index.
          IF sy-subrc = 0.
            lv_style_guid = lo_excel_style->get_guid( ).
          ENDIF.
        ENDIF.

        lo_ixml_formula_elem = lo_ixml_cell_elem->find_from_name( name = 'f' ).
        IF lo_ixml_formula_elem IS BOUND.
          lv_cell_formula = lo_ixml_formula_elem->get_value( ).
*--------------------------------------------------------------------*
* Begin of insertion issue#284 - Copied formulae not
*--------------------------------------------------------------------*
          DATA: BEGIN OF ls_formula_attributes,
                  ref TYPE string,
                  si  TYPE i,
                  t   TYPE string,
                END OF ls_formula_attributes,
                ls_ref_formula TYPE ty_ref_formulae.

          fill_struct_from_attributes( EXPORTING ip_element = lo_ixml_formula_elem CHANGING cp_structure = ls_formula_attributes ).
          IF ls_formula_attributes-t = 'shared'.
            zcl_excel_common=>convert_columnrow2column_a_row( EXPORTING
                                                                i_columnrow = ls_cell-r
                                                              IMPORTING
                                                                e_column    = lv_cell_column
                                                                e_row       = lv_cell_row ).

            TRY.
                CLEAR ls_ref_formula.
                ls_ref_formula-sheet     = io_worksheet.
                ls_ref_formula-row       = lv_cell_row.
                ls_ref_formula-column    = zcl_excel_common=>convert_column2int( lv_cell_column ).
                ls_ref_formula-si        = ls_formula_attributes-si.
                ls_ref_formula-ref       = ls_formula_attributes-ref.
                ls_ref_formula-formula   = lv_cell_formula.
                INSERT ls_ref_formula INTO TABLE me->mt_ref_formulae.
              CATCH cx_root INTO ex.
                RAISE EXCEPTION TYPE zcx_excel
                  EXPORTING
                    previous = ex.
            ENDTRY.
          ENDIF.
*--------------------------------------------------------------------*
* End of insertion issue#284 - Copied formulae not
*--------------------------------------------------------------------*
        ENDIF.

        IF   lv_cell_value    IS NOT INITIAL
          OR lv_cell_formula  IS NOT INITIAL
          OR lv_style_guid    IS NOT INITIAL.
          zcl_excel_common=>convert_columnrow2column_a_row( EXPORTING
                                                              i_columnrow = ls_cell-r
                                                            IMPORTING
                                                              e_column    = lv_cell_column
                                                              e_row       = lv_cell_row ).
          io_worksheet->set_cell( ip_column     = lv_cell_column  " cell_elem Column
                                  ip_row        = lv_cell_row     " cell_elem row_elem
                                  ip_value      = lv_cell_value   " cell_elem Value
                                  ip_formula    = lv_cell_formula
                                  ip_data_type  = ls_cell-t
                                  ip_style      = lv_style_guid ).
        ENDIF.
        lo_ixml_cell_elem ?= lo_ixml_iterator2->get_next( ).
      ENDWHILE.
      lo_ixml_row_elem ?= lo_ixml_iterator->get_next( ).
    ENDWHILE.

*--------------------------------------------------------------------*
*#234 - column width not read correctly - begin of coding
*       reason - libre office doesn't use SPAN in row - definitions
*--------------------------------------------------------------------*
    IF lv_max_col = 0.
      lo_ixml_imension_elem = lo_ixml_worksheet->find_from_name( name = 'dimension' ).
      IF lo_ixml_imension_elem IS BOUND.
        lv_dimension_range = lo_ixml_imension_elem->get_attribute( 'ref' ).
        IF lv_dimension_range CS ':'.
          REPLACE REGEX '\D+\d+:(\D+)\d+' IN lv_dimension_range WITH '$1'.  " Get max column
        ELSE.
          REPLACE REGEX '(\D+)\d+' IN lv_dimension_range WITH '$1'.  " Get max column
        ENDIF.
        lv_max_col = zcl_excel_common=>convert_column2int( lv_dimension_range ).
      ENDIF.
    ENDIF.
*--------------------------------------------------------------------*
*#234 - column width not read correctly - end of coding
*--------------------------------------------------------------------*

    "Get the customized column width
    lo_ixml_columns = lo_ixml_worksheet->get_elements_by_tag_name( name = 'col' ).
    lo_ixml_iterator = lo_ixml_columns->create_iterator( ).
    lo_ixml_column_elem ?= lo_ixml_iterator->get_next( ).
    WHILE lo_ixml_column_elem IS BOUND.
      fill_struct_from_attributes( EXPORTING
                                     ip_element = lo_ixml_column_elem
                                   CHANGING
                                     cp_structure = ls_column ).
      lo_ixml_column_elem ?= lo_ixml_iterator->get_next( ).
      IF   ls_column-customwidth   = lc_xml_attr_true
        OR ls_column-customwidth   = lc_xml_attr_true_int
        OR ls_column-bestfit       = lc_xml_attr_true
        OR ls_column-bestfit       = lc_xml_attr_true_int
        OR ls_column-collapsed     = lc_xml_attr_true
        OR ls_column-collapsed     = lc_xml_attr_true_int
        OR ls_column-hidden        = lc_xml_attr_true
        OR ls_column-hidden        = lc_xml_attr_true_int
        OR ls_column-outlinelevel  > ''
        OR ls_column-style         > ''.
        lv_index = ls_column-min.
        WHILE lv_index <= ls_column-max AND lv_index <= lv_max_col.

          lv_column_alpha = zcl_excel_common=>convert_column2alpha( lv_index ).
          lo_column =  io_worksheet->get_column( lv_column_alpha ).

          IF   ls_column-customwidth = lc_xml_attr_true
            OR ls_column-customwidth = lc_xml_attr_true_int
            OR ls_column-width       IS NOT INITIAL.          "+#234
            lo_column->set_width( ls_column-width ).
          ENDIF.

          IF   ls_column-bestfit = lc_xml_attr_true
            OR ls_column-bestfit = lc_xml_attr_true_int.
            lo_column->set_auto_size( abap_true ).
          ENDIF.

          IF   ls_column-collapsed = lc_xml_attr_true
            OR ls_column-collapsed = lc_xml_attr_true_int.
            lo_column->set_collapsed( abap_true ).
          ENDIF.

          IF   ls_column-hidden = lc_xml_attr_true
            OR ls_column-hidden = lc_xml_attr_true_int.
            lo_column->set_visible( abap_false ).
          ENDIF.

          IF ls_column-outlinelevel > ''.
*          outline_level = condense( column-outlineLevel ).
            CONDENSE ls_column-outlinelevel.
            lv_outline_level = ls_column-outlinelevel.
            IF lv_outline_level > 0.
              lo_column->set_outline_level( lv_outline_level ).
            ENDIF.
          ENDIF.

          IF ls_column-style > ''.
            sy-index = ls_column-style + 1.
            READ TABLE styles INTO lo_excel_style INDEX sy-index.
            DATA: dummy_zexcel_cell_style TYPE zexcel_cell_style.
            dummy_zexcel_cell_style = lo_excel_style->get_guid( ).
            lo_column->set_column_style_by_guid( dummy_zexcel_cell_style ).
          ENDIF.

          ADD 1 TO lv_index.
        ENDWHILE.
      ENDIF.

* issue #367 - hide columns from
      IF ls_column-max = zcl_excel_common=>c_excel_sheet_max_col.     " Max = very right column
        IF ls_column-hidden = 1     " all hidden
          AND ls_column-min > 0.
          io_worksheet->zif_excel_sheet_properties~hide_columns_from = zcl_excel_common=>convert_column2alpha( ls_column-min ).
        ELSEIF ls_column-style > ''.
          sy-index = ls_column-style + 1.
          READ TABLE styles INTO lo_excel_style INDEX sy-index.
          dummy_zexcel_cell_style = lo_excel_style->get_guid( ).
* Set style for remaining columns
          io_worksheet->zif_excel_sheet_properties~set_style( dummy_zexcel_cell_style ).
        ENDIF.
      ENDIF.


    ENDWHILE.

    "Now we need to get information from the sheetView node
    lo_ixml_sheetview_elem = lo_ixml_worksheet->find_from_name( name = 'sheetView' ).
    fill_struct_from_attributes( EXPORTING ip_element = lo_ixml_sheetview_elem CHANGING cp_structure = ls_sheetview ).
    IF ls_sheetview-showgridlines IS INITIAL OR
       ls_sheetview-showgridlines = lc_xml_attr_true OR
       ls_sheetview-showgridlines = lc_xml_attr_true_int.
      "If the attribute is not specified or set to true, we will show grid lines
      ls_sheetview-showgridlines = abap_true.
    ELSE.
      ls_sheetview-showgridlines = abap_false.
    ENDIF.
    io_worksheet->set_show_gridlines( ls_sheetview-showgridlines ).


    "Add merge cell information
    lo_ixml_mergecells = lo_ixml_worksheet->get_elements_by_tag_name( name = 'mergeCell' ).
    lo_ixml_iterator = lo_ixml_mergecells->create_iterator( ).
    lo_ixml_mergecell_elem ?= lo_ixml_iterator->get_next( ).
    WHILE lo_ixml_mergecell_elem IS BOUND.
      fill_struct_from_attributes( EXPORTING
                                     ip_element = lo_ixml_mergecell_elem
                                   CHANGING
                                     cp_structure = ls_mergecell ).
      zcl_excel_common=>convert_range2column_a_row( EXPORTING
                                                      i_range = ls_mergecell-ref
                                                    IMPORTING
                                                      e_column_start = lv_merge_column_start
                                                      e_column_end   = lv_merge_column_end
                                                      e_row_start    = lv_merge_row_start
                                                      e_row_end      = lv_merge_row_end ).
      lo_ixml_mergecell_elem ?= lo_ixml_iterator->get_next( ).
      io_worksheet->set_merge( EXPORTING
                                 ip_column_start = lv_merge_column_start
                                 ip_column_end   = lv_merge_column_end
                                 ip_row          = lv_merge_row_start
                                 ip_row_to       = lv_merge_row_end ).
    ENDWHILE.

    " read sheet format properties
    lo_ixml_sheetformatpr_elem = lo_ixml_worksheet->find_from_name( 'sheetFormatPr' ).
    IF lo_ixml_sheetformatpr_elem IS NOT INITIAL.
      fill_struct_from_attributes( EXPORTING ip_element = lo_ixml_sheetformatpr_elem CHANGING cp_structure = ls_sheetformatpr ).
      IF ls_sheetformatpr-customheight = '1'.
        lv_height = ls_sheetformatpr-defaultrowheight.
        lo_row = io_worksheet->get_default_row( ).
        lo_row->set_row_height( lv_height ).
      ENDIF.

      " TODO...  column
    ENDIF.

    " Read in page margins
    me->load_worksheet_pagemargins( EXPORTING
                                      io_ixml_worksheet = lo_ixml_worksheet
                                      io_worksheet      = io_worksheet ).

* FitToPage
    lo_ixml_sheetpr ?=  lo_ixml_worksheet->find_from_name( 'pageSetUpPr' ).
    IF lo_ixml_sheetpr IS BOUND.

      lv_fit_to_page = lo_ixml_sheetpr->get_attribute_ns( 'fitToPage' ).
      IF lv_fit_to_page IS NOT INITIAL.
        io_worksheet->sheet_setup->fit_to_page = 'X'.
      ENDIF.
    ENDIF.
    " Read in page setup
    lo_ixml_pagesetup_elem = lo_ixml_worksheet->find_from_name( 'pageSetup' ).
    IF lo_ixml_pagesetup_elem IS NOT INITIAL.
      fill_struct_from_attributes( EXPORTING
                                     ip_element = lo_ixml_pagesetup_elem
                                   CHANGING
                                     cp_structure = ls_pagesetup ).
      io_worksheet->sheet_setup->orientation = ls_pagesetup-orientation.
      io_worksheet->sheet_setup->scale = ls_pagesetup-scale.
      io_worksheet->sheet_setup->paper_size = ls_pagesetup-papersize.
      IF io_worksheet->sheet_setup->fit_to_page = 'X'.
        IF ls_pagesetup-fittowidth IS NOT INITIAL.
          io_worksheet->sheet_setup->fit_to_width = ls_pagesetup-fittowidth.
        ELSE.
          io_worksheet->sheet_setup->fit_to_width = 1.  " Default if not given - Excel doesn't write this to xml
        ENDIF.
        IF ls_pagesetup-fittoheight IS NOT INITIAL.
          io_worksheet->sheet_setup->fit_to_height = ls_pagesetup-fittoheight.
        ELSE.
          io_worksheet->sheet_setup->fit_to_height = 1. " Default if not given - Excel doesn't write this to xml
        ENDIF.
      ENDIF.
    ENDIF.



    " Read header footer
    lo_ixml_headerfooter_elem = lo_ixml_worksheet->find_from_name( 'headerFooter' ).
    IF lo_ixml_headerfooter_elem IS NOT INITIAL.
      fill_struct_from_attributes( EXPORTING ip_element = lo_ixml_headerfooter_elem CHANGING cp_structure = ls_headerfooter ).
      io_worksheet->sheet_setup->diff_oddeven_headerfooter = ls_headerfooter-differentoddeven.

      lo_ixml_hf_value_elem = lo_ixml_headerfooter_elem->find_from_name( 'oddFooter' ).
      IF lo_ixml_hf_value_elem IS NOT INITIAL.
        ls_odd_footer-left_value = lo_ixml_hf_value_elem->get_value( ).
      ENDIF.

*        2do§1   Header/footer
      " TODO.. get the rest.

      io_worksheet->sheet_setup->set_header_footer( ip_odd_header   = ls_odd_header
                                                    ip_odd_footer   = ls_odd_footer
                                                    ip_even_header  = ls_even_header
                                                    ip_even_footer  = ls_even_footer ).

    ENDIF.

    " Start fix 194 Read attributes HIDDEN, OUTLINELEVEL, COLLAPSED in ZCL_EXCEL_READER_2007
    " Read pane
    lo_ixml_pane_elem = lo_ixml_sheetview_elem->find_from_name( name = 'pane' ).
    IF lo_ixml_pane_elem IS BOUND.
      fill_struct_from_attributes( EXPORTING ip_element = lo_ixml_pane_elem CHANGING cp_structure = ls_excel_pane ).
      " Issue #194
      " Replace REGEX with method from the common class
      zcl_excel_common=>convert_columnrow2column_a_row( EXPORTING
                                                          i_columnrow = ls_excel_pane-topleftcell
                                                        IMPORTING
                                                          e_column    = lv_pane_cell_col_a    " Cell Column
                                                          e_row       = lv_pane_cell_row ).   " Natural number
      lv_pane_cell_col = zcl_excel_common=>convert_column2int( lv_pane_cell_col_a ).
      SUBTRACT 1 FROM: lv_pane_cell_col,
                       lv_pane_cell_row.
      IF    lv_pane_cell_col > 0
        AND lv_pane_cell_row > 0.
        io_worksheet->freeze_panes( ip_num_rows    = lv_pane_cell_row
                                    ip_num_columns = lv_pane_cell_col ).
      ELSEIF lv_pane_cell_row > 0.
        io_worksheet->freeze_panes( ip_num_rows    = lv_pane_cell_row ).
      ELSE.
        io_worksheet->freeze_panes( ip_num_columns = lv_pane_cell_col ).
      ENDIF.
    ENDIF.
    " End fix 194 Read attributes HIDDEN, OUTLINELEVEL, COLLAPSED in ZCL_EXCEL_READER_2007

    " Start fix 276 Read data validations
    lo_ixml_datavalidations = lo_ixml_worksheet->get_elements_by_tag_name( name = 'dataValidation' ).
    lo_ixml_iterator = lo_ixml_datavalidations->create_iterator( ).
    lo_ixml_datavalidation_elem  ?= lo_ixml_iterator->get_next( ).
    WHILE lo_ixml_datavalidation_elem  IS BOUND.
      fill_struct_from_attributes( EXPORTING
                                     ip_element = lo_ixml_datavalidation_elem
                                   CHANGING
                                     cp_structure = ls_datavalidation ).
      CLEAR lo_ixml_formula_elem.
      lo_ixml_formula_elem = lo_ixml_datavalidation_elem->find_from_name( name = 'formula1' ).
      IF lo_ixml_formula_elem IS BOUND.
        ls_datavalidation-formula1 = lo_ixml_formula_elem->get_value( ).
      ENDIF.
      CLEAR lo_ixml_formula_elem.
      lo_ixml_formula_elem = lo_ixml_datavalidation_elem->find_from_name( name = 'formula2' ).
      IF lo_ixml_formula_elem IS BOUND.
        ls_datavalidation-formula2 = lo_ixml_formula_elem->get_value( ).
      ENDIF.
      SPLIT ls_datavalidation-sqref AT space INTO TABLE lt_datavalidation_range.
      LOOP AT lt_datavalidation_range INTO lv_datavalidation_range.
        zcl_excel_common=>convert_range2column_a_row( EXPORTING
                                                        i_range = lv_datavalidation_range
                                                      IMPORTING
                                                        e_column_start = ls_datavalidation-cell_column
                                                        e_column_end   = ls_datavalidation-cell_column_to
                                                        e_row_start    = ls_datavalidation-cell_row
                                                        e_row_end      = ls_datavalidation-cell_row_to ).
        lo_data_validation                   = io_worksheet->add_new_data_validation( ).
        lo_data_validation->type             = ls_datavalidation-type.
        lo_data_validation->allowblank       = ls_datavalidation-allowblank.
        IF ls_datavalidation-showinputmessage IS INITIAL.
          lo_data_validation->showinputmessage = abap_false.
        ELSE.
          lo_data_validation->showinputmessage = abap_true.
        ENDIF.
        IF ls_datavalidation-showerrormessage IS INITIAL.
          lo_data_validation->showerrormessage = abap_false.
        ELSE.
          lo_data_validation->showerrormessage = abap_true.
        ENDIF.
        IF ls_datavalidation-showdropdown IS INITIAL.
          lo_data_validation->showdropdown = abap_false.
        ELSE.
          lo_data_validation->showdropdown = abap_true.
        ENDIF.
        lo_data_validation->operator         = ls_datavalidation-operator.
        lo_data_validation->formula1         = ls_datavalidation-formula1.
        lo_data_validation->formula2         = ls_datavalidation-formula2.
        lo_data_validation->prompttitle      = ls_datavalidation-prompttitle.
        lo_data_validation->prompt           = ls_datavalidation-prompt.
        lo_data_validation->errortitle       = ls_datavalidation-errortitle.
        lo_data_validation->error            = ls_datavalidation-error.
        lo_data_validation->errorstyle       = ls_datavalidation-errorstyle.
        lo_data_validation->cell_row         = ls_datavalidation-cell_row.
        lo_data_validation->cell_row_to      = ls_datavalidation-cell_row_to.
        lo_data_validation->cell_column      = ls_datavalidation-cell_column.
        lo_data_validation->cell_column_to   = ls_datavalidation-cell_column_to.
      ENDLOOP.
      lo_ixml_datavalidation_elem ?= lo_ixml_iterator->get_next( ).
    ENDWHILE.
    " End fix 276 Read data validations

    " Read hyperlinks
    TRY.
        me->load_worksheet_hyperlinks( io_ixml_worksheet      = lo_ixml_worksheet
                                       io_worksheet           = io_worksheet
                                       it_external_hyperlinks = lt_external_hyperlinks ).
      CATCH zcx_excel. " Ignore Hyperlink reading errors - pass everything we were able to identify
    ENDTRY.

    TRY.
        me->fill_row_outlines( io_worksheet           = io_worksheet ).
      CATCH zcx_excel. " Ignore Hyperlink reading errors - pass everything we were able to identify
    ENDTRY.

    " Issue #366 - conditional formatting
    TRY.
        me->load_worksheet_cond_format( io_ixml_worksheet      = lo_ixml_worksheet
                                        io_worksheet           = io_worksheet ).
      CATCH zcx_excel. " Ignore Hyperlink reading errors - pass everything we were able to identify
    ENDTRY.

    " Issue #377 - pagebreaks
    TRY.
        me->load_worksheet_pagebreaks( io_ixml_worksheet      = lo_ixml_worksheet
                                       io_worksheet           = io_worksheet ).
      CATCH zcx_excel. " Ignore pagebreak reading errors - pass everything we were able to identify
    ENDTRY.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_WORKSHEET_COND_FORMAT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_IXML_WORKSHEET              TYPE REF TO IF_IXML_DOCUMENT
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_worksheet_cond_format.

    DATA: lo_ixml_cond_formats TYPE REF TO if_ixml_node_collection,
          lo_ixml_cond_format  TYPE REF TO if_ixml_element,
          lo_ixml_iterator     TYPE REF TO if_ixml_node_iterator,
          lo_ixml_rules        TYPE REF TO if_ixml_node_collection,
          lo_ixml_rule         TYPE REF TO if_ixml_element,
          lo_ixml_iterator2    TYPE REF TO if_ixml_node_iterator,
          lo_style_cond        TYPE REF TO zcl_excel_style_cond,
          lo_style_cond2       TYPE REF TO zcl_excel_style_cond.


    DATA: lv_area           TYPE string,
          lt_areas          TYPE STANDARD TABLE OF string WITH NON-UNIQUE DEFAULT KEY,
          lv_area_start_row TYPE zexcel_cell_row,
          lv_area_end_row   TYPE zexcel_cell_row,
          lv_area_start_col TYPE zexcel_cell_column_alpha,
          lv_area_end_col   TYPE zexcel_cell_column_alpha,
          lv_rule           TYPE zexcel_condition_rule.


*  FIELD-SYMBOLS: <ls_external_hyperlink> LIKE LINE OF it_external_hyperlinks.

    lo_ixml_cond_formats =  io_ixml_worksheet->get_elements_by_tag_name( name = 'conditionalFormatting' ).
    lo_ixml_iterator     =  lo_ixml_cond_formats->create_iterator( ).
    lo_ixml_cond_format  ?= lo_ixml_iterator->get_next( ).

    WHILE lo_ixml_cond_format IS BOUND.

      CLEAR: lv_area,
             lo_ixml_rule,
             lo_style_cond.


*--------------------------------------------------------------------*
* Get type of rule
*--------------------------------------------------------------------*
      lo_ixml_rules       =  io_ixml_worksheet->get_elements_by_tag_name( name = 'cfRule' ).
      lo_ixml_iterator2   =  lo_ixml_rules->create_iterator( ).
      lo_ixml_rule        ?= lo_ixml_iterator2->get_next( ).

      WHILE lo_ixml_rule IS BOUND.
        lv_rule = lo_ixml_rule->get_attribute_ns( 'type' ).
        CLEAR lo_style_cond.

*--------------------------------------------------------------------*
* Depending on ruletype get additional information
*--------------------------------------------------------------------*
        CASE lv_rule.

          WHEN zcl_excel_style_cond=>c_rule_cellis.
            lo_style_cond = io_worksheet->add_new_style_cond( ).
            load_worksheet_cond_format_ci( io_ixml_rule  = lo_ixml_rule
                                           io_style_cond = lo_style_cond ).

          WHEN zcl_excel_style_cond=>c_rule_databar.
            lo_style_cond = io_worksheet->add_new_style_cond( ).
            load_worksheet_cond_format_db( io_ixml_rule  = lo_ixml_rule
                                           io_style_cond = lo_style_cond ).

          WHEN zcl_excel_style_cond=>c_rule_expression.
            lo_style_cond = io_worksheet->add_new_style_cond( ).
            load_worksheet_cond_format_ex( io_ixml_rule  = lo_ixml_rule
                                           io_style_cond = lo_style_cond ).

          WHEN zcl_excel_style_cond=>c_rule_iconset.
            lo_style_cond = io_worksheet->add_new_style_cond( ).
            load_worksheet_cond_format_is( io_ixml_rule  = lo_ixml_rule
                                           io_style_cond = lo_style_cond ).

          WHEN zcl_excel_style_cond=>c_rule_colorscale.
            lo_style_cond = io_worksheet->add_new_style_cond( ).
            load_worksheet_cond_format_cs( io_ixml_rule  = lo_ixml_rule
                                           io_style_cond = lo_style_cond ).

          WHEN zcl_excel_style_cond=>c_rule_top10.
            lo_style_cond = io_worksheet->add_new_style_cond( ).
            load_worksheet_cond_format_t10( io_ixml_rule  = lo_ixml_rule
                                           io_style_cond = lo_style_cond ).

          WHEN zcl_excel_style_cond=>c_rule_above_average.
            lo_style_cond = io_worksheet->add_new_style_cond( ).
            load_worksheet_cond_format_aa(  io_ixml_rule  = lo_ixml_rule
                                           io_style_cond = lo_style_cond ).
          WHEN OTHERS.
        ENDCASE.

        IF lo_style_cond IS BOUND.
          lo_style_cond->rule      = lv_rule.
          lo_style_cond->priority  = lo_ixml_rule->get_attribute_ns( 'priority' ).
*--------------------------------------------------------------------*
* Set area to which conditional formatting belongs
*--------------------------------------------------------------------*
          lv_area =  lo_ixml_cond_format->get_attribute_ns( 'sqref' ).
          SPLIT lv_area AT space INTO TABLE lt_areas.
          DELETE lt_areas WHERE table_line IS INITIAL.
          LOOP AT lt_areas INTO lv_area.

            zcl_excel_common=>convert_range2column_a_row( EXPORTING i_range        = lv_area
                                                          IMPORTING e_column_start = lv_area_start_col
                                                                    e_column_end   = lv_area_end_col
                                                                    e_row_start    = lv_area_start_row
                                                                    e_row_end      = lv_area_end_row   ).
            lo_style_cond->add_range( ip_start_column = lv_area_start_col
                                      ip_stop_column  = lv_area_end_col
                                      ip_start_row    = lv_area_start_row
                                      ip_stop_row     = lv_area_end_row   ).
          ENDLOOP.

        ENDIF.
        lo_ixml_rule        ?= lo_ixml_iterator2->get_next( ).
      ENDWHILE.


      lo_ixml_cond_format ?= lo_ixml_iterator->get_next( ).

    ENDWHILE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_WORKSHEET_COND_FORMAT_AA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_IXML_RULE                   TYPE REF TO IF_IXML_ELEMENT
* | [--->] IO_STYLE_COND                  TYPE REF TO ZCL_EXCEL_STYLE_COND
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_worksheet_cond_format_aa.
    DATA: lv_dxf_style_index TYPE i,
          val                TYPE string.

    FIELD-SYMBOLS: <ls_dxf_style> LIKE LINE OF me->mt_dxf_styles.

*--------------------------------------------------------------------*
* above or below average
*--------------------------------------------------------------------*
    val  = io_ixml_rule->get_attribute_ns( 'aboveAverage' ).
    IF val = '0'.  " 0 = below average
      io_style_cond->mode_above_average-above_average = space.
    ELSE.
      io_style_cond->mode_above_average-above_average = 'X'. " Not present or <> 0 --> we use above average
    ENDIF.

*--------------------------------------------------------------------*
* Equal average also?
*--------------------------------------------------------------------*
    CLEAR val.
    val  = io_ixml_rule->get_attribute_ns( 'equalAverage' ).
    IF val = '1'.  " 0 = below average
      io_style_cond->mode_above_average-equal_average = 'X'.
    ELSE.
      io_style_cond->mode_above_average-equal_average = ' '. " Not present or <> 1 --> we use not equal average
    ENDIF.

*--------------------------------------------------------------------*
* Standard deviation instead of value ( 2nd stddev, 3rd stdev )
*--------------------------------------------------------------------*
    CLEAR val.
    val  = io_ixml_rule->get_attribute_ns( 'stdDev' ).
    CASE val.
      WHEN 1
        OR 2
        OR 3.  " These seem to be supported by excel - don't try anything more
        io_style_cond->mode_above_average-standard_deviation = val.
    ENDCASE.

*--------------------------------------------------------------------*
* Cell formatting for top10
*--------------------------------------------------------------------*
    lv_dxf_style_index  = io_ixml_rule->get_attribute_ns( 'dxfId' ).
    READ TABLE me->mt_dxf_styles ASSIGNING <ls_dxf_style> WITH KEY dxf = lv_dxf_style_index.
    IF sy-subrc = 0.
      io_style_cond->mode_above_average-cell_style = <ls_dxf_style>-guid.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_WORKSHEET_COND_FORMAT_CI
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_IXML_RULE                   TYPE REF TO IF_IXML_ELEMENT
* | [--->] IO_STYLE_COND                  TYPE REF TO ZCL_EXCEL_STYLE_COND
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_worksheet_cond_format_ci.
    DATA: lo_ixml_nodes      TYPE REF TO if_ixml_node_collection,
          lo_ixml_iterator   TYPE REF TO if_ixml_node_iterator,
          lo_ixml            TYPE REF TO if_ixml_element,
          lv_dxf_style_index TYPE i,
          lo_excel_style     LIKE LINE OF me->styles.

    FIELD-SYMBOLS: <ls_dxf_style> LIKE LINE OF me->mt_dxf_styles.

    io_style_cond->mode_cellis-operator  = io_ixml_rule->get_attribute_ns( 'operator' ).
    lv_dxf_style_index  = io_ixml_rule->get_attribute_ns( 'dxfId' ).
    READ TABLE me->mt_dxf_styles ASSIGNING <ls_dxf_style> WITH KEY dxf = lv_dxf_style_index.
    IF sy-subrc = 0.
      io_style_cond->mode_cellis-cell_style = <ls_dxf_style>-guid.
    ENDIF.

    lo_ixml_nodes ?= io_ixml_rule->get_elements_by_tag_name( 'formula' ).
    lo_ixml_iterator = lo_ixml_nodes->create_iterator( ).
    lo_ixml ?= lo_ixml_iterator->get_next( ).
    WHILE lo_ixml IS BOUND.

      CASE sy-index.
        WHEN 1.
          io_style_cond->mode_cellis-formula  = lo_ixml->get_value( ).

        WHEN 2.
          io_style_cond->mode_cellis-formula2 = lo_ixml->get_value( ).

        WHEN OTHERS.
          EXIT.
      ENDCASE.

      lo_ixml ?= lo_ixml_iterator->get_next( ).
    ENDWHILE.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_WORKSHEET_COND_FORMAT_CS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_IXML_RULE                   TYPE REF TO IF_IXML_ELEMENT
* | [--->] IO_STYLE_COND                  TYPE REF TO ZCL_EXCEL_STYLE_COND
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_worksheet_cond_format_cs.
    DATA: lo_ixml_nodes    TYPE REF TO if_ixml_node_collection,
          lo_ixml_iterator TYPE REF TO if_ixml_node_iterator,
          lo_ixml          TYPE REF TO if_ixml_element.


    lo_ixml_nodes ?= io_ixml_rule->get_elements_by_tag_name( 'cfvo' ).
    lo_ixml_iterator = lo_ixml_nodes->create_iterator( ).
    lo_ixml ?= lo_ixml_iterator->get_next( ).
    WHILE lo_ixml IS BOUND.

      CASE sy-index.
        WHEN 1.
          io_style_cond->mode_colorscale-cfvo1_type  = lo_ixml->get_attribute_ns( 'type' ).
          io_style_cond->mode_colorscale-cfvo1_value = lo_ixml->get_attribute_ns( 'val' ).

        WHEN 2.
          io_style_cond->mode_colorscale-cfvo2_type  = lo_ixml->get_attribute_ns( 'type' ).
          io_style_cond->mode_colorscale-cfvo2_value = lo_ixml->get_attribute_ns( 'val' ).

        WHEN 3.
          io_style_cond->mode_colorscale-cfvo3_type  = lo_ixml->get_attribute_ns( 'type' ).
          io_style_cond->mode_colorscale-cfvo2_value = lo_ixml->get_attribute_ns( 'val' ).

        WHEN OTHERS.
          EXIT.
      ENDCASE.

      lo_ixml ?= lo_ixml_iterator->get_next( ).
    ENDWHILE.

    lo_ixml_nodes ?= io_ixml_rule->get_elements_by_tag_name( 'color' ).
    lo_ixml_iterator = lo_ixml_nodes->create_iterator( ).
    lo_ixml ?= lo_ixml_iterator->get_next( ).
    WHILE lo_ixml IS BOUND.

      CASE sy-index.
        WHEN 1.
          io_style_cond->mode_colorscale-colorrgb1  = lo_ixml->get_attribute_ns( 'rgb' ).

        WHEN 2.
          io_style_cond->mode_colorscale-colorrgb2  = lo_ixml->get_attribute_ns( 'rgb' ).

        WHEN 3.
          io_style_cond->mode_colorscale-colorrgb3  = lo_ixml->get_attribute_ns( 'rgb' ).

        WHEN OTHERS.
          EXIT.
      ENDCASE.

      lo_ixml ?= lo_ixml_iterator->get_next( ).
    ENDWHILE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_WORKSHEET_COND_FORMAT_DB
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_IXML_RULE                   TYPE REF TO IF_IXML_ELEMENT
* | [--->] IO_STYLE_COND                  TYPE REF TO ZCL_EXCEL_STYLE_COND
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_worksheet_cond_format_db.
    DATA: lo_ixml_nodes    TYPE REF TO if_ixml_node_collection,
          lo_ixml_iterator TYPE REF TO if_ixml_node_iterator,
          lo_ixml          TYPE REF TO if_ixml_element.

    lo_ixml ?= io_ixml_rule->find_from_name( 'color' ).
    IF lo_ixml IS BOUND.
      io_style_cond->mode_databar-colorrgb = lo_ixml->get_attribute_ns( 'rgb' ).
    ENDIF.

    lo_ixml_nodes ?= io_ixml_rule->get_elements_by_tag_name( 'cfvo' ).
    lo_ixml_iterator = lo_ixml_nodes->create_iterator( ).
    lo_ixml ?= lo_ixml_iterator->get_next( ).
    WHILE lo_ixml IS BOUND.

      CASE sy-index.
        WHEN 1.
          io_style_cond->mode_databar-cfvo1_type  = lo_ixml->get_attribute_ns( 'type' ).
          io_style_cond->mode_databar-cfvo1_value = lo_ixml->get_attribute_ns( 'val' ).

        WHEN 2.
          io_style_cond->mode_databar-cfvo2_type  = lo_ixml->get_attribute_ns( 'type' ).
          io_style_cond->mode_databar-cfvo2_value = lo_ixml->get_attribute_ns( 'val' ).

        WHEN OTHERS.
          EXIT.
      ENDCASE.

      lo_ixml ?= lo_ixml_iterator->get_next( ).
    ENDWHILE.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_WORKSHEET_COND_FORMAT_EX
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_IXML_RULE                   TYPE REF TO IF_IXML_ELEMENT
* | [--->] IO_STYLE_COND                  TYPE REF TO ZCL_EXCEL_STYLE_COND
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_worksheet_cond_format_ex.
    DATA: lo_ixml_nodes      TYPE REF TO if_ixml_node_collection,
          lo_ixml_iterator   TYPE REF TO if_ixml_node_iterator,
          lo_ixml            TYPE REF TO if_ixml_element,
          lv_dxf_style_index TYPE i,
          lo_excel_style     LIKE LINE OF me->styles.

    FIELD-SYMBOLS: <ls_dxf_style> LIKE LINE OF me->mt_dxf_styles.

    lv_dxf_style_index  = io_ixml_rule->get_attribute_ns( 'dxfId' ).
    READ TABLE me->mt_dxf_styles ASSIGNING <ls_dxf_style> WITH KEY dxf = lv_dxf_style_index.
    IF sy-subrc = 0.
      io_style_cond->mode_expression-cell_style = <ls_dxf_style>-guid.
    ENDIF.

    lo_ixml_nodes ?= io_ixml_rule->get_elements_by_tag_name( 'formula' ).
    lo_ixml_iterator = lo_ixml_nodes->create_iterator( ).
    lo_ixml ?= lo_ixml_iterator->get_next( ).
    WHILE lo_ixml IS BOUND.

      CASE sy-index.
        WHEN 1.
          io_style_cond->mode_expression-formula  = lo_ixml->get_value( ).


        WHEN OTHERS.
          EXIT.
      ENDCASE.

      lo_ixml ?= lo_ixml_iterator->get_next( ).
    ENDWHILE.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_WORKSHEET_COND_FORMAT_IS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_IXML_RULE                   TYPE REF TO IF_IXML_ELEMENT
* | [--->] IO_STYLE_COND                  TYPE REF TO ZCL_EXCEL_STYLE_COND
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_worksheet_cond_format_is.
    DATA: lo_ixml_nodes        TYPE REF TO if_ixml_node_collection,
          lo_ixml_iterator     TYPE REF TO if_ixml_node_iterator,
          lo_ixml              TYPE REF TO if_ixml_element,
          lo_ixml_rule_iconset TYPE REF TO if_ixml_element.

    lo_ixml_rule_iconset ?= io_ixml_rule->get_first_child( ).
    io_style_cond->mode_iconset-iconset   = lo_ixml_rule_iconset->get_attribute_ns( 'iconSet' ).
    io_style_cond->mode_iconset-showvalue = lo_ixml_rule_iconset->get_attribute_ns( 'showValue' ).
    lo_ixml_nodes ?= lo_ixml_rule_iconset->get_elements_by_tag_name( 'cfvo' ).
    lo_ixml_iterator = lo_ixml_nodes->create_iterator( ).
    lo_ixml ?= lo_ixml_iterator->get_next( ).
    WHILE lo_ixml IS BOUND.

      CASE sy-index.
        WHEN 1.
          io_style_cond->mode_iconset-cfvo1_type  = lo_ixml->get_attribute_ns( 'type' ).
          io_style_cond->mode_iconset-cfvo1_value = lo_ixml->get_attribute_ns( 'val' ).

        WHEN 2.
          io_style_cond->mode_iconset-cfvo2_type  = lo_ixml->get_attribute_ns( 'type' ).
          io_style_cond->mode_iconset-cfvo2_value = lo_ixml->get_attribute_ns( 'val' ).

        WHEN 3.
          io_style_cond->mode_iconset-cfvo3_type  = lo_ixml->get_attribute_ns( 'type' ).
          io_style_cond->mode_iconset-cfvo3_value = lo_ixml->get_attribute_ns( 'val' ).

        WHEN 4.
          io_style_cond->mode_iconset-cfvo4_type  = lo_ixml->get_attribute_ns( 'type' ).
          io_style_cond->mode_iconset-cfvo4_value = lo_ixml->get_attribute_ns( 'val' ).

        WHEN 5.
          io_style_cond->mode_iconset-cfvo5_type  = lo_ixml->get_attribute_ns( 'type' ).
          io_style_cond->mode_iconset-cfvo5_value = lo_ixml->get_attribute_ns( 'val' ).

        WHEN OTHERS.
          EXIT.
      ENDCASE.

      lo_ixml ?= lo_ixml_iterator->get_next( ).
    ENDWHILE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_WORKSHEET_COND_FORMAT_T10
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_IXML_RULE                   TYPE REF TO IF_IXML_ELEMENT
* | [--->] IO_STYLE_COND                  TYPE REF TO ZCL_EXCEL_STYLE_COND
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_worksheet_cond_format_t10.
    DATA: lv_dxf_style_index TYPE i.

    FIELD-SYMBOLS: <ls_dxf_style> LIKE LINE OF me->mt_dxf_styles.

    io_style_cond->mode_top10-topxx_count  = io_ixml_rule->get_attribute_ns( 'rank' ).        " Top10, Top20, Top 50...

    io_style_cond->mode_top10-percent      = io_ixml_rule->get_attribute_ns( 'percent' ).     " Top10 percent instead of Top10 values
    IF io_style_cond->mode_top10-percent = '1'.
      io_style_cond->mode_top10-percent = 'X'.
    ELSE.
      io_style_cond->mode_top10-percent = ' '.
    ENDIF.

    io_style_cond->mode_top10-bottom       = io_ixml_rule->get_attribute_ns( 'bottom' ).      " Bottom10 instead of Top10
    IF io_style_cond->mode_top10-bottom = '1'.
      io_style_cond->mode_top10-bottom = 'X'.
    ELSE.
      io_style_cond->mode_top10-bottom = ' '.
    ENDIF.
*--------------------------------------------------------------------*
* Cell formatting for top10
*--------------------------------------------------------------------*
    lv_dxf_style_index  = io_ixml_rule->get_attribute_ns( 'dxfId' ).
    READ TABLE me->mt_dxf_styles ASSIGNING <ls_dxf_style> WITH KEY dxf = lv_dxf_style_index.
    IF sy-subrc = 0.
      io_style_cond->mode_top10-cell_style = <ls_dxf_style>-guid.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_WORKSHEET_DRAWING
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_PATH                        TYPE        STRING
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_worksheet_drawing.

    TYPES: BEGIN OF t_c_nv_pr,
             name TYPE string,
             id   TYPE string,
           END OF t_c_nv_pr.

    TYPES: BEGIN OF t_blip,
             cstate TYPE string,
             embed  TYPE string,
           END OF t_blip.

    TYPES: BEGIN OF t_chart,
             id TYPE string,
           END OF t_chart.

    CONSTANTS: lc_xml_attr_true     TYPE string VALUE 'true',
               lc_xml_attr_true_int TYPE string VALUE '1'.
    CONSTANTS: lc_rel_chart TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart',
               lc_rel_image TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image'.

    DATA: drawing           TYPE REF TO if_ixml_document,
          anchors           TYPE REF TO if_ixml_node_collection,
          node              TYPE REF TO if_ixml_element,
          coll_length       TYPE i,
          iterator          TYPE REF TO if_ixml_node_iterator,
          anchor_elem       TYPE REF TO if_ixml_element,

          relationship      TYPE t_relationship,
          rel_drawings      TYPE t_rel_drawings,
          rel_drawing       TYPE t_rel_drawing,
          rels_drawing      TYPE REF TO if_ixml_document,
          rels_drawing_path TYPE string,
          stripped_name     TYPE chkfile,
          dirname           TYPE string,

          path              TYPE string,
          path2             TYPE text255,
          file_ext2         TYPE char10.

    " Read Workbook Relationships
    CALL FUNCTION 'TRINT_SPLIT_FILE_AND_PATH'
      EXPORTING
        full_name     = ip_path
      IMPORTING
        stripped_name = stripped_name
        file_path     = dirname.
    CONCATENATE dirname '_rels/' stripped_name '.rels'
      INTO rels_drawing_path.
    rels_drawing_path = resolve_path( rels_drawing_path ).
    rels_drawing = me->get_ixml_from_zip_archive( rels_drawing_path ).
    node ?= rels_drawing->find_from_name( 'Relationship' ).
    WHILE node IS BOUND.
      fill_struct_from_attributes( EXPORTING ip_element = node CHANGING cp_structure = relationship ).

      rel_drawing-id = relationship-id.

      CONCATENATE dirname relationship-target INTO path.
      path = resolve_path( path ).
      rel_drawing-content = me->get_from_zip_archive( path ). "------------> This is for template usage

      path2 = path.
      zcl_excel_common=>split_file( EXPORTING ip_file = path2
                                    IMPORTING ep_extension = file_ext2 ).
      rel_drawing-file_ext = file_ext2.

      "-------------Added by Alessandro Iannacci - Should load graph xml
      CASE relationship-type.
        WHEN lc_rel_chart.
          "Read chart xml
          rel_drawing-content_xml = me->get_ixml_from_zip_archive( path ).
        WHEN OTHERS.
      ENDCASE.
      "----------------------------


      APPEND rel_drawing TO rel_drawings.

      node ?= node->get_next( ).
    ENDWHILE.

    drawing = me->get_ixml_from_zip_archive( ip_path ).

* one-cell anchor **************
    anchors = drawing->get_elements_by_tag_name( name = 'oneCellAnchor' namespace = 'xdr' ).
    coll_length = anchors->get_length( ).
    iterator = anchors->create_iterator( ).
    DO coll_length TIMES.
      anchor_elem ?= iterator->get_next( ).

      CALL METHOD me->load_drawing_anchor
        EXPORTING
          io_anchor_element   = anchor_elem
          io_worksheet        = io_worksheet
          it_related_drawings = rel_drawings.

    ENDDO.

* two-cell anchor ******************
    anchors = drawing->get_elements_by_tag_name( name = 'twoCellAnchor' namespace = 'xdr' ).
    coll_length = anchors->get_length( ).
    iterator = anchors->create_iterator( ).
    DO coll_length TIMES.
      anchor_elem ?= iterator->get_next( ).

      CALL METHOD me->load_drawing_anchor
        EXPORTING
          io_anchor_element   = anchor_elem
          io_worksheet        = io_worksheet
          it_related_drawings = rel_drawings.

    ENDDO.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_WORKSHEET_HYPERLINKS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_IXML_WORKSHEET              TYPE REF TO IF_IXML_DOCUMENT
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [--->] IT_EXTERNAL_HYPERLINKS         TYPE        GTT_EXTERNAL_HYPERLINKS
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_worksheet_hyperlinks.

    DATA: lo_ixml_hyperlinks TYPE REF TO if_ixml_node_collection,
          lo_ixml_hyperlink  TYPE REF TO if_ixml_element,
          lo_ixml_iterator   TYPE REF TO if_ixml_node_iterator,
          lv_row             TYPE zexcel_cell_row,
          lv_column          TYPE zexcel_cell_column_alpha,
          lo_hyperlink       TYPE REF TO zcl_excel_hyperlink,
          lv_value           TYPE zexcel_cell_value.

    DATA: BEGIN OF ls_hyperlink,
            ref      TYPE string,
            display  TYPE string,
            location TYPE string,
            tooltip  TYPE string,
            r_id     TYPE string,
          END OF ls_hyperlink.

    FIELD-SYMBOLS: <ls_external_hyperlink> LIKE LINE OF it_external_hyperlinks.

    lo_ixml_hyperlinks =  io_ixml_worksheet->get_elements_by_tag_name( name = 'hyperlink' ).
    lo_ixml_iterator   =  lo_ixml_hyperlinks->create_iterator( ).
    lo_ixml_hyperlink  ?= lo_ixml_iterator->get_next( ).
    WHILE lo_ixml_hyperlink IS BOUND.

      CLEAR ls_hyperlink.
      CLEAR lo_hyperlink.

      ls_hyperlink-ref      = lo_ixml_hyperlink->get_attribute_ns( 'ref' ).
      ls_hyperlink-display  = lo_ixml_hyperlink->get_attribute_ns( 'display' ).
      ls_hyperlink-location = lo_ixml_hyperlink->get_attribute_ns( 'location' ).
      ls_hyperlink-tooltip  = lo_ixml_hyperlink->get_attribute_ns( 'tooltip' ).
      ls_hyperlink-r_id     = lo_ixml_hyperlink->get_attribute( name      = 'id'
                                                                namespace = 'r' ).
      IF ls_hyperlink-r_id IS INITIAL.  " Internal link
        lo_hyperlink = zcl_excel_hyperlink=>create_internal_link( iv_location = ls_hyperlink-location ).
      ELSE.                             " External link
        READ TABLE it_external_hyperlinks ASSIGNING <ls_external_hyperlink> WITH TABLE KEY id = ls_hyperlink-r_id.
        IF sy-subrc = 0.
          lo_hyperlink = zcl_excel_hyperlink=>create_external_link( iv_url = <ls_external_hyperlink>-target ).
        ENDIF.
      ENDIF.
      IF lo_hyperlink IS BOUND.  " because of unsupported external links

        zcl_excel_common=>convert_columnrow2column_a_row( EXPORTING
                                                            i_columnrow = ls_hyperlink-ref
                                                          IMPORTING
                                                            e_row       = lv_row
                                                            e_column    = lv_column ).
* Currently it is not allowed to pass a hyperlink w/o text, but text has already been read.
* So just reread it and be done with it
        io_worksheet->get_cell( EXPORTING
                                  ip_column     = lv_column
                                   ip_row       = lv_row
                                 IMPORTING
                                   ep_value     = lv_value ).
        io_worksheet->set_cell( ip_column     = lv_column
                                ip_row        = lv_row
                                ip_value      = lv_value
                                ip_hyperlink  = lo_hyperlink ).
      ENDIF.

      lo_ixml_hyperlink ?= lo_ixml_iterator->get_next( ).

    ENDWHILE.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_WORKSHEET_PAGEBREAKS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_IXML_WORKSHEET              TYPE REF TO IF_IXML_DOCUMENT
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_worksheet_pagebreaks.

    DATA: lo_node           TYPE REF TO if_ixml_element,
          lo_ixml_rowbreaks TYPE REF TO if_ixml_node_collection,
          lo_ixml_colbreaks TYPE REF TO if_ixml_node_collection,
          lo_ixml_iterator  TYPE REF TO if_ixml_node_iterator,
          lo_ixml_rowbreak  TYPE REF TO if_ixml_element,
          lo_ixml_colbreak  TYPE REF TO if_ixml_element,
          lo_style_cond     TYPE REF TO zcl_excel_style_cond,
          lv_count          TYPE i.


    DATA: lt_pagebreaks TYPE STANDARD TABLE OF zcl_excel_worksheet_pagebreaks=>ts_pagebreak_at,
          lo_pagebreaks TYPE REF TO zcl_excel_worksheet_pagebreaks.

    FIELD-SYMBOLS: <ls_pagebreak_row> LIKE LINE OF lt_pagebreaks.
    FIELD-SYMBOLS: <ls_pagebreak_col> LIKE LINE OF lt_pagebreaks.

*--------------------------------------------------------------------*
* Get minimal number of cells where to add pagebreaks
* Since rows and columns are handled in separate nodes
* Build table to identify these cells
*--------------------------------------------------------------------*
    lo_node ?= io_ixml_worksheet->find_from_name( 'rowBreaks' ).
    CHECK lo_node IS BOUND.
    lo_ixml_rowbreaks =  lo_node->get_elements_by_tag_name( name = 'brk' ).
    lo_ixml_iterator  =  lo_ixml_rowbreaks->create_iterator( ).
    lo_ixml_rowbreak  ?= lo_ixml_iterator->get_next( ).
    WHILE lo_ixml_rowbreak IS BOUND.
      APPEND INITIAL LINE TO lt_pagebreaks ASSIGNING <ls_pagebreak_row>.
      <ls_pagebreak_row>-cell_row = lo_ixml_rowbreak->get_attribute_ns( 'id' ).

      lo_ixml_rowbreak  ?= lo_ixml_iterator->get_next( ).
    ENDWHILE.
    CHECK <ls_pagebreak_row> IS ASSIGNED.

    lo_node ?= io_ixml_worksheet->find_from_name( 'colBreaks' ).
    CHECK lo_node IS BOUND.
    lo_ixml_colbreaks =  lo_node->get_elements_by_tag_name( name = 'brk' ).
    lo_ixml_iterator  =  lo_ixml_colbreaks->create_iterator( ).
    lo_ixml_colbreak  ?= lo_ixml_iterator->get_next( ).
    CLEAR lv_count.
    WHILE lo_ixml_colbreak IS BOUND.
      ADD 1 TO lv_count.
      READ TABLE lt_pagebreaks INDEX lv_count ASSIGNING <ls_pagebreak_col>.
      IF sy-subrc <> 0.
        APPEND INITIAL LINE TO lt_pagebreaks ASSIGNING <ls_pagebreak_col>.
        <ls_pagebreak_col>-cell_row = <ls_pagebreak_row>-cell_row.
      ENDIF.
      <ls_pagebreak_col>-cell_column = lo_ixml_colbreak->get_attribute_ns( 'id' ).

      lo_ixml_colbreak  ?= lo_ixml_iterator->get_next( ).
    ENDWHILE.
*--------------------------------------------------------------------*
* Finally add each pagebreak
*--------------------------------------------------------------------*
    lo_pagebreaks = io_worksheet->get_pagebreaks( ).
    LOOP AT lt_pagebreaks ASSIGNING <ls_pagebreak_row>.
      lo_pagebreaks->add_pagebreak( ip_column = <ls_pagebreak_row>-cell_column
                                    ip_row    = <ls_pagebreak_row>-cell_row ).
    ENDLOOP.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->LOAD_WORKSHEET_PAGEMARGINS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_IXML_WORKSHEET              TYPE REF TO IF_IXML_DOCUMENT
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_worksheet_pagemargins.

    TYPES:  BEGIN OF lty_page_margins,
              footer TYPE string,
              header TYPE string,
              bottom TYPE string,
              top    TYPE string,
              right  TYPE string,
              left   TYPE string,
            END OF lty_page_margins.

    DATA:lo_ixml_pagemargins_elem TYPE REF TO if_ixml_element,
         ls_pagemargins           TYPE lty_page_margins.


    lo_ixml_pagemargins_elem = io_ixml_worksheet->find_from_name( 'pageMargins' ).
    IF lo_ixml_pagemargins_elem IS NOT INITIAL.
      fill_struct_from_attributes( EXPORTING
                                     ip_element = lo_ixml_pagemargins_elem
                                   CHANGING
                                     cp_structure = ls_pagemargins ).
      io_worksheet->sheet_setup->margin_bottom = zcl_excel_common=>excel_string_to_number( ls_pagemargins-bottom ).
      io_worksheet->sheet_setup->margin_footer = zcl_excel_common=>excel_string_to_number( ls_pagemargins-footer ).
      io_worksheet->sheet_setup->margin_header = zcl_excel_common=>excel_string_to_number( ls_pagemargins-header ).
      io_worksheet->sheet_setup->margin_left   = zcl_excel_common=>excel_string_to_number( ls_pagemargins-left   ).
      io_worksheet->sheet_setup->margin_right  = zcl_excel_common=>excel_string_to_number( ls_pagemargins-right  ).
      io_worksheet->sheet_setup->margin_top    = zcl_excel_common=>excel_string_to_number( ls_pagemargins-top    ).
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_READER_2007->READ_FROM_APPLSERVER
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_FILENAME                     TYPE        CSEQUENCE
* | [<-()] R_EXCEL_DATA                   TYPE        XSTRING
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD read_from_applserver.

    DATA: lv_filelength         TYPE i,
          lt_binary_data        TYPE STANDARD TABLE OF x255 WITH NON-UNIQUE DEFAULT KEY,
          ls_binary_data        LIKE LINE OF lt_binary_data,
          lv_filename           TYPE string,
          lv_max_length_line    TYPE i,
          lv_actual_length_line TYPE i,
          lv_errormessage       TYPE string.

    MOVE i_filename TO lv_filename.

    DESCRIBE FIELD ls_binary_data LENGTH lv_max_length_line IN BYTE MODE.
    OPEN DATASET lv_filename FOR INPUT IN BINARY MODE.
    IF sy-subrc <> 0.
      lv_errormessage = 'A problem occured when reading the file'(001).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.
    WHILE sy-subrc = 0.

      READ DATASET lv_filename INTO ls_binary_data MAXIMUM LENGTH lv_max_length_line ACTUAL LENGTH lv_actual_length_line.
      APPEND ls_binary_data TO lt_binary_data.
      lv_filelength = lv_filelength + lv_actual_length_line.

    ENDWHILE.
    CLOSE DATASET lv_filename.

*--------------------------------------------------------------------*
* Binary data needs to be provided as XSTRING for further processing
*--------------------------------------------------------------------*
    CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
      EXPORTING
        input_length = lv_filelength
      IMPORTING
        buffer       = r_excel_data
      TABLES
        binary_tab   = lt_binary_data.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_READER_2007->READ_FROM_LOCAL_FILE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_FILENAME                     TYPE        CSEQUENCE
* | [<-()] R_EXCEL_DATA                   TYPE        XSTRING
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD read_from_local_file.
    DATA:  lv_filelength   TYPE i,
           lt_binary_data  TYPE STANDARD TABLE OF x255 WITH NON-UNIQUE DEFAULT KEY,
           ls_binary_data  LIKE LINE OF lt_binary_data,
           lv_filename     TYPE string,
           lv_errormessage TYPE string.

    MOVE i_filename TO lv_filename.

    cl_gui_frontend_services=>gui_upload( EXPORTING
                                            filename                = lv_filename
                                            filetype                = 'BIN'         " We are basically working with zipped directories --> force binary read
                                          IMPORTING
                                            filelength              = lv_filelength
                                          CHANGING
                                            data_tab                = lt_binary_data
                                          EXCEPTIONS
                                            file_open_error         = 1
                                            file_read_error         = 2
                                            no_batch                = 3
                                            gui_refuse_filetransfer = 4
                                            invalid_type            = 5
                                            no_authority            = 6
                                            unknown_error           = 7
                                            bad_data_format         = 8
                                            header_not_allowed      = 9
                                            separator_not_allowed   = 10
                                            header_too_long         = 11
                                            unknown_dp_error        = 12
                                            access_denied           = 13
                                            dp_out_of_memory        = 14
                                            disk_full               = 15
                                            dp_timeout              = 16
                                            not_supported_by_gui    = 17
                                            error_no_gui            = 18
                                            OTHERS                  = 19 ).
    IF sy-subrc <> 0.
      lv_errormessage = 'A problem occured when reading the file'(001).
      zcx_excel=>raise_text( lv_errormessage ).
    ENDIF.

*--------------------------------------------------------------------*
* Binary data needs to be provided as XSTRING for further processing
*--------------------------------------------------------------------*
    CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
      EXPORTING
        input_length = lv_filelength
      IMPORTING
        buffer       = r_excel_data
      TABLES
        binary_tab   = lt_binary_data.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Protected Method ZCL_EXCEL_READER_2007=>RESOLVE_PATH
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_PATH                        TYPE        STRING
* | [<-()] RP_RESULT                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD resolve_path.
*--------------------------------------------------------------------*
* ToDos:
*        2do§1   Determine whether the replacement should be done
*                iterative to allow /../../..   or something alike
*        2do§2   Determine whether /./ has to be supported as well
*        2do§3   Create unit-test for this method
*
*                Please don't just delete these ToDos if they are not
*                needed but leave a comment that states this
*--------------------------------------------------------------------*

*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,      (done)              2012-11-11
*              - ...
* changes: replaced previous coding by regular expression
*          adding comments to explain what we are trying to achieve
*--------------------------------------------------------------------*

*--------------------------------------------------------------------*
* §1  This routine will receive a path, that may have a relative pathname (/../) included somewhere
*     The output should be a resolved path without relative references
*     Example:  Input     xl/worksheets/../drawings/drawing1.xml
*               Output    xl/drawings/drawing1.xml
*--------------------------------------------------------------------*

    rp_result = ip_path.
*--------------------------------------------------------------------*
* §1  Remove relative pathnames
*--------------------------------------------------------------------*
*  Regular expression   [^/]*/\.\./
*                       [^/]*            --> any number of characters other than /
*   followed by              /\.\./      --> the sequence /../
*   ==> worksheets/../ will be found in the example
*--------------------------------------------------------------------*
    REPLACE REGEX '[^/]*/\.\./' IN rp_result WITH ``.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_READER_2007->RESOLVE_REFERENCED_FORMULAE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD resolve_referenced_formulae.
    TYPES:      BEGIN OF ty_referenced_cells,
                  sheet    TYPE REF TO zcl_excel_worksheet,
                  si       TYPE i,
                  row_from TYPE i,
                  row_to   TYPE i,
                  col_from TYPE i,
                  col_to   TYPE i,
                  formula  TYPE string,
                  ref_cell TYPE char10,
                END OF ty_referenced_cells.

    DATA:       ls_ref_formula       LIKE LINE OF me->mt_ref_formulae,
                lts_referenced_cells TYPE SORTED TABLE OF ty_referenced_cells WITH NON-UNIQUE KEY sheet si row_from row_to col_from col_to,
                ls_referenced_cell   LIKE LINE OF lts_referenced_cells,
                lv_col_from          TYPE zexcel_cell_column_alpha,
                lv_col_to            TYPE zexcel_cell_column_alpha,
                lv_resulting_formula TYPE string,
                lv_current_cell      TYPE char10.


    me->mt_ref_formulae = me->mt_ref_formulae.

*--------------------------------------------------------------------*
* Get referenced Cells,  Build ranges for easy lookup
*--------------------------------------------------------------------*
    LOOP AT me->mt_ref_formulae INTO ls_ref_formula WHERE ref <> space.

      CLEAR ls_referenced_cell.
      ls_referenced_cell-sheet      = ls_ref_formula-sheet.
      ls_referenced_cell-si         = ls_ref_formula-si.
      ls_referenced_cell-formula    = ls_ref_formula-formula.

      TRY.
          zcl_excel_common=>convert_range2column_a_row( EXPORTING i_range        = ls_ref_formula-ref
                                                        IMPORTING e_column_start = lv_col_from
                                                                  e_column_end   = lv_col_to
                                                                  e_row_start    = ls_referenced_cell-row_from
                                                                  e_row_end      = ls_referenced_cell-row_to  ).
          ls_referenced_cell-col_from = zcl_excel_common=>convert_column2int( lv_col_from ).
          ls_referenced_cell-col_to   = zcl_excel_common=>convert_column2int( lv_col_to ).


          CLEAR ls_referenced_cell-ref_cell.
          TRY.
              ls_referenced_cell-ref_cell(3) = zcl_excel_common=>convert_column2alpha( ls_ref_formula-column ).
              ls_referenced_cell-ref_cell+3  = ls_ref_formula-row.
              CONDENSE ls_referenced_cell-ref_cell NO-GAPS.
            CATCH zcx_excel.
          ENDTRY.

          INSERT ls_referenced_cell INTO TABLE lts_referenced_cells.
        CATCH zcx_excel.
      ENDTRY.

    ENDLOOP.

*  break x0009004.
*--------------------------------------------------------------------*
* For each referencing cell determine the referenced cell
* and resolve the formula
*--------------------------------------------------------------------*
    LOOP AT me->mt_ref_formulae INTO ls_ref_formula WHERE ref = space.


      CLEAR lv_current_cell.
      TRY.
          lv_current_cell(3) = zcl_excel_common=>convert_column2alpha( ls_ref_formula-column ).
          lv_current_cell+3  = ls_ref_formula-row.
          CONDENSE lv_current_cell NO-GAPS.
        CATCH zcx_excel.
      ENDTRY.

      LOOP AT lts_referenced_cells INTO ls_referenced_cell WHERE sheet     = ls_ref_formula-sheet
                                                             AND si        = ls_ref_formula-si
                                                             AND row_from <= ls_ref_formula-row
                                                             AND row_to   >= ls_ref_formula-row
                                                             AND col_from <= ls_ref_formula-column
                                                             AND col_to   >= ls_ref_formula-column.

        TRY.

            lv_resulting_formula = zcl_excel_common=>determine_resulting_formula( iv_reference_cell     = ls_referenced_cell-ref_cell
                                                                                  iv_reference_formula  = ls_referenced_cell-formula
                                                                                  iv_current_cell       = lv_current_cell ).

            ls_referenced_cell-sheet->set_cell_formula( ip_column   = ls_ref_formula-column
                                                        ip_row      = ls_ref_formula-row
                                                        ip_formula  = lv_resulting_formula ).
          CATCH zcx_excel.
        ENDTRY.
        EXIT.

      ENDLOOP.

    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_READER_2007->ZIF_EXCEL_READER~CAN_READ_FILE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
*  METHOD zif_excel_reader~can_read_file.
**--------------------------------------------------------------------*
** issue #230   - Pimp my Code
**              - Stefan Schmöcker,      (done)              2012-11-07
**              - ...
** changes: nothing done in code
**          but started discussion about killing this method
**--------------------------------------------------------------------*
** For now always Unknown
*    r_readable = abap_undefined.
*  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_READER_2007->ZIF_EXCEL_READER~LOAD
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_EXCEL2007                    TYPE        XSTRING
* | [--->] I_USE_ALTERNATE_ZIP            TYPE        SEOCLSNAME (default =SPACE)
* | [--->] IV_ZCL_EXCEL_CLASSNAME         TYPE        CLIKE(optional)
* | [<-()] R_EXCEL                        TYPE REF TO ZCL_EXCEL
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_reader~load.
*--------------------------------------------------------------------*
* ToDos:
*        2do§1   Map Document Properties to ZCL_EXCEL
*--------------------------------------------------------------------*

    CONSTANTS:  lcv_core_properties TYPE string VALUE 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties',
                lcv_office_document TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument'.

    DATA:       lo_rels         TYPE REF TO if_ixml_document,
                lo_node         TYPE REF TO if_ixml_element,
                ls_relationship TYPE t_relationship.

*--------------------------------------------------------------------*
* §1  Create EXCEL-Object we want to return to caller

* §2  We need to read the the file "\\_rels\.rels" because it tells
*     us where in this folder structure the data for the workbook
*     is located in the xlsx zip-archive
*
*     The xlsx Zip-archive has generally the following folder structure:
*       <root> |
*              |-->  _rels
*              |-->  doc_Props
*              |-->  xl |
*                       |-->  _rels
*                       |-->  theme
*                       |-->  worksheets

* §3  Extracting from this the path&file where the workbook is located
*     Following is an example how this file could be set up
*        <?xml version="1.0" encoding="UTF-8" standalone="true"?>
*        <Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
*            <Relationship Target="docProps/app.xml" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties" Id="rId3"/>
*            <Relationship Target="docProps/core.xml" Type="http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties" Id="rId2"/>
*            <Relationship Target="xl/workbook.xml" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Id="rId1"/>
*        </Relationships>
*--------------------------------------------------------------------*


*--------------------------------------------------------------------*
* §1  Create EXCEL-Object we want to return to caller
*--------------------------------------------------------------------*
    IF iv_zcl_excel_classname IS INITIAL.
      CREATE OBJECT r_excel.
    ELSE.
      CREATE OBJECT r_excel TYPE (iv_zcl_excel_classname).
    ENDIF.

    zip = create_zip_archive( i_xlsx_binary = i_excel2007
                              i_use_alternate_zip = i_use_alternate_zip ).

*--------------------------------------------------------------------*
* §2  Get file in folderstructure
*--------------------------------------------------------------------*
    lo_rels = get_ixml_from_zip_archive( '_rels/.rels' ).

*--------------------------------------------------------------------*
* §3  Cycle through the Relationship Tags and use the ones we need
*--------------------------------------------------------------------*
    lo_node ?= lo_rels->find_from_name( 'Relationship' ).   "#EC NOTEXT
    WHILE lo_node IS BOUND.

      fill_struct_from_attributes( EXPORTING
                                     ip_element   = lo_node
                                   CHANGING
                                     cp_structure = ls_relationship ).
      CASE ls_relationship-type.

        WHEN lcv_office_document.
*--------------------------------------------------------------------*
* Parse workbook - main part here
*--------------------------------------------------------------------*
          load_workbook( iv_workbook_full_filename  = ls_relationship-target
                         io_excel                   = r_excel ).

        WHEN lcv_core_properties.
          " 2do§1   Map Document Properties to ZCL_EXCEL

        WHEN OTHERS.

      ENDCASE.
      lo_node ?= lo_node->get_next( ).

    ENDWHILE.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_READER_2007->ZIF_EXCEL_READER~LOAD_FILE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_FILENAME                     TYPE        CSEQUENCE
* | [--->] I_USE_ALTERNATE_ZIP            TYPE        SEOCLSNAME (default =SPACE)
* | [--->] I_FROM_APPLSERVER              TYPE        SYBATCH (default =SY-BATCH)
* | [--->] IV_ZCL_EXCEL_CLASSNAME         TYPE        CLIKE(optional)
* | [<-()] R_EXCEL                        TYPE REF TO ZCL_EXCEL
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_reader~load_file.

    DATA: lv_excel_data TYPE xstring.

*--------------------------------------------------------------------*
* Read file into binary string
*--------------------------------------------------------------------*
    IF i_from_applserver = abap_true.
      lv_excel_data = read_from_applserver( i_filename ).
    ELSE.
      lv_excel_data = read_from_local_file( i_filename ).
    ENDIF.

*--------------------------------------------------------------------*
* Parse Excel data into ZCL_EXCEL object from binary string
*--------------------------------------------------------------------*
    r_excel = zif_excel_reader~load( i_excel2007            = lv_excel_data
                                     i_use_alternate_zip    = i_use_alternate_zip
                                     iv_zcl_excel_classname = iv_zcl_excel_classname ).

  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_converter IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_CONVERTER->ASK_OPTION
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RS_OPTION                      TYPE        ZEXCEL_S_CONVERTER_OPTION
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD ask_option.
    DATA: ls_sval      TYPE sval,
          lt_sval      TYPE STANDARD TABLE OF sval,
          l_returncode TYPE string,
          lt_fields    TYPE ddfields,
          ls_fields    TYPE dfies.

    FIELD-SYMBOLS: <fs> TYPE any.

    rs_option = ws_option.

    CALL FUNCTION 'DDIF_FIELDINFO_GET'
      EXPORTING
        tabname        = 'ZEXCEL_S_CONVERTER_OPTION'
      TABLES
        dfies_tab      = lt_fields
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    LOOP AT lt_fields INTO ls_fields.
      ASSIGN COMPONENT ls_fields-fieldname OF STRUCTURE ws_option TO <fs>.
      IF sy-subrc = 0.
        CLEAR ls_sval.
        ls_sval-tabname      = ls_fields-tabname.
        ls_sval-fieldname    = ls_fields-fieldname.
        ls_sval-value        = <fs>.
        ls_sval-field_attr   = space.
        ls_sval-field_obl    = space.
        ls_sval-comp_code    = space.
        ls_sval-fieldtext    = ls_fields-scrtext_m.
        ls_sval-comp_tab     = space.
        ls_sval-comp_field   = space.
        ls_sval-novaluehlp   = space.
        INSERT ls_sval INTO TABLE lt_sval.
      ENDIF.
    ENDLOOP.

    CALL FUNCTION 'POPUP_GET_VALUES'
      EXPORTING
        popup_title     = 'Excel creation options'(008)
      IMPORTING
        returncode      = l_returncode
      TABLES
        fields          = lt_sval
      EXCEPTIONS
        error_in_fields = 1
        OTHERS          = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSEIF l_returncode = 'A'.
      RAISE EXCEPTION TYPE zcx_excel.
    ELSE.
      LOOP AT lt_sval INTO ls_sval.
        ASSIGN COMPONENT ls_sval-fieldname OF STRUCTURE ws_option TO <fs>.
        IF sy-subrc = 0.
          <fs> = ls_sval-value.
        ENDIF.
      ENDLOOP.
      set_option( is_option = ws_option ) .
      rs_option = ws_option.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->BIND_CELLS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_FREEZE_COL                   TYPE        INT1
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD bind_cells.

* Do we need subtotals with grouping
    READ TABLE wt_fieldcatalog TRANSPORTING NO FIELDS WITH KEY is_subtotalled = abap_true.
    IF sy-subrc = 0  .
      r_freeze_col = loop_subtotal( i_row_int = w_row_int
                                    i_col_int  = w_col_int ) .
    ELSE.
      r_freeze_col = loop_normal( i_row_int = w_row_int
                                  i_col_int = w_col_int ) .
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->BIND_TABLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_STYLE_TABLE                  TYPE        ZEXCEL_TABLE_STYLE
* | [<-()] R_FREEZE_COL                   TYPE        INT1
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD bind_table.
    DATA: lt_field_catalog TYPE zexcel_t_fieldcatalog,
          ls_field_catalog TYPE zexcel_s_fieldcatalog,
          ls_fcat          TYPE zexcel_s_converter_fcat,
          lo_column        TYPE REF TO zcl_excel_column,
          lv_col_int       TYPE zexcel_cell_column,
          lv_col_alpha     TYPE zexcel_cell_column_alpha,
          ls_settings      TYPE zexcel_s_table_settings,
          lv_line          TYPE i.

    FIELD-SYMBOLS: <fs_tab>         TYPE ANY TABLE.

    ASSIGN wo_data->* TO <fs_tab> .

    ls_settings-table_style      = i_style_table.
    ls_settings-top_left_column  = zcl_excel_common=>convert_column2alpha( ip_column = w_col_int ).
    ls_settings-top_left_row     = w_row_int.
    ls_settings-show_row_stripes = ws_layout-is_stripped.

    DESCRIBE TABLE  wt_fieldcatalog  LINES lv_line.
    lv_line = lv_line + 1 + w_col_int.
    ls_settings-bottom_right_column = zcl_excel_common=>convert_column2alpha( ip_column = lv_line ).

    DESCRIBE TABLE <fs_tab> LINES lv_line.
    ls_settings-bottom_right_row = lv_line + 1 + w_row_int.
    SORT wt_fieldcatalog BY position.
    LOOP AT wt_fieldcatalog INTO ls_fcat.
      MOVE-CORRESPONDING ls_fcat TO ls_field_catalog.
      ls_field_catalog-dynpfld = abap_true.
      INSERT ls_field_catalog INTO TABLE lt_field_catalog.
    ENDLOOP.

    wo_worksheet->bind_table(
      EXPORTING
        ip_table          = <fs_tab>
        it_field_catalog  = lt_field_catalog
        is_table_settings = ls_settings
      IMPORTING
        es_table_settings = ls_settings
           ).
    LOOP AT wt_fieldcatalog INTO ls_fcat.
      lv_col_int = w_col_int + ls_fcat-position - 1.
      lv_col_alpha = zcl_excel_common=>convert_column2alpha( lv_col_int ).
* Freeze panes
      IF ls_fcat-fix_column = abap_true.
        ADD 1 TO r_freeze_col.
      ENDIF.
* Now let's check for optimized
      IF ls_fcat-is_optimized = abap_true.
        lo_column = wo_worksheet->get_column( ip_column = lv_col_alpha ).
        lo_column->set_auto_size( ip_auto_size = abap_true ) .
      ENDIF.
* Now let's check for visible
      IF ls_fcat-is_hidden = abap_true.
        lo_column = wo_worksheet->get_column( ip_column = lv_col_alpha ).
        lo_column->set_visible( ip_visible = abap_false ) .
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_EXCEL_CONVERTER=>CLASS_CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD class_constructor.
    DATA: ls_objects TYPE ts_alv_types.
    DATA: ls_option TYPE zexcel_s_converter_option,
          l_uname   TYPE sy-uname.

    GET PARAMETER ID 'ZUS' FIELD l_uname.
    IF l_uname IS INITIAL OR l_uname = space.
      l_uname = sy-uname.
    ENDIF.

* Object CL_GUI_ALV_GRID
    ls_objects-seoclass  = 'CL_GUI_ALV_GRID'.
    ls_objects-clsname   = 'ZCL_EXCEL_CONVERTER_ALV_GRID'.
    INSERT ls_objects INTO TABLE wt_objects.

* Object CL_SALV_TABLE
    ls_objects-seoclass  = 'CL_SALV_TABLE'.
    ls_objects-clsname   = 'ZCL_EXCEL_CONVERTER_SALV_TABLE'.
    INSERT ls_objects INTO TABLE wt_objects.

* Object CL_SALV_RESULT
    ls_objects-seoclass  = 'CL_SALV_EX_RESULT_DATA_TABLE '.
    ls_objects-clsname   = 'ZCL_EXCEL_CONVERTER_RESULT_EX'.
    INSERT ls_objects INTO TABLE wt_objects.
* Object CL_SALV_WD_RESULT
    ls_objects-seoclass  = 'CL_SALV_WD_RESULT_DATA_TABLE '.
    ls_objects-clsname   = 'ZCL_EXCEL_CONVERTER_RESULT_WD'.
    INSERT ls_objects INTO TABLE wt_objects.

    CONCATENATE 'EXCEL_' sy-uname INTO ws_indx-srtfd.

    IMPORT p1 = ls_option FROM DATABASE indx(xl) TO ws_indx ID ws_indx-srtfd.

    IF sy-subrc = 0.
      ws_option = ls_option.
    ELSE.
      init_option( ) .
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->CLEAN_FIELDCATALOG
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD clean_fieldcatalog.
    DATA: l_position TYPE int1.

    FIELD-SYMBOLS: <fs_sfcat>   TYPE zexcel_s_converter_fcat.

    SORT wt_fieldcatalog BY position col_id.

    CLEAR l_position.
    LOOP AT wt_fieldcatalog ASSIGNING <fs_sfcat>.
      ADD 1 TO l_position.
      <fs_sfcat>-position = l_position.
* Default stype with alignment and format
      <fs_sfcat>-style_hdr      = get_style( i_type      = c_type_hdr
                                             i_alignment = <fs_sfcat>-alignment ).
      IF ws_layout-is_stripped = abap_true.
        <fs_sfcat>-style_stripped = get_style( i_type      = c_type_str
                                               i_alignment = <fs_sfcat>-alignment
                                               i_inttype   = <fs_sfcat>-inttype
                                               i_decimals  = <fs_sfcat>-decimals   ).
      ENDIF.
      <fs_sfcat>-style_normal   = get_style( i_type      = c_type_nor
                                             i_alignment = <fs_sfcat>-alignment
                                             i_inttype   = <fs_sfcat>-inttype
                                             i_decimals  = <fs_sfcat>-decimals   ).
      <fs_sfcat>-style_subtotal = get_style( i_type      = c_type_sub
                                             i_alignment = <fs_sfcat>-alignment
                                             i_inttype   = <fs_sfcat>-inttype
                                             i_decimals  = <fs_sfcat>-decimals   ).
      <fs_sfcat>-style_total    = get_style( i_type      = c_type_tot
                                             i_alignment = <fs_sfcat>-alignment
                                             i_inttype   = <fs_sfcat>-inttype
                                             i_decimals  = <fs_sfcat>-decimals   ).
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_CONVERTER->CONVERT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_OPTION                      TYPE        ZEXCEL_S_CONVERTER_OPTION(optional)
* | [--->] IO_ALV                         TYPE REF TO OBJECT(optional)
* | [--->] IT_TABLE                       TYPE        STANDARD TABLE(optional)
* | [--->] I_ROW_INT                      TYPE        I (default =1)
* | [--->] I_COLUMN_INT                   TYPE        I (default =1)
* | [--->] I_TABLE                        TYPE        FLAG(optional)
* | [--->] I_STYLE_TABLE                  TYPE        ZEXCEL_TABLE_STYLE(optional)
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET(optional)
* | [<-->] CO_EXCEL                       TYPE REF TO ZCL_EXCEL(optional)
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD convert.

    IF is_option IS SUPPLIED.
      ws_option = is_option.
    ENDIF.

    execute_converter( EXPORTING io_object   = io_alv
                                 it_table    = it_table ) .

    IF io_worksheet IS SUPPLIED AND io_worksheet IS BOUND.
      wo_worksheet = io_worksheet.
    ENDIF.
    IF co_excel IS SUPPLIED.
      IF co_excel IS NOT BOUND.
        CREATE OBJECT co_excel.
        co_excel->zif_excel_book_properties~creator = sy-uname.
      ENDIF.
      wo_excel = co_excel.
    ENDIF.

* Move table to data object and clean it up
    IF wt_fieldcatalog IS NOT INITIAL.
      create_table( ).
    ELSE.
      wo_data = wo_table .
    ENDIF.

    IF wo_excel IS NOT BOUND.
      CREATE OBJECT wo_excel.
      wo_excel->zif_excel_book_properties~creator = sy-uname.
    ENDIF.
    IF wo_worksheet IS NOT BOUND.
      " Get active sheet
      wo_worksheet = wo_excel->get_active_worksheet( ).
      wo_worksheet->set_title( ip_title = 'Sheet1'(001) ).
    ENDIF.

    IF i_row_int <= 0.
      w_row_int = 1.
    ELSE.
      w_row_int = i_row_int.
    ENDIF.
    IF i_column_int <= 0.
      w_col_int = 1.
    ELSE.
      w_col_int = i_column_int.
    ENDIF.

    create_worksheet( i_table       = i_table
                      i_style_table = i_style_table ) .

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->CREATE_COLOR_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_STYLE                        TYPE        ZEXCEL_CELL_STYLE
* | [--->] IS_COLORS                      TYPE        ZEXCEL_S_CONVERTER_COL
* | [<-()] RO_STYLE                       TYPE REF TO ZCL_EXCEL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_color_style.
    DATA: ls_styles TYPE ts_styles.
    DATA: lo_style TYPE REF TO zcl_excel_style.

    READ TABLE wt_styles INTO ls_styles WITH KEY guid = i_style.
    IF sy-subrc = 0.
      lo_style                 = wo_excel->add_new_style( ).
*    lo_style->borders        = ls_styles-style->borders.
*    lo_style->protection     = ls_styles-style->protection.
      lo_style->font->bold                 = ls_styles-style->font->bold.
      lo_style->alignment->horizontal      = ls_styles-style->alignment->horizontal.
      lo_style->number_format->format_code = ls_styles-style->number_format->format_code.

      lo_style->font->color-rgb      = is_colors-fontcolor.
      lo_style->fill->filltype       = zcl_excel_style_fill=>c_fill_solid.
      lo_style->fill->fgcolor-rgb    = is_colors-fillcolor.

      ro_style = lo_style.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->CREATE_FORMULAR_SUBTOTAL
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_ROW_INT_START                TYPE        ZEXCEL_CELL_ROW
* | [--->] I_ROW_INT_END                  TYPE        ZEXCEL_CELL_ROW
* | [--->] I_COLUMN                       TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [--->] I_TOTALS_FUNCTION              TYPE        ZEXCEL_TABLE_TOTALS_FUNCTION
* | [<-()] R_FORMULA                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_formular_subtotal.
    DATA: l_row_alpha_start TYPE string,
          l_row_alpha_end   TYPE string,
          l_func_num        TYPE string.

    l_row_alpha_start   = i_row_int_start.
    l_row_alpha_end     = i_row_int_end.

    l_func_num = get_function_number( i_totals_function = i_totals_function ).
    CONCATENATE 'SUBTOTAL(' l_func_num ',' i_column l_row_alpha_start ':' i_column l_row_alpha_end ')' INTO r_formula.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->CREATE_FORMULAR_TOTAL
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_ROW_INT                      TYPE        ZEXCEL_CELL_ROW
* | [--->] I_COLUMN                       TYPE        ZEXCEL_CELL_COLUMN_ALPHA
* | [--->] I_TOTALS_FUNCTION              TYPE        ZEXCEL_TABLE_TOTALS_FUNCTION
* | [<-()] R_FORMULA                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_formular_total.
    DATA: l_row_alpha   TYPE string,
          l_row_e_alpha TYPE string.

    l_row_alpha   = w_row_int + 1.
    l_row_e_alpha = i_row_int.

    CONCATENATE i_totals_function '(' i_column l_row_alpha ':' i_column l_row_e_alpha ')' INTO r_formula.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_CONVERTER->CREATE_PATH
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_PATH                         TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_path.
    DATA:   l_sep    TYPE c,
            l_path   TYPE string,
            l_return TYPE i.

    CLEAR r_path.

    " Save the file
    cl_gui_frontend_services=>get_sapgui_workdir(
      CHANGING
        sapworkdir            = l_path
          EXCEPTIONS
            get_sapworkdir_failed = 1
            cntl_error            = 2
            error_no_gui          = 3
            not_supported_by_gui  = 4
           ).
    IF sy-subrc <> 0.
*       MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*                  WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      CONCATENATE 'Excel_' w_fcount '.xlsx' INTO r_path.
    ELSE.
      DO.
        ADD 1 TO w_fcount.
*-obtain file separator character---------------------------------------
        CALL METHOD cl_gui_frontend_services=>get_file_separator
          CHANGING
            file_separator       = l_sep
          EXCEPTIONS
            cntl_error           = 1
            error_no_gui         = 2
            not_supported_by_gui = 3
            OTHERS               = 4.

        IF sy-subrc <> 0.
          l_sep = ''.
        ENDIF.

        CONCATENATE l_path l_sep 'Excel_' w_fcount '.xlsx' INTO r_path.

        IF cl_gui_frontend_services=>file_exist( file  = r_path ) = abap_true.
          cl_gui_frontend_services=>file_delete( EXPORTING filename = r_path
                                                 CHANGING  rc       = l_return
                                                 EXCEPTIONS OTHERS  = 1 ).
          IF sy-subrc = 0 .
            RETURN.
          ENDIF.
        ELSE.
          RETURN.
        ENDIF.
      ENDDO.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->CREATE_STYLE_HDR
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_ALIGNMENT                    TYPE        ZEXCEL_ALIGNMENT(optional)
* | [<-()] RO_STYLE                       TYPE REF TO ZCL_EXCEL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_style_hdr.
    DATA: lo_style TYPE REF TO zcl_excel_style.

    lo_style                       = wo_excel->add_new_style( ).
    lo_style->font->bold           = abap_true.
    lo_style->font->color-rgb      = zcl_excel_style_color=>c_white.
    lo_style->fill->filltype       = zcl_excel_style_fill=>c_fill_solid.
    lo_style->fill->fgcolor-rgb    = 'FF4F81BD'.
    IF i_alignment IS SUPPLIED AND i_alignment IS NOT INITIAL.
      lo_style->alignment->horizontal = i_alignment.
    ENDIF.
    ro_style = lo_style .
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->CREATE_STYLE_NORMAL
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_ALIGNMENT                    TYPE        ZEXCEL_ALIGNMENT(optional)
* | [--->] I_INTTYPE                      TYPE        INTTYPE(optional)
* | [--->] I_DECIMALS                     TYPE        INT1(optional)
* | [<-()] RO_STYLE                       TYPE REF TO ZCL_EXCEL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_style_normal.
    DATA:   lo_style TYPE REF TO zcl_excel_style,
            l_format TYPE zexcel_number_format.

    IF i_inttype IS SUPPLIED AND i_inttype IS NOT INITIAL.
      l_format = set_cell_format(  i_inttype  = i_inttype
                                   i_decimals = i_decimals ) .
    ENDIF.
    IF l_format IS NOT INITIAL OR
       ( i_alignment IS SUPPLIED AND i_alignment IS NOT INITIAL ) .

      lo_style                       = wo_excel->add_new_style( ).

      IF i_alignment IS SUPPLIED AND i_alignment IS NOT INITIAL.
        lo_style->alignment->horizontal = i_alignment.
      ENDIF.

      IF l_format IS NOT INITIAL.
        lo_style->number_format->format_code = l_format.
      ENDIF.

      ro_style = lo_style .

    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->CREATE_STYLE_STRIPPED
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_ALIGNMENT                    TYPE        ZEXCEL_ALIGNMENT(optional)
* | [--->] I_INTTYPE                      TYPE        INTTYPE(optional)
* | [--->] I_DECIMALS                     TYPE        INT1(optional)
* | [<-()] RO_STYLE                       TYPE REF TO ZCL_EXCEL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_style_stripped.
    DATA:   lo_style    TYPE REF TO zcl_excel_style.
    DATA:  l_format    TYPE zexcel_number_format.

    lo_style                       = wo_excel->add_new_style( ).
    lo_style->fill->filltype       = zcl_excel_style_fill=>c_fill_solid.
    lo_style->fill->fgcolor-rgb    = 'FFDBE5F1'.
    IF i_alignment IS SUPPLIED AND i_alignment IS NOT INITIAL.
      lo_style->alignment->horizontal = i_alignment.
    ENDIF.
    IF i_inttype IS SUPPLIED AND i_inttype IS NOT INITIAL.
      l_format = set_cell_format(  i_inttype  = i_inttype
                                   i_decimals = i_decimals ) .
      IF l_format IS NOT INITIAL.
        lo_style->number_format->format_code = l_format.
      ENDIF.
    ENDIF.
    ro_style = lo_style.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->CREATE_STYLE_SUBTOTAL
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_ALIGNMENT                    TYPE        ZEXCEL_ALIGNMENT(optional)
* | [--->] I_INTTYPE                      TYPE        INTTYPE(optional)
* | [--->] I_DECIMALS                     TYPE        INT1(optional)
* | [<-()] RO_STYLE                       TYPE REF TO ZCL_EXCEL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_style_subtotal.
    DATA:   lo_style    TYPE REF TO zcl_excel_style.
    DATA:  l_format    TYPE zexcel_number_format.

    lo_style                       = wo_excel->add_new_style( ).
    lo_style->font->bold           = abap_true.

    IF i_alignment IS SUPPLIED AND i_alignment IS NOT INITIAL.
      lo_style->alignment->horizontal = i_alignment.
    ENDIF.
    IF i_inttype IS SUPPLIED AND i_inttype IS NOT INITIAL.
      l_format = set_cell_format(  i_inttype  = i_inttype
                                   i_decimals = i_decimals ) .
      IF l_format IS NOT INITIAL.
        lo_style->number_format->format_code = l_format.
      ENDIF.
    ENDIF.

    ro_style = lo_style .

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->CREATE_STYLE_TOTAL
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_ALIGNMENT                    TYPE        ZEXCEL_ALIGNMENT(optional)
* | [--->] I_INTTYPE                      TYPE        INTTYPE(optional)
* | [--->] I_DECIMALS                     TYPE        INT1(optional)
* | [<-()] RO_STYLE                       TYPE REF TO ZCL_EXCEL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_style_total.
    DATA:   lo_style    TYPE REF TO zcl_excel_style.
    DATA:  l_format    TYPE zexcel_number_format.

    lo_style                                   = wo_excel->add_new_style( ).
    lo_style->font->bold                       = abap_true.

    CREATE OBJECT lo_style->borders->top.
    lo_style->borders->top->border_style       = zcl_excel_style_border=>c_border_thin.
    lo_style->borders->top->border_color-rgb   = zcl_excel_style_color=>c_black.

    CREATE OBJECT lo_style->borders->right.
    lo_style->borders->right->border_style       = zcl_excel_style_border=>c_border_none.
    lo_style->borders->right->border_color-rgb   = zcl_excel_style_color=>c_black.

    CREATE OBJECT lo_style->borders->down.
    lo_style->borders->down->border_style      = zcl_excel_style_border=>c_border_double.
    lo_style->borders->down->border_color-rgb  = zcl_excel_style_color=>c_black.

    CREATE OBJECT lo_style->borders->left.
    lo_style->borders->left->border_style       = zcl_excel_style_border=>c_border_none.
    lo_style->borders->left->border_color-rgb   = zcl_excel_style_color=>c_black.

    IF i_alignment IS SUPPLIED AND i_alignment IS NOT INITIAL.
      lo_style->alignment->horizontal = i_alignment.
    ENDIF.
    IF i_inttype IS SUPPLIED AND i_inttype IS NOT INITIAL.
      l_format = set_cell_format(  i_inttype  = i_inttype
                                   i_decimals = i_decimals ) .
      IF l_format IS NOT INITIAL.
        lo_style->number_format->format_code = l_format.
      ENDIF.
    ENDIF.

    ro_style = lo_style .

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->CREATE_TABLE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_table.
    TYPES: BEGIN OF ts_output,
             fieldname TYPE fieldname,
             function  TYPE funcname,
           END OF ts_output.

    DATA: lo_data TYPE REF TO data.
    DATA: lo_addit          TYPE REF TO cl_abap_elemdescr,
          lt_components_tab TYPE cl_abap_structdescr=>component_table,
          ls_components     TYPE abap_componentdescr,
          lo_table          TYPE REF TO cl_abap_tabledescr,
          lo_struc          TYPE REF TO cl_abap_structdescr.

    FIELD-SYMBOLS: <fs_scat>  TYPE zexcel_s_converter_fcat,
                   <fs_stab>  TYPE any,
                   <fs_ttab>  TYPE STANDARD TABLE,
                   <fs>       TYPE any,
                   <fs_table> TYPE STANDARD TABLE.

    SORT wt_fieldcatalog BY position.
    ASSIGN wo_table->* TO <fs_table>.

    READ TABLE <fs_table> ASSIGNING <fs_stab> INDEX 1.
    IF sy-subrc EQ 0 .
      LOOP AT wt_fieldcatalog ASSIGNING <fs_scat>.
        ASSIGN COMPONENT <fs_scat>-columnname OF STRUCTURE <fs_stab> TO <fs>.
        IF sy-subrc = 0.
          ls_components-name   = <fs_scat>-columnname.
          TRY.
              lo_addit            ?= cl_abap_typedescr=>describe_by_data( <fs> ).
            CATCH cx_sy_move_cast_error.
              CLEAR lo_addit.
              DELETE TABLE wt_fieldcatalog FROM <fs_scat>.
          ENDTRY.
          IF lo_addit IS BOUND.
            ls_components-type   = lo_addit           .
            INSERT ls_components INTO TABLE lt_components_tab.
          ENDIF.
        ENDIF.
      ENDLOOP.
      IF lt_components_tab IS NOT INITIAL.
        "create new line type
        TRY.
            lo_struc = cl_abap_structdescr=>create( p_components = lt_components_tab
                                                    p_strict     = abap_false ).
          CATCH cx_sy_struct_creation.
            RETURN.  " We can not do anything in this case.
        ENDTRY.

        lo_table = cl_abap_tabledescr=>create( lo_struc ).

        CREATE DATA wo_data   TYPE HANDLE lo_table.
        CREATE DATA lo_data   TYPE HANDLE lo_struc.

        ASSIGN wo_data->* TO <fs_ttab>.
        ASSIGN lo_data->* TO <fs_stab>.
        LOOP AT <fs_table>  ASSIGNING <fs>.
          CLEAR <fs_stab>.
          MOVE-CORRESPONDING <fs> TO <fs_stab>.
          APPEND <fs_stab> TO <fs_ttab>.
        ENDLOOP.
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->CREATE_TEXT_SUBTOTAL
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_VALUE                        TYPE        ANY
* | [--->] I_TOTALS_FUNCTION              TYPE        ZEXCEL_TABLE_TOTALS_FUNCTION
* | [<-()] R_TEXT                         TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_text_subtotal.
    DATA: l_string(256) TYPE c,
          l_func        TYPE string.

    CASE i_totals_function.
      WHEN zcl_excel_table=>totals_function_sum.     " Total
        l_func = 'Total'(003).
      WHEN zcl_excel_table=>totals_function_min.     " Minimum
        l_func = 'Minimum'(004).
      WHEN zcl_excel_table=>totals_function_max.     " Maximum
        l_func = 'Maximum'(005).
      WHEN zcl_excel_table=>totals_function_average. " Mean Value
        l_func = 'Average'(006).
      WHEN zcl_excel_table=>totals_function_count.   " Count
        l_func = 'Count'(007).
      WHEN OTHERS.
        CLEAR l_func.
    ENDCASE.

    MOVE i_value TO l_string.

    CONCATENATE l_string l_func INTO r_text SEPARATED BY space.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->CREATE_WORKSHEET
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TABLE                        TYPE        FLAG (default ='X')
* | [--->] I_STYLE_TABLE                  TYPE        ZEXCEL_TABLE_STYLE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_worksheet.
    DATA: l_freeze_col TYPE i.

    IF wo_data IS BOUND AND wo_worksheet IS BOUND.

      wo_worksheet->zif_excel_sheet_properties~summarybelow = zif_excel_sheet_properties=>c_below_on. " By default is on

      IF wt_fieldcatalog IS INITIAL.
        set_fieldcatalog( ) .
      ELSE.
        clean_fieldcatalog( ) .
      ENDIF.

      IF i_table = abap_true.
        l_freeze_col = bind_table( i_style_table = i_style_table ) .
      ELSEIF wt_filter IS NOT INITIAL.
* Let's check for filter.
        wo_autofilter = wo_excel->add_new_autofilter( io_sheet = wo_worksheet ).
        l_freeze_col = bind_cells( ) .
        set_autofilter_area( ) .
      ELSE.
        l_freeze_col = bind_cells( ) .
      ENDIF.

* Check for freeze panes
      IF ws_layout-is_fixed = abap_true.
        IF l_freeze_col = 0.
          l_freeze_col = w_col_int.
        ENDIF.
        wo_worksheet->freeze_panes( EXPORTING ip_num_columns = l_freeze_col
                                              ip_num_rows    = w_row_int ) .
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->EXECUTE_CONVERTER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_OBJECT                      TYPE REF TO OBJECT
* | [--->] IT_TABLE                       TYPE        STANDARD TABLE
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD execute_converter.
    DATA: lo_if               TYPE REF TO zif_excel_converter,
          ls_types            TYPE ts_alv_types,
          lo_addit            TYPE REF TO cl_abap_classdescr,
          lo_addit_superclass TYPE REF TO cl_abap_classdescr.

    IF io_object IS BOUND.
      TRY.
          lo_addit            ?= cl_abap_typedescr=>describe_by_object_ref( io_object ).
        CATCH cx_sy_move_cast_error.
          RAISE EXCEPTION TYPE zcx_excel.
      ENDTRY.
      ls_types-seoclass = lo_addit->get_relative_name( ).
      READ TABLE wt_objects INTO ls_types WITH TABLE KEY seoclass = ls_types-seoclass.
      IF sy-subrc NE 0.
        DO.
          FREE lo_addit_superclass.
          lo_addit_superclass = lo_addit->get_super_class_type( ).
          IF lo_addit_superclass IS INITIAL.
            sy-subrc = '4'.
            EXIT.
          ENDIF.
          lo_addit = lo_addit_superclass.
          ls_types-seoclass = lo_addit->get_relative_name( ).
          READ TABLE wt_objects INTO ls_types WITH TABLE KEY seoclass = ls_types-seoclass.
          IF sy-subrc EQ 0.
            EXIT.
          ENDIF.
        ENDDO.
      ENDIF.
      IF sy-subrc = 0.
        CREATE OBJECT lo_if TYPE (ls_types-clsname).
        lo_if->create_fieldcatalog(
          EXPORTING
            is_option       = ws_option
            io_object       = io_object
            it_table        = it_table
          IMPORTING
            es_layout       = ws_layout
            et_fieldcatalog = wt_fieldcatalog
            eo_table        = wo_table
            et_colors       = wt_colors
            et_filter       = wt_filter
            ).
*  data lines of highest level.
        IF ws_layout-max_subtotal_level > 0. ADD 1 TO ws_layout-max_subtotal_level. ENDIF.
      ELSE.
        RAISE EXCEPTION TYPE zcx_excel.
      ENDIF.
    ELSE.
      REFRESH wt_fieldcatalog.
      GET REFERENCE OF it_table INTO wo_table.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->GET_COLOR_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_ROW                          TYPE        ZEXCEL_CELL_ROW
* | [--->] I_FIELDNAME                    TYPE        FIELDNAME
* | [--->] I_STYLE                        TYPE        ZEXCEL_CELL_STYLE
* | [<-()] R_STYLE                        TYPE        ZEXCEL_CELL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_color_style.
    DATA: ls_colors       TYPE zexcel_s_converter_col,
          ls_color_styles TYPE ts_color_styles,
          lo_style        TYPE REF TO zcl_excel_style.

    r_style = i_style. " Default we change nothing

    IF wt_colors IS NOT INITIAL.
* Full line has color
      READ TABLE wt_colors INTO ls_colors WITH KEY rownumber   = i_row
                                                   columnname  = space.
      IF sy-subrc = 0.
        READ TABLE wt_color_styles INTO ls_color_styles WITH KEY guid_old  = i_style
                                                                 fontcolor = ls_colors-fontcolor
                                                                 fillcolor = ls_colors-fillcolor.
        IF sy-subrc = 0.
          r_style = ls_color_styles-style_new->get_guid( ).
        ELSE.
          lo_style = create_color_style( i_style          = i_style
                                         is_colors        = ls_colors ) .
          r_style = lo_style->get_guid( ) .
          ls_color_styles-guid_old  = i_style.
          ls_color_styles-fontcolor = ls_colors-fontcolor.
          ls_color_styles-fillcolor = ls_colors-fillcolor.
          ls_color_styles-style_new = lo_style.
          INSERT ls_color_styles INTO TABLE wt_color_styles.
        ENDIF.
      ELSE.
* Only field has color
        READ TABLE wt_colors INTO ls_colors WITH KEY rownumber   = i_row
                                                     columnname  = i_fieldname.
        IF sy-subrc = 0.
          READ TABLE wt_color_styles INTO ls_color_styles WITH KEY guid_old  = i_style
                                                                   fontcolor = ls_colors-fontcolor
                                                                   fillcolor = ls_colors-fillcolor.
          IF sy-subrc = 0.
            r_style = ls_color_styles-style_new->get_guid( ).
          ELSE.
            lo_style = create_color_style( i_style          = i_style
                                           is_colors        = ls_colors ) .
            ls_color_styles-guid_old  = i_style.
            ls_color_styles-fontcolor = ls_colors-fontcolor.
            ls_color_styles-fillcolor = ls_colors-fillcolor.
            ls_color_styles-style_new = lo_style.
            INSERT ls_color_styles INTO TABLE wt_color_styles.
            r_style = ls_color_styles-style_new->get_guid( ).
          ENDIF.
        ELSE.
          r_style = i_style.
        ENDIF.
      ENDIF.
    ELSE.
      r_style = i_style.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_CONVERTER->GET_FILE
* +-------------------------------------------------------------------------------------------------+
* | [<---] E_BYTECOUNT                    TYPE        I
* | [<---] ET_FILE                        TYPE        SOLIX_TAB
* | [<---] E_FILE                         TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_file.
    DATA: lo_excel_writer         TYPE REF TO zif_excel_writer.

    DATA: ls_seoclass TYPE seoclass.


    IF wo_excel IS BOUND.
      CREATE OBJECT lo_excel_writer TYPE zcl_excel_writer_2007.
      e_file = lo_excel_writer->write_file( wo_excel ).

      SELECT SINGLE * INTO ls_seoclass
        FROM seoclass
        WHERE clsname = 'CL_BCS_CONVERT'.

      IF sy-subrc = 0.
        CALL METHOD (ls_seoclass-clsname)=>xstring_to_solix
          EXPORTING
            iv_xstring = e_file
          RECEIVING
            et_solix   = et_file.
        e_bytecount = xstrlen( e_file ).
      ELSE.
        " Convert to binary
        CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
          EXPORTING
            buffer        = e_file
          IMPORTING
            output_length = e_bytecount
          TABLES
            binary_tab    = et_file.
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->GET_FUNCTION_NUMBER
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TOTALS_FUNCTION              TYPE        ZEXCEL_TABLE_TOTALS_FUNCTION
* | [<-()] R_FUNCTION_NUMBER              TYPE        INT1
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_function_number.
*Number    Function
*1  AVERAGE
*2  COUNT
*3  COUNTA
*4  MAX
*5  MIN
*6  PRODUCT
*7  STDEV
*8  STDEVP
*9  SUM
*10  VAR
*11  VARP

    CASE i_totals_function.
      WHEN zcl_excel_table=>totals_function_sum.     " Total
        r_function_number = 9.
      WHEN zcl_excel_table=>totals_function_min.     " Minimum
        r_function_number = 5.
      WHEN zcl_excel_table=>totals_function_max.     " Maximum
        r_function_number = 4.
      WHEN zcl_excel_table=>totals_function_average. " Mean Value
        r_function_number = 1.
      WHEN zcl_excel_table=>totals_function_count.   " Count
        r_function_number = 2.
      WHEN OTHERS.
        CLEAR r_function_number.
    ENDCASE.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_CONVERTER->GET_OPTION
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RS_OPTION                      TYPE        ZEXCEL_S_CONVERTER_OPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_option.

    rs_option = ws_option.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->GET_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TYPE                         TYPE        CHAR1
* | [--->] I_ALIGNMENT                    TYPE        ZEXCEL_ALIGNMENT (default =SPACE)
* | [--->] I_INTTYPE                      TYPE        INTTYPE (default =SPACE)
* | [--->] I_DECIMALS                     TYPE        INT1 (default =0)
* | [<-()] R_STYLE                        TYPE        ZEXCEL_CELL_STYLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_style.
    DATA:   ls_styles TYPE ts_styles,
            lo_style  TYPE REF TO zcl_excel_style.

    CLEAR r_style.

    READ TABLE wt_styles INTO ls_styles WITH TABLE KEY type      = i_type
                                                       alignment = i_alignment
                                                       inttype   = i_inttype
                                                       decimals  = i_decimals.
    IF sy-subrc = 0.
      r_style = ls_styles-guid.
    ELSE.
      CASE i_type.
        WHEN c_type_hdr. " Header
          lo_style = create_style_hdr( i_alignment = i_alignment ).
        WHEN c_type_str. "Stripped
          lo_style   = create_style_stripped( i_alignment = i_alignment
                                              i_inttype   = i_inttype
                                              i_decimals  = i_decimals   ).
        WHEN c_type_nor. "Normal
          lo_style   = create_style_normal( i_alignment = i_alignment
                                            i_inttype   = i_inttype
                                            i_decimals  = i_decimals   ).
        WHEN c_type_sub. "Subtotals
          lo_style   = create_style_subtotal( i_alignment = i_alignment
                                              i_inttype   = i_inttype
                                              i_decimals  = i_decimals   ).
        WHEN c_type_tot. "Totals
          lo_style   = create_style_total( i_alignment = i_alignment
                                           i_inttype   = i_inttype
                                           i_decimals  = i_decimals   ).
      ENDCASE.
      IF lo_style IS NOT INITIAL.
        r_style = lo_style->get_guid( ).
        ls_styles-type       = i_type.
        ls_styles-alignment  = i_alignment.
        ls_styles-inttype    = i_inttype.
        ls_styles-decimals   = i_decimals.
        ls_styles-guid       = r_style.
        ls_styles-style      = lo_style.
        INSERT ls_styles INTO TABLE wt_styles.
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Private Method ZCL_EXCEL_CONVERTER=>INIT_OPTION
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD init_option.

    ws_option-filter = abap_true.
    ws_option-hidenc = abap_true.
    ws_option-subtot = abap_true.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->LOOP_NORMAL
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_ROW_INT                      TYPE        ZEXCEL_CELL_ROW
* | [--->] I_COL_INT                      TYPE        ZEXCEL_CELL_COLUMN
* | [<-()] R_FREEZE_COL                   TYPE        INT1
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD loop_normal.
    DATA: l_row_int_end TYPE zexcel_cell_row,
          l_row_int     TYPE zexcel_cell_row,
          l_col_int     TYPE zexcel_cell_column,
          l_col_alpha   TYPE zexcel_cell_column_alpha,
          l_cell_value  TYPE zexcel_cell_value,
          l_s_color     TYPE abap_bool,
          lo_column     TYPE REF TO zcl_excel_column,
          l_formula     TYPE zexcel_cell_formula,
          l_style       TYPE zexcel_cell_style,
          l_cells       TYPE i,
          l_count       TYPE i,
          l_table_row   TYPE i.

    FIELD-SYMBOLS: <fs_stab>   TYPE any,
                   <fs_tab>    TYPE STANDARD TABLE,
                   <fs_sfcat>  TYPE zexcel_s_converter_fcat,
                   <fs_fldval> TYPE any.

    ASSIGN wo_data->* TO <fs_tab> .

    DESCRIBE TABLE wt_fieldcatalog LINES l_cells.
    DESCRIBE TABLE <fs_tab> LINES l_count.
    l_cells = l_cells * l_count.

* It is better to loop column by column
    LOOP AT wt_fieldcatalog ASSIGNING <fs_sfcat>.
      l_row_int = i_row_int.
      l_col_int = i_col_int + <fs_sfcat>-position - 1.

*   Freeze panes
      IF <fs_sfcat>-fix_column = abap_true.
        ADD 1 TO r_freeze_col.
      ENDIF.
      l_s_color = abap_true.

      l_col_alpha = zcl_excel_common=>convert_column2alpha( l_col_int ).

*   Only if the Header is required create it.
      IF ws_option-hidehd IS INITIAL.
        " First of all write column header
        l_cell_value = <fs_sfcat>-scrtext_m.
        wo_worksheet->set_cell( ip_column    = l_col_alpha
                                ip_row       = l_row_int
                                ip_value     = l_cell_value
                                ip_style     = <fs_sfcat>-style_hdr ).
        ADD 1 TO l_row_int.
      ENDIF.
      LOOP AT <fs_tab> ASSIGNING <fs_stab>.
        l_table_row = sy-tabix.
* Now the cell values
        ASSIGN COMPONENT <fs_sfcat>-columnname OF STRUCTURE <fs_stab> TO <fs_fldval>.
* Now let's write the cell values
        IF ws_layout-is_stripped = abap_true AND l_s_color = abap_true.
          l_style = get_color_style( i_row       = l_table_row
                                     i_fieldname = <fs_sfcat>-columnname
                                     i_style     = <fs_sfcat>-style_stripped  ).
          wo_worksheet->set_cell( ip_column    = l_col_alpha
                                  ip_row       = l_row_int
                                  ip_value     = <fs_fldval>
                                  ip_style     = l_style ).
          CLEAR l_s_color.
        ELSE.
          l_style = get_color_style( i_row       = l_table_row
                                     i_fieldname = <fs_sfcat>-columnname
                                     i_style     = <fs_sfcat>-style_normal  ).
          wo_worksheet->set_cell( ip_column    = l_col_alpha
                                  ip_row       = l_row_int
                                  ip_value     = <fs_fldval>
                                  ip_style     = l_style  ).
          l_s_color = abap_true.
        ENDIF.
        READ TABLE wt_filter TRANSPORTING NO FIELDS WITH TABLE KEY rownumber  = l_table_row
                                                                   columnname = <fs_sfcat>-columnname.
        IF sy-subrc = 0.
          wo_worksheet->get_cell( EXPORTING
                                     ip_column    = l_col_alpha
                                     ip_row       = l_row_int
                                  IMPORTING
                                     ep_value     = l_cell_value ).
          wo_autofilter->set_value( i_column = l_col_int
                                    i_value  = l_cell_value ).
        ENDIF.
        ADD 1 TO l_row_int.
      ENDLOOP.
* Now let's check for optimized
      IF <fs_sfcat>-is_optimized = abap_true .
        lo_column = wo_worksheet->get_column( ip_column = l_col_alpha ).
        lo_column->set_auto_size( ip_auto_size = abap_true ) .
      ENDIF.
* Now let's check for visible
      IF <fs_sfcat>-is_hidden = abap_true.
        lo_column = wo_worksheet->get_column( ip_column = l_col_alpha ).
        lo_column->set_visible( ip_visible = abap_false ) .
      ENDIF.
* Now let's check for total versus subtotal.
      IF <fs_sfcat>-totals_function IS NOT INITIAL.
        l_row_int_end = l_row_int - 1.

        l_formula = create_formular_total( i_row_int         = l_row_int_end
                                           i_column          = l_col_alpha
                                           i_totals_function = <fs_sfcat>-totals_function ).
        wo_worksheet->set_cell( ip_column    = l_col_alpha
                                ip_row       = l_row_int
                                ip_formula   = l_formula
                                ip_style     = <fs_sfcat>-style_total ).
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->LOOP_SUBTOTAL
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_ROW_INT                      TYPE        ZEXCEL_CELL_ROW
* | [--->] I_COL_INT                      TYPE        ZEXCEL_CELL_COLUMN
* | [<-()] R_FREEZE_COL                   TYPE        INT1
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD loop_subtotal.

    DATA: l_row_int_start   TYPE zexcel_cell_row,
          l_row_int_end     TYPE zexcel_cell_row,
          l_row_int         TYPE zexcel_cell_row,
          l_col_int         TYPE zexcel_cell_column,
          l_col_alpha       TYPE zexcel_cell_column_alpha,
          l_col_alpha_start TYPE zexcel_cell_column_alpha,
          l_cell_value      TYPE zexcel_cell_value,
          l_s_color         TYPE abap_bool,
          lo_column         TYPE REF TO zcl_excel_column,
          lo_row            TYPE REF TO zcl_excel_row,
          l_formula         TYPE zexcel_cell_formula,
          l_style           TYPE zexcel_cell_style,
          l_text            TYPE string,
          ls_sort_values    TYPE ts_sort_values,
          ls_subtotal_rows  TYPE ts_subtotal_rows,
          l_sort_level      TYPE int4,
          l_hidden          TYPE int4,
          l_line            TYPE i,
          l_cells           TYPE i,
          l_count           TYPE i,
          l_table_row       TYPE i,
          lt_fcat           TYPE zexcel_t_converter_fcat.

    FIELD-SYMBOLS: <fs_stab>    TYPE any,
                   <fs_tab>     TYPE STANDARD TABLE,
                   <fs_sfcat>   TYPE zexcel_s_converter_fcat,
                   <fs_fldval>  TYPE any,
                   <fs_sortval> TYPE any,
                   <fs_sortv>   TYPE ts_sort_values.

    ASSIGN wo_data->* TO <fs_tab> .

    REFRESH: wt_sort_values,
             wt_subtotal_rows.

    DESCRIBE TABLE wt_fieldcatalog LINES l_cells.
    DESCRIBE TABLE <fs_tab> LINES l_count.
    l_cells = l_cells * l_count.

    READ TABLE <fs_tab> ASSIGNING <fs_stab> INDEX 1.
    IF sy-subrc = 0.
      l_row_int = i_row_int + 1.
      lt_fcat =  wt_fieldcatalog.
      SORT lt_fcat BY sort_level DESCENDING.
      LOOP AT lt_fcat ASSIGNING <fs_sfcat> WHERE is_subtotalled = abap_true.
        ASSIGN COMPONENT <fs_sfcat>-columnname OF STRUCTURE <fs_stab> TO <fs_fldval>.
        ls_sort_values-fieldname    = <fs_sfcat>-columnname.
        ls_sort_values-row_int      = l_row_int.
        ls_sort_values-sort_level   = <fs_sfcat>-sort_level.
        ls_sort_values-is_collapsed = <fs_sfcat>-is_collapsed.
        CREATE DATA ls_sort_values-value LIKE <fs_fldval>.
        ASSIGN ls_sort_values-value->* TO <fs_sortval>.
        <fs_sortval> =  <fs_fldval>.
        INSERT ls_sort_values INTO TABLE wt_sort_values.
      ENDLOOP.
    ENDIF.
    l_row_int = i_row_int.
* Let's check if we need to hide a sort level.
    DESCRIBE TABLE wt_sort_values LINES l_line.
    IF  l_line <= 1.
      CLEAR l_hidden.
    ELSE.
      LOOP AT wt_sort_values INTO ls_sort_values WHERE is_collapsed = abap_false.
        IF l_hidden < ls_sort_values-sort_level.
          l_hidden = ls_sort_values-sort_level.
        ENDIF.
      ENDLOOP.
    ENDIF.
    ADD 1 TO l_hidden. " As this is the first level we show.
* First loop without formular only addtional rows with subtotal text.
    LOOP AT <fs_tab> ASSIGNING <fs_stab>.
      ADD 1 TO l_row_int.  " 1 is for header row.
      l_row_int_start = l_row_int.
      SORT lt_fcat BY sort_level DESCENDING.
      LOOP AT lt_fcat ASSIGNING <fs_sfcat> WHERE is_subtotalled = abap_true.
        l_col_int   = i_col_int + <fs_sfcat>-position - 1.
        l_col_alpha = zcl_excel_common=>convert_column2alpha( l_col_int ).
* Now the cell values
        ASSIGN COMPONENT <fs_sfcat>-columnname OF STRUCTURE <fs_stab> TO <fs_fldval>.
        IF sy-subrc = 0.
          READ TABLE wt_sort_values ASSIGNING <fs_sortv> WITH TABLE KEY fieldname = <fs_sfcat>-columnname.
          IF sy-subrc = 0.
            ASSIGN <fs_sortv>-value->* TO <fs_sortval>.
            IF <fs_sortval> <> <fs_fldval> OR <fs_sortv>-new = abap_true.
* First let's remmember the subtotal values as it has to appear later.
              ls_subtotal_rows-row_int       = l_row_int.
              ls_subtotal_rows-row_int_start = <fs_sortv>-row_int.
              ls_subtotal_rows-columnname    = <fs_sfcat>-columnname.
              INSERT ls_subtotal_rows INTO TABLE wt_subtotal_rows.
* Now let's write the subtotal line
              l_cell_value = create_text_subtotal( i_value = <fs_sortval>
                                     i_totals_function     = <fs_sfcat>-totals_function ).
              wo_worksheet->set_cell( ip_column    = l_col_alpha
                                      ip_row       = l_row_int
                                      ip_value     = l_cell_value
                                      ip_abap_type = cl_abap_typedescr=>typekind_string
                                      ip_style     = <fs_sfcat>-style_subtotal  ).
              lo_row = wo_worksheet->get_row( ip_row = l_row_int ).
              lo_row->set_outline_level( ip_outline_level = <fs_sfcat>-sort_level ) .
              IF <fs_sfcat>-is_collapsed = abap_true.
                IF <fs_sfcat>-sort_level >  l_hidden.
                  lo_row->set_visible( ip_visible =  abap_false ) .
                ENDIF.
                lo_row->set_collapsed( ip_collapsed =  <fs_sfcat>-is_collapsed ) .
              ENDIF.
* Now let's change the key
              ADD 1 TO l_row_int.
              <fs_sortval> =  <fs_fldval>.
              <fs_sortv>-new = abap_false.
              l_line = <fs_sortv>-sort_level.
              LOOP AT wt_sort_values ASSIGNING <fs_sortv> WHERE sort_level >= l_line.
                <fs_sortv>-row_int = l_row_int.
              ENDLOOP.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDLOOP.
    ADD 1 TO l_row_int.
    l_row_int_start = l_row_int.
    SORT lt_fcat BY sort_level DESCENDING.
    LOOP AT lt_fcat ASSIGNING <fs_sfcat> WHERE is_subtotalled = abap_true.
      l_col_int   = i_col_int + <fs_sfcat>-position - 1.
      l_col_alpha = zcl_excel_common=>convert_column2alpha( l_col_int ).
      READ TABLE wt_sort_values ASSIGNING <fs_sortv> WITH TABLE KEY fieldname = <fs_sfcat>-columnname.
      IF sy-subrc = 0.
        ASSIGN <fs_sortv>-value->* TO <fs_sortval>.
        ls_subtotal_rows-row_int       = l_row_int.
        ls_subtotal_rows-row_int_start = <fs_sortv>-row_int.
        ls_subtotal_rows-columnname    = <fs_sfcat>-columnname.
        INSERT ls_subtotal_rows INTO TABLE wt_subtotal_rows.
* First let's write the value as it has to appear.
        l_cell_value = create_text_subtotal( i_value = <fs_sortval>
                               i_totals_function     = <fs_sfcat>-totals_function ).
        wo_worksheet->set_cell( ip_column    = l_col_alpha
                                ip_row       = l_row_int
                                ip_value     = l_cell_value
                                ip_abap_type = cl_abap_typedescr=>typekind_string
                                ip_style     = <fs_sfcat>-style_subtotal ).

        l_sort_level = <fs_sfcat>-sort_level.
        lo_row = wo_worksheet->get_row( ip_row = l_row_int ).
        lo_row->set_outline_level( ip_outline_level = l_sort_level ) .
        IF <fs_sfcat>-is_collapsed = abap_true.
          IF <fs_sfcat>-sort_level >  l_hidden.
            lo_row->set_visible( ip_visible =  abap_false ) .
          ENDIF.
          lo_row->set_collapsed( ip_collapsed =  <fs_sfcat>-is_collapsed ) .
        ENDIF.
        ADD 1 TO l_row_int.
      ENDIF.
    ENDLOOP.
* Let's write the Grand total
    l_sort_level = 0.
    lo_row = wo_worksheet->get_row( ip_row = l_row_int ).
    lo_row->set_outline_level( ip_outline_level = l_sort_level ) .
*  lo_row_dim->set_collapsed( ip_collapsed =  <fs_sfcat>-is_collapsed ) . Not on grand total

    l_text    = create_text_subtotal( i_value = 'Grand'(002)
                                      i_totals_function     = <fs_sfcat>-totals_function ).

    l_col_alpha_start = zcl_excel_common=>convert_column2alpha( i_col_int ).
    wo_worksheet->set_cell( ip_column    = l_col_alpha_start
                            ip_row       = l_row_int
                            ip_value     = l_text
                            ip_abap_type = cl_abap_typedescr=>typekind_string
                            ip_style     = <fs_sfcat>-style_subtotal ).

* It is better to loop column by column second time around
* Second loop with formular and data.
    LOOP AT wt_fieldcatalog ASSIGNING <fs_sfcat>.
      l_row_int = i_row_int.
      l_col_int = i_col_int + <fs_sfcat>-position - 1.
* Freeze panes
      IF <fs_sfcat>-fix_column = abap_true.
        ADD 1 TO r_freeze_col.
      ENDIF.
      l_s_color = abap_true.
      l_col_alpha = zcl_excel_common=>convert_column2alpha( l_col_int ).
      " First of all write column header
      l_cell_value = <fs_sfcat>-scrtext_m.
      wo_worksheet->set_cell( ip_column    = l_col_alpha
                              ip_row       = l_row_int
                              ip_value     = l_cell_value
                              ip_abap_type = cl_abap_typedescr=>typekind_string
                              ip_style     = <fs_sfcat>-style_hdr ).
      ADD 1 TO l_row_int.
      LOOP AT <fs_tab> ASSIGNING <fs_stab>.
        l_table_row = sy-tabix.
* Now the cell values
        ASSIGN COMPONENT <fs_sfcat>-columnname OF STRUCTURE <fs_stab> TO <fs_fldval>.
* Let's check for subtotal lines
        DO.
          READ TABLE wt_subtotal_rows TRANSPORTING NO FIELDS WITH TABLE KEY row_int = l_row_int.
          IF sy-subrc = 0.
            IF <fs_sfcat>-is_subtotalled = abap_false AND
               <fs_sfcat>-totals_function IS NOT INITIAL.
              DO.
                READ TABLE wt_subtotal_rows INTO ls_subtotal_rows WITH TABLE KEY row_int    = l_row_int.
                IF sy-subrc = 0.
                  l_row_int_start = ls_subtotal_rows-row_int_start.
                  l_row_int_end   = l_row_int - 1.

                  l_formula = create_formular_subtotal( i_row_int_start   = l_row_int_start
                                                        i_row_int_end     = l_row_int_end
                                                        i_column          = l_col_alpha
                                                        i_totals_function = <fs_sfcat>-totals_function ).
                  wo_worksheet->set_cell( ip_column    = l_col_alpha
                                          ip_row       = l_row_int
                                          ip_formula   = l_formula
                                          ip_style     = <fs_sfcat>-style_subtotal ).
                  IF <fs_sfcat>-is_collapsed = abap_true.
                    lo_row = wo_worksheet->get_row( ip_row = l_row_int ).
                    lo_row->set_collapsed( ip_collapsed =  <fs_sfcat>-is_collapsed ).
                    IF <fs_sfcat>-sort_level >  l_hidden.
                      lo_row->set_visible( ip_visible =  abap_false ) .
                    ENDIF.
                  ENDIF.
                  ADD 1 TO l_row_int.
                ELSE.
                  EXIT.
                ENDIF.
              ENDDO.
            ELSE.
              ADD 1 TO l_row_int.
            ENDIF.
          ELSE.
            EXIT.
          ENDIF.
        ENDDO.
* Let's set the row dimension values
        lo_row = wo_worksheet->get_row( ip_row = l_row_int ).
        lo_row->set_outline_level( ip_outline_level = ws_layout-max_subtotal_level ) .
        IF <fs_sfcat>-is_collapsed  = abap_true.
          lo_row->set_visible( ip_visible =  abap_false ) .
          lo_row->set_collapsed( ip_collapsed =  <fs_sfcat>-is_collapsed ) .
        ENDIF.
* Now let's write the cell values
        IF ws_layout-is_stripped = abap_true AND l_s_color = abap_true.
          l_style = get_color_style( i_row       = l_table_row
                                     i_fieldname = <fs_sfcat>-columnname
                                     i_style     = <fs_sfcat>-style_stripped  ).
          wo_worksheet->set_cell( ip_column    = l_col_alpha
                                  ip_row       = l_row_int
                                  ip_value     = <fs_fldval>
                                  ip_style     = l_style ).
          CLEAR l_s_color.
        ELSE.
          l_style = get_color_style( i_row       = l_table_row
                                     i_fieldname = <fs_sfcat>-columnname
                                     i_style     = <fs_sfcat>-style_normal  ).
          wo_worksheet->set_cell( ip_column    = l_col_alpha
                                  ip_row       = l_row_int
                                  ip_value     = <fs_fldval>
                                  ip_style     = l_style   ).
          l_s_color = abap_true.
        ENDIF.
        READ TABLE wt_filter TRANSPORTING NO FIELDS WITH TABLE KEY rownumber  = l_table_row
                                                                   columnname = <fs_sfcat>-columnname.
        IF sy-subrc = 0.
          wo_worksheet->get_cell( EXPORTING
                                     ip_column    = l_col_alpha
                                     ip_row       = l_row_int
                                  IMPORTING
                                     ep_value     = l_cell_value ).
          wo_autofilter->set_value( i_column = l_col_int
                                    i_value  = l_cell_value ).
        ENDIF.
        ADD 1 TO l_row_int.
      ENDLOOP.
* Let's check for subtotal lines
      DO.
        READ TABLE wt_subtotal_rows TRANSPORTING NO FIELDS WITH TABLE KEY row_int = l_row_int.
        IF sy-subrc = 0.
          IF <fs_sfcat>-is_subtotalled = abap_false AND
             <fs_sfcat>-totals_function IS NOT INITIAL.
            DO.
              READ TABLE wt_subtotal_rows INTO ls_subtotal_rows WITH TABLE KEY row_int    = l_row_int.
              IF sy-subrc = 0.
                l_row_int_start = ls_subtotal_rows-row_int_start.
                l_row_int_end   = l_row_int - 1.

                l_formula = create_formular_subtotal( i_row_int_start   = l_row_int_start
                                                      i_row_int_end     = l_row_int_end
                                                      i_column          = l_col_alpha
                                                      i_totals_function = <fs_sfcat>-totals_function ).
                wo_worksheet->set_cell( ip_column    = l_col_alpha
                                        ip_row       = l_row_int
                                        ip_formula   = l_formula
                                        ip_style     = <fs_sfcat>-style_subtotal ).
                IF <fs_sfcat>-is_collapsed = abap_true.
                  lo_row = wo_worksheet->get_row( ip_row = l_row_int ).
                  lo_row->set_collapsed( ip_collapsed =  <fs_sfcat>-is_collapsed ).
                ENDIF.
                ADD 1 TO l_row_int.
              ELSE.
                EXIT.
              ENDIF.
            ENDDO.
          ELSE.
            ADD 1 TO l_row_int.
          ENDIF.
        ELSE.
          EXIT.
        ENDIF.
      ENDDO.
* Now let's check for Grand total
      IF <fs_sfcat>-is_subtotalled = abap_false AND
         <fs_sfcat>-totals_function IS NOT INITIAL.
        l_row_int_start = i_row_int + 1.
        l_row_int_end   = l_row_int - 1.

        l_formula = create_formular_subtotal( i_row_int_start   = l_row_int_start
                                              i_row_int_end     = l_row_int_end
                                              i_column          = l_col_alpha
                                              i_totals_function = <fs_sfcat>-totals_function ).
        wo_worksheet->set_cell( ip_column    = l_col_alpha
                                ip_row       = l_row_int
                                ip_formula   = l_formula
                                ip_style     = <fs_sfcat>-style_subtotal ).
      ENDIF.
* Now let's check for optimized
      IF <fs_sfcat>-is_optimized = abap_true.
        lo_column = wo_worksheet->get_column( ip_column = l_col_alpha ).
        lo_column->set_auto_size( ip_auto_size = abap_true ) .
      ENDIF.
* Now let's check for visible
      IF <fs_sfcat>-is_hidden = abap_true.
        lo_column = wo_worksheet->get_column( ip_column = l_col_alpha ).
        lo_column->set_visible( ip_visible = abap_false ) .
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_CONVERTER->OPEN_FILE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD open_file.
    DATA: l_bytecount TYPE i,
          lt_file     TYPE solix_tab,
          l_dir       TYPE string.

    FIELD-SYMBOLS: <fs_data> TYPE ANY TABLE.

    ASSIGN wo_data->* TO <fs_data>.

* catch zcx_excel .
*endtry.
    IF wo_excel IS BOUND.
      get_file( IMPORTING e_bytecount  = l_bytecount
                          et_file      = lt_file ) .

      l_dir =  create_path( ) .

      cl_gui_frontend_services=>gui_download( EXPORTING bin_filesize = l_bytecount
                                                        filename     = l_dir
                                                        filetype     = 'BIN'
                                               CHANGING data_tab     = lt_file ).
      cl_gui_frontend_services=>execute(
        EXPORTING
          document               = l_dir
*        application            =
*        parameter              =
*        default_directory      =
*        maximized              =
*        minimized              =
*        synchronous            =
*        operation              = 'OPEN'
        EXCEPTIONS
          cntl_error             = 1
          error_no_gui           = 2
          bad_parameter          = 3
          file_not_found         = 4
          path_not_found         = 5
          file_extension_unknown = 6
          error_execute_failed   = 7
          synchronous_failed     = 8
          not_supported_by_gui   = 9
             ).
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

    ENDIF.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->SET_AUTOFILTER_AREA
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_autofilter_area.
    DATA: ls_area   TYPE zexcel_s_autofilter_area,
          l_lines   TYPE i,
          lt_values TYPE zexcel_t_autofilter_values,
          ls_values TYPE zexcel_s_autofilter_values.

* Let's check for filter.
    IF wo_autofilter IS BOUND.
      ls_area-row_start = 1.
      lt_values = wo_autofilter->get_values( ) .
      SORT lt_values BY column ASCENDING.
      DESCRIBE TABLE lt_values LINES l_lines.
      READ TABLE lt_values INTO ls_values INDEX 1.
      IF sy-subrc = 0.
        ls_area-col_start = ls_values-column.
      ENDIF.
      READ TABLE lt_values INTO ls_values INDEX l_lines.
      IF sy-subrc = 0.
        ls_area-col_end = ls_values-column.
      ENDIF.
      wo_autofilter->set_filter_area( is_area = ls_area ) .
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->SET_CELL_FORMAT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_INTTYPE                      TYPE        INTTYPE
* | [--->] I_DECIMALS                     TYPE        INT1
* | [<-()] R_FORMAT                       TYPE        ZEXCEL_NUMBER_FORMAT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_cell_format.
    DATA:  l_format    TYPE zexcel_number_format.

    CLEAR r_format.
    CASE i_inttype.
      WHEN cl_abap_typedescr=>typekind_date.
        r_format = wo_worksheet->get_default_excel_date_format( ).
      WHEN cl_abap_typedescr=>typekind_time.
        r_format = wo_worksheet->get_default_excel_time_format( ).
      WHEN cl_abap_typedescr=>typekind_float OR cl_abap_typedescr=>typekind_packed.
        IF i_decimals > 0 .
          l_format = '#,##0.'.
          DO i_decimals TIMES.
            CONCATENATE l_format '0' INTO l_format.
          ENDDO.
          r_format = l_format.
        ENDIF.
      WHEN cl_abap_typedescr=>typekind_int OR cl_abap_typedescr=>typekind_int1 OR cl_abap_typedescr=>typekind_int2.
        r_format = '#,##0'.
    ENDCASE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_CONVERTER->SET_FIELDCATALOG
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_fieldcatalog.

    DATA: lr_data        TYPE REF TO data,
          lo_structdescr TYPE REF TO cl_abap_structdescr,
          lt_dfies       TYPE ddfields,
          ls_dfies       TYPE dfies.
    DATA: ls_fcat             TYPE zexcel_s_converter_fcat.

    FIELD-SYMBOLS: <fs_tab>         TYPE ANY TABLE.

    ASSIGN wo_data->* TO <fs_tab> .

    CREATE DATA lr_data LIKE LINE OF <fs_tab>.

    lo_structdescr ?= cl_abap_structdescr=>describe_by_data_ref( lr_data ).

    lt_dfies = zcl_excel_common=>describe_structure( io_struct = lo_structdescr ).

    LOOP AT lt_dfies INTO ls_dfies.
      MOVE-CORRESPONDING ls_dfies TO ls_fcat.
      ls_fcat-columnname = ls_dfies-fieldname.
      INSERT ls_fcat INTO TABLE wt_fieldcatalog.
    ENDLOOP.

    clean_fieldcatalog( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_CONVERTER->SET_OPTION
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_OPTION                      TYPE        ZEXCEL_S_CONVERTER_OPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_option.

    IF ws_indx-begdt IS INITIAL.
      ws_indx-begdt = sy-datum.
    ENDIF.

    ws_indx-aedat = sy-datum.
    ws_indx-usera = sy-uname.
    ws_indx-pgmid = sy-cprog.

    EXPORT p1 = is_option TO DATABASE indx(xl) FROM ws_indx ID ws_indx-srtfd.

    IF sy-subrc = 0.
      ws_option = is_option.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_CONVERTER->WRITE_FILE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_PATH                         TYPE        STRING(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD write_file.
    DATA: l_bytecount TYPE i,
          lt_file     TYPE solix_tab,
          l_dir       TYPE string.

    FIELD-SYMBOLS: <fs_data> TYPE ANY TABLE.

    ASSIGN wo_data->* TO <fs_data>.

* catch zcx_excel .
*endtry.
    IF wo_excel IS BOUND.
      get_file( IMPORTING e_bytecount  = l_bytecount
                          et_file      = lt_file ) .
      IF i_path IS INITIAL.
        l_dir =  create_path( ) .
      ELSE.
        l_dir = i_path.
      ENDIF.
      cl_gui_frontend_services=>gui_download( EXPORTING bin_filesize = l_bytecount
                                                        filename     = l_dir
                                                        filetype     = 'BIN'
                                               CHANGING data_tab     = lt_file ).
    ENDIF.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_table IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_TABLE->GET_BOTTOM_ROW_INTEGER
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EV_ROW                         TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_bottom_row_integer.
    DATA: lv_table_lines TYPE i.
    FIELD-SYMBOLS: <fs_table> TYPE STANDARD TABLE.

    IF settings-bottom_right_row IS NOT INITIAL.
*    ev_row =  zcl_excel_common=>convert_column2int( settings-bottom_right_row ). " del issue #246
      ev_row =  settings-bottom_right_row .                                         " ins issue #246
      EXIT.
    ENDIF.

    ASSIGN table_data->* TO <fs_table>.
    DESCRIBE TABLE <fs_table> LINES lv_table_lines.
    IF lv_table_lines = 0.
      lv_table_lines = 1. "table needs at least 1 data row
    ENDIF.

    ev_row = settings-top_left_row + lv_table_lines.

    IF me->has_totals( ) = abap_true."  ????  AND ip_include_totals_row = abap_true.
      ADD 1 TO ev_row.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_TABLE->GET_ID
* +-------------------------------------------------------------------------------------------------+
* | [<-()] OV_ID                          TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_id.
    ov_id = id.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_TABLE->GET_NAME
* +-------------------------------------------------------------------------------------------------+
* | [<-()] OV_NAME                        TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_name.

    IF me->name IS INITIAL.
      me->name = zcl_excel_common=>number_to_excel_string( ip_value = me->id ).
      CONCATENATE 'table' me->name INTO me->name.
    ENDIF.

    ov_name = me->name.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_TABLE->GET_REFERENCE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_INCLUDE_TOTALS_ROW          TYPE        ABAP_BOOL (default =ABAP_TRUE)
* | [<-()] OV_REFERENCE                   TYPE        STRING
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_reference.
    DATA: lv_column                TYPE zexcel_cell_column,
          lv_table_lines           TYPE i,
          lv_right_column          TYPE zexcel_cell_column_alpha,
          ls_field_catalog         TYPE zexcel_s_fieldcatalog,
          lv_bottom_row            TYPE zexcel_cell_row,
          lv_top_row_string(10)    TYPE c,
          lv_bottom_row_string(10) TYPE c.

    FIELD-SYMBOLS: <fs_table> TYPE STANDARD TABLE.

*column
    lv_column = zcl_excel_common=>convert_column2int( settings-top_left_column ).
    lv_table_lines = 0.
    LOOP AT fieldcat INTO ls_field_catalog WHERE dynpfld EQ abap_true.
      ADD 1 TO lv_table_lines.
    ENDLOOP.
    lv_column = lv_column + lv_table_lines - 1.
    lv_right_column  = zcl_excel_common=>convert_column2alpha( lv_column ).

*row
    ASSIGN table_data->* TO <fs_table>.
    DESCRIBE TABLE <fs_table> LINES lv_table_lines.
    IF lv_table_lines = 0.
      lv_table_lines = 1. "table needs at least 1 data row
    ENDIF.
    lv_bottom_row = settings-top_left_row + lv_table_lines .

    IF me->has_totals( ) = abap_true AND ip_include_totals_row = abap_true.
      ADD 1 TO lv_bottom_row.
    ENDIF.

    lv_top_row_string = zcl_excel_common=>number_to_excel_string( settings-top_left_row ).
    lv_bottom_row_string = zcl_excel_common=>number_to_excel_string( lv_bottom_row ).

    CONCATENATE settings-top_left_column lv_top_row_string
                ':'
                lv_right_column lv_bottom_row_string INTO ov_reference.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_TABLE->GET_RIGHT_COLUMN_INTEGER
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EV_COLUMN                      TYPE        I
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_right_column_integer.
    DATA: ls_field_catalog  TYPE zexcel_s_fieldcatalog.

    IF settings-bottom_right_column IS NOT INITIAL.
      ev_column =  zcl_excel_common=>convert_column2int( settings-bottom_right_column ).
      EXIT.
    ENDIF.

    ev_column =  zcl_excel_common=>convert_column2int( settings-top_left_column ).
    LOOP AT fieldcat INTO ls_field_catalog WHERE dynpfld EQ abap_true.
      ADD 1 TO ev_column.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_TABLE->GET_TOTALS_FORMULA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_COLUMN                      TYPE        CLIKE
* | [--->] IP_FUNCTION                    TYPE        ZEXCEL_TABLE_TOTALS_FUNCTION
* | [<-()] EP_FORMULA                     TYPE        STRING
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_totals_formula.
    CONSTANTS:  lc_function_id_sum     TYPE string VALUE '109',
                lc_function_id_min     TYPE string VALUE '105',
                lc_function_id_max     TYPE string VALUE '104',
                lc_function_id_count   TYPE string VALUE '103',
                lc_function_id_average TYPE string VALUE '101'.

    DATA: lv_function_id TYPE string.

    CASE ip_function.
      WHEN zcl_excel_table=>totals_function_sum.
        lv_function_id = lc_function_id_sum.

      WHEN zcl_excel_table=>totals_function_min.
        lv_function_id = lc_function_id_min.

      WHEN zcl_excel_table=>totals_function_max.
        lv_function_id = lc_function_id_max.

      WHEN zcl_excel_table=>totals_function_count.
        lv_function_id = lc_function_id_count.

      WHEN zcl_excel_table=>totals_function_average.
        lv_function_id = lc_function_id_average.

      WHEN zcl_excel_table=>totals_function_custom. " issue #292
        RETURN.

      WHEN OTHERS.
        zcx_excel=>raise_text( 'Invalid totals formula. See ZCL_ for possible values' ).
    ENDCASE.

    CONCATENATE 'SUBTOTAL(' lv_function_id ',[' ip_column '])' INTO ep_formula.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_TABLE->HAS_TOTALS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_RESULT                      TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD has_totals.
    DATA: ls_field_catalog    TYPE zexcel_s_fieldcatalog.

    ep_result = abap_false.

    LOOP AT fieldcat INTO ls_field_catalog.
      IF ls_field_catalog-totals_function IS NOT INITIAL.
        ep_result = abap_true.
        EXIT.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_TABLE->SET_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IR_DATA                        TYPE        STANDARD TABLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_data.

    DATA lr_temp TYPE REF TO data.

    FIELD-SYMBOLS: <lt_table_temp> TYPE ANY TABLE,
                   <lt_table>      TYPE ANY TABLE.

    GET REFERENCE OF ir_data INTO lr_temp.
    ASSIGN lr_temp->* TO <lt_table_temp>.
    CREATE DATA table_data LIKE <lt_table_temp>.
    ASSIGN me->table_data->* TO <lt_table>.
    <lt_table> = <lt_table_temp>.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_TABLE->SET_ID
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ID                          TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_id.
    id = iv_id.
  ENDMETHOD.
ENDCLASS.

CLASS zcl_excel_writer_2007 IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->ADD_FURTHER_DATA_TO_ZIP
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_ZIP                         TYPE REF TO CL_ABAP_ZIP
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_further_data_to_zip.
* Can be used by child classes like xlsm-writer to write additional data to zip archive
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WRITER_2007->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    me->ixml = cl_ixml=>create( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_EXCEL                       TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create.

* Office 2007 file format is a cab of several xml files with extension .xlsx

    DATA: lo_zip              TYPE REF TO cl_abap_zip,
          lo_worksheet        TYPE REF TO zcl_excel_worksheet,
          lo_active_worksheet TYPE REF TO zcl_excel_worksheet,
          lo_iterator         TYPE REF TO cl_object_collection_iterator,
          lo_nested_iterator  TYPE REF TO cl_object_collection_iterator,
          lo_table            TYPE REF TO zcl_excel_table,
          lo_drawing          TYPE REF TO zcl_excel_drawing,
          lo_drawings         TYPE REF TO zcl_excel_drawings,
          lo_comment          TYPE REF TO zcl_excel_comment,   " (+) Issue #180
          lo_comments         TYPE REF TO zcl_excel_comments.  " (+) Issue #180

    DATA: lv_content                TYPE xstring,
          lv_active                 TYPE flag,
          lv_xl_sheet               TYPE string,
          lv_xl_sheet_rels          TYPE string,
          lv_xl_drawing_for_comment TYPE string,   " (+) Issue #180
          lv_xl_comment             TYPE string,   " (+) Issue #180
          lv_xl_comment_rels        TYPE string,   " (+) Issue #180
          lv_xl_drawing             TYPE string,
          lv_xl_drawing_rels        TYPE string,
          lv_index_str              TYPE string,
          lv_value                  TYPE string,
          lv_sheet_index            TYPE i,
          lv_drawing_index          TYPE i,
          lv_comment_index          TYPE i.        " (+) Issue #180

**********************************************************************

**********************************************************************
* Start of insertion # issue 139 - Dateretention of cellstyles
    me->excel->add_static_styles( ).
* End of insertion # issue 139 - Dateretention of cellstyles

**********************************************************************
* STEP 1: Create archive object file (ZIP)
    CREATE OBJECT lo_zip.

**********************************************************************
* STEP 2: Add [Content_Types].xml to zip
    lv_content = me->create_content_types( ).
    lo_zip->add( name    = me->c_content_types
                 content = lv_content ).

**********************************************************************
* STEP 3: Add _rels/.rels to zip
    lv_content = me->create_relationships( ).
    lo_zip->add( name    = me->c_relationships
                 content = lv_content ).

**********************************************************************
* STEP 4: Add docProps/app.xml to zip
    lv_content = me->create_docprops_app( ).
    lo_zip->add( name    = me->c_docprops_app
                 content = lv_content ).

**********************************************************************
* STEP 5: Add docProps/core.xml to zip
    lv_content = me->create_docprops_core( ).
    lo_zip->add( name    = me->c_docprops_core
                 content = lv_content ).

**********************************************************************
* STEP 6: Add xl/_rels/workbook.xml.rels to zip
    lv_content = me->create_xl_relationships( ).
    lo_zip->add( name    = me->c_xl_relationships
                 content = lv_content ).

**********************************************************************
* STEP 6: Add xl/_rels/workbook.xml.rels to zip
    lv_content = me->create_xl_theme( ).
    lo_zip->add( name    = me->c_xl_theme
                 content = lv_content ).

**********************************************************************
* STEP 7: Add xl/workbook.xml to zip
    lv_content = me->create_xl_workbook( ).
    lo_zip->add( name    = me->c_xl_workbook
                 content = lv_content ).

**********************************************************************
* STEP 8: Add xl/workbook.xml to zip
*  lv_content = me->create_xl_styles_static( ).
    lv_content = me->create_xl_styles( ).
    lo_zip->add( name    = me->c_xl_styles
                 content = lv_content ).

**********************************************************************
* STEP 9: Add sharedStrings.xml to zip
    lv_content = me->create_xl_sharedstrings( ).
    lo_zip->add( name    = me->c_xl_sharedstrings
                 content = lv_content ).

**********************************************************************
* STEP 10: Add sheet#.xml and drawing#.xml to zip
    lo_iterator = me->excel->get_worksheets_iterator( ).
    lo_active_worksheet = me->excel->get_active_worksheet( ).

    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lv_sheet_index = sy-index.

      lo_worksheet ?= lo_iterator->if_object_collection_iterator~get_next( ).
      IF lo_active_worksheet->get_guid( ) EQ lo_worksheet->get_guid( ).
        lv_active = abap_true.
      ELSE.
        lv_active = abap_false.
      ENDIF.
      lv_content = me->create_xl_sheet( io_worksheet = lo_worksheet
                                        iv_active    = lv_active ).
      lv_xl_sheet = me->c_xl_sheet.

      lv_index_str = lv_sheet_index.
      CONDENSE lv_index_str NO-GAPS.
      REPLACE ALL OCCURRENCES OF '#' IN lv_xl_sheet WITH lv_index_str.
      lo_zip->add( name    = lv_xl_sheet
                   content = lv_content ).

* Begin - Add - Issue #180
* Add comments **********************************
      lo_comments = lo_worksheet->get_comments( ).
      IF lo_comments->is_empty( ) = abap_false.
        lv_comment_index = lv_comment_index + 1.

        " Create comment itself
        lv_content = me->create_xl_comments( lo_worksheet ).
        lv_xl_comment = me->c_xl_comments.
        lv_index_str = lv_comment_index.
        CONDENSE lv_index_str NO-GAPS.
        REPLACE ALL OCCURRENCES OF '#' IN lv_xl_comment WITH lv_index_str.
        lo_zip->add( name    = lv_xl_comment
                     content = lv_content ).

        " Create vmlDrawing that will host the comment
        lv_content = me->create_xl_drawing_for_comments( lo_worksheet ).
        lv_xl_drawing_for_comment = me->cl_xl_drawing_for_comments.
        REPLACE ALL OCCURRENCES OF '#' IN lv_xl_drawing_for_comment WITH lv_index_str.
        lo_zip->add( name    = lv_xl_drawing_for_comment
                     content = lv_content ).
      ENDIF.
* End   - Add - Issue #180

* Add drawings **********************************
      lo_drawings = lo_worksheet->get_drawings( ).
      IF lo_drawings->is_empty( ) = abap_false.
        lv_drawing_index = lv_drawing_index + 1.

        lv_content = me->create_xl_drawings( lo_worksheet ).
        lv_xl_drawing = me->c_xl_drawings.
        lv_index_str = lv_drawing_index.
        CONDENSE lv_index_str NO-GAPS.
        REPLACE ALL OCCURRENCES OF '#' IN lv_xl_drawing WITH lv_index_str.
        lo_zip->add( name    = lv_xl_drawing
                     content = lv_content ).

        lv_content = me->create_xl_drawings_rels( lo_worksheet ).
        lv_xl_drawing_rels = me->c_xl_drawings_rels.
        REPLACE ALL OCCURRENCES OF '#' IN lv_xl_drawing_rels WITH lv_index_str.
        lo_zip->add( name    = lv_xl_drawing_rels
                     content = lv_content ).
      ENDIF.

* Add Header/Footer image
      DATA: lt_drawings TYPE zexcel_t_drawings.
      lt_drawings = lo_worksheet->get_header_footer_drawings( ).
      IF lines( lt_drawings ) > 0. "Header or footer image exist

        lv_comment_index = lv_comment_index + 1.
        lv_index_str = lv_comment_index.
        CONDENSE lv_index_str NO-GAPS.

        " Create vmlDrawing that will host the image
        lv_content = me->create_xl_drawing_for_hdft_im( lo_worksheet ).
        lv_xl_drawing_for_comment = me->cl_xl_drawing_for_comments.
        REPLACE ALL OCCURRENCES OF '#' IN lv_xl_drawing_for_comment WITH lv_index_str.
        lo_zip->add( name    = lv_xl_drawing_for_comment
                     content = lv_content ).

        " Create vmlDrawing REL that will host the image
        lv_content = me->create_xl_drawings_hdft_rels( lo_worksheet ).
        lv_xl_drawing_rels = me->c_xl_drawings_vml_rels.
        REPLACE ALL OCCURRENCES OF '#' IN lv_xl_drawing_rels WITH lv_index_str.
        lo_zip->add( name    = lv_xl_drawing_rels
                     content = lv_content ).
      ENDIF.


      lv_xl_sheet_rels = me->c_xl_sheet_rels.
      lv_content = me->create_xl_sheet_rels( io_worksheet = lo_worksheet
                                             iv_drawing_index = lv_drawing_index
                                             iv_comment_index = lv_comment_index ).      " (+) Issue #180

      lv_index_str = lv_sheet_index.
      CONDENSE lv_index_str NO-GAPS.
      REPLACE ALL OCCURRENCES OF '#' IN lv_xl_sheet_rels WITH lv_index_str.
      lo_zip->add( name    = lv_xl_sheet_rels
                   content = lv_content ).

      lo_nested_iterator = lo_worksheet->get_tables_iterator( ).

      WHILE lo_nested_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
        lo_table ?= lo_nested_iterator->if_object_collection_iterator~get_next( ).
        lv_content = me->create_xl_table( lo_table ).

        lv_value = lo_table->get_name( ).
        CONCATENATE 'xl/tables/' lv_value '.xml' INTO lv_value.
        lo_zip->add( name = lv_value
                      content = lv_content ).
      ENDWHILE.



    ENDWHILE.

**********************************************************************
* STEP 11: Add media
    lo_iterator = me->excel->get_drawings_iterator( zcl_excel_drawing=>type_image ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_drawing ?= lo_iterator->if_object_collection_iterator~get_next( ).
*    IF lo_drawing->get_type( ) NE zcl_excel_drawing=>type_image_header_footer.

      lv_content = lo_drawing->get_media( ).
      lv_value = lo_drawing->get_media_name( ).
      CONCATENATE 'xl/media/' lv_value INTO lv_value.
      lo_zip->add( name    = lv_value
                   content = lv_content ).
*    ENDIF.
    ENDWHILE.

**********************************************************************
* STEP 12: Add charts
    lo_iterator = me->excel->get_drawings_iterator( zcl_excel_drawing=>type_chart ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_drawing ?= lo_iterator->if_object_collection_iterator~get_next( ).

      lv_content = lo_drawing->get_media( ).

      "-------------Added by Alessandro Iannacci - Only if template exist
      IF lv_content IS NOT INITIAL AND me->excel->use_template EQ abap_true.
        lv_value = lo_drawing->get_media_name( ).
        CONCATENATE 'xl/charts/' lv_value INTO lv_value.
        lo_zip->add( name    = lv_value
                     content = lv_content ).
      ELSE. "ADD CUSTOM CHART!!!!
        lv_content = me->create_xl_charts( lo_drawing ).
        lv_value = lo_drawing->get_media_name( ).
        CONCATENATE 'xl/charts/' lv_value INTO lv_value.
        lo_zip->add( name    = lv_value
                     content = lv_content ).
      ENDIF.
      "-------------------------------------------------
    ENDWHILE.

* Second to last step: Allow further information put into the zip archive by child classes
    me->add_further_data_to_zip( lo_zip ).

**********************************************************************
* Last step: Create the final zip
    ep_excel = lo_zip->save( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_CONTENT_TYPES
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_content_types.


** Constant node name
    DATA: lc_xml_node_types        TYPE string VALUE 'Types',
          lc_xml_node_override     TYPE string VALUE 'Override',
          lc_xml_node_default      TYPE string VALUE 'Default',
          " Node attributes
          lc_xml_attr_partname     TYPE string VALUE 'PartName',
          lc_xml_attr_extension    TYPE string VALUE 'Extension',
          lc_xml_attr_contenttype  TYPE string VALUE 'ContentType',
          " Node namespace
          lc_xml_node_types_ns     TYPE string VALUE 'http://schemas.openxmlformats.org/package/2006/content-types',
          " Node extension
          lc_xml_node_rels_ext     TYPE string VALUE 'rels',
          lc_xml_node_xml_ext      TYPE string VALUE 'xml',
          lc_xml_node_xml_vml      TYPE string VALUE 'vml',   " (+) GGAR
          " Node partnumber
          lc_xml_node_theme_pn     TYPE string VALUE '/xl/theme/theme1.xml',
          lc_xml_node_styles_pn    TYPE string VALUE '/xl/styles.xml',
          lc_xml_node_workb_pn     TYPE string VALUE '/xl/workbook.xml',
          lc_xml_node_props_pn     TYPE string VALUE '/docProps/app.xml',
          lc_xml_node_worksheet_pn TYPE string VALUE '/xl/worksheets/sheet#.xml',
          lc_xml_node_strings_pn   TYPE string VALUE '/xl/sharedStrings.xml',
          lc_xml_node_core_pn      TYPE string VALUE '/docProps/core.xml',
          lc_xml_node_chart_pn     TYPE string VALUE '/xl/charts/chart#.xml',
          " Node contentType
          lc_xml_node_theme_ct     TYPE string VALUE 'application/vnd.openxmlformats-officedocument.theme+xml',
          lc_xml_node_styles_ct    TYPE string VALUE 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml',
          lc_xml_node_workb_ct     TYPE string VALUE 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml',
          lc_xml_node_rels_ct      TYPE string VALUE 'application/vnd.openxmlformats-package.relationships+xml',
          lc_xml_node_vml_ct       TYPE string VALUE 'application/vnd.openxmlformats-officedocument.vmlDrawing',
          lc_xml_node_xml_ct       TYPE string VALUE 'application/xml',
          lc_xml_node_props_ct     TYPE string VALUE 'application/vnd.openxmlformats-officedocument.extended-properties+xml',
          lc_xml_node_worksheet_ct TYPE string VALUE 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml',
          lc_xml_node_strings_ct   TYPE string VALUE 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml',
          lc_xml_node_core_ct      TYPE string VALUE 'application/vnd.openxmlformats-package.core-properties+xml',
          lc_xml_node_table_ct     TYPE string VALUE 'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml',
          lc_xml_node_comments_ct  TYPE string VALUE 'application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml',   " (+) GGAR
          lc_xml_node_drawings_ct  TYPE string VALUE 'application/vnd.openxmlformats-officedocument.drawing+xml',
          lc_xml_node_chart_ct     TYPE string VALUE 'application/vnd.openxmlformats-officedocument.drawingml.chart+xml'.

    DATA: lo_document        TYPE REF TO if_ixml_document,
          lo_element_root    TYPE REF TO if_ixml_element,
          lo_element         TYPE REF TO if_ixml_element,
          lo_worksheet       TYPE REF TO zcl_excel_worksheet,
          lo_iterator        TYPE REF TO cl_object_collection_iterator,
          lo_nested_iterator TYPE REF TO cl_object_collection_iterator,
          lo_table           TYPE REF TO zcl_excel_table.

    DATA: lv_worksheets_num        TYPE i,
          lv_worksheets_numc       TYPE numc3,
          lv_xml_node_worksheet_pn TYPE string,
          lv_value                 TYPE string,
          lv_comment_index         TYPE i VALUE 1,  " (+) GGAR
          lv_drawing_index         TYPE i VALUE 1,
          lv_index_str             TYPE string.

**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

**********************************************************************
* STEP 3: Create main node types
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_types
                                                           parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns'
    value = lc_xml_node_types_ns ).

**********************************************************************
* STEP 4: Create subnodes

    " rels node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_default
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_extension
                                  value = lc_xml_node_rels_ext ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                  value = lc_xml_node_rels_ct ).
    lo_element_root->append_child( new_child = lo_element ).

    " extension node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_default
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_extension
                                  value = lc_xml_node_xml_ext ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                  value = lc_xml_node_xml_ct ).
    lo_element_root->append_child( new_child = lo_element ).

* Begin - Add - GGAR
    " VML node (for comments)
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_default
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_extension
                                  value = lc_xml_node_xml_vml ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                  value = lc_xml_node_vml_ct ).
    lo_element_root->append_child( new_child = lo_element ).
* End   - Add - GGAR

    " Theme node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_override
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_partname
                                  value = lc_xml_node_theme_pn ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                  value = lc_xml_node_theme_ct ).
    lo_element_root->append_child( new_child = lo_element ).

    " Styles node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_override
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_partname
                                  value = lc_xml_node_styles_pn ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                  value = lc_xml_node_styles_ct ).
    lo_element_root->append_child( new_child = lo_element ).

    " Workbook node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_override
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_partname
                                  value = lc_xml_node_workb_pn ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                  value = lc_xml_node_workb_ct ).
    lo_element_root->append_child( new_child = lo_element ).

    " Properties node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_override
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_partname
                                  value = lc_xml_node_props_pn ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                  value = lc_xml_node_props_ct ).
    lo_element_root->append_child( new_child = lo_element ).

    " Worksheet node
    lv_worksheets_num = excel->get_worksheets_size( ).
    DO lv_worksheets_num TIMES.
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_override
                                                       parent = lo_document ).

      MOVE sy-index TO lv_worksheets_numc.
      SHIFT lv_worksheets_numc LEFT DELETING LEADING '0'.
      lv_xml_node_worksheet_pn = lc_xml_node_worksheet_pn.
      REPLACE ALL OCCURRENCES OF '#' IN lv_xml_node_worksheet_pn WITH lv_worksheets_numc.
      lo_element->set_attribute_ns( name  = lc_xml_attr_partname
                                    value = lv_xml_node_worksheet_pn ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                    value = lc_xml_node_worksheet_ct ).
      lo_element_root->append_child( new_child = lo_element ).
    ENDDO.

    lo_iterator = me->excel->get_worksheets_iterator( ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_worksheet ?= lo_iterator->if_object_collection_iterator~get_next( ).

      lo_nested_iterator = lo_worksheet->get_tables_iterator( ).

      WHILE lo_nested_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
        lo_table ?= lo_nested_iterator->if_object_collection_iterator~get_next( ).

        lv_value = lo_table->get_name( ).
        CONCATENATE '/xl/tables/' lv_value '.xml' INTO lv_value.

        lo_element = lo_document->create_simple_element( name   = lc_xml_node_override
                                                     parent = lo_document ).
        lo_element->set_attribute_ns( name  = lc_xml_attr_partname
                                  value = lv_value ).
        lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                  value = lc_xml_node_table_ct ).
        lo_element_root->append_child( new_child = lo_element ).
      ENDWHILE.

* Begin - Add - GGAR
      " Comments
      DATA: lo_comments TYPE REF TO zcl_excel_comments.

      lo_comments = lo_worksheet->get_comments( ).
      IF lo_comments->is_empty( ) = abap_false.
        lv_index_str = lv_comment_index.
        CONDENSE lv_index_str NO-GAPS.
        CONCATENATE '/' me->c_xl_comments INTO lv_value.
        REPLACE '#' WITH lv_index_str INTO lv_value.

        lo_element = lo_document->create_simple_element( name   = lc_xml_node_override
                                                         parent = lo_document ).
        lo_element->set_attribute_ns( name  = lc_xml_attr_partname
                                      value = lv_value ).
        lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                      value = lc_xml_node_comments_ct ).
        lo_element_root->append_child( new_child = lo_element ).

        ADD 1 TO lv_comment_index.
      ENDIF.
* End   - Add - GGAR

      " Drawings
      DATA: lo_drawings TYPE REF TO zcl_excel_drawings.

      lo_drawings = lo_worksheet->get_drawings( ).
      IF lo_drawings->is_empty( ) = abap_false.
        lv_index_str = lv_drawing_index.
        CONDENSE lv_index_str NO-GAPS.
        CONCATENATE '/' me->c_xl_drawings INTO lv_value.
        REPLACE '#' WITH lv_index_str INTO lv_value.

        lo_element = lo_document->create_simple_element( name   = lc_xml_node_override
                                                     parent = lo_document ).
        lo_element->set_attribute_ns( name  = lc_xml_attr_partname
                                  value = lv_value ).
        lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                  value = lc_xml_node_drawings_ct ).
        lo_element_root->append_child( new_child = lo_element ).

        ADD 1 TO lv_drawing_index.
      ENDIF.
    ENDWHILE.

    " media mimes
    DATA: lo_drawing    TYPE REF TO zcl_excel_drawing,
          lt_media_type TYPE TABLE OF mimetypes-extension,
          lv_media_type TYPE mimetypes-extension,
          lv_mime_type  TYPE mimetypes-type.

    lo_iterator = me->excel->get_drawings_iterator( zcl_excel_drawing=>type_image ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) = abap_true.
      lo_drawing ?= lo_iterator->if_object_collection_iterator~get_next( ).

      lv_media_type = lo_drawing->get_media_type( ).
      COLLECT lv_media_type INTO lt_media_type.
    ENDWHILE.

    LOOP AT lt_media_type INTO lv_media_type.
      CALL FUNCTION 'SDOK_MIMETYPE_GET'
        EXPORTING
          extension = lv_media_type
        IMPORTING
          mimetype  = lv_mime_type.

      lo_element = lo_document->create_simple_element( name   = lc_xml_node_default
                                                       parent = lo_document ).
      lv_value = lv_media_type.
      lo_element->set_attribute_ns( name  = lc_xml_attr_extension
                                    value = lv_value ).
      lv_value = lv_mime_type.
      lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                    value = lv_value ).
      lo_element_root->append_child( new_child = lo_element ).
    ENDLOOP.

    " Charts
    lo_iterator = me->excel->get_drawings_iterator( zcl_excel_drawing=>type_chart ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) = abap_true.
      lo_drawing ?= lo_iterator->if_object_collection_iterator~get_next( ).

      lo_element = lo_document->create_simple_element( name   = lc_xml_node_override
                                                       parent = lo_document ).
      lv_index_str = lo_drawing->get_index( ).
      CONDENSE lv_index_str.
      lv_value = lc_xml_node_chart_pn.
      REPLACE ALL OCCURRENCES OF '#' IN lv_value WITH lv_index_str.
      lo_element->set_attribute_ns( name  = lc_xml_attr_partname
                                    value = lv_value ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                    value = lc_xml_node_chart_ct ).
      lo_element_root->append_child( new_child = lo_element ).
    ENDWHILE.

    " Strings node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_override
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_partname
                                  value = lc_xml_node_strings_pn ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                  value = lc_xml_node_strings_ct ).
    lo_element_root->append_child( new_child = lo_element ).

    " Strings node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_override
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_partname
                                  value = lc_xml_node_core_pn ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_contenttype
                                  value = lc_xml_node_core_ct ).
    lo_element_root->append_child( new_child = lo_element ).

**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_DOCPROPS_APP
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_docprops_app.


** Constant node name
    DATA: lc_xml_node_properties        TYPE string VALUE 'Properties',
          lc_xml_node_application       TYPE string VALUE 'Application',
          lc_xml_node_docsecurity       TYPE string VALUE 'DocSecurity',
          lc_xml_node_scalecrop         TYPE string VALUE 'ScaleCrop',
          lc_xml_node_headingpairs      TYPE string VALUE 'HeadingPairs',
          lc_xml_node_vector            TYPE string VALUE 'vector',
          lc_xml_node_variant           TYPE string VALUE 'variant',
          lc_xml_node_lpstr             TYPE string VALUE 'lpstr',
          lc_xml_node_i4                TYPE string VALUE 'i4',
          lc_xml_node_titlesofparts     TYPE string VALUE 'TitlesOfParts',
          lc_xml_node_company           TYPE string VALUE 'Company',
          lc_xml_node_linksuptodate     TYPE string VALUE 'LinksUpToDate',
          lc_xml_node_shareddoc         TYPE string VALUE 'SharedDoc',
          lc_xml_node_hyperlinkschanged TYPE string VALUE 'HyperlinksChanged',
          lc_xml_node_appversion        TYPE string VALUE 'AppVersion',
          " Namespace prefix
          lc_vt_ns                      TYPE string VALUE 'vt',
          lc_xml_node_props_ns          TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties',
          lc_xml_node_props_vt_ns       TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',
          " Node attributes
          lc_xml_attr_size              TYPE string VALUE 'size',
          lc_xml_attr_basetype          TYPE string VALUE 'baseType'.

    DATA: lo_document            TYPE REF TO if_ixml_document,
          lo_element_root        TYPE REF TO if_ixml_element,
          lo_element             TYPE REF TO if_ixml_element,
          lo_sub_element_vector  TYPE REF TO if_ixml_element,
          lo_sub_element_variant TYPE REF TO if_ixml_element,
          lo_sub_element_lpstr   TYPE REF TO if_ixml_element,
          lo_sub_element_i4      TYPE REF TO if_ixml_element,
          lo_iterator            TYPE REF TO cl_object_collection_iterator,
          lo_worksheet           TYPE REF TO zcl_excel_worksheet.

    DATA: lv_value                TYPE string.

**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

**********************************************************************
* STEP 3: Create main node properties
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_properties
                                                           parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns'
                                       value = lc_xml_node_props_ns ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:vt'
                                       value = lc_xml_node_props_vt_ns ).

**********************************************************************
* STEP 4: Create subnodes
    " Application
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_application
                                                     parent = lo_document ).
    lv_value = excel->zif_excel_book_properties~application.
    lo_element->set_value( value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ).

    " DocSecurity
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_docsecurity
                                                              parent = lo_document ).
    lv_value = excel->zif_excel_book_properties~docsecurity.
    lo_element->set_value( value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ).

    " ScaleCrop
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_scalecrop
                                                     parent = lo_document ).
    lv_value = me->flag2bool( excel->zif_excel_book_properties~scalecrop ).
    lo_element->set_value( value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ).

    " HeadingPairs
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_headingpairs
                                                     parent = lo_document ).


    " * vector node
    lo_sub_element_vector = lo_document->create_simple_element_ns( name   = lc_xml_node_vector
                                                                   prefix = lc_vt_ns
                                                                   parent = lo_document ).
    lo_sub_element_vector->set_attribute_ns( name    = lc_xml_attr_size
                                             value   = '2' ).
    lo_sub_element_vector->set_attribute_ns( name    = lc_xml_attr_basetype
                                             value   = lc_xml_node_variant ).

    " ** variant node
    lo_sub_element_variant = lo_document->create_simple_element_ns( name   = lc_xml_node_variant
                                                                    prefix = lc_vt_ns
                                                                    parent = lo_document ).

    " *** lpstr node
    lo_sub_element_lpstr = lo_document->create_simple_element_ns( name   = lc_xml_node_lpstr
                                                                  prefix = lc_vt_ns
                                                                  parent = lo_document ).
    lv_value = excel->get_worksheets_name( ).
    lo_sub_element_lpstr->set_value( value = lv_value ).
    lo_sub_element_variant->append_child( new_child = lo_sub_element_lpstr ). " lpstr node

    lo_sub_element_vector->append_child( new_child = lo_sub_element_variant ). " variant node

    " ** variant node
    lo_sub_element_variant = lo_document->create_simple_element_ns( name   = lc_xml_node_variant
                                                                    prefix = lc_vt_ns
                                                                    parent = lo_document ).

    " *** i4 node
    lo_sub_element_i4 = lo_document->create_simple_element_ns( name   = lc_xml_node_i4
                                                               prefix = lc_vt_ns
                                                               parent = lo_document ).
    lv_value = excel->get_worksheets_size( ).
    SHIFT lv_value RIGHT DELETING TRAILING space.
    SHIFT lv_value LEFT DELETING LEADING space.
    lo_sub_element_i4->set_value( value = lv_value ).
    lo_sub_element_variant->append_child( new_child = lo_sub_element_i4 ). " lpstr node

    lo_sub_element_vector->append_child( new_child = lo_sub_element_variant ). " variant node

    lo_element->append_child( new_child = lo_sub_element_vector ). " vector node

    lo_element_root->append_child( new_child = lo_element ). " HeadingPairs


    " TitlesOfParts
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_titlesofparts
                                                     parent = lo_document ).


    " * vector node
    lo_sub_element_vector = lo_document->create_simple_element_ns( name   = lc_xml_node_vector
                                                                   prefix = lc_vt_ns
                                                                   parent = lo_document ).
    lv_value = excel->get_worksheets_size( ).
    SHIFT lv_value RIGHT DELETING TRAILING space.
    SHIFT lv_value LEFT DELETING LEADING space.
    lo_sub_element_vector->set_attribute_ns( name    = lc_xml_attr_size
                                             value   = lv_value ).
    lo_sub_element_vector->set_attribute_ns( name    = lc_xml_attr_basetype
                                             value   = lc_xml_node_lpstr ).

    lo_iterator = excel->get_worksheets_iterator( ).

    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      " ** lpstr node
      lo_sub_element_lpstr = lo_document->create_simple_element_ns( name   = lc_xml_node_lpstr
                                                                    prefix = lc_vt_ns
                                                                    parent = lo_document ).
      lo_worksheet ?= lo_iterator->if_object_collection_iterator~get_next( ).
      lv_value = lo_worksheet->get_title( ).
      lo_sub_element_lpstr->set_value( value = lv_value ).
      lo_sub_element_vector->append_child( new_child = lo_sub_element_lpstr ). " lpstr node
    ENDWHILE.

    lo_element->append_child( new_child = lo_sub_element_vector ). " vector node

    lo_element_root->append_child( new_child = lo_element ). " TitlesOfParts



    " Company
    IF excel->zif_excel_book_properties~company IS NOT INITIAL.
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_company
                                                       parent = lo_document ).
      lv_value = excel->zif_excel_book_properties~company.
      lo_element->set_value( value = lv_value ).
      lo_element_root->append_child( new_child = lo_element ).
    ENDIF.

    " LinksUpToDate
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_linksuptodate
                                                     parent = lo_document ).
    lv_value = me->flag2bool( excel->zif_excel_book_properties~linksuptodate ).
    lo_element->set_value( value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ).

    " SharedDoc
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_shareddoc
                                                     parent = lo_document ).
    lv_value = me->flag2bool( excel->zif_excel_book_properties~shareddoc ).
    lo_element->set_value( value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ).

    " HyperlinksChanged
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_hyperlinkschanged
                                                     parent = lo_document ).
    lv_value = me->flag2bool( excel->zif_excel_book_properties~hyperlinkschanged ).
    lo_element->set_value( value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ).

    " AppVersion
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_appversion
                                                     parent = lo_document ).
    lv_value = excel->zif_excel_book_properties~appversion.
    lo_element->set_value( value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ).

**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_DOCPROPS_CORE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_docprops_core.


** Constant node name
    DATA: lc_xml_node_coreproperties TYPE string VALUE 'coreProperties',
          lc_xml_node_creator        TYPE string VALUE 'creator',
          lc_xml_node_description    TYPE string VALUE 'description',
          lc_xml_node_lastmodifiedby TYPE string VALUE 'lastModifiedBy',
          lc_xml_node_created        TYPE string VALUE 'created',
          lc_xml_node_modified       TYPE string VALUE 'modified',
          " Node attributes
          lc_xml_attr_type           TYPE string VALUE 'type',
          lc_xml_attr_target         TYPE string VALUE 'dcterms:W3CDTF',
          " Node namespace
          lc_cp_ns                   TYPE string VALUE 'cp',
          lc_dc_ns                   TYPE string VALUE 'dc',
          lc_dcterms_ns              TYPE string VALUE 'dcterms',
*        lc_dcmitype_ns              TYPE string VALUE 'dcmitype',
          lc_xsi_ns                  TYPE string VALUE 'xsi',
          lc_xml_node_cp_ns          TYPE string VALUE 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',
          lc_xml_node_dc_ns          TYPE string VALUE 'http://purl.org/dc/elements/1.1/',
          lc_xml_node_dcterms_ns     TYPE string VALUE 'http://purl.org/dc/terms/',
          lc_xml_node_dcmitype_ns    TYPE string VALUE 'http://purl.org/dc/dcmitype/',
          lc_xml_node_xsi_ns         TYPE string VALUE 'http://www.w3.org/2001/XMLSchema-instance'.

    DATA: lo_document     TYPE REF TO if_ixml_document,
          lo_element_root TYPE REF TO if_ixml_element,
          lo_element      TYPE REF TO if_ixml_element.

    DATA: lv_value TYPE string,
          lv_date  TYPE sydatum,
          lv_time  TYPE syuzeit.

**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

**********************************************************************
* STEP 3: Create main node coreProperties
    lo_element_root  = lo_document->create_simple_element_ns( name   = lc_xml_node_coreproperties
                                                              prefix = lc_cp_ns
                                                              parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:cp'
                                       value = lc_xml_node_cp_ns ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:dc'
                                       value = lc_xml_node_dc_ns ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:dcterms'
                                       value = lc_xml_node_dcterms_ns ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:dcmitype'
                                       value = lc_xml_node_dcmitype_ns ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:xsi'
                                       value = lc_xml_node_xsi_ns ).

**********************************************************************
* STEP 4: Create subnodes
    " Creator node
    lo_element = lo_document->create_simple_element_ns( name   = lc_xml_node_creator
                                                        prefix = lc_dc_ns
                                                        parent = lo_document ).
    lv_value = excel->zif_excel_book_properties~creator.
    lo_element->set_value( value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ).

    " Description node
    lo_element = lo_document->create_simple_element_ns( name   = lc_xml_node_description
                                                        prefix = lc_dc_ns
                                                        parent = lo_document ).
    lv_value = excel->zif_excel_book_properties~description.
    lo_element->set_value( value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ).

    " lastModifiedBy node
    lo_element = lo_document->create_simple_element_ns( name   = lc_xml_node_lastmodifiedby
                                                        prefix = lc_cp_ns
                                                        parent = lo_document ).
    lv_value = excel->zif_excel_book_properties~lastmodifiedby.
    lo_element->set_value( value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ).

    " Created node
    lo_element = lo_document->create_simple_element_ns( name   = lc_xml_node_created
                                                        prefix = lc_dcterms_ns
                                                        parent = lo_document ).
    lo_element->set_attribute_ns( name    = lc_xml_attr_type
                                  prefix  = lc_xsi_ns
                                  value   = lc_xml_attr_target ).

    CONVERT TIME STAMP excel->zif_excel_book_properties~created TIME ZONE sy-zonlo INTO DATE lv_date TIME lv_time.
    CONCATENATE lv_date lv_time INTO lv_value RESPECTING BLANKS.
    REPLACE ALL OCCURRENCES OF REGEX '([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})' IN lv_value WITH '$1-$2-$3T$4:$5:$6Z'.
* lv_value = excel->zif_excel_book_properties~created.
*  lv_value = '2010-07-04T14:58:53Z'.
    lo_element->set_value( value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ).

    " Modified node
    lo_element = lo_document->create_simple_element_ns( name   = lc_xml_node_modified
                                                        prefix = lc_dcterms_ns
                                                        parent = lo_document ).
    lo_element->set_attribute_ns( name    = lc_xml_attr_type
                                  prefix  = lc_xsi_ns
                                  value   = lc_xml_attr_target ).
    CONVERT TIME STAMP excel->zif_excel_book_properties~modified TIME ZONE sy-zonlo INTO DATE lv_date TIME lv_time.
    CONCATENATE lv_date lv_time INTO lv_value RESPECTING BLANKS.
    REPLACE ALL OCCURRENCES OF REGEX '([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})' IN lv_value WITH '$1-$2-$3T$4:$5:$6Z'.
*  lv_value = excel->zif_excel_book_properties~modified.
*  lv_value = '2010-07-04T14:58:53Z'.
    lo_element->set_value( value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ).

**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_DXF_STYLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_CELL_STYLE                  TYPE        ZEXCEL_CELL_STYLE
* | [--->] IO_DXF_ELEMENT                 TYPE REF TO IF_IXML_ELEMENT
* | [--->] IO_IXML_DOCUMENT               TYPE REF TO IF_IXML_DOCUMENT
* | [--->] IT_CELLXFS                     TYPE        ZEXCEL_T_CELLXFS
* | [--->] IT_FONTS                       TYPE        ZEXCEL_T_STYLE_FONT
* | [--->] IT_FILLS                       TYPE        ZEXCEL_T_STYLE_FILL
* | [<-->] CV_DFX_COUNT                   TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_dxf_style.

    CONSTANTS: lc_xml_node_dxf         TYPE string VALUE 'dxf',
               lc_xml_node_font        TYPE string VALUE 'font',
               lc_xml_node_b           TYPE string VALUE 'b',            "bold
               lc_xml_node_i           TYPE string VALUE 'i',            "italic
               lc_xml_node_u           TYPE string VALUE 'u',            "underline
               lc_xml_node_strike      TYPE string VALUE 'strike',       "strikethrough
               lc_xml_attr_val         TYPE string VALUE 'val',
               lc_xml_node_fill        TYPE string VALUE 'fill',
               lc_xml_node_patternfill TYPE string VALUE 'patternFill',
               lc_xml_attr_patterntype TYPE string VALUE 'patternType',
               lc_xml_node_fgcolor     TYPE string VALUE 'fgColor',
               lc_xml_node_bgcolor     TYPE string VALUE 'bgColor'.

    DATA: ls_styles_mapping     TYPE zexcel_s_styles_mapping,
          ls_cellxfs            TYPE zexcel_s_cellxfs,
          ls_style_cond_mapping TYPE zexcel_s_styles_cond_mapping,
          lo_sub_element        TYPE REF TO if_ixml_element,
          lo_sub_element_2      TYPE REF TO if_ixml_element,
          lv_index              TYPE i,
          ls_font               TYPE zexcel_s_style_font,
          lo_element_font       TYPE REF TO if_ixml_element,
          lv_value              TYPE string,
          ls_fill               TYPE zexcel_s_style_fill,
          lo_element_fill       TYPE REF TO if_ixml_element.

    CHECK iv_cell_style IS NOT INITIAL.

    READ TABLE me->styles_mapping INTO ls_styles_mapping WITH KEY guid = iv_cell_style.
    ADD 1 TO ls_styles_mapping-style. " the numbering starts from 0
    READ TABLE it_cellxfs INTO ls_cellxfs INDEX ls_styles_mapping-style.
    ADD 1 TO ls_cellxfs-fillid.       " the numbering starts from 0

    READ TABLE me->styles_cond_mapping INTO ls_style_cond_mapping WITH KEY style = ls_styles_mapping-style.
    IF sy-subrc EQ 0.
      ls_style_cond_mapping-guid  = iv_cell_style.
      APPEND ls_style_cond_mapping TO me->styles_cond_mapping.
    ELSE.
      ls_style_cond_mapping-guid  = iv_cell_style.
      ls_style_cond_mapping-style = ls_styles_mapping-style.
      ls_style_cond_mapping-dxf   = cv_dfx_count.
      APPEND ls_style_cond_mapping TO me->styles_cond_mapping.
      ADD 1 TO cv_dfx_count.

      " dxf node
      lo_sub_element = io_ixml_document->create_simple_element( name   = lc_xml_node_dxf
                                                                parent = io_ixml_document ).

      "Conditional formatting font style correction by Alessandro Iannacci START
      lv_index = ls_cellxfs-fontid + 1.
      READ TABLE it_fonts INTO ls_font INDEX lv_index.
      IF ls_font IS NOT INITIAL.
        lo_element_font = io_ixml_document->create_simple_element( name   = lc_xml_node_font
                                                              parent = io_ixml_document ).
        IF ls_font-bold EQ abap_true.
          lo_sub_element_2 = io_ixml_document->create_simple_element( name   = lc_xml_node_b
                                                               parent = io_ixml_document ).
          lo_element_font->append_child( new_child = lo_sub_element_2 ).
        ENDIF.
        IF ls_font-italic EQ abap_true.
          lo_sub_element_2 = io_ixml_document->create_simple_element( name   = lc_xml_node_i
                                                               parent = io_ixml_document ).
          lo_element_font->append_child( new_child = lo_sub_element_2 ).
        ENDIF.
        IF ls_font-underline EQ abap_true.
          lo_sub_element_2 = io_ixml_document->create_simple_element( name   = lc_xml_node_u
                                                               parent = io_ixml_document ).
          lv_value = ls_font-underline_mode.
          lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_val
                                            value = lv_value ).
          lo_element_font->append_child( new_child = lo_sub_element_2 ).
        ENDIF.
        IF ls_font-strikethrough EQ abap_true.
          lo_sub_element_2 = io_ixml_document->create_simple_element( name   = lc_xml_node_strike
                                                               parent = io_ixml_document ).
          lo_element_font->append_child( new_child = lo_sub_element_2 ).
        ENDIF.
        "color
        create_xl_styles_color_node(
            io_document        = io_ixml_document
            io_parent          = lo_element_font
            is_color           = ls_font-color ).
        lo_sub_element->append_child( new_child = lo_element_font ).
      ENDIF.
      "---Conditional formatting font style correction by Alessandro Iannacci END


      READ TABLE it_fills INTO ls_fill INDEX ls_cellxfs-fillid.
      IF ls_fill IS NOT INITIAL.
        " fill properties
        lo_element_fill = io_ixml_document->create_simple_element( name   = lc_xml_node_fill
                                                                 parent = io_ixml_document ).
        "pattern
        lo_sub_element_2 = io_ixml_document->create_simple_element( name   = lc_xml_node_patternfill
                                                             parent = io_ixml_document ).
        lv_value = ls_fill-filltype.
        lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_patterntype
                                            value = lv_value ).
        " fgcolor
        create_xl_styles_color_node(
            io_document        = io_ixml_document
            io_parent          = lo_sub_element_2
            is_color           = ls_fill-fgcolor
            iv_color_elem_name = lc_xml_node_fgcolor ).

        IF  ls_fill-fgcolor-rgb IS INITIAL AND
          ls_fill-fgcolor-indexed EQ zcl_excel_style_color=>c_indexed_not_set AND
          ls_fill-fgcolor-theme EQ zcl_excel_style_color=>c_theme_not_set AND
          ls_fill-fgcolor-tint IS INITIAL AND ls_fill-bgcolor-indexed EQ zcl_excel_style_color=>c_indexed_sys_foreground.

          " bgcolor
          create_xl_styles_color_node(
              io_document        = io_ixml_document
              io_parent          = lo_sub_element_2
              is_color           = ls_fill-bgcolor
              iv_color_elem_name = lc_xml_node_bgcolor ).

        ENDIF.

        lo_element_fill->append_child( new_child = lo_sub_element_2 ). "pattern

        lo_sub_element->append_child( new_child = lo_element_fill ).
      ENDIF.
    ENDIF.

    io_dxf_element->append_child( new_child = lo_sub_element ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_RELATIONSHIPS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_relationships.


** Constant node name
    DATA: lc_xml_node_relationships TYPE string VALUE 'Relationships',
          lc_xml_node_relationship  TYPE string VALUE 'Relationship',
          " Node attributes
          lc_xml_attr_id            TYPE string VALUE 'Id',
          lc_xml_attr_type          TYPE string VALUE 'Type',
          lc_xml_attr_target        TYPE string VALUE 'Target',
          " Node namespace
          lc_xml_node_rels_ns       TYPE string VALUE 'http://schemas.openxmlformats.org/package/2006/relationships',
          " Node id
          lc_xml_node_rid1_id       TYPE string VALUE 'rId1',
          lc_xml_node_rid2_id       TYPE string VALUE 'rId2',
          lc_xml_node_rid3_id       TYPE string VALUE 'rId3',
          " Node type
          lc_xml_node_rid1_tp       TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument',
          lc_xml_node_rid2_tp       TYPE string VALUE 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties',
          lc_xml_node_rid3_tp       TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties',
          " Node target
          lc_xml_node_rid1_tg       TYPE string VALUE 'xl/workbook.xml',
          lc_xml_node_rid2_tg       TYPE string VALUE 'docProps/core.xml',
          lc_xml_node_rid3_tg       TYPE string VALUE 'docProps/app.xml'.

    DATA: lo_document     TYPE REF TO if_ixml_document,
          lo_element_root TYPE REF TO if_ixml_element,
          lo_element      TYPE REF TO if_ixml_element.

**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

**********************************************************************
* STEP 3: Create main node relationships
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_relationships
                                                           parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns'
                                       value = lc_xml_node_rels_ns ).

**********************************************************************
* STEP 4: Create subnodes
    " Theme node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_id
                                  value = lc_xml_node_rid3_id ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                  value = lc_xml_node_rid3_tp ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_target
                                  value = lc_xml_node_rid3_tg ).
    lo_element_root->append_child( new_child = lo_element ).

    " Styles node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_id
                                  value = lc_xml_node_rid2_id ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                  value = lc_xml_node_rid2_tp ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_target
                                  value = lc_xml_node_rid2_tg ).
    lo_element_root->append_child( new_child = lo_element ).

    " rels node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_id
                                  value = lc_xml_node_rid1_id ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                  value = lc_xml_node_rid1_tp ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_target
                                  value = lc_xml_node_rid1_tg ).
    lo_element_root->append_child( new_child = lo_element ).

**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_CHARTS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_DRAWING                     TYPE REF TO ZCL_EXCEL_DRAWING
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_charts.


** Constant node name
    CONSTANTS:  lc_xml_node_chartspace         TYPE string VALUE 'c:chartSpace',
                lc_xml_node_ns_c               TYPE string VALUE 'http://schemas.openxmlformats.org/drawingml/2006/chart',
                lc_xml_node_ns_a               TYPE string VALUE 'http://schemas.openxmlformats.org/drawingml/2006/main',
                lc_xml_node_ns_r               TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',
                lc_xml_node_date1904           TYPE string VALUE 'c:date1904',
                lc_xml_node_lang               TYPE string VALUE 'c:lang',
                lc_xml_node_roundedcorners     TYPE string VALUE 'c:roundedCorners',
                lc_xml_node_altcont            TYPE string VALUE 'mc:AlternateContent',
                lc_xml_node_altcont_ns_mc      TYPE string VALUE 'http://schemas.openxmlformats.org/markup-compatibility/2006',
                lc_xml_node_choice             TYPE string VALUE 'mc:Choice',
                lc_xml_node_choice_ns_requires TYPE string VALUE 'c14',
                lc_xml_node_choice_ns_c14      TYPE string VALUE 'http://schemas.microsoft.com/office/drawing/2007/8/2/chart',
                lc_xml_node_style              TYPE string VALUE 'c14:style',
                lc_xml_node_fallback           TYPE string VALUE 'mc:Fallback',
                lc_xml_node_style2             TYPE string VALUE 'c:style',

                "---------------------------CHART
                lc_xml_node_chart              TYPE string VALUE 'c:chart',
                lc_xml_node_autotitledeleted   TYPE string VALUE 'c:autoTitleDeleted',
                "plotArea
                lc_xml_node_plotarea           TYPE string VALUE 'c:plotArea',
                lc_xml_node_layout             TYPE string VALUE 'c:layout',
                lc_xml_node_varycolors         TYPE string VALUE 'c:varyColors',
                lc_xml_node_ser                TYPE string VALUE 'c:ser',
                lc_xml_node_idx                TYPE string VALUE 'c:idx',
                lc_xml_node_order              TYPE string VALUE 'c:order',
                lc_xml_node_tx                 TYPE string VALUE 'c:tx',
                lc_xml_node_v                  TYPE string VALUE 'c:v',
                lc_xml_node_val                TYPE string VALUE 'c:val',
                lc_xml_node_cat                TYPE string VALUE 'c:cat',
                lc_xml_node_numref             TYPE string VALUE 'c:numRef',
                lc_xml_node_strref             TYPE string VALUE 'c:strRef',
                lc_xml_node_f                  TYPE string VALUE 'c:f', "this is the range
                lc_xml_node_overlap            TYPE string VALUE 'c:overlap',
                "note: numcache avoided
                lc_xml_node_dlbls              TYPE string VALUE 'c:dLbls',
                lc_xml_node_showlegendkey      TYPE string VALUE 'c:showLegendKey',
                lc_xml_node_showval            TYPE string VALUE 'c:showVal',
                lc_xml_node_showcatname        TYPE string VALUE 'c:showCatName',
                lc_xml_node_showsername        TYPE string VALUE 'c:showSerName',
                lc_xml_node_showpercent        TYPE string VALUE 'c:showPercent',
                lc_xml_node_showbubblesize     TYPE string VALUE 'c:showBubbleSize',
                "plotArea->pie
                lc_xml_node_piechart           TYPE string VALUE 'c:pieChart',
                lc_xml_node_showleaderlines    TYPE string VALUE 'c:showLeaderLines',
                lc_xml_node_firstsliceang      TYPE string VALUE 'c:firstSliceAng',
                "plotArea->line
                lc_xml_node_linechart          TYPE string VALUE 'c:lineChart',
                lc_xml_node_symbol             TYPE string VALUE 'c:symbol',
                lc_xml_node_marker             TYPE string VALUE 'c:marker',
                lc_xml_node_smooth             TYPE string VALUE 'c:smooth',
                "plotArea->bar
                lc_xml_node_invertifnegative   TYPE string VALUE 'c:invertIfNegative',
                lc_xml_node_barchart           TYPE string VALUE 'c:barChart',
                lc_xml_node_bardir             TYPE string VALUE 'c:barDir',
                lc_xml_node_gapwidth           TYPE string VALUE 'c:gapWidth',
                "plotArea->line + plotArea->bar
                lc_xml_node_grouping           TYPE string VALUE 'c:grouping',
                lc_xml_node_axid               TYPE string VALUE 'c:axId',
                lc_xml_node_catax              TYPE string VALUE 'c:catAx',
                lc_xml_node_valax              TYPE string VALUE 'c:valAx',
                lc_xml_node_scaling            TYPE string VALUE 'c:scaling',
                lc_xml_node_orientation        TYPE string VALUE 'c:orientation',
                lc_xml_node_delete             TYPE string VALUE 'c:delete',
                lc_xml_node_axpos              TYPE string VALUE 'c:axPos',
                lc_xml_node_numfmt             TYPE string VALUE 'c:numFmt',
                lc_xml_node_majorgridlines     TYPE string VALUE 'c:majorGridlines',
                lc_xml_node_majortickmark      TYPE string VALUE 'c:majorTickMark',
                lc_xml_node_minortickmark      TYPE string VALUE 'c:minorTickMark',
                lc_xml_node_ticklblpos         TYPE string VALUE 'c:tickLblPos',
                lc_xml_node_crossax            TYPE string VALUE 'c:crossAx',
                lc_xml_node_crosses            TYPE string VALUE 'c:crosses',
                lc_xml_node_auto               TYPE string VALUE 'c:auto',
                lc_xml_node_lblalgn            TYPE string VALUE 'c:lblAlgn',
                lc_xml_node_lbloffset          TYPE string VALUE 'c:lblOffset',
                lc_xml_node_nomultilvllbl      TYPE string VALUE 'c:noMultiLvlLbl',
                lc_xml_node_crossbetween       TYPE string VALUE 'c:crossBetween',
                "legend
                lc_xml_node_legend             TYPE string VALUE 'c:legend',
                "legend->pie
                lc_xml_node_legendpos          TYPE string VALUE 'c:legendPos',
*                  lc_xml_node_layout            TYPE string VALUE 'c:layout', "already exist
                lc_xml_node_overlay            TYPE string VALUE 'c:overlay',
                lc_xml_node_txpr               TYPE string VALUE 'c:txPr',
                lc_xml_node_bodypr             TYPE string VALUE 'a:bodyPr',
                lc_xml_node_lststyle           TYPE string VALUE 'a:lstStyle',
                lc_xml_node_p                  TYPE string VALUE 'a:p',
                lc_xml_node_ppr                TYPE string VALUE 'a:pPr',
                lc_xml_node_defrpr             TYPE string VALUE 'a:defRPr',
                lc_xml_node_endpararpr         TYPE string VALUE 'a:endParaRPr',
                "legend->bar + legend->line
                lc_xml_node_plotvisonly        TYPE string VALUE 'c:plotVisOnly',
                lc_xml_node_dispblanksas       TYPE string VALUE 'c:dispBlanksAs',
                lc_xml_node_showdlblsovermax   TYPE string VALUE 'c:showDLblsOverMax',
                "---------------------------END OF CHART

                lc_xml_node_printsettings      TYPE string VALUE 'c:printSettings',
                lc_xml_node_headerfooter       TYPE string VALUE 'c:headerFooter',
                lc_xml_node_pagemargins        TYPE string VALUE 'c:pageMargins',
                lc_xml_node_pagesetup          TYPE string VALUE 'c:pageSetup'.


    DATA: lo_document     TYPE REF TO if_ixml_document,
          lo_element_root TYPE REF TO if_ixml_element.


    DATA lo_element                               TYPE REF TO if_ixml_element.
    DATA lo_element2                              TYPE REF TO if_ixml_element.
    DATA lo_element3                              TYPE REF TO if_ixml_element.
    DATA lo_el_rootchart                           TYPE REF TO if_ixml_element.
    DATA lo_element4                              TYPE REF TO if_ixml_element.
    DATA lo_element5                              TYPE REF TO if_ixml_element.
    DATA lo_element6                              TYPE REF TO if_ixml_element.
    DATA lo_element7                              TYPE REF TO if_ixml_element.

**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

***********************************************************************
* STEP 3: Create main node relationships
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_chartspace
                                                           parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:c'
                                       value = lc_xml_node_ns_c ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:a'
                                       value = lc_xml_node_ns_a ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:r'
                                       value = lc_xml_node_ns_r ).

**********************************************************************
* STEP 4: Create chart

    DATA lo_chartb TYPE REF TO zcl_excel_graph_bars.
    DATA lo_chartp TYPE REF TO zcl_excel_graph_pie.
    DATA lo_chartl TYPE REF TO zcl_excel_graph_line.
    DATA lo_chart TYPE REF TO zcl_excel_graph.

    DATA ls_serie TYPE zcl_excel_graph=>s_series.
    DATA ls_ax TYPE zcl_excel_graph_bars=>s_ax.
    DATA lv_str TYPE string.

    "Identify chart type
    CASE io_drawing->graph_type.
      WHEN zcl_excel_drawing=>c_graph_bars.
        lo_chartb ?= io_drawing->graph.
      WHEN zcl_excel_drawing=>c_graph_pie.
        lo_chartp ?= io_drawing->graph.
      WHEN zcl_excel_drawing=>c_graph_line.
        lo_chartl ?= io_drawing->graph.
      WHEN OTHERS.
    ENDCASE.


    lo_chart = io_drawing->graph.

    lo_element = lo_document->create_simple_element( name = lc_xml_node_date1904
                                                         parent = lo_element_root ).
    lo_element->set_attribute_ns( name  = 'val'
                                      value = lo_chart->ns_1904val ).

    lo_element = lo_document->create_simple_element( name = lc_xml_node_lang
                                                         parent = lo_element_root ).
    lo_element->set_attribute_ns( name  = 'val'
                                      value = lo_chart->ns_langval ).

    lo_element = lo_document->create_simple_element( name = lc_xml_node_roundedcorners
                                                         parent = lo_element_root ).
    lo_element->set_attribute_ns( name  = 'val'
                                      value = lo_chart->ns_roundedcornersval ).

    lo_element = lo_document->create_simple_element( name = lc_xml_node_altcont
                                                         parent = lo_element_root ).
    lo_element->set_attribute_ns( name  = 'xmlns:mc'
                                      value = lc_xml_node_altcont_ns_mc ).

    "Choice
    lo_element2 = lo_document->create_simple_element( name = lc_xml_node_choice
                                                         parent = lo_element ).
    lo_element2->set_attribute_ns( name  = 'Requires'
                                      value = lc_xml_node_choice_ns_requires ).
    lo_element2->set_attribute_ns( name  = 'xmlns:c14'
                                      value = lc_xml_node_choice_ns_c14 ).

    "C14:style
    lo_element3 = lo_document->create_simple_element( name = lc_xml_node_style
                                                         parent = lo_element2 ).
    lo_element3->set_attribute_ns( name  = 'val'
                                      value = lo_chart->ns_c14styleval ).

    "Fallback
    lo_element2 = lo_document->create_simple_element( name = lc_xml_node_fallback
                                                         parent = lo_element ).

    "C:style
    lo_element3 = lo_document->create_simple_element( name = lc_xml_node_style2
                                                         parent = lo_element2 ).
    lo_element3->set_attribute_ns( name  = 'val'
                                      value = lo_chart->ns_styleval ).

    "---------------------------CHART
    lo_element = lo_document->create_simple_element( name = lc_xml_node_chart
                                                         parent = lo_element_root ).
    "Added
    IF lo_chart->title IS NOT INITIAL.
      lo_element2 = lo_document->create_simple_element( name = 'c:title'
                                                           parent = lo_element ).
      lo_element3 = lo_document->create_simple_element( name = 'c:tx'
                                                           parent = lo_element2 ).
      lo_element4 = lo_document->create_simple_element( name = 'c:rich'
                                                           parent = lo_element3 ).
      lo_element5 = lo_document->create_simple_element( name = 'a:bodyPr'
                                                           parent = lo_element4 ).
      lo_element5 = lo_document->create_simple_element( name = 'a:lstStyle'
                                                           parent = lo_element4 ).
      lo_element5 = lo_document->create_simple_element( name = 'a:p'
                                                           parent = lo_element4 ).
      lo_element6 = lo_document->create_simple_element( name = 'a:pPr'
                                                           parent = lo_element5 ).
      lo_element7 = lo_document->create_simple_element( name = 'a:defRPr'
                                                           parent = lo_element6 ).
      lo_element6 = lo_document->create_simple_element( name = 'a:r'
                                                           parent = lo_element5 ).
      lo_element7 = lo_document->create_simple_element( name = 'a:rPr'
                                                           parent = lo_element6 ).
      lo_element7->set_attribute_ns( name  = 'lang'
                                        value = 'en-US' ).
      lo_element7 = lo_document->create_simple_element( name = 'a:t'
                                                           parent = lo_element6 ).
      lo_element7->set_value( value = lo_chart->title ).
    ENDIF.
    "End
    lo_element2 = lo_document->create_simple_element( name = lc_xml_node_autotitledeleted
                                                         parent = lo_element ).
    lo_element2->set_attribute_ns( name  = 'val'
                                      value = lo_chart->ns_autotitledeletedval ).

    "plotArea
    lo_element2 = lo_document->create_simple_element( name = lc_xml_node_plotarea
                                                       parent = lo_element ).
    lo_element3 = lo_document->create_simple_element( name = lc_xml_node_layout
                                                       parent = lo_element2 ).
    CASE io_drawing->graph_type.
      WHEN zcl_excel_drawing=>c_graph_bars.
        "----bar
        lo_element3 = lo_document->create_simple_element( name = lc_xml_node_barchart
                                                     parent = lo_element2 ).
        lo_element4 = lo_document->create_simple_element( name = lc_xml_node_bardir
                                                     parent = lo_element3 ).
        lo_element4->set_attribute_ns( name  = 'val'
                                  value = lo_chartb->ns_bardirval ).
        lo_element4 = lo_document->create_simple_element( name = lc_xml_node_grouping
                                                     parent = lo_element3 ).
        lo_element4->set_attribute_ns( name  = 'val'
                                  value = lo_chartb->ns_groupingval ).
        lo_element4 = lo_document->create_simple_element( name = lc_xml_node_varycolors
                                                     parent = lo_element3 ).
        lo_element4->set_attribute_ns( name  = 'val'
                                  value = lo_chartb->ns_varycolorsval ).

        "series
        LOOP AT lo_chartb->series INTO ls_serie.
          lo_element4 = lo_document->create_simple_element( name = lc_xml_node_ser
                                                     parent = lo_element3 ).
          lo_element5 = lo_document->create_simple_element( name = lc_xml_node_idx
                                                     parent = lo_element4 ).
          IF ls_serie-idx IS NOT INITIAL.
            lv_str = ls_serie-idx.
          ELSE.
            lv_str = sy-tabix - 1.
          ENDIF.
          CONDENSE lv_str.
          lo_element5->set_attribute_ns( name  = 'val'
                                  value = lv_str ).
          lo_element5 = lo_document->create_simple_element( name = lc_xml_node_order
                                                     parent = lo_element4 ).
          lv_str = ls_serie-order.
          CONDENSE lv_str.
          lo_element5->set_attribute_ns( name  = 'val'
                                  value = lv_str ).
          IF ls_serie-sername IS NOT INITIAL.
            lo_element5 = lo_document->create_simple_element( name = lc_xml_node_tx
                                                      parent = lo_element4 ).
            lo_element6 = lo_document->create_simple_element( name = lc_xml_node_v
                                                      parent = lo_element5 ).
            lo_element6->set_value( value = ls_serie-sername ).
          ENDIF.
          lo_element5 = lo_document->create_simple_element( name = lc_xml_node_invertifnegative
                                                     parent = lo_element4 ).
          lo_element5->set_attribute_ns( name  = 'val'
                                  value = ls_serie-invertifnegative ).
          IF ls_serie-lbl IS NOT INITIAL.
            lo_element5 = lo_document->create_simple_element( name = lc_xml_node_cat
                                                       parent = lo_element4 ).
            lo_element6 = lo_document->create_simple_element( name = lc_xml_node_strref
                                                       parent = lo_element5 ).
            lo_element7 = lo_document->create_simple_element( name = lc_xml_node_f
                                                       parent = lo_element6 ).
            lo_element7->set_value( value = ls_serie-lbl ).
          ENDIF.
          IF ls_serie-ref IS NOT INITIAL.
            lo_element5 = lo_document->create_simple_element( name = lc_xml_node_val
                                                       parent = lo_element4 ).
            lo_element6 = lo_document->create_simple_element( name = lc_xml_node_numref
                                                       parent = lo_element5 ).
            lo_element7 = lo_document->create_simple_element( name = lc_xml_node_f
                                                       parent = lo_element6 ).
            lo_element7->set_value( value = ls_serie-ref ).
          ENDIF.
        ENDLOOP.
        "endseries
        IF lo_chartb->ns_groupingval = zcl_excel_graph_bars=>c_groupingval_stacked.
          lo_element4 = lo_document->create_simple_element( name = lc_xml_node_overlap
                                                            parent = lo_element3 ).
          lo_element4->set_attribute_ns( name  = 'val'
                                         value = '100' ).
        ENDIF.

        lo_element4 = lo_document->create_simple_element( name = lc_xml_node_dlbls
                                                     parent = lo_element3 ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showlegendkey
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartb->ns_showlegendkeyval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showval
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartb->ns_showvalval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showcatname
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartb->ns_showcatnameval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showsername
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartb->ns_showsernameval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showpercent
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartb->ns_showpercentval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showbubblesize
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartb->ns_showbubblesizeval ).

        lo_element4 = lo_document->create_simple_element( name = lc_xml_node_gapwidth
                                                     parent = lo_element3 ).
        lo_element4->set_attribute_ns( name  = 'val'
                                  value = lo_chartb->ns_gapwidthval ).

        "axes
        lo_el_rootchart = lo_element3.
        LOOP AT lo_chartb->axes INTO ls_ax.
          lo_element4 = lo_document->create_simple_element( name = lc_xml_node_axid
                                                     parent = lo_el_rootchart ).
          lo_element4->set_attribute_ns( name  = 'val'
                                  value = ls_ax-axid ).
          CASE ls_ax-type.
            WHEN zcl_excel_graph_bars=>c_catax.
              lo_element3 = lo_document->create_simple_element( name = lc_xml_node_catax
                                                     parent = lo_element2 ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_axid
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-axid ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_scaling
                                                     parent = lo_element3 ).
              lo_element5 = lo_document->create_simple_element( name = lc_xml_node_orientation
                                                     parent = lo_element4 ).
              lo_element5->set_attribute_ns( name  = 'val'
                                             value = ls_ax-orientation ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_delete
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-delete ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_axpos
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-axpos ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_numfmt
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'formatCode'
                                             value = ls_ax-formatcode ).
              lo_element4->set_attribute_ns( name  = 'sourceLinked'
                                             value = ls_ax-sourcelinked ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_majortickmark
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-majortickmark ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_minortickmark
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-minortickmark ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_ticklblpos
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-ticklblpos ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_crossax
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-crossax ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_crosses
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-crosses ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_auto
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-auto ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_lblalgn
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-lblalgn ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_lbloffset
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-lbloffset ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_nomultilvllbl
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-nomultilvllbl ).
            WHEN zcl_excel_graph_bars=>c_valax.
              lo_element3 = lo_document->create_simple_element( name = lc_xml_node_valax
                                                     parent = lo_element2 ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_axid
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-axid ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_scaling
                                                     parent = lo_element3 ).
              lo_element5 = lo_document->create_simple_element( name = lc_xml_node_orientation
                                                     parent = lo_element4 ).
              lo_element5->set_attribute_ns( name  = 'val'
                                             value = ls_ax-orientation ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_delete
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-delete ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_axpos
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-axpos ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_majorgridlines
                                                     parent = lo_element3 ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_numfmt
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'formatCode'
                                             value = ls_ax-formatcode ).
              lo_element4->set_attribute_ns( name  = 'sourceLinked'
                                             value = ls_ax-sourcelinked ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_majortickmark
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-majortickmark ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_minortickmark
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-minortickmark ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_ticklblpos
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-ticklblpos ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_crossax
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-crossax ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_crosses
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-crosses ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_crossbetween
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-crossbetween ).
            WHEN OTHERS.
          ENDCASE.
        ENDLOOP.
        "endaxes

      WHEN zcl_excel_drawing=>c_graph_pie.
        "----pie
        lo_element3 = lo_document->create_simple_element( name = lc_xml_node_piechart
                                                     parent = lo_element2 ).
        lo_element4 = lo_document->create_simple_element( name = lc_xml_node_varycolors
                                                     parent = lo_element3 ).
        lo_element4->set_attribute_ns( name  = 'val'
                                  value = lo_chartp->ns_varycolorsval ).

        "series
        LOOP AT lo_chartp->series INTO ls_serie.
          lo_element4 = lo_document->create_simple_element( name = lc_xml_node_ser
                                                     parent = lo_element3 ).
          lo_element5 = lo_document->create_simple_element( name = lc_xml_node_idx
                                                     parent = lo_element4 ).
          IF ls_serie-idx IS NOT INITIAL.
            lv_str = ls_serie-idx.
          ELSE.
            lv_str = sy-tabix - 1.
          ENDIF.
          CONDENSE lv_str.
          lo_element5->set_attribute_ns( name  = 'val'
                                  value = lv_str ).
          lo_element5 = lo_document->create_simple_element( name = lc_xml_node_order
                                                     parent = lo_element4 ).
          lv_str = ls_serie-order.
          CONDENSE lv_str.
          lo_element5->set_attribute_ns( name  = 'val'
                                  value = lv_str ).
          IF ls_serie-sername IS NOT INITIAL.
            lo_element5 = lo_document->create_simple_element( name = lc_xml_node_tx
                                                      parent = lo_element4 ).
            lo_element6 = lo_document->create_simple_element( name = lc_xml_node_v
                                                      parent = lo_element5 ).
            lo_element6->set_value( value = ls_serie-sername ).
          ENDIF.
          IF ls_serie-lbl IS NOT INITIAL.
            lo_element5 = lo_document->create_simple_element( name = lc_xml_node_cat
                                                       parent = lo_element4 ).
            lo_element6 = lo_document->create_simple_element( name = lc_xml_node_strref
                                                       parent = lo_element5 ).
            lo_element7 = lo_document->create_simple_element( name = lc_xml_node_f
                                                       parent = lo_element6 ).
            lo_element7->set_value( value = ls_serie-lbl ).
          ENDIF.
          IF ls_serie-ref IS NOT INITIAL.
            lo_element5 = lo_document->create_simple_element( name = lc_xml_node_val
                                                       parent = lo_element4 ).
            lo_element6 = lo_document->create_simple_element( name = lc_xml_node_numref
                                                       parent = lo_element5 ).
            lo_element7 = lo_document->create_simple_element( name = lc_xml_node_f
                                                       parent = lo_element6 ).
            lo_element7->set_value( value = ls_serie-ref ).
          ENDIF.
        ENDLOOP.
        "endseries

        lo_element4 = lo_document->create_simple_element( name = lc_xml_node_dlbls
                                                     parent = lo_element3 ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showlegendkey
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartp->ns_showlegendkeyval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showval
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartp->ns_showvalval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showcatname
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartp->ns_showcatnameval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showsername
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartp->ns_showsernameval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showpercent
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartp->ns_showpercentval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showbubblesize
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartp->ns_showbubblesizeval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showleaderlines
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartp->ns_showleaderlinesval ).
        lo_element4 = lo_document->create_simple_element( name = lc_xml_node_firstsliceang
                                                     parent = lo_element3 ).
        lo_element4->set_attribute_ns( name  = 'val'
                                  value = lo_chartp->ns_firstsliceangval ).
      WHEN zcl_excel_drawing=>c_graph_line.
        "----line
        lo_element3 = lo_document->create_simple_element( name = lc_xml_node_linechart
                                                     parent = lo_element2 ).
        lo_element4 = lo_document->create_simple_element( name = lc_xml_node_grouping
                                                     parent = lo_element3 ).
        lo_element4->set_attribute_ns( name  = 'val'
                                  value = lo_chartl->ns_groupingval ).
        lo_element4 = lo_document->create_simple_element( name = lc_xml_node_varycolors
                                                     parent = lo_element3 ).
        lo_element4->set_attribute_ns( name  = 'val'
                                  value = lo_chartl->ns_varycolorsval ).

        "series
        LOOP AT lo_chartl->series INTO ls_serie.
          lo_element4 = lo_document->create_simple_element( name = lc_xml_node_ser
                                                     parent = lo_element3 ).
          lo_element5 = lo_document->create_simple_element( name = lc_xml_node_idx
                                                     parent = lo_element4 ).
          IF ls_serie-idx IS NOT INITIAL.
            lv_str = ls_serie-idx.
          ELSE.
            lv_str = sy-tabix - 1.
          ENDIF.
          CONDENSE lv_str.
          lo_element5->set_attribute_ns( name  = 'val'
                                  value = lv_str ).
          lo_element5 = lo_document->create_simple_element( name = lc_xml_node_order
                                                     parent = lo_element4 ).
          lv_str = ls_serie-order.
          CONDENSE lv_str.
          lo_element5->set_attribute_ns( name  = 'val'
                                  value = lv_str ).
          IF ls_serie-sername IS NOT INITIAL.
            lo_element5 = lo_document->create_simple_element( name = lc_xml_node_tx
                                                      parent = lo_element4 ).
            lo_element6 = lo_document->create_simple_element( name = lc_xml_node_v
                                                      parent = lo_element5 ).
            lo_element6->set_value( value = ls_serie-sername ).
          ENDIF.
          lo_element5 = lo_document->create_simple_element( name = lc_xml_node_marker
                                                     parent = lo_element4 ).
          lo_element6 = lo_document->create_simple_element( name = lc_xml_node_symbol
                                                     parent = lo_element5 ).
          lo_element6->set_attribute_ns( name  = 'val'
                                  value = ls_serie-symbol ).
          IF ls_serie-lbl IS NOT INITIAL.
            lo_element5 = lo_document->create_simple_element( name = lc_xml_node_cat
                                                       parent = lo_element4 ).
            lo_element6 = lo_document->create_simple_element( name = lc_xml_node_strref
                                                       parent = lo_element5 ).
            lo_element7 = lo_document->create_simple_element( name = lc_xml_node_f
                                                       parent = lo_element6 ).
            lo_element7->set_value( value = ls_serie-lbl ).
          ENDIF.
          IF ls_serie-ref IS NOT INITIAL.
            lo_element5 = lo_document->create_simple_element( name = lc_xml_node_val
                                                       parent = lo_element4 ).
            lo_element6 = lo_document->create_simple_element( name = lc_xml_node_numref
                                                       parent = lo_element5 ).
            lo_element7 = lo_document->create_simple_element( name = lc_xml_node_f
                                                       parent = lo_element6 ).
            lo_element7->set_value( value = ls_serie-ref ).
          ENDIF.
          lo_element5 = lo_document->create_simple_element( name = lc_xml_node_smooth
                                                       parent = lo_element4 ).
          lo_element5->set_attribute_ns( name  = 'val'
                                  value = ls_serie-smooth ).
        ENDLOOP.
        "endseries

        lo_element4 = lo_document->create_simple_element( name = lc_xml_node_dlbls
                                                     parent = lo_element3 ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showlegendkey
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartl->ns_showlegendkeyval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showval
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartl->ns_showvalval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showcatname
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartl->ns_showcatnameval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showsername
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartl->ns_showsernameval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showpercent
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartl->ns_showpercentval ).
        lo_element5 = lo_document->create_simple_element( name = lc_xml_node_showbubblesize
                                                     parent = lo_element4 ).
        lo_element5->set_attribute_ns( name  = 'val'
                                  value = lo_chartl->ns_showbubblesizeval ).

        lo_element4 = lo_document->create_simple_element( name = lc_xml_node_marker
                                                     parent = lo_element3 ).
        lo_element4->set_attribute_ns( name  = 'val'
                                  value = lo_chartl->ns_markerval ).
        lo_element4 = lo_document->create_simple_element( name = lc_xml_node_smooth
                                                     parent = lo_element3 ).
        lo_element4->set_attribute_ns( name  = 'val'
                                  value = lo_chartl->ns_smoothval ).

        "axes
        lo_el_rootchart = lo_element3.
        LOOP AT lo_chartl->axes INTO ls_ax.
          lo_element4 = lo_document->create_simple_element( name = lc_xml_node_axid
                                                     parent = lo_el_rootchart ).
          lo_element4->set_attribute_ns( name  = 'val'
                                  value = ls_ax-axid ).
          CASE ls_ax-type.
            WHEN zcl_excel_graph_line=>c_catax.
              lo_element3 = lo_document->create_simple_element( name = lc_xml_node_catax
                                                     parent = lo_element2 ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_axid
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-axid ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_scaling
                                                     parent = lo_element3 ).
              lo_element5 = lo_document->create_simple_element( name = lc_xml_node_orientation
                                                     parent = lo_element4 ).
              lo_element5->set_attribute_ns( name  = 'val'
                                             value = ls_ax-orientation ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_delete
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-delete ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_axpos
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-axpos ).
*            lo_element4 = lo_document->create_simple_element( name = lc_xml_node_numfmt
*                                                   parent = lo_element3 ).
*            lo_element4->set_attribute_ns( name  = 'formatCode'
*                                           value = ls_ax-formatcode ).
*            lo_element4->set_attribute_ns( name  = 'sourceLinked'
*                                           value = ls_ax-sourcelinked ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_majortickmark
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-majortickmark ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_minortickmark
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-minortickmark ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_ticklblpos
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-ticklblpos ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_crossax
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-crossax ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_crosses
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-crosses ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_auto
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-auto ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_lblalgn
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-lblalgn ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_lbloffset
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-lbloffset ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_nomultilvllbl
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-nomultilvllbl ).
            WHEN zcl_excel_graph_line=>c_valax.
              lo_element3 = lo_document->create_simple_element( name = lc_xml_node_valax
                                                     parent = lo_element2 ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_axid
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-axid ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_scaling
                                                     parent = lo_element3 ).
              lo_element5 = lo_document->create_simple_element( name = lc_xml_node_orientation
                                                     parent = lo_element4 ).
              lo_element5->set_attribute_ns( name  = 'val'
                                             value = ls_ax-orientation ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_delete
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-delete ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_axpos
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-axpos ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_majorgridlines
                                                     parent = lo_element3 ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_numfmt
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'formatCode'
                                             value = ls_ax-formatcode ).
              lo_element4->set_attribute_ns( name  = 'sourceLinked'
                                             value = ls_ax-sourcelinked ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_majortickmark
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-majortickmark ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_minortickmark
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-minortickmark ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_ticklblpos
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-ticklblpos ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_crossax
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-crossax ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_crosses
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-crosses ).
              lo_element4 = lo_document->create_simple_element( name = lc_xml_node_crossbetween
                                                     parent = lo_element3 ).
              lo_element4->set_attribute_ns( name  = 'val'
                                             value = ls_ax-crossbetween ).
            WHEN OTHERS.
          ENDCASE.
        ENDLOOP.
        "endaxes

      WHEN OTHERS.
    ENDCASE.

    "legend
    IF lo_chart->print_label EQ abap_true.
      lo_element2 = lo_document->create_simple_element( name = lc_xml_node_legend
                                                         parent = lo_element ).
      CASE io_drawing->graph_type.
        WHEN zcl_excel_drawing=>c_graph_bars.
          "----bar
          lo_element3 = lo_document->create_simple_element( name = lc_xml_node_legendpos
                                                       parent = lo_element2 ).
          lo_element3->set_attribute_ns( name  = 'val'
                                    value = lo_chartb->ns_legendposval ).
          lo_element3 = lo_document->create_simple_element( name = lc_xml_node_layout
                                                       parent = lo_element2 ).
          lo_element3 = lo_document->create_simple_element( name = lc_xml_node_overlay
                                                       parent = lo_element2 ).
          lo_element3->set_attribute_ns( name  = 'val'
                                    value = lo_chartb->ns_overlayval ).
        WHEN zcl_excel_drawing=>c_graph_line.
          "----line
          lo_element3 = lo_document->create_simple_element( name = lc_xml_node_legendpos
                                                       parent = lo_element2 ).
          lo_element3->set_attribute_ns( name  = 'val'
                                    value = lo_chartl->ns_legendposval ).
          lo_element3 = lo_document->create_simple_element( name = lc_xml_node_layout
                                                       parent = lo_element2 ).
          lo_element3 = lo_document->create_simple_element( name = lc_xml_node_overlay
                                                       parent = lo_element2 ).
          lo_element3->set_attribute_ns( name  = 'val'
                                    value = lo_chartl->ns_overlayval ).
        WHEN zcl_excel_drawing=>c_graph_pie.
          "----pie
          lo_element3 = lo_document->create_simple_element( name = lc_xml_node_legendpos
                                                       parent = lo_element2 ).
          lo_element3->set_attribute_ns( name  = 'val'
                                    value = lo_chartp->ns_legendposval ).
          lo_element3 = lo_document->create_simple_element( name = lc_xml_node_layout
                                                       parent = lo_element2 ).
          lo_element3 = lo_document->create_simple_element( name = lc_xml_node_overlay
                                                       parent = lo_element2 ).
          lo_element3->set_attribute_ns( name  = 'val'
                                    value = lo_chartp->ns_overlayval ).
          lo_element3 = lo_document->create_simple_element( name = lc_xml_node_txpr
                                                       parent = lo_element2 ).
          lo_element4 = lo_document->create_simple_element( name = lc_xml_node_bodypr
                                                       parent = lo_element3 ).
          lo_element4 = lo_document->create_simple_element( name = lc_xml_node_lststyle
                                                       parent = lo_element3 ).
          lo_element4 = lo_document->create_simple_element( name = lc_xml_node_p
                                                       parent = lo_element3 ).
          lo_element5 = lo_document->create_simple_element( name = lc_xml_node_ppr
                                                       parent = lo_element4 ).
          lo_element5->set_attribute_ns( name  = 'rtl'
                                    value = lo_chartp->ns_pprrtl ).
          lo_element6 = lo_document->create_simple_element( name = lc_xml_node_defrpr
                                                       parent = lo_element5 ).
          lo_element5 = lo_document->create_simple_element( name = lc_xml_node_endpararpr
                                                       parent = lo_element4 ).
          lo_element5->set_attribute_ns( name  = 'lang'
                                    value = lo_chartp->ns_endpararprlang ).
        WHEN OTHERS.
      ENDCASE.
    ENDIF.

    lo_element2 = lo_document->create_simple_element( name = lc_xml_node_plotvisonly
                                                         parent = lo_element ).
    lo_element2->set_attribute_ns( name  = 'val'
                                      value = lo_chart->ns_plotvisonlyval ).
    lo_element2 = lo_document->create_simple_element( name = lc_xml_node_dispblanksas
                                                         parent = lo_element ).
    lo_element2->set_attribute_ns( name  = 'val'
                                      value = lo_chart->ns_dispblanksasval ).
    lo_element2 = lo_document->create_simple_element( name = lc_xml_node_showdlblsovermax
                                                         parent = lo_element ).
    lo_element2->set_attribute_ns( name  = 'val'
                                      value = lo_chart->ns_showdlblsovermaxval ).
    "---------------------------END OF CHART

    "printSettings
    lo_element = lo_document->create_simple_element( name = lc_xml_node_printsettings
                                                         parent = lo_element_root ).
    "headerFooter
    lo_element2 = lo_document->create_simple_element( name = lc_xml_node_headerfooter
                                                         parent = lo_element ).
    "pageMargins
    lo_element2 = lo_document->create_simple_element( name = lc_xml_node_pagemargins
                                                         parent = lo_element ).
    lo_element2->set_attribute_ns( name  = 'b'
                                      value = lo_chart->pagemargins-b ).
    lo_element2->set_attribute_ns( name  = 'l'
                                      value = lo_chart->pagemargins-l ).
    lo_element2->set_attribute_ns( name  = 'r'
                                      value = lo_chart->pagemargins-r ).
    lo_element2->set_attribute_ns( name  = 't'
                                      value = lo_chart->pagemargins-t ).
    lo_element2->set_attribute_ns( name  = 'header'
                                      value = lo_chart->pagemargins-header ).
    lo_element2->set_attribute_ns( name  = 'footer'
                                      value = lo_chart->pagemargins-footer ).
    "pageSetup
    lo_element2 = lo_document->create_simple_element( name = lc_xml_node_pagesetup
                                                         parent = lo_element ).

**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_COMMENTS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_comments.
** Constant node name
    CONSTANTS:  lc_xml_node_comments    TYPE string VALUE 'comments',
                lc_xml_node_ns          TYPE string VALUE 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
                " authors
                lc_xml_node_author      TYPE string VALUE 'author',
                lc_xml_node_authors     TYPE string VALUE 'authors',
                " comments
                lc_xml_node_commentlist TYPE string VALUE 'commentList',
                lc_xml_node_comment     TYPE string VALUE 'comment',
                lc_xml_node_text        TYPE string VALUE 'text',
                lc_xml_node_r           TYPE string VALUE 'r',
                lc_xml_node_rpr         TYPE string VALUE 'rPr',
                lc_xml_node_b           TYPE string VALUE 'b',
                lc_xml_node_sz          TYPE string VALUE 'sz',
                lc_xml_node_color       TYPE string VALUE 'color',
                lc_xml_node_rfont       TYPE string VALUE 'rFont',
*             lc_xml_node_charset     TYPE string VALUE 'charset',
                lc_xml_node_family      TYPE string VALUE 'family',
                lc_xml_node_t           TYPE string VALUE 't',
                " comments attributes
                lc_xml_attr_ref         TYPE string VALUE 'ref',
                lc_xml_attr_authorid    TYPE string VALUE 'authorId',
                lc_xml_attr_val         TYPE string VALUE 'val',
                lc_xml_attr_indexed     TYPE string VALUE 'indexed',
                lc_xml_attr_xmlspacing  TYPE string VALUE 'xml:space'.


    DATA: lo_document            TYPE REF TO if_ixml_document,
          lo_element_root        TYPE REF TO if_ixml_element,
          lo_element_authors     TYPE REF TO if_ixml_element,
          lo_element_author      TYPE REF TO if_ixml_element,
          lo_element_commentlist TYPE REF TO if_ixml_element,
          lo_element_comment     TYPE REF TO if_ixml_element,
          lo_element_text        TYPE REF TO if_ixml_element,
          lo_element_r           TYPE REF TO if_ixml_element,
          lo_element_rpr         TYPE REF TO if_ixml_element,
          lo_element_b           TYPE REF TO if_ixml_element,
          lo_element_sz          TYPE REF TO if_ixml_element,
          lo_element_color       TYPE REF TO if_ixml_element,
          lo_element_rfont       TYPE REF TO if_ixml_element,
*       lo_element_charset     TYPE REF TO if_ixml_element,
          lo_element_family      TYPE REF TO if_ixml_element,
          lo_element_t           TYPE REF TO if_ixml_element,
          lo_iterator            TYPE REF TO cl_object_collection_iterator,
          lo_comments            TYPE REF TO zcl_excel_comments,
          lo_comment             TYPE REF TO zcl_excel_comment.
    DATA: lv_rel_id TYPE i,
          lv_author TYPE string.

    DEFINE add_1_val_child_node.
*   &1: parent element
*   &2: child element
*   &3: element name
*   &4: attribute name
*   &5: attribute value

      &2 = lo_document->create_simple_element( name   = &3
                                               parent = lo_document ).
      IF &4 IS NOT INITIAL.
        &2->set_attribute_ns( name  = &4
                              value = &5 ).
      ENDIF.
      &1->append_child( new_child = &2 ).
    END-OF-DEFINITION.


**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

***********************************************************************
* STEP 3: Create main node relationships
    lo_element_root = lo_document->create_simple_element( name   = lc_xml_node_comments
                                                          parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns'
                                       value = lc_xml_node_ns ).

**********************************************************************
* STEP 4: Create authors
* TO-DO: management of several authors
    lo_element_authors = lo_document->create_simple_element( name   = lc_xml_node_authors
                                                             parent = lo_document ).

    lo_element_author  = lo_document->create_simple_element( name   = lc_xml_node_author
                                                             parent = lo_document ).
    lv_author = sy-uname.
    lo_element_author->set_value( lv_author ).

    lo_element_authors->append_child( new_child = lo_element_author ).
    lo_element_root->append_child( new_child = lo_element_authors ).

**********************************************************************
* STEP 5: Create comments

    lo_element_commentlist = lo_document->create_simple_element( name   = lc_xml_node_commentlist
                                                                 parent = lo_document ).

    lo_comments = io_worksheet->get_comments( ).

    lo_iterator = lo_comments->get_iterator( ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_comment ?= lo_iterator->if_object_collection_iterator~get_next( ).

      lo_element_comment = lo_document->create_simple_element( name   = lc_xml_node_comment
                                                               parent = lo_document ).
      DATA ref TYPE string.
      ref = lo_comment->get_ref( ).
      lo_element_comment->set_attribute_ns( name  = lc_xml_attr_ref
                                            value = ref ).
      lo_element_comment->set_attribute_ns( name  = lc_xml_attr_authorid
                                            value = '0' ).  " TO-DO

      lo_element_text = lo_document->create_simple_element( name   = lc_xml_node_text
                                                            parent = lo_document ).
      lo_element_r    = lo_document->create_simple_element( name   = lc_xml_node_r
                                                            parent = lo_document ).
      lo_element_rpr  = lo_document->create_simple_element( name   = lc_xml_node_rpr
                                                            parent = lo_document ).

      lo_element_b    = lo_document->create_simple_element( name   = lc_xml_node_b
                                                            parent = lo_document ).
      lo_element_rpr->append_child( new_child = lo_element_b ).

      add_1_val_child_node lo_element_rpr: lo_element_sz       lc_xml_node_sz       lc_xml_attr_val      '9',
                                           lo_element_color    lc_xml_node_color    lc_xml_attr_indexed  '81',
                                           lo_element_rfont    lc_xml_node_rfont    lc_xml_attr_val      'Tahoma',
                                           lo_element_family   lc_xml_node_family   lc_xml_attr_val      '2'
*                                        lo_element_charset  lc_xml_node_charset  lc_xml_attr_val      '1'
                                           .

      lo_element_r->append_child( new_child = lo_element_rpr ).

      lo_element_t    = lo_document->create_simple_element( name   = lc_xml_node_t
                                                            parent = lo_document ).
      lo_element_t->set_attribute_ns( name  = lc_xml_attr_xmlspacing
                                      value = 'preserve' ).
      DATA text TYPE string.
      text = lo_comment->get_text( ).
      lo_element_t->set_value( text ).
      lo_element_r->append_child( new_child = lo_element_t ).

      lo_element_text->append_child( new_child = lo_element_r ).
      lo_element_comment->append_child( new_child = lo_element_text ).
      lo_element_commentlist->append_child( new_child = lo_element_comment ).
    ENDWHILE.

    lo_element_root->append_child( new_child = lo_element_commentlist ).

**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_DRAWINGS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_drawings.


** Constant node name
    CONSTANTS:  lc_xml_node_wsdr   TYPE string VALUE 'xdr:wsDr',
                lc_xml_node_ns_xdr TYPE string VALUE 'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing',
                lc_xml_node_ns_a   TYPE string VALUE 'http://schemas.openxmlformats.org/drawingml/2006/main'.

    DATA: lo_document           TYPE REF TO if_ixml_document,
          lo_element_root       TYPE REF TO if_ixml_element,
          lo_element_cellanchor TYPE REF TO if_ixml_element,
          lo_iterator           TYPE REF TO cl_object_collection_iterator,
          lo_drawings           TYPE REF TO zcl_excel_drawings,
          lo_drawing            TYPE REF TO zcl_excel_drawing.
    DATA: lv_rel_id            TYPE i.



**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

***********************************************************************
* STEP 3: Create main node relationships
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_wsdr
                                                           parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:xdr'
                                       value = lc_xml_node_ns_xdr ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:a'
                                       value = lc_xml_node_ns_a ).

**********************************************************************
* STEP 4: Create drawings

    CLEAR: lv_rel_id.

    lo_drawings = io_worksheet->get_drawings( ).

    lo_iterator = lo_drawings->get_iterator( ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_drawing ?= lo_iterator->if_object_collection_iterator~get_next( ).

      ADD 1 TO lv_rel_id.
      lo_element_cellanchor = me->create_xl_drawing_anchor(
              io_drawing    = lo_drawing
              io_document   = lo_document
              ip_index      = lv_rel_id ).

      lo_element_root->append_child( new_child = lo_element_cellanchor ).

    ENDWHILE.

**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_DRAWINGS_HDFT_RELS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_drawings_hdft_rels.

** Constant node name
    DATA: lc_xml_node_relationships TYPE string VALUE 'Relationships',
          lc_xml_node_relationship  TYPE string VALUE 'Relationship',
          " Node attributes
          lc_xml_attr_id            TYPE string VALUE 'Id',
          lc_xml_attr_type          TYPE string VALUE 'Type',
          lc_xml_attr_target        TYPE string VALUE 'Target',
          " Node namespace
          lc_xml_node_rels_ns       TYPE string VALUE 'http://schemas.openxmlformats.org/package/2006/relationships',
          lc_xml_node_rid_image_tp  TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',
          lc_xml_node_rid_chart_tp  TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart'.

    DATA: lo_iterator     TYPE REF TO cl_object_collection_iterator,
          lo_drawing      TYPE REF TO zcl_excel_drawing,
          lo_document     TYPE REF TO if_ixml_document,
          lo_element_root TYPE REF TO if_ixml_element,
          lo_element      TYPE REF TO if_ixml_element,
          lv_value        TYPE string,
          lv_relation_id  TYPE i,
          lt_temp         TYPE strtable,
          lt_drawings     TYPE zexcel_t_drawings.

    FIELD-SYMBOLS: <fs_temp>     TYPE sstrtable,
                   <fs_drawings> TYPE zexcel_s_drawings.


* BODY
**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

**********************************************************************
* STEP 3: Create main node relationships
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_relationships
                                                           parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns'
                                       value = lc_xml_node_rels_ns ).

**********************************************************************
* STEP 4: Create subnodes

**********************************************************************


    lt_drawings = io_worksheet->get_header_footer_drawings( ).
    LOOP AT lt_drawings ASSIGNING <fs_drawings>. "Header or footer image exist
      ADD 1 TO lv_relation_id.
*    lv_value = lv_relation_id.
      lv_value = <fs_drawings>-drawing->get_index( ).
      READ TABLE lt_temp WITH KEY str = lv_value TRANSPORTING NO FIELDS.
      IF sy-subrc NE 0.
        APPEND INITIAL LINE TO lt_temp ASSIGNING <fs_temp>.
        <fs_temp>-row_index = sy-tabix.
        <fs_temp>-str = lv_value.
        CONDENSE lv_value.
        CONCATENATE 'rId' lv_value INTO lv_value.
        lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
                                                           parent = lo_document ).
        lo_element->set_attribute_ns( name  = lc_xml_attr_id
*                                    value = 'LOGO' ).
                                      value = lv_value ).
        lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                      value = lc_xml_node_rid_image_tp ).

        lv_value = '../media/#'.
        DATA media_name TYPE string.
        media_name = <fs_drawings>-drawing->get_media_name( ).
        REPLACE '#' IN lv_value WITH media_name.
        lo_element->set_attribute_ns( name  = lc_xml_attr_target
*                                    value = '../media/LOGO.png' ).
                                      value = lv_value ).
        lo_element_root->append_child( new_child = lo_element ).
      ENDIF.
    ENDLOOP.

**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).

  ENDMETHOD.                    "create_xl_drawings_hdft_rels


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_DRAWINGS_RELS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_drawings_rels.

** Constant node name
    DATA: lc_xml_node_relationships TYPE string VALUE 'Relationships',
          lc_xml_node_relationship  TYPE string VALUE 'Relationship',
          " Node attributes
          lc_xml_attr_id            TYPE string VALUE 'Id',
          lc_xml_attr_type          TYPE string VALUE 'Type',
          lc_xml_attr_target        TYPE string VALUE 'Target',
          " Node namespace
          lc_xml_node_rels_ns       TYPE string VALUE 'http://schemas.openxmlformats.org/package/2006/relationships',
          lc_xml_node_rid_image_tp  TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',
          lc_xml_node_rid_chart_tp  TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart'.

    DATA: lo_document     TYPE REF TO if_ixml_document,
          lo_element_root TYPE REF TO if_ixml_element,
          lo_element      TYPE REF TO if_ixml_element,
          lo_iterator     TYPE REF TO cl_object_collection_iterator,
          lo_drawings     TYPE REF TO zcl_excel_drawings,
          lo_drawing      TYPE REF TO zcl_excel_drawing.

    DATA: lv_value   TYPE string,
          lv_counter TYPE i.

**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

**********************************************************************
* STEP 3: Create main node relationships
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_relationships
                                                           parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns'
                                       value = lc_xml_node_rels_ns ).

**********************************************************************
* STEP 4: Create subnodes

    " Add sheet Relationship nodes here
    lv_counter = 0.
    lo_drawings = io_worksheet->get_drawings( ).
    lo_iterator = lo_drawings->get_iterator( ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_drawing ?= lo_iterator->if_object_collection_iterator~get_next( ).
      ADD 1 TO lv_counter.

      lv_value = lv_counter.
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.

      lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
                                                   parent = lo_document ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_id
                                    value = lv_value ).

      lv_value = lo_drawing->get_media_name( ).
      CASE lo_drawing->get_type( ).
        WHEN zcl_excel_drawing=>type_image.
          CONCATENATE '../media/' lv_value INTO lv_value.
          lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                        value = lc_xml_node_rid_image_tp ).

        WHEN zcl_excel_drawing=>type_chart.
          CONCATENATE '../charts/' lv_value INTO lv_value.
          lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                        value = lc_xml_node_rid_chart_tp ).

      ENDCASE.
      lo_element->set_attribute_ns( name  = lc_xml_attr_target
                                    value = lv_value ).
      lo_element_root->append_child( new_child = lo_element ).
    ENDWHILE.


**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_DRAWINGS_VML
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_drawings_vml.

    DATA:
      lo_xml_document TYPE REF TO cl_xml_document,
      ld_stream       TYPE string.


* INIT_RESULT
    CLEAR ep_content.


* BODY
    ld_stream = set_vml_string( ).

    CREATE OBJECT lo_xml_document.
    CALL METHOD lo_xml_document->parse_string
      EXPORTING
        stream = ld_stream.

*  CALL FUNCTION 'CRM_IC_XML_STRING2XSTRING'
*    EXPORTING
*      instring   = ld_stream
*    IMPORTING
*      outxstring = ep_content.

    CALL FUNCTION 'SCMS_STRING_TO_XSTRING'
      EXPORTING
        text   = ld_stream
      IMPORTING
        buffer = ep_content
      EXCEPTIONS
        failed = 1
        OTHERS = 2.
    IF sy-subrc <> 0.
      CLEAR ep_content.
    ENDIF.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_DRAWINGS_VML_RELS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_drawings_vml_rels.

** Constant node name
    DATA: lc_xml_node_relationships TYPE string VALUE 'Relationships',
          lc_xml_node_relationship  TYPE string VALUE 'Relationship',
          " Node attributes
          lc_xml_attr_id            TYPE string VALUE 'Id',
          lc_xml_attr_type          TYPE string VALUE 'Type',
          lc_xml_attr_target        TYPE string VALUE 'Target',
          " Node namespace
          lc_xml_node_rels_ns       TYPE string VALUE 'http://schemas.openxmlformats.org/package/2006/relationships',
          lc_xml_node_rid_image_tp  TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',
          lc_xml_node_rid_chart_tp  TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart'.

    DATA: lo_iterator     TYPE REF TO cl_object_collection_iterator,
          lo_drawing      TYPE REF TO zcl_excel_drawing,
          lo_document     TYPE REF TO if_ixml_document,
          lo_element_root TYPE REF TO if_ixml_element,
          lo_element      TYPE REF TO if_ixml_element,
          lv_value        TYPE string,
          lv_relation_id  TYPE i.


* BODY
**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

**********************************************************************
* STEP 3: Create main node relationships
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_relationships
                                                           parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns'
                                       value = lc_xml_node_rels_ns ).

**********************************************************************
* STEP 4: Create subnodes
    lv_relation_id = 0.
    lo_iterator = me->excel->get_drawings_iterator( zcl_excel_drawing=>type_image ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_drawing ?= lo_iterator->if_object_collection_iterator~get_next( ).
      IF lo_drawing->get_type( ) = zcl_excel_drawing=>type_image_header_footer.
        ADD 1 TO lv_relation_id.
        lv_value = lv_relation_id.
        CONDENSE lv_value.
        CONCATENATE 'rId' lv_value INTO lv_value.
        lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
                                                           parent = lo_document ).
        lo_element->set_attribute_ns( name  = lc_xml_attr_id
*                                    value = 'LOGO' ).
                                      value = lv_value ).
        lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                      value = lc_xml_node_rid_image_tp ).

        lv_value = '../media/#'.
        DATA media_name TYPE string.
        media_name = lo_drawing->get_media_name( ).
        REPLACE '#' IN lv_value WITH media_name.
        lo_element->set_attribute_ns( name  = lc_xml_attr_target
*                                    value = '../media/LOGO.png' ).
                                      value = lv_value ).
        lo_element_root->append_child( new_child = lo_element ).
      ENDIF.

    ENDWHILE.



**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_DRAWING_ANCHOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_DRAWING                     TYPE REF TO ZCL_EXCEL_DRAWING
* | [--->] IO_DOCUMENT                    TYPE REF TO IF_IXML_DOCUMENT
* | [--->] IP_INDEX                       TYPE        I
* | [<-()] EP_ANCHOR                      TYPE REF TO IF_IXML_ELEMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_drawing_anchor.

** Constant node name
    CONSTANTS:  lc_xml_node_onecellanchor     TYPE string VALUE 'xdr:oneCellAnchor',
                lc_xml_node_twocellanchor     TYPE string VALUE 'xdr:twoCellAnchor',
                lc_xml_node_from              TYPE string VALUE 'xdr:from',
                lc_xml_node_to                TYPE string VALUE 'xdr:to',
                lc_xml_node_pic               TYPE string VALUE 'xdr:pic',
                lc_xml_node_ext               TYPE string VALUE 'xdr:ext',
                lc_xml_node_clientdata        TYPE string VALUE 'xdr:clientData',

                lc_xml_node_col               TYPE string VALUE 'xdr:col',
                lc_xml_node_coloff            TYPE string VALUE 'xdr:colOff',
                lc_xml_node_row               TYPE string VALUE 'xdr:row',
                lc_xml_node_rowoff            TYPE string VALUE 'xdr:rowOff',

                lc_xml_node_nvpicpr           TYPE string VALUE 'xdr:nvPicPr',
                lc_xml_node_cnvpr             TYPE string VALUE 'xdr:cNvPr',
                lc_xml_node_cnvpicpr          TYPE string VALUE 'xdr:cNvPicPr',
                lc_xml_node_piclocks          TYPE string VALUE 'a:picLocks',

                lc_xml_node_sppr              TYPE string VALUE 'xdr:spPr',
                lc_xml_node_apgeom            TYPE string VALUE 'a:prstGeom',
                lc_xml_node_aavlst            TYPE string VALUE 'a:avLst',

                lc_xml_node_graphicframe      TYPE string VALUE 'xdr:graphicFrame',
                lc_xml_node_nvgraphicframepr  TYPE string VALUE 'xdr:nvGraphicFramePr',
                lc_xml_node_cnvgraphicframepr TYPE string VALUE 'xdr:cNvGraphicFramePr',
                lc_xml_node_graphicframelocks TYPE string VALUE 'a:graphicFrameLocks',
                lc_xml_node_xfrm              TYPE string VALUE 'xdr:xfrm',
                lc_xml_node_aoff              TYPE string VALUE 'a:off',
                lc_xml_node_aext              TYPE string VALUE 'a:ext',
                lc_xml_node_agraphic          TYPE string VALUE 'a:graphic',
                lc_xml_node_agraphicdata      TYPE string VALUE 'a:graphicData',

                lc_xml_node_ns_c              TYPE string VALUE 'http://schemas.openxmlformats.org/drawingml/2006/chart',
                lc_xml_node_cchart            TYPE string VALUE 'c:chart',

                lc_xml_node_blipfill          TYPE string VALUE 'xdr:blipFill',
                lc_xml_node_ablip             TYPE string VALUE 'a:blip',
                lc_xml_node_astretch          TYPE string VALUE 'a:stretch',
                lc_xml_node_ns_r              TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'.

    DATA: lo_element_graphicframe TYPE REF TO if_ixml_element,
          lo_element              TYPE REF TO if_ixml_element,
          lo_element2             TYPE REF TO if_ixml_element,
          lo_element3             TYPE REF TO if_ixml_element,
          lo_element_from         TYPE REF TO if_ixml_element,
          lo_element_to           TYPE REF TO if_ixml_element,
          lo_element_ext          TYPE REF TO if_ixml_element,
          lo_element_pic          TYPE REF TO if_ixml_element,
          lo_element_clientdata   TYPE REF TO if_ixml_element,
          ls_position             TYPE zexcel_drawing_position,
          lv_col                  TYPE string, " zexcel_cell_column,
          lv_row                  TYPE string, " zexcel_cell_row.
          lv_col_offset           TYPE string,
          lv_row_offset           TYPE string,
          lv_value                TYPE string.

    ls_position = io_drawing->get_position( ).

    IF ls_position-anchor = 'ONE'.
      ep_anchor = io_document->create_simple_element( name   = lc_xml_node_onecellanchor
                                                                  parent = io_document ).
    ELSE.
      ep_anchor = io_document->create_simple_element( name   = lc_xml_node_twocellanchor
                                                                  parent = io_document ).
    ENDIF.

*   from cell ******************************
    lo_element_from = io_document->create_simple_element( name   = lc_xml_node_from
                                                          parent = io_document ).

    lv_col = ls_position-from-col.
    lv_row = ls_position-from-row.
    lv_col_offset = ls_position-from-col_offset.
    lv_row_offset = ls_position-from-row_offset.
    CONDENSE lv_col NO-GAPS.
    CONDENSE lv_row NO-GAPS.
    CONDENSE lv_col_offset NO-GAPS.
    CONDENSE lv_row_offset NO-GAPS.

    lo_element = io_document->create_simple_element( name = lc_xml_node_col
                                                     parent = io_document ).
    lo_element->set_value( value = lv_col ).
    lo_element_from->append_child( new_child = lo_element ).

    lo_element = io_document->create_simple_element( name = lc_xml_node_coloff
                                                     parent = io_document ).
    lo_element->set_value( value = lv_col_offset ).
    lo_element_from->append_child( new_child = lo_element ).

    lo_element = io_document->create_simple_element( name = lc_xml_node_row
                                                     parent = io_document ).
    lo_element->set_value( value = lv_row ).
    lo_element_from->append_child( new_child = lo_element ).

    lo_element = io_document->create_simple_element( name = lc_xml_node_rowoff
                                                     parent = io_document ).
    lo_element->set_value( value = lv_row_offset ).
    lo_element_from->append_child( new_child = lo_element ).
    ep_anchor->append_child( new_child = lo_element_from ).

    IF ls_position-anchor = 'ONE'.

*   ext ******************************
      lo_element_ext = io_document->create_simple_element( name   = lc_xml_node_ext
                                                           parent = io_document ).

      lv_value = io_drawing->get_width_emu_str( ).
      lo_element_ext->set_attribute_ns( name  = 'cx'
                                     value = lv_value ).
      lv_value = io_drawing->get_height_emu_str( ).
      lo_element_ext->set_attribute_ns( name  = 'cy'
                                     value = lv_value ).
      ep_anchor->append_child( new_child = lo_element_ext ).

    ELSEIF ls_position-anchor = 'TWO'.

*   to cell ******************************
      lo_element_to = io_document->create_simple_element( name   = lc_xml_node_to
                                                          parent = io_document ).

      lv_col = ls_position-to-col.
      lv_row = ls_position-to-row.
      lv_col_offset = ls_position-to-col_offset.
      lv_row_offset = ls_position-to-row_offset.
      CONDENSE lv_col NO-GAPS.
      CONDENSE lv_row NO-GAPS.
      CONDENSE lv_col_offset NO-GAPS.
      CONDENSE lv_row_offset NO-GAPS.

      lo_element = io_document->create_simple_element( name = lc_xml_node_col
                                                       parent = io_document ).
      lo_element->set_value( value = lv_col ).
      lo_element_to->append_child( new_child = lo_element ).

      lo_element = io_document->create_simple_element( name = lc_xml_node_coloff
                                                       parent = io_document ).
      lo_element->set_value( value = lv_col_offset ).
      lo_element_to->append_child( new_child = lo_element ).

      lo_element = io_document->create_simple_element( name = lc_xml_node_row
                                                       parent = io_document ).
      lo_element->set_value( value = lv_row ).
      lo_element_to->append_child( new_child = lo_element ).

      lo_element = io_document->create_simple_element( name = lc_xml_node_rowoff
                                                       parent = io_document ).
      lo_element->set_value( value = lv_row_offset ).
      lo_element_to->append_child( new_child = lo_element ).
      ep_anchor->append_child( new_child = lo_element_to ).

    ENDIF.

    CASE io_drawing->get_type( ).
      WHEN zcl_excel_drawing=>type_image.
*     pic **********************************
        lo_element_pic = io_document->create_simple_element( name   = lc_xml_node_pic
                                                             parent = io_document ).
*     nvPicPr
        lo_element  = io_document->create_simple_element( name = lc_xml_node_nvpicpr
                                                          parent = io_document ).
*     cNvPr
        lo_element2 = io_document->create_simple_element( name = lc_xml_node_cnvpr
                                                          parent = io_document ).
        lv_value = sy-index.
        CONDENSE lv_value.
        lo_element2->set_attribute_ns( name  = 'id'
                                       value = lv_value ).
        lo_element2->set_attribute_ns( name  = 'name'
                                       value = io_drawing->title ).
        lo_element->append_child( new_child = lo_element2 ).

*     cNvPicPr
        lo_element2 = io_document->create_simple_element( name = lc_xml_node_cnvpicpr
                                                          parent = io_document ).

*     picLocks
        lo_element3 = io_document->create_simple_element( name = lc_xml_node_piclocks
                                                          parent = io_document ).
        lo_element3->set_attribute_ns( name  = 'noChangeAspect'
                                       value = '1' ).

        lo_element2->append_child( new_child = lo_element3 ).
        lo_element->append_child( new_child = lo_element2 ).
        lo_element_pic->append_child( new_child = lo_element ).

*     blipFill
        lv_value = ip_index.
        CONDENSE lv_value.
        CONCATENATE 'rId' lv_value INTO lv_value.

        lo_element  = io_document->create_simple_element( name = lc_xml_node_blipfill
                                                          parent = io_document ).
        lo_element2 = io_document->create_simple_element( name = lc_xml_node_ablip
                                                          parent = io_document ).
        lo_element2->set_attribute_ns( name  = 'xmlns:r'
                                       value = lc_xml_node_ns_r ).
        lo_element2->set_attribute_ns( name  = 'r:embed'
                                       value = lv_value ).
        lo_element->append_child( new_child = lo_element2 ).

        lo_element2  = io_document->create_simple_element( name = lc_xml_node_astretch
                                                          parent = io_document ).
        lo_element->append_child( new_child = lo_element2 ).

        lo_element_pic->append_child( new_child = lo_element ).

*     spPr
        lo_element  = io_document->create_simple_element( name = lc_xml_node_sppr
                                                          parent = io_document ).

        lo_element2 = io_document->create_simple_element( name = lc_xml_node_apgeom
                                                          parent = io_document ).
        lo_element2->set_attribute_ns( name  = 'prst'
                                       value = 'rect' ).
        lo_element3 = io_document->create_simple_element( name = lc_xml_node_aavlst
                                                          parent = io_document ).
        lo_element2->append_child( new_child = lo_element3 ).
        lo_element->append_child( new_child = lo_element2 ).

        lo_element_pic->append_child( new_child = lo_element ).
        ep_anchor->append_child( new_child = lo_element_pic ).
      WHEN zcl_excel_drawing=>type_chart.
*     graphicFrame **********************************
        lo_element_graphicframe = io_document->create_simple_element( name   = lc_xml_node_graphicframe
                                                             parent = io_document ).
*     nvGraphicFramePr
        lo_element  = io_document->create_simple_element( name = lc_xml_node_nvgraphicframepr
                                                          parent = io_document ).
*     cNvPr
        lo_element2 = io_document->create_simple_element( name = lc_xml_node_cnvpr
                                                          parent = io_document ).
        lv_value = sy-index.
        CONDENSE lv_value.
        lo_element2->set_attribute_ns( name  = 'id'
                                       value = lv_value ).
        lo_element2->set_attribute_ns( name  = 'name'
                                       value = io_drawing->title ).
        lo_element->append_child( new_child = lo_element2 ).
*     cNvGraphicFramePr
        lo_element2 = io_document->create_simple_element( name = lc_xml_node_cnvgraphicframepr
                                                          parent = io_document ).
        lo_element3 = io_document->create_simple_element( name = lc_xml_node_graphicframelocks
                                                          parent = io_document ).
        lo_element2->append_child( new_child = lo_element3 ).
        lo_element->append_child( new_child = lo_element2 ).
        lo_element_graphicframe->append_child( new_child = lo_element ).

*     xfrm
        lo_element  = io_document->create_simple_element( name = lc_xml_node_xfrm
                                                          parent = io_document ).
*     off
        lo_element2 = io_document->create_simple_element( name = lc_xml_node_aoff
                                                          parent = io_document ).
        lo_element2->set_attribute_ns( name  = 'y' value = '0' ).
        lo_element2->set_attribute_ns( name  = 'x' value = '0' ).
        lo_element->append_child( new_child = lo_element2 ).
*     ext
        lo_element2 = io_document->create_simple_element( name = lc_xml_node_aext
                                                          parent = io_document ).
        lo_element2->set_attribute_ns( name  = 'cy' value = '0' ).
        lo_element2->set_attribute_ns( name  = 'cx' value = '0' ).
        lo_element->append_child( new_child = lo_element2 ).
        lo_element_graphicframe->append_child( new_child = lo_element ).

*     graphic
        lo_element  = io_document->create_simple_element( name = lc_xml_node_agraphic
                                                          parent = io_document ).
*     graphicData
        lo_element2 = io_document->create_simple_element( name = lc_xml_node_agraphicdata
                                                          parent = io_document ).
        lo_element2->set_attribute_ns( name  = 'uri' value = lc_xml_node_ns_c ).

*     chart
        lo_element3 = io_document->create_simple_element( name = lc_xml_node_cchart
                                                          parent = io_document ).

        lo_element3->set_attribute_ns( name  = 'xmlns:r'
                                       value = lc_xml_node_ns_r ).
        lo_element3->set_attribute_ns( name  = 'xmlns:c'
                                       value = lc_xml_node_ns_c ).

        lv_value = ip_index.
        CONDENSE lv_value.
        CONCATENATE 'rId' lv_value INTO lv_value.
        lo_element3->set_attribute_ns( name  = 'r:id'
                                       value = lv_value ).
        lo_element2->append_child( new_child = lo_element3 ).
        lo_element->append_child( new_child = lo_element2 ).
        lo_element_graphicframe->append_child( new_child = lo_element ).
        ep_anchor->append_child( new_child = lo_element_graphicframe ).

    ENDCASE.

*   client data ***************************
    lo_element_clientdata = io_document->create_simple_element( name   = lc_xml_node_clientdata
                                                                parent = io_document ).
    ep_anchor->append_child( new_child = lo_element_clientdata ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_DRAWING_FOR_COMMENTS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_drawing_for_comments.
** Constant node name
    CONSTANTS: lc_xml_node_xml             TYPE string VALUE 'xml',
               lc_xml_node_ns_v            TYPE string VALUE 'urn:schemas-microsoft-com:vml',
               lc_xml_node_ns_o            TYPE string VALUE 'urn:schemas-microsoft-com:office:office',
               lc_xml_node_ns_x            TYPE string VALUE 'urn:schemas-microsoft-com:office:excel',
               " shapelayout
               lc_xml_node_shapelayout     TYPE string VALUE 'o:shapelayout',
               lc_xml_node_idmap           TYPE string VALUE 'o:idmap',
               " shapetype
               lc_xml_node_shapetype       TYPE string VALUE 'v:shapetype',
               lc_xml_node_stroke          TYPE string VALUE 'v:stroke',
               lc_xml_node_path            TYPE string VALUE 'v:path',
               " shape
               lc_xml_node_shape           TYPE string VALUE 'v:shape',
               lc_xml_node_fill            TYPE string VALUE 'v:fill',
               lc_xml_node_shadow          TYPE string VALUE 'v:shadow',
               lc_xml_node_textbox         TYPE string VALUE 'v:textbox',
               lc_xml_node_div             TYPE string VALUE 'div',
               lc_xml_node_clientdata      TYPE string VALUE 'x:ClientData',
               lc_xml_node_movewithcells   TYPE string VALUE 'x:MoveWithCells',
               lc_xml_node_sizewithcells   TYPE string VALUE 'x:SizeWithCells',
               lc_xml_node_anchor          TYPE string VALUE 'x:Anchor',
               lc_xml_node_autofill        TYPE string VALUE 'x:AutoFill',
               lc_xml_node_row             TYPE string VALUE 'x:Row',
               lc_xml_node_column          TYPE string VALUE 'x:Column',
               " attributes,
               lc_xml_attr_vext            TYPE string VALUE 'v:ext',
               lc_xml_attr_data            TYPE string VALUE 'data',
               lc_xml_attr_id              TYPE string VALUE 'id',
               lc_xml_attr_coordsize       TYPE string VALUE 'coordsize',
               lc_xml_attr_ospt            TYPE string VALUE 'o:spt',
               lc_xml_attr_joinstyle       TYPE string VALUE 'joinstyle',
               lc_xml_attr_path            TYPE string VALUE 'path',
               lc_xml_attr_gradientshapeok TYPE string VALUE 'gradientshapeok',
               lc_xml_attr_oconnecttype    TYPE string VALUE 'o:connecttype',
               lc_xml_attr_type            TYPE string VALUE 'type',
               lc_xml_attr_style           TYPE string VALUE 'style',
               lc_xml_attr_fillcolor       TYPE string VALUE 'fillcolor',
               lc_xml_attr_oinsetmode      TYPE string VALUE 'o:insetmode',
               lc_xml_attr_color           TYPE string VALUE 'color',
               lc_xml_attr_color2          TYPE string VALUE 'color2',
               lc_xml_attr_on              TYPE string VALUE 'on',
               lc_xml_attr_obscured        TYPE string VALUE 'obscured',
               lc_xml_attr_objecttype      TYPE string VALUE 'ObjectType',
               " attributes values
               lc_xml_attr_val_edit        TYPE string VALUE 'edit',
               lc_xml_attr_val_rect        TYPE string VALUE 'rect',
               lc_xml_attr_val_t           TYPE string VALUE 't',
               lc_xml_attr_val_miter       TYPE string VALUE 'miter',
               lc_xml_attr_val_auto        TYPE string VALUE 'auto',
               lc_xml_attr_val_black       TYPE string VALUE 'black',
               lc_xml_attr_val_none        TYPE string VALUE 'none',
               lc_xml_attr_val_msodir      TYPE string VALUE 'mso-direction-alt:auto',
               lc_xml_attr_val_note        TYPE string VALUE 'Note'.


    DATA: lo_document              TYPE REF TO if_ixml_document,
          lo_element_root          TYPE REF TO if_ixml_element,
          "shapelayout
          lo_element_shapelayout   TYPE REF TO if_ixml_element,
          lo_element_idmap         TYPE REF TO if_ixml_element,
          "shapetype
          lo_element_shapetype     TYPE REF TO if_ixml_element,
          lo_element_stroke        TYPE REF TO if_ixml_element,
          lo_element_path          TYPE REF TO if_ixml_element,
          "shape
          lo_element_shape         TYPE REF TO if_ixml_element,
          lo_element_fill          TYPE REF TO if_ixml_element,
          lo_element_shadow        TYPE REF TO if_ixml_element,
          lo_element_textbox       TYPE REF TO if_ixml_element,
          lo_element_div           TYPE REF TO if_ixml_element,
          lo_element_clientdata    TYPE REF TO if_ixml_element,
          lo_element_movewithcells TYPE REF TO if_ixml_element,
          lo_element_sizewithcells TYPE REF TO if_ixml_element,
          lo_element_anchor        TYPE REF TO if_ixml_element,
          lo_element_autofill      TYPE REF TO if_ixml_element,
          lo_element_row           TYPE REF TO if_ixml_element,
          lo_element_column        TYPE REF TO if_ixml_element,
          lo_iterator              TYPE REF TO cl_object_collection_iterator,
          lo_comments              TYPE REF TO zcl_excel_comments,
          lo_comment               TYPE REF TO zcl_excel_comment,
          lv_row                   TYPE zexcel_cell_row,
          lv_str_column            TYPE zexcel_cell_column_alpha,
          lv_column                TYPE zexcel_cell_column,
          lv_index                 TYPE i,
          lv_attr_id_index         TYPE i,
          lv_attr_id               TYPE string,
          lv_int_value             TYPE i,
          lv_int_value_string      TYPE string.
    DATA: lv_rel_id            TYPE i.

    DEFINE add_1_val_child_node.
*   &1: parent element
*   &2: child element
*   &3: element name
*   &4: attribute name
*   &5: attribute value

      &2 = lo_document->create_simple_element( name   = &3
                                               parent = lo_document ).
      IF &4 IS NOT INITIAL.
        &2->set_attribute_ns( name  = &4
                              value = &5 ).
      ENDIF.
      &1->append_child( new_child = &2 ).
    END-OF-DEFINITION.


**********************************************************************
* STEP 1: Create XML document
    lo_document = me->ixml->create_document( ).

***********************************************************************
* STEP 2: Create main node relationships
    lo_element_root = lo_document->create_simple_element( name   = lc_xml_node_xml
                                                          parent = lo_document ).
    lo_element_root->set_attribute_ns( : name  = 'xmlns:v'  value = lc_xml_node_ns_v ),
                                         name  = 'xmlns:o'  value = lc_xml_node_ns_o ),
                                         name  = 'xmlns:x'  value = lc_xml_node_ns_x ).

**********************************************************************
* STEP 3: Create o:shapeLayout
* TO-DO: management of several authors
    lo_element_shapelayout = lo_document->create_simple_element( name   = lc_xml_node_shapelayout
                                                                 parent = lo_document ).

    lo_element_shapelayout->set_attribute_ns( name  = lc_xml_attr_vext
                                              value = lc_xml_attr_val_edit ).

    lo_element_idmap = lo_document->create_simple_element( name   = lc_xml_node_idmap
                                                           parent = lo_document ).
    lo_element_idmap->set_attribute_ns( : name  = lc_xml_attr_vext  value = lc_xml_attr_val_edit ),
                                          name  = lc_xml_attr_data  value = '1' ).

    lo_element_shapelayout->append_child( new_child = lo_element_idmap ).

    lo_element_root->append_child( new_child = lo_element_shapelayout ).

**********************************************************************
* STEP 4: Create v:shapetype

    lo_element_shapetype = lo_document->create_simple_element( name   = lc_xml_node_shapetype
                                                               parent = lo_document ).

    lo_element_shapetype->set_attribute_ns( : name  = lc_xml_attr_id         value = '_x0000_t202' ),
                                              name  = lc_xml_attr_coordsize  value = '21600,21600' ),
                                              name  = lc_xml_attr_ospt       value = '202' ),
                                              name  = lc_xml_attr_path       value = 'm,l,21600r21600,l21600,xe' ).

    lo_element_stroke = lo_document->create_simple_element( name   = lc_xml_node_stroke
                                                            parent = lo_document ).
    lo_element_stroke->set_attribute_ns( name  = lc_xml_attr_joinstyle       value = lc_xml_attr_val_miter ).

    lo_element_path   = lo_document->create_simple_element( name   = lc_xml_node_path
                                                            parent = lo_document ).
    lo_element_path->set_attribute_ns( : name  = lc_xml_attr_gradientshapeok value = lc_xml_attr_val_t ),
                                         name  = lc_xml_attr_oconnecttype    value = lc_xml_attr_val_rect ).

    lo_element_shapetype->append_child( : new_child = lo_element_stroke ),
                                          new_child = lo_element_path ).

    lo_element_root->append_child( new_child = lo_element_shapetype ).

**********************************************************************
* STEP 4: Create v:shapetype

    lo_comments = io_worksheet->get_comments( ).

    lo_iterator = lo_comments->get_iterator( ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lv_index = sy-index.
      lo_comment ?= lo_iterator->if_object_collection_iterator~get_next( ).
      DATA ref TYPE string.
      ref = lo_comment->get_ref( ).
      zcl_excel_common=>convert_columnrow2column_a_row( EXPORTING i_columnrow = ref
                                                        IMPORTING e_column = lv_str_column
                                                                  e_row    = lv_row ).
      lv_column = zcl_excel_common=>convert_column2int( lv_str_column ).

      lo_element_shape = lo_document->create_simple_element( name   = lc_xml_node_shape
                                                             parent = lo_document ).

      lv_attr_id_index = 1024 + lv_index.
      lv_attr_id = lv_attr_id_index.
      CONCATENATE '_x0000_s' lv_attr_id INTO lv_attr_id.
      lo_element_shape->set_attribute_ns( : name  = lc_xml_attr_id          value = lv_attr_id ),
                                            name  = lc_xml_attr_type        value = '#_x0000_t202' ),
                                            name  = lc_xml_attr_style       value = 'size:auto;width:auto;height:auto;position:absolute;margin-left:117pt;margin-top:172.5pt;z-index:1;visibility:hidden' ),
                                            name  = lc_xml_attr_fillcolor   value = '#ffffe1' ),
                                            name  = lc_xml_attr_oinsetmode  value = lc_xml_attr_val_auto ).

      " Fill
      lo_element_fill = lo_document->create_simple_element( name   = lc_xml_node_fill
                                                            parent = lo_document ).
      lo_element_fill->set_attribute_ns( name = lc_xml_attr_color2  value = '#ffffe1' ).
      lo_element_shape->append_child( new_child = lo_element_fill ).
      " Shadow
      lo_element_shadow = lo_document->create_simple_element( name   = lc_xml_node_shadow
                                                              parent = lo_document ).
      lo_element_shadow->set_attribute_ns( : name = lc_xml_attr_on        value = lc_xml_attr_val_t ),
                                             name = lc_xml_attr_color     value = lc_xml_attr_val_black ),
                                             name = lc_xml_attr_obscured  value = lc_xml_attr_val_t ).
      lo_element_shape->append_child( new_child = lo_element_shadow ).
      " Path
      lo_element_path = lo_document->create_simple_element( name   = lc_xml_node_path
                                                            parent = lo_document ).
      lo_element_path->set_attribute_ns( name = lc_xml_attr_oconnecttype  value = lc_xml_attr_val_none ).
      lo_element_shape->append_child( new_child = lo_element_path ).
      " Textbox
      lo_element_textbox = lo_document->create_simple_element( name   = lc_xml_node_textbox
                                                               parent = lo_document ).
      lo_element_textbox->set_attribute_ns( name = lc_xml_attr_style  value = lc_xml_attr_val_msodir ).
      lo_element_div = lo_document->create_simple_element( name   = lc_xml_node_div
                                                           parent = lo_document ).
      lo_element_div->set_attribute_ns( name = lc_xml_attr_style  value = 'text-align:left' ).
      lo_element_textbox->append_child( new_child = lo_element_div ).
      lo_element_shape->append_child( new_child = lo_element_textbox ).
      " ClientData
      lo_element_clientdata = lo_document->create_simple_element( name   = lc_xml_node_clientdata
                                                                  parent = lo_document ).
      lo_element_clientdata->set_attribute_ns( name = lc_xml_attr_objecttype  value = lc_xml_attr_val_note ).
      lo_element_movewithcells = lo_document->create_simple_element( name   = lc_xml_node_movewithcells
                                                                     parent = lo_document ).
      lo_element_clientdata->append_child( new_child = lo_element_movewithcells ).
      lo_element_sizewithcells = lo_document->create_simple_element( name   = lc_xml_node_sizewithcells
                                                                     parent = lo_document ).
      lo_element_clientdata->append_child( new_child = lo_element_sizewithcells ).
      lo_element_anchor = lo_document->create_simple_element( name   = lc_xml_node_anchor
                                                              parent = lo_document ).
      lo_element_anchor->set_value( '2, 15, 11, 10, 4, 31, 15, 9' ).
      lo_element_clientdata->append_child( new_child = lo_element_anchor ).
      lo_element_autofill = lo_document->create_simple_element( name   = lc_xml_node_autofill
                                                                parent = lo_document ).
      lo_element_autofill->set_value( 'False' ).
      lo_element_clientdata->append_child( new_child = lo_element_autofill ).
      lo_element_row = lo_document->create_simple_element( name   = lc_xml_node_row
                                                           parent = lo_document ).
      lv_int_value = lv_row - 1.
      lv_int_value_string = lv_int_value.
      lo_element_row->set_value( lv_int_value_string ).
      lo_element_clientdata->append_child( new_child = lo_element_row ).
      lo_element_column = lo_document->create_simple_element( name   = lc_xml_node_column
                                                                parent = lo_document ).
      lv_int_value = lv_column - 1.
      lv_int_value_string = lv_int_value.
      lo_element_column->set_value( lv_int_value_string ).
      lo_element_clientdata->append_child( new_child = lo_element_column ).

      lo_element_shape->append_child( new_child = lo_element_clientdata ).

      lo_element_root->append_child( new_child = lo_element_shape ).
    ENDWHILE.

**********************************************************************
* STEP 6: Create xstring stream
    ep_content = render_xml_document( lo_document ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_DRAWING_FOR_HDFT_IM
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_drawing_for_hdft_im.


    DATA:
      ld_1            TYPE string,
      ld_2            TYPE string,
      ld_3            TYPE string,
      ld_4            TYPE string,
      ld_5            TYPE string,
      ld_6            TYPE string,
      ld_7            TYPE string,

      ls_odd_header   TYPE zexcel_s_worksheet_head_foot,
      ls_odd_footer   TYPE zexcel_s_worksheet_head_foot,
      ls_even_header  TYPE zexcel_s_worksheet_head_foot,
      ls_even_footer  TYPE zexcel_s_worksheet_head_foot,
      lv_content      TYPE string,
      lo_xml_document TYPE REF TO cl_xml_document.


* INIT_RESULT
    CLEAR ep_content.


* BODY
    ld_1 = '<xml xmlns:v="urn:schemas-microsoft-com:vml"  xmlns:o="urn:schemas-microsoft-com:office:office"  xmlns:x="urn:schemas-microsoft-com:office:excel"><o:shapelayout v:ext="edit"><o:idmap v:ext="edit" data="1"/></o:shapelayout>'.
    ld_2 = '<v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"/><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"/>'.
    ld_3 = '<v:f eqn="sum @0 1 0"/><v:f eqn="sum 0 0 @1"/><v:f eqn="prod @2 1 2"/><v:f eqn="prod @3 21600 pixelWidth"/><v:f eqn="prod @3 21600 pixelHeight"/><v:f eqn="sum @0 0 1"/><v:f eqn="prod @6 1 2"/><v:f eqn="prod @7 21600 pixelWidth"/>'.
    ld_4 = '<v:f eqn="sum @8 21600 0"/><v:f eqn="prod @7 21600 pixelHeight"/><v:f eqn="sum @10 21600 0"/></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/><o:lock v:ext="edit" aspectratio="t"/></v:shapetype>'.


    CONCATENATE ld_1
                ld_2
                ld_3
                ld_4
         INTO lv_content.

    io_worksheet->sheet_setup->get_header_footer( IMPORTING ep_odd_header = ls_odd_header
                                                            ep_odd_footer = ls_odd_footer
                                                            ep_even_header = ls_even_header
                                                            ep_even_footer = ls_even_footer ).

    ld_5 = me->set_vml_shape_header( ls_odd_header ).
    CONCATENATE lv_content
                ld_5
           INTO lv_content.
    ld_5 = me->set_vml_shape_header( ls_even_header ).
    CONCATENATE lv_content
                ld_5
           INTO lv_content.
    ld_5 = me->set_vml_shape_footer( ls_odd_footer ).
    CONCATENATE lv_content
                ld_5
           INTO lv_content.
    ld_5 = me->set_vml_shape_footer( ls_even_footer ).
    CONCATENATE lv_content
                ld_5
           INTO lv_content.

    ld_7 = '</xml>'.

    CONCATENATE lv_content
                ld_7
           INTO lv_content.

    CREATE OBJECT lo_xml_document.
    CALL METHOD lo_xml_document->parse_string
      EXPORTING
        stream = lv_content.

    CALL FUNCTION 'SCMS_STRING_TO_XSTRING'
      EXPORTING
        text   = lv_content
      IMPORTING
        buffer = ep_content
      EXCEPTIONS
        failed = 1
        OTHERS = 2.
    IF sy-subrc <> 0.
      CLEAR ep_content.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_RELATIONSHIPS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_relationships.


** Constant node name
    DATA: lc_xml_node_relationships TYPE string VALUE 'Relationships',
          lc_xml_node_relationship  TYPE string VALUE 'Relationship',
          " Node attributes
          lc_xml_attr_id            TYPE string VALUE 'Id',
          lc_xml_attr_type          TYPE string VALUE 'Type',
          lc_xml_attr_target        TYPE string VALUE 'Target',
          " Node namespace
          lc_xml_node_rels_ns       TYPE string VALUE 'http://schemas.openxmlformats.org/package/2006/relationships',
          " Node id
          lc_xml_node_ridx_id       TYPE string VALUE 'rId#',
          " Node type
          lc_xml_node_rid_sheet_tp  TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet',
          lc_xml_node_rid_theme_tp  TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme',
          lc_xml_node_rid_styles_tp TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',
          lc_xml_node_rid_shared_tp TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings',
          " Node target
          lc_xml_node_ridx_tg       TYPE string VALUE 'worksheets/sheet#.xml',
          lc_xml_node_rid_shared_tg TYPE string VALUE 'sharedStrings.xml',
          lc_xml_node_rid_styles_tg TYPE string VALUE 'styles.xml',
          lc_xml_node_rid_theme_tg  TYPE string VALUE 'theme/theme1.xml'.

    DATA: lo_document     TYPE REF TO if_ixml_document,
          lo_element_root TYPE REF TO if_ixml_element,
          lo_element      TYPE REF TO if_ixml_element.

    DATA: lv_xml_node_ridx_tg TYPE string,
          lv_xml_node_ridx_id TYPE string,
          lv_size             TYPE i,
          lv_syindex          TYPE string.

**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

**********************************************************************
* STEP 3: Create main node relationships
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_relationships
                                                           parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns'
                                       value = lc_xml_node_rels_ns ).

**********************************************************************
* STEP 4: Create subnodes

    lv_size = excel->get_worksheets_size( ).


    " Relationship node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
    parent = lo_document ).
    lv_size = lv_size + 1.
    lv_syindex = lv_size.
    SHIFT lv_syindex RIGHT DELETING TRAILING space.
    SHIFT lv_syindex LEFT DELETING LEADING space.
    lv_xml_node_ridx_id = lc_xml_node_ridx_id.
    REPLACE ALL OCCURRENCES OF '#' IN lv_xml_node_ridx_id WITH lv_syindex.
    lo_element->set_attribute_ns( name  = lc_xml_attr_id
    value = lv_xml_node_ridx_id ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_type
    value = lc_xml_node_rid_theme_tp ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_target
    value = lc_xml_node_rid_theme_tg ).
    lo_element_root->append_child( new_child = lo_element ).


    " Relationship node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
                                                     parent = lo_document ).
    lv_size = lv_size + 1.
    lv_syindex = lv_size.
    SHIFT lv_syindex RIGHT DELETING TRAILING space.
    SHIFT lv_syindex LEFT DELETING LEADING space.
    lv_xml_node_ridx_id = lc_xml_node_ridx_id.
    REPLACE ALL OCCURRENCES OF '#' IN lv_xml_node_ridx_id WITH lv_syindex.
    lo_element->set_attribute_ns( name  = lc_xml_attr_id
                                  value = lv_xml_node_ridx_id ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                  value = lc_xml_node_rid_styles_tp ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_target
                                  value = lc_xml_node_rid_styles_tg ).
    lo_element_root->append_child( new_child = lo_element ).



    lv_size = excel->get_worksheets_size( ).

    DO lv_size TIMES.
      " Relationship node
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
      parent = lo_document ).
      lv_xml_node_ridx_id = lc_xml_node_ridx_id.
      lv_xml_node_ridx_tg = lc_xml_node_ridx_tg.
      lv_syindex = sy-index.
      SHIFT lv_syindex RIGHT DELETING TRAILING space.
      SHIFT lv_syindex LEFT DELETING LEADING space.
      REPLACE ALL OCCURRENCES OF '#' IN lv_xml_node_ridx_id WITH lv_syindex.
      REPLACE ALL OCCURRENCES OF '#' IN lv_xml_node_ridx_tg WITH lv_syindex.
      lo_element->set_attribute_ns( name  = lc_xml_attr_id
      value = lv_xml_node_ridx_id ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_type
      value = lc_xml_node_rid_sheet_tp ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_target
      value = lv_xml_node_ridx_tg ).
      lo_element_root->append_child( new_child = lo_element ).
    ENDDO.

    " Relationship node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
                                                     parent = lo_document ).
    ADD 3 TO lv_size.
    lv_syindex = lv_size.
    SHIFT lv_syindex RIGHT DELETING TRAILING space.
    SHIFT lv_syindex LEFT DELETING LEADING space.
    lv_xml_node_ridx_id = lc_xml_node_ridx_id.
    REPLACE ALL OCCURRENCES OF '#' IN lv_xml_node_ridx_id WITH lv_syindex.
    lo_element->set_attribute_ns( name  = lc_xml_attr_id
                                  value = lv_xml_node_ridx_id ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                  value = lc_xml_node_rid_shared_tp ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_target
                                  value = lc_xml_node_rid_shared_tg ).
    lo_element_root->append_child( new_child = lo_element ).

**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_SHAREDSTRINGS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_sharedstrings.


** Constant node name
    DATA: lc_xml_node_sst         TYPE string VALUE 'sst',
          lc_xml_node_si          TYPE string VALUE 'si',
          lc_xml_node_t           TYPE string VALUE 't',
          " Node attributes
          lc_xml_attr_count       TYPE string VALUE 'count',
          lc_xml_attr_uniquecount TYPE string VALUE 'uniqueCount',
          " Node namespace
          lc_xml_node_ns          TYPE string VALUE 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'.

    DATA: lo_document     TYPE REF TO if_ixml_document,
          lo_element_root TYPE REF TO if_ixml_element,
          lo_element      TYPE REF TO if_ixml_element,
          lo_sub_element  TYPE REF TO if_ixml_element,
          lo_iterator     TYPE REF TO cl_object_collection_iterator,
          lo_worksheet    TYPE REF TO zcl_excel_worksheet.

    DATA: lt_cell_data       TYPE zexcel_t_cell_data_unsorted,
          ls_shared_string   TYPE zexcel_s_shared_string,
          lv_count_str       TYPE string,
          lv_uniquecount_str TYPE string,
          lv_sytabix         TYPE sytabix,
          lv_count           TYPE i,
          lv_uniquecount     TYPE i.

    FIELD-SYMBOLS: <fs_sheet_content> TYPE zexcel_s_cell_data,
                   <fs_sheet_string>  TYPE zexcel_s_shared_string.

**********************************************************************
* STEP 1: Collect strings from each worksheet
    lo_iterator = excel->get_worksheets_iterator( ).

    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_worksheet ?= lo_iterator->if_object_collection_iterator~get_next( ).
      APPEND LINES OF lo_worksheet->sheet_content TO lt_cell_data.
    ENDWHILE.

    DELETE lt_cell_data WHERE cell_formula IS NOT INITIAL. " delete formula content

    DESCRIBE TABLE lt_cell_data LINES lv_count.
    MOVE lv_count TO lv_count_str.

    SHIFT lv_count_str RIGHT DELETING TRAILING space.
    SHIFT lv_count_str LEFT DELETING LEADING space.

    SORT lt_cell_data BY cell_value data_type.
    DELETE ADJACENT DUPLICATES FROM lt_cell_data COMPARING cell_value data_type.

    DESCRIBE TABLE lt_cell_data LINES lv_uniquecount.
    MOVE lv_uniquecount TO lv_uniquecount_str.

    SHIFT lv_uniquecount_str RIGHT DELETING TRAILING space.
    SHIFT lv_uniquecount_str LEFT DELETING LEADING space.

    CLEAR lv_count.
    LOOP AT lt_cell_data ASSIGNING <fs_sheet_content> WHERE data_type = 's'.
*    lv_sytabix = sy-tabix - 1.
      lv_sytabix = lv_count.
      MOVE lv_sytabix                    TO ls_shared_string-string_no.
      MOVE <fs_sheet_content>-cell_value TO ls_shared_string-string_value.
      MOVE <fs_sheet_content>-data_type TO ls_shared_string-string_type.
      APPEND ls_shared_string TO shared_strings.
      ADD 1 TO lv_count.
    ENDLOOP.


**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

**********************************************************************
* STEP 3: Create main node
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_sst
                                                           parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns'
                                       value = lc_xml_node_ns ).
    lo_element_root->set_attribute_ns( name  = lc_xml_attr_count
                                       value = lv_count_str ).
    lo_element_root->set_attribute_ns( name  = lc_xml_attr_uniquecount
                                       value = lv_uniquecount_str ).

**********************************************************************
* STEP 4: Create subnode
    LOOP AT shared_strings ASSIGNING <fs_sheet_string>.
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_si
                                                       parent = lo_document ).
      lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_t
                                                           parent = lo_document ).
*    if <fs_sheet_string>-string_type EQ 's_leading_blanks'.
      IF <fs_sheet_string>-string_value IS NOT INITIAL AND <fs_sheet_string>-string_value(1) EQ ` `.
        lo_sub_element->set_attribute( name = 'space' namespace = 'xml' value = 'preserve' ).
      ENDIF.
      lo_sub_element->set_value( value = <fs_sheet_string>-string_value ).
      lo_element->append_child( new_child = lo_sub_element ).
      lo_element_root->append_child( new_child = lo_element ).
    ENDLOOP.

**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_SHEET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [--->] IV_ACTIVE                      TYPE        FLAG (default ='')
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_sheet.
*--------------------------------------------------------------------*
* issue #330   - Adding ColorScale conditional formatting
*              - Ivan Femia,                                2014-08-25
*--------------------------------------------------------------------*

    TYPES: BEGIN OF colors,
             colorrgb TYPE zexcel_color,
           END OF colors.

*--------------------------------------------------------------------*
* issue #237   - Error writing column-style
*              - Stefan Schmoecker,                          2012-11-01
*--------------------------------------------------------------------*

    TYPES: BEGIN OF cfvo,
             value TYPE zexcel_conditional_value,
             type  TYPE zexcel_conditional_type,
           END OF cfvo.

*--------------------------------------------------------------------*
* issue #220 - If cell in tables-area don't use default from row or column or sheet - Declarations 1 - start
*--------------------------------------------------------------------*
    TYPES: BEGIN OF lty_table_area,
             left   TYPE i,
             right  TYPE i,
             top    TYPE i,
             bottom TYPE i,
           END OF lty_table_area.
*--------------------------------------------------------------------*
* issue #220 - If cell in tables-area don't use default from row or column or sheet - Declarations 1 - end
*--------------------------------------------------------------------*

** Constant node name
    DATA: lc_xml_node_worksheet          TYPE string VALUE 'worksheet',
          lc_xml_node_sheetpr            TYPE string VALUE 'sheetPr',
          lc_xml_node_tabcolor           TYPE string VALUE 'tabColor',
          lc_xml_node_outlinepr          TYPE string VALUE 'outlinePr',
          lc_xml_node_dimension          TYPE string VALUE 'dimension',
          lc_xml_node_sheetviews         TYPE string VALUE 'sheetViews',
          lc_xml_node_sheetview          TYPE string VALUE 'sheetView',
          lc_xml_node_selection          TYPE string VALUE 'selection',
          lc_xml_node_pane               TYPE string VALUE 'pane',
          lc_xml_node_sheetformatpr      TYPE string VALUE 'sheetFormatPr',
          lc_xml_node_cols               TYPE string VALUE 'cols',
          lc_xml_node_col                TYPE string VALUE 'col',
          lc_xml_node_sheetprotection    TYPE string VALUE 'sheetProtection',
          lc_xml_node_pagemargins        TYPE string VALUE 'pageMargins',
          lc_xml_node_pagesetup          TYPE string VALUE 'pageSetup',
          lc_xml_node_pagesetuppr        TYPE string VALUE 'pageSetUpPr',
          lc_xml_node_condformatting     TYPE string VALUE 'conditionalFormatting',
          lc_xml_node_cfrule             TYPE string VALUE 'cfRule',
          lc_xml_node_color              TYPE string VALUE 'color',      " Databar by Albert Lladanosa
          lc_xml_node_databar            TYPE string VALUE 'dataBar',    " Databar by Albert Lladanosa
          lc_xml_node_colorscale         TYPE string VALUE 'colorScale',
          lc_xml_node_iconset            TYPE string VALUE 'iconSet',
          lc_xml_node_cfvo               TYPE string VALUE 'cfvo',
          lc_xml_node_formula            TYPE string VALUE 'formula',
          lc_xml_node_datavalidations    TYPE string VALUE 'dataValidations',
          lc_xml_node_datavalidation     TYPE string VALUE 'dataValidation',
          lc_xml_node_formula1           TYPE string VALUE 'formula1',
          lc_xml_node_formula2           TYPE string VALUE 'formula2',
          lc_xml_node_mergecell          TYPE string VALUE 'mergeCell',
          lc_xml_node_mergecells         TYPE string VALUE 'mergeCells',
          lc_xml_node_drawing            TYPE string VALUE 'drawing',
          lc_xml_node_drawing_for_cmt    TYPE string VALUE 'legacyDrawing',

**********************************************************************
          lc_xml_node_drawing_for_hd_ft  TYPE string VALUE 'legacyDrawingHF',
**********************************************************************


          lc_xml_node_headerfooter       TYPE string VALUE 'headerFooter',
          lc_xml_node_oddheader          TYPE string VALUE 'oddHeader',
          lc_xml_node_oddfooter          TYPE string VALUE 'oddFooter',
          lc_xml_node_evenheader         TYPE string VALUE 'evenHeader',
          lc_xml_node_evenfooter         TYPE string VALUE 'evenFooter',
          lc_xml_node_autofilter         TYPE string VALUE 'autoFilter',
          lc_xml_node_filtercolumn       TYPE string VALUE 'filterColumn',
          lc_xml_node_filters            TYPE string VALUE 'filters',
          lc_xml_node_filter             TYPE string VALUE 'filter',
          " Node attributes
          lc_xml_attr_ref                TYPE string VALUE 'ref',
          lc_xml_attr_summarybelow       TYPE string VALUE 'summaryBelow',
          lc_xml_attr_summaryright       TYPE string VALUE 'summaryRight',
          lc_xml_attr_tabselected        TYPE string VALUE 'tabSelected',
          lc_xml_attr_showzeros          TYPE string VALUE 'showZeros',
          lc_xml_attr_zoomscale          TYPE string VALUE 'zoomScale',
          lc_xml_attr_zoomscalenormal    TYPE string VALUE 'zoomScaleNormal',
          lc_xml_attr_zoomscalepageview  TYPE string VALUE 'zoomScalePageLayoutView',
          lc_xml_attr_zoomscalesheetview TYPE string VALUE 'zoomScaleSheetLayoutView',
          lc_xml_attr_workbookviewid     TYPE string VALUE 'workbookViewId',
          lc_xml_attr_showgridlines      TYPE string VALUE 'showGridLines',
          lc_xml_attr_gridlines          TYPE string VALUE 'gridLines',
          lc_xml_attr_showrowcolheaders  TYPE string VALUE 'showRowColHeaders',
          lc_xml_attr_activecell         TYPE string VALUE 'activeCell',
          lc_xml_attr_sqref              TYPE string VALUE 'sqref',
          lc_xml_attr_min                TYPE string VALUE 'min',
          lc_xml_attr_max                TYPE string VALUE 'max',
          lc_xml_attr_hidden             TYPE string VALUE 'hidden',
          lc_xml_attr_width              TYPE string VALUE 'width',
          lc_xml_attr_defaultwidth       TYPE string VALUE '9.10',
          lc_xml_attr_style              TYPE string VALUE 'style',
          lc_xml_attr_true               TYPE string VALUE 'true',
          lc_xml_attr_bestfit            TYPE string VALUE 'bestFit',
          lc_xml_attr_customheight       TYPE string VALUE 'customHeight',
          lc_xml_attr_customwidth        TYPE string VALUE 'customWidth',
          lc_xml_attr_collapsed          TYPE string VALUE 'collapsed',
          lc_xml_attr_defaultrowheight   TYPE string VALUE 'defaultRowHeight',
          lc_xml_attr_defaultcolwidth    TYPE string VALUE 'defaultColWidth',
          lc_xml_attr_outlinelevelrow    TYPE string VALUE 'x14ac:outlineLevelRow',
          lc_xml_attr_outlinelevelcol    TYPE string VALUE 'x14ac:outlineLevelCol',
          lc_xml_attr_outlinelevel       TYPE string VALUE 'outlineLevel',
          lc_xml_attr_password           TYPE string VALUE 'password',
          lc_xml_attr_sheet              TYPE string VALUE 'sheet',
          lc_xml_attr_objects            TYPE string VALUE 'objects',
          lc_xml_attr_scenarios          TYPE string VALUE 'scenarios',
          lc_xml_attr_autofilter         TYPE string VALUE 'autoFilter',
          lc_xml_attr_deletecolumns      TYPE string VALUE 'deleteColumns',
          lc_xml_attr_deleterows         TYPE string VALUE 'deleteRows',
          lc_xml_attr_formatcells        TYPE string VALUE 'formatCells',
          lc_xml_attr_formatcolumns      TYPE string VALUE 'formatColumns',
          lc_xml_attr_formatrows         TYPE string VALUE 'formatRows',
          lc_xml_attr_insertcolumns      TYPE string VALUE 'insertColumns',
          lc_xml_attr_inserthyperlinks   TYPE string VALUE 'insertHyperlinks',
          lc_xml_attr_insertrows         TYPE string VALUE 'insertRows',
          lc_xml_attr_pivottables        TYPE string VALUE 'pivotTables',
          lc_xml_attr_selectlockedcells  TYPE string VALUE 'selectLockedCells',
          lc_xml_attr_selectunlockedcell TYPE string VALUE 'selectUnlockedCells',
          lc_xml_attr_sort               TYPE string VALUE 'sort',
          lc_xml_attr_left               TYPE string VALUE 'left',
          lc_xml_attr_right              TYPE string VALUE 'right',
          lc_xml_attr_top                TYPE string VALUE 'top',
          lc_xml_attr_bottom             TYPE string VALUE 'bottom',
          lc_xml_attr_header             TYPE string VALUE 'header',
          lc_xml_attr_footer             TYPE string VALUE 'footer',
          lc_xml_attr_type               TYPE string VALUE 'type',
          lc_xml_attr_iconset            TYPE string VALUE 'iconSet',
          lc_xml_attr_showvalue          TYPE string VALUE 'showValue',
          lc_xml_attr_val                TYPE string VALUE 'val',
          lc_xml_attr_dxfid              TYPE string VALUE 'dxfId',
          lc_xml_attr_priority           TYPE string VALUE 'priority',
          lc_xml_attr_operator           TYPE string VALUE 'operator',
          lc_xml_attr_allowblank         TYPE string VALUE 'allowBlank',
          lc_xml_attr_showinputmessage   TYPE string VALUE 'showInputMessage',
          lc_xml_attr_showerrormessage   TYPE string VALUE 'showErrorMessage',
          lc_xml_attr_showdropdown       TYPE string VALUE 'showDropDown',
          lc_xml_attr_errortitle         TYPE string VALUE 'errorTitle',
          lc_xml_attr_error              TYPE string VALUE 'error',
          lc_xml_attr_prompttitle        TYPE string VALUE 'promptTitle',
          lc_xml_attr_prompt             TYPE string VALUE 'prompt',
          lc_xml_attr_count              TYPE string VALUE 'count',
          lc_xml_attr_blackandwhite      TYPE string VALUE 'blackAndWhite',
          lc_xml_attr_cellcomments       TYPE string VALUE 'cellComments',
          lc_xml_attr_copies             TYPE string VALUE 'copies',
          lc_xml_attr_draft              TYPE string VALUE 'draft',
          lc_xml_attr_errors             TYPE string VALUE 'errors',
          lc_xml_attr_firstpagenumber    TYPE string VALUE 'firstPageNumber',
          lc_xml_attr_fittopage          TYPE string VALUE 'fitToPage',
          lc_xml_attr_fittoheight        TYPE string VALUE 'fitToHeight',
          lc_xml_attr_fittowidth         TYPE string VALUE 'fitToWidth',
          lc_xml_attr_horizontaldpi      TYPE string VALUE 'horizontalDpi',
          lc_xml_attr_orientation        TYPE string VALUE 'orientation',
          lc_xml_attr_pageorder          TYPE string VALUE 'pageOrder',
          lc_xml_attr_paperheight        TYPE string VALUE 'paperHeight',
          lc_xml_attr_papersize          TYPE string VALUE 'paperSize',
          lc_xml_attr_paperwidth         TYPE string VALUE 'paperWidth',
          lc_xml_attr_scale              TYPE string VALUE 'scale',
          lc_xml_attr_usefirstpagenumber TYPE string VALUE 'useFirstPageNumber',
          lc_xml_attr_useprinterdefaults TYPE string VALUE 'usePrinterDefaults',
          lc_xml_attr_verticaldpi        TYPE string VALUE 'verticalDpi',
          lc_xml_attr_differentoddeven   TYPE string VALUE 'differentOddEven',
          lc_xml_attr_colid              TYPE string VALUE 'colId',
          lc_xml_attr_filtermode         TYPE string VALUE 'filterMode',
          lc_xml_attr_tabcolor_rgb       TYPE string VALUE 'rgb',
          " Node namespace
          lc_xml_node_ns                 TYPE string VALUE 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
          lc_xml_node_r_ns               TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',
          lc_xml_node_comp_ns            TYPE string VALUE 'http://schemas.openxmlformats.org/markup-compatibility/2006',
          lc_xml_node_comp_pref          TYPE string VALUE 'x14ac',
          lc_xml_node_ig_ns              TYPE string VALUE 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac'.

    DATA: lo_document        TYPE REF TO if_ixml_document,
          lo_element_root    TYPE REF TO if_ixml_element,
          lo_element         TYPE REF TO if_ixml_element,
          lo_element_2       TYPE REF TO if_ixml_element,
          lo_element_3       TYPE REF TO if_ixml_element,
          lo_element_4       TYPE REF TO if_ixml_element,
          lo_iterator        TYPE REF TO cl_object_collection_iterator,
          lo_style_cond      TYPE REF TO zcl_excel_style_cond,
          lo_data_validation TYPE REF TO zcl_excel_data_validation,
          lo_table           TYPE REF TO zcl_excel_table,
          lo_column_default  TYPE REF TO zcl_excel_column,
          lo_row_default     TYPE REF TO zcl_excel_row.

    DATA: lv_value                    TYPE string,
          lt_range_merge              TYPE string_table,
          lv_column                   TYPE zexcel_cell_column,
          lv_style_guid               TYPE zexcel_cell_style,
          ls_databar                  TYPE zexcel_conditional_databar,      " Databar by Albert Lladanosa
          ls_colorscale               TYPE zexcel_conditional_colorscale,
          ls_iconset                  TYPE zexcel_conditional_iconset,
          ls_cellis                   TYPE zexcel_conditional_cellis,
          ls_expression               TYPE zexcel_conditional_expression,
          ls_conditional_top10        TYPE zexcel_conditional_top10,
          ls_conditional_above_avg    TYPE zexcel_conditional_above_avg,
          lt_cfvo                     TYPE TABLE OF cfvo,
          ls_cfvo                     TYPE cfvo,
          lt_colors                   TYPE TABLE OF colors,
          ls_colors                   TYPE colors,
          lv_cell_row_s               TYPE string,
          ls_style_mapping            TYPE zexcel_s_styles_mapping,
          lv_freeze_cell_row          TYPE zexcel_cell_row,
          lv_freeze_cell_column       TYPE zexcel_cell_column,
          lv_freeze_cell_column_alpha TYPE zexcel_cell_column_alpha,
          lo_column_iterator          TYPE REF TO cl_object_collection_iterator,
          lo_column                   TYPE REF TO zcl_excel_column,
          lo_row_iterator             TYPE REF TO cl_object_collection_iterator,
          ls_style_cond_mapping       TYPE zexcel_s_styles_cond_mapping,
          lv_relation_id              TYPE i VALUE 0,
          outline_level_col           TYPE i VALUE 0,
          lts_row_outlines            TYPE zcl_excel_worksheet=>mty_ts_outlines_row,
          merge_count                 TYPE int4,
          lt_values                   TYPE zexcel_t_autofilter_values,
          ls_values                   TYPE zexcel_s_autofilter_values,
          lo_autofilters              TYPE REF TO zcl_excel_autofilters,
          lo_autofilter               TYPE REF TO zcl_excel_autofilter,
          lv_ref                      TYPE string.

    FIELD-SYMBOLS: <ls_sheet_content> TYPE zexcel_s_cell_data,
                   <fs_range_merge>   LIKE LINE OF lt_range_merge,
                   <ls_row_outline>   LIKE LINE OF lts_row_outlines.

*--------------------------------------------------------------------*
* issue #220 - If cell in tables-area don't use default from row or column or sheet - Declarations 2 - start
*--------------------------------------------------------------------*
    DATA: lt_table_areas TYPE SORTED TABLE OF lty_table_area WITH NON-UNIQUE KEY left right top bottom.

*--------------------------------------------------------------------*
* issue #220 - If cell in tables-area don't use default from row or column or sheet - Declarations 2 - end
*--------------------------------------------------------------------*



**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

***********************************************************************
* STEP 3: Create main node relationships
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_worksheet
                                                           parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns'
                                       value = lc_xml_node_ns ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:r'
                                       value = lc_xml_node_r_ns ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:mc'
                                       value = lc_xml_node_comp_ns ).
    lo_element_root->set_attribute_ns( name  = 'mc:Ignorable'
                                       value = lc_xml_node_comp_pref ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:x14ac'
                                       value = lc_xml_node_ig_ns ).


**********************************************************************
* STEP 4: Create subnodes
    " sheetPr
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_sheetpr
                                                     parent = lo_document ).
    " TODO tabColor
    IF io_worksheet->tabcolor IS NOT INITIAL.
      lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_tabcolor
                                                         parent = lo_element ).
* Theme not supported yet - start with RGB
      lv_value = io_worksheet->tabcolor-rgb.
      lo_element_2->set_attribute_ns( name  = lc_xml_attr_tabcolor_rgb
                                      value = lv_value ).
    ENDIF.

    " outlinePr
    lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_outlinepr
                                                       parent = lo_document ).

    lv_value = io_worksheet->zif_excel_sheet_properties~summarybelow.
    CONDENSE lv_value.
    lo_element_2->set_attribute_ns( name  = lc_xml_attr_summarybelow
                                    value = lv_value ).

    lv_value = io_worksheet->zif_excel_sheet_properties~summaryright.
    CONDENSE lv_value.
    lo_element_2->set_attribute_ns( name  = lc_xml_attr_summaryright
                                    value = lv_value ).

    lo_element->append_child( new_child = lo_element_2 ).

    IF io_worksheet->sheet_setup->fit_to_page IS NOT INITIAL.
      lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_pagesetuppr
                                                       parent = lo_document ).
      lo_element_2->set_attribute_ns( name  = lc_xml_attr_fittopage
                                    value = `1` ).
      lo_element->append_child( new_child = lo_element_2 ). " pageSetupPr node
    ENDIF.

    lo_element_root->append_child( new_child = lo_element ).

    " dimension node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_dimension
                                                     parent = lo_document ).
    lv_value = io_worksheet->get_dimension_range( ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_ref
                                  value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ).

    " sheetViews node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_sheetviews
                                                     parent = lo_document ).
    " sheetView node
    lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_sheetview
                                                       parent = lo_document ).
    IF io_worksheet->zif_excel_sheet_properties~show_zeros EQ abap_false.
      lo_element_2->set_attribute_ns( name  = lc_xml_attr_showzeros
                                      value = '0' ).
    ENDIF.
    IF   iv_active = abap_true
      OR io_worksheet->zif_excel_sheet_properties~selected EQ abap_true.
      lo_element_2->set_attribute_ns( name  = lc_xml_attr_tabselected
                                      value = '1' ).
    ELSE.
      lo_element_2->set_attribute_ns( name  = lc_xml_attr_tabselected
                                      value = '0' ).
    ENDIF.
    " Zoom scale
    IF io_worksheet->zif_excel_sheet_properties~zoomscale GT 400.
      io_worksheet->zif_excel_sheet_properties~zoomscale = 400.
    ELSEIF io_worksheet->zif_excel_sheet_properties~zoomscale LT 10.
      io_worksheet->zif_excel_sheet_properties~zoomscale = 10.
    ENDIF.
    lv_value = io_worksheet->zif_excel_sheet_properties~zoomscale.
    CONDENSE lv_value.
    lo_element_2->set_attribute_ns( name  = lc_xml_attr_zoomscale
                                      value = lv_value ).
    IF io_worksheet->zif_excel_sheet_properties~zoomscale_normal NE 0.
      IF io_worksheet->zif_excel_sheet_properties~zoomscale_normal GT 400.
        io_worksheet->zif_excel_sheet_properties~zoomscale_normal = 400.
      ELSEIF io_worksheet->zif_excel_sheet_properties~zoomscale_normal LT 10.
        io_worksheet->zif_excel_sheet_properties~zoomscale_normal = 10.
      ENDIF.
      lv_value = io_worksheet->zif_excel_sheet_properties~zoomscale_normal.
      CONDENSE lv_value.
      lo_element_2->set_attribute_ns( name  = lc_xml_attr_zoomscalenormal
                                      value = lv_value ).
    ENDIF.
    IF io_worksheet->zif_excel_sheet_properties~zoomscale_pagelayoutview NE 0.
      IF io_worksheet->zif_excel_sheet_properties~zoomscale_pagelayoutview GT 400.
        io_worksheet->zif_excel_sheet_properties~zoomscale_pagelayoutview = 400.
      ELSEIF io_worksheet->zif_excel_sheet_properties~zoomscale_pagelayoutview LT 10.
        io_worksheet->zif_excel_sheet_properties~zoomscale_pagelayoutview = 10.
      ENDIF.
      lv_value = io_worksheet->zif_excel_sheet_properties~zoomscale_pagelayoutview.
      CONDENSE lv_value.
      lo_element_2->set_attribute_ns( name  = lc_xml_attr_zoomscalepageview
                                      value = lv_value ).
    ENDIF.
    IF io_worksheet->zif_excel_sheet_properties~zoomscale_sheetlayoutview NE 0.
      IF io_worksheet->zif_excel_sheet_properties~zoomscale_sheetlayoutview GT 400.
        io_worksheet->zif_excel_sheet_properties~zoomscale_sheetlayoutview = 400.
      ELSEIF io_worksheet->zif_excel_sheet_properties~zoomscale_sheetlayoutview LT 10.
        io_worksheet->zif_excel_sheet_properties~zoomscale_sheetlayoutview = 10.
      ENDIF.
      lv_value = io_worksheet->zif_excel_sheet_properties~zoomscale_sheetlayoutview.
      CONDENSE lv_value.
      lo_element_2->set_attribute_ns( name  = lc_xml_attr_zoomscalesheetview
                                      value = lv_value ).
    ENDIF.
    lo_element_2->set_attribute_ns( name  = lc_xml_attr_workbookviewid
                                            value = '0' ).
    " showGridLines attribute
    IF io_worksheet->show_gridlines = abap_true.
      lo_element_2->set_attribute_ns( name  = lc_xml_attr_showgridlines
                                              value = '1' ).
    ELSE.
      lo_element_2->set_attribute_ns( name  = lc_xml_attr_showgridlines
                                              value = '0' ).
    ENDIF.

    " showRowColHeaders attribute
    IF io_worksheet->show_rowcolheaders = abap_true.
      lo_element_2->set_attribute_ns( name  = lc_xml_attr_showrowcolheaders
                                              value = '1' ).
    ELSE.
      lo_element_2->set_attribute_ns( name  = lc_xml_attr_showrowcolheaders
                                              value = '0' ).
    ENDIF.


    " freeze panes
    io_worksheet->get_freeze_cell( IMPORTING ep_row = lv_freeze_cell_row
                                   ep_column = lv_freeze_cell_column ).

    IF lv_freeze_cell_row IS NOT INITIAL AND lv_freeze_cell_column IS NOT INITIAL.
      lo_element_3 = lo_document->create_simple_element( name   = lc_xml_node_pane
                                                         parent = lo_element_2 ).

      IF lv_freeze_cell_row > 1.
        lv_value = lv_freeze_cell_row - 1.
        CONDENSE lv_value.
        lo_element_3->set_attribute_ns( name  = 'ySplit'
                                    value = lv_value ).
      ENDIF.

      IF lv_freeze_cell_column > 1.
        lv_value = lv_freeze_cell_column - 1.
        CONDENSE lv_value.
        lo_element_3->set_attribute_ns( name  = 'xSplit'
                                    value = lv_value ).
      ENDIF.

      lv_freeze_cell_column_alpha = zcl_excel_common=>convert_column2alpha( ip_column = lv_freeze_cell_column ).
      lv_value = zcl_excel_common=>number_to_excel_string( ip_value = lv_freeze_cell_row  ).
      CONCATENATE lv_freeze_cell_column_alpha lv_value INTO lv_value.
      lo_element_3->set_attribute_ns( name  = 'topLeftCell'
                                    value = lv_value ).

      lo_element_3->set_attribute_ns( name  = 'activePane'
                                    value = 'bottomRight' ).

      lo_element_3->set_attribute_ns( name  = 'state'
                                    value = 'frozen' ).

      lo_element_2->append_child( new_child = lo_element_3 ).
    ENDIF.
    " selection node
    lo_element_3 = lo_document->create_simple_element( name   = lc_xml_node_selection
                                                       parent = lo_document ).
    lv_value = io_worksheet->get_active_cell( ).
    lo_element_3->set_attribute_ns( name  = lc_xml_attr_activecell
                                    value = lv_value ).

    lo_element_3->set_attribute_ns( name  = lc_xml_attr_sqref
                                    value = lv_value ).

    lo_element_2->append_child( new_child = lo_element_3 ). " sheetView node

    lo_element->append_child( new_child = lo_element_2 ). " sheetView node

    lo_element_root->append_child( new_child = lo_element ). " sheetViews node


    lo_column_iterator = io_worksheet->get_columns_iterator( ).
    lo_row_iterator = io_worksheet->get_rows_iterator( ).
    " Calculate col
    IF NOT lo_column_iterator IS BOUND.
      io_worksheet->calculate_column_widths( ).
      lo_column_iterator = io_worksheet->get_columns_iterator( ).
    ENDIF.

    " sheetFormatPr node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_sheetformatpr
                                                     parent = lo_document ).
    " defaultRowHeight
    lo_row_default = io_worksheet->get_default_row( ).
    IF lo_row_default IS BOUND.
      IF lo_row_default->get_row_height( ) >= 0.
        lo_element->set_attribute_ns( name  = lc_xml_attr_customheight
                                      value = lc_xml_attr_true ).
        lv_value = lo_row_default->get_row_height( ).
      ELSE.
        lv_value = '12.75'.
      ENDIF.
    ELSE.
      lv_value = '12.75'.
    ENDIF.
    SHIFT lv_value RIGHT DELETING TRAILING space.
    SHIFT lv_value LEFT DELETING LEADING space.
    lo_element->set_attribute_ns( name  = lc_xml_attr_defaultrowheight
                                  value = lv_value ).
    " defaultColWidth
    lo_column_default = io_worksheet->get_default_column( ).
    IF lo_column_default IS BOUND AND lo_column_default->get_width( ) >= 0.
      lv_value = lo_column_default->get_width( ).
      SHIFT lv_value RIGHT DELETING TRAILING space.
      SHIFT lv_value LEFT DELETING LEADING space.
      lo_element->set_attribute_ns( name  = lc_xml_attr_defaultcolwidth
                                    value = lv_value ).
    ENDIF.

    " outlineLevelCol
    WHILE lo_column_iterator->has_next( ) = abap_true.
      lo_column ?= lo_column_iterator->get_next( ).
      IF lo_column->get_outline_level( ) > outline_level_col.
        outline_level_col = lo_column->get_outline_level( ).
      ENDIF.
    ENDWHILE.

    lv_value = outline_level_col.
    SHIFT lv_value RIGHT DELETING TRAILING space.
    SHIFT lv_value LEFT DELETING LEADING space.
    lo_element->set_attribute_ns( name  = lc_xml_attr_outlinelevelcol
                                  value = lv_value ).

    lo_element_root->append_child( new_child = lo_element ). " sheetFormatPr node

* Reset column iterator
    lo_column_iterator = io_worksheet->get_columns_iterator( ).
    IF io_worksheet->zif_excel_sheet_properties~get_style( ) IS NOT INITIAL OR lo_column_iterator->has_next( ) = abap_true.
      " cols node
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_cols
                                                       parent = lo_document ).
      " This code have to be enhanced in order to manage also column style properties
      " Now it is an out/out
      IF lo_column_iterator->has_next( ) = abap_true.
        WHILE lo_column_iterator->has_next( ) = abap_true.
          lo_column ?= lo_column_iterator->get_next( ).
          " col node
          lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_col
                                                             parent = lo_document ).
          lv_value = lo_column->get_column_index( ).
          SHIFT lv_value RIGHT DELETING TRAILING space.
          SHIFT lv_value LEFT DELETING LEADING space.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_min
                                          value = lv_value ).
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_max
                                          value = lv_value ).
          " Width
          IF lo_column->get_width( ) < 0.
            lo_element_2->set_attribute_ns( name  = lc_xml_attr_width
                                            value = lc_xml_attr_defaultwidth ).
          ELSE.
            lv_value = lo_column->get_width( ).
            lo_element_2->set_attribute_ns( name  = lc_xml_attr_width
                                            value = lv_value ).
          ENDIF.
          " Column visibility
          IF lo_column->get_visible( ) = abap_false.
            lo_element_2->set_attribute_ns( name  = lc_xml_attr_hidden
                                            value = lc_xml_attr_true ).
          ENDIF.
          "  Auto size?
          IF lo_column->get_auto_size( ) = abap_true.
            lo_element_2->set_attribute_ns( name  = lc_xml_attr_bestfit
                                            value = lc_xml_attr_true ).
          ENDIF.
          " Custom width?
          IF lo_column_default IS BOUND.
            IF lo_column->get_width( ) <> lo_column_default->get_width( ).
              lo_element_2->set_attribute_ns( name  = lc_xml_attr_customwidth
                                              value = lc_xml_attr_true ).

            ENDIF.
          ELSE.
            lo_element_2->set_attribute_ns( name  = lc_xml_attr_customwidth
                                            value = lc_xml_attr_true ).
          ENDIF.
          " Collapsed
          IF lo_column->get_collapsed( ) = abap_true.
            lo_element_2->set_attribute_ns( name  = lc_xml_attr_collapsed
                                            value = lc_xml_attr_true ).
          ENDIF.
          " outlineLevel
          IF lo_column->get_outline_level( ) > 0.
            lv_value = lo_column->get_outline_level( ).

            SHIFT lv_value RIGHT DELETING TRAILING space.
            SHIFT lv_value LEFT DELETING LEADING space.
            lo_element_2->set_attribute_ns( name  = lc_xml_attr_outlinelevel
                                            value = lv_value ).
          ENDIF.
          " Style
          lv_style_guid = lo_column->get_column_style_guid( ).                      "ins issue #157 -  set column style
          CLEAR ls_style_mapping.
          READ TABLE styles_mapping INTO ls_style_mapping WITH KEY guid = lv_style_guid.
          IF sy-subrc = 0.                                                                                     "ins issue #295
            lv_value = ls_style_mapping-style.                                                                 "ins issue #295
            SHIFT lv_value RIGHT DELETING TRAILING space.
            SHIFT lv_value LEFT DELETING LEADING space.
            lo_element_2->set_attribute_ns( name  = lc_xml_attr_style
                                            value = lv_value ).
          ENDIF.                                                                                              "ins issue #237

          lo_element->append_child( new_child = lo_element_2 ). " col node
        ENDWHILE.
*    ELSE.                                                                      "del issue #157  -  set sheet style ( add missing columns
*      IF io_worksheet->zif_excel_sheet_properties~get_style( ) IS NOT INITIAL. "del issue #157  -  set sheet style ( add missing columns
* Begin of insertion issue #157 -  set sheet style ( add missing columns
      ENDIF.
* Always pass through this coding
      IF io_worksheet->zif_excel_sheet_properties~get_style( ) IS NOT INITIAL.
        DATA: lts_sorted_columns TYPE SORTED TABLE OF zexcel_cell_column WITH UNIQUE KEY table_line.
        TYPES: BEGIN OF ty_missing_columns,
                 first_column TYPE zexcel_cell_column,
                 last_column  TYPE zexcel_cell_column,
               END OF ty_missing_columns.
        DATA: t_missing_columns TYPE STANDARD TABLE OF ty_missing_columns WITH NON-UNIQUE DEFAULT KEY,
              missing_column    LIKE LINE OF t_missing_columns.

* First collect columns that were already handled before.  The rest has to be inserted now
        lo_column_iterator = io_worksheet->get_columns_iterator( ).
        WHILE lo_column_iterator->has_next( ) = abap_true.
          lo_column ?= lo_column_iterator->get_next( ).
          DATA column_index TYPE int4.
          column_index = lo_column->get_column_index( ).
          lv_column = zcl_excel_common=>convert_column2int( column_index ).
          INSERT lv_column INTO TABLE lts_sorted_columns.
        ENDWHILE.

* Now find all columns that were missing so far
        missing_column-first_column = 1.
        LOOP AT lts_sorted_columns INTO lv_column.
          IF lv_column > missing_column-first_column.
            missing_column-last_column = lv_column - 1.
            APPEND missing_column TO t_missing_columns.
          ENDIF.
          missing_column-first_column = lv_column + 1.
        ENDLOOP.
        missing_column-last_column = zcl_excel_common=>c_excel_sheet_max_col.
        APPEND missing_column TO t_missing_columns.
* Now apply stylesetting ( and other defaults - I copy it from above.  Whoever programmed that seems to know what to do  :o)
        LOOP AT t_missing_columns INTO missing_column.
* End of insertion issue #157 -  set column style
          lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_col
                                                             parent = lo_document ).
*        lv_value = zcl_excel_common=>c_excel_sheet_min_col."del issue #157  -  set sheet style ( add missing columns
          lv_value = missing_column-first_column.             "ins issue #157  -  set sheet style ( add missing columns
          CONDENSE lv_value.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_min
                                          value = lv_value ).
*        lv_value = zcl_excel_common=>c_excel_sheet_max_col."del issue #157  -  set sheet style ( add missing columns
          lv_value = missing_column-last_column.              "ins issue #157  -  set sheet style ( add missing columns
          CONDENSE lv_value.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_max
                                          value = lv_value ).
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_width
                                          value = lc_xml_attr_defaultwidth ).
          lv_style_guid = io_worksheet->zif_excel_sheet_properties~get_style( ).
          READ TABLE styles_mapping INTO ls_style_mapping WITH KEY guid = lv_style_guid.
          lv_value = ls_style_mapping-style.
          CONDENSE lv_value.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_style
                                          value = lv_value ).
          lo_element->append_child( new_child = lo_element_2 ). " col node
        ENDLOOP.      "ins issue #157  -  set sheet style ( add missing columns

      ENDIF.
*--------------------------------------------------------------------*
* issue #367 add feature hide columns from
*--------------------------------------------------------------------*
      IF io_worksheet->zif_excel_sheet_properties~hide_columns_from IS NOT INITIAL.
        lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_col
                                                           parent = lo_document ).
        lv_value = zcl_excel_common=>convert_column2int( io_worksheet->zif_excel_sheet_properties~hide_columns_from ).
        CONDENSE lv_value NO-GAPS.
        lo_element_2->set_attribute_ns( name  = lc_xml_attr_min
                                        value = lv_value ).
        lo_element_2->set_attribute_ns( name  = lc_xml_attr_max
                                        value = '16384' ).
        lo_element_2->set_attribute_ns( name  = lc_xml_attr_hidden
                                        value = '1' ).
        lo_element->append_child( new_child = lo_element_2 ). " col node
      ENDIF.

      lo_element_root->append_child( new_child = lo_element ). " cols node
    ENDIF.

*--------------------------------------------------------------------*
* Sheet content - use own method to create this
*--------------------------------------------------------------------*
    lo_element = create_xl_sheet_sheet_data( io_worksheet         = io_worksheet
                                             io_document          = lo_document )  .

    lo_autofilters = excel->get_autofilters_reference( ).
    lo_autofilter  = lo_autofilters->get( io_worksheet = io_worksheet ) .
    lo_element_root->append_child( new_child = lo_element ). " sheetData node

*< Begin of insertion Issue #572 - Protect sheet with filter caused Excel error
* Autofilter must be set AFTER sheet protection in XML
    IF io_worksheet->zif_excel_sheet_protection~protected EQ abap_true.
      " sheetProtection node
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_sheetprotection
                                                       parent = lo_document ).
      MOVE io_worksheet->zif_excel_sheet_protection~password TO lv_value.
      IF lv_value IS NOT INITIAL.
        lo_element->set_attribute_ns( name  = lc_xml_attr_password
                                      value = lv_value ).
      ENDIF.
      lv_value = io_worksheet->zif_excel_sheet_protection~auto_filter.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_autofilter
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~delete_columns.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_deletecolumns
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~delete_rows.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_deleterows
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~format_cells.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_formatcells
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~format_columns.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_formatcolumns
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~format_rows.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_formatrows
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~insert_columns.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_insertcolumns
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~insert_hyperlinks.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_inserthyperlinks
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~insert_rows.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_insertrows
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~objects.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_objects
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~pivot_tables.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_pivottables
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~scenarios.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_scenarios
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~select_locked_cells.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_selectlockedcells
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~select_unlocked_cells.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_selectunlockedcell
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~sheet.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_sheet
                                    value = lv_value ).
      lv_value = io_worksheet->zif_excel_sheet_protection~sort.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_sort
                                    value = lv_value ).

      lo_element_root->append_child( new_child = lo_element ).
    ENDIF.
*> End of insertion Issue #572 - Protect sheet with filter caused Excel error

    IF lo_autofilter IS BOUND.
* Create node autofilter
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_autofilter
                                                       parent = lo_document ).
      lv_ref = lo_autofilter->get_filter_range( ) .
      CONDENSE lv_ref NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_ref
                                    value = lv_ref ).
      lt_values = lo_autofilter->get_values( ) .
      IF lt_values IS NOT INITIAL.
* If we filter we need to set the filter mode to 1.
        lo_element_2 = lo_document->find_from_name( name   = lc_xml_node_sheetpr ).
        lo_element_2->set_attribute_ns( name  = lc_xml_attr_filtermode
                                        value = '1' ).
* Create node filtercolumn
        CLEAR lv_column.
        LOOP AT lt_values INTO ls_values.
          IF ls_values-column <> lv_column.
            IF lv_column IS NOT INITIAL.
              lo_element_2->append_child( new_child = lo_element_3 ).
              lo_element->append_child( new_child = lo_element_2 ).
            ENDIF.
            lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_filtercolumn
                                                               parent = lo_element ).
            lv_column   = ls_values-column - lo_autofilter->filter_area-col_start.
            lv_value = lv_column.
            CONDENSE lv_value NO-GAPS.
            lo_element_2->set_attribute_ns( name  = lc_xml_attr_colid
                                            value = lv_value ).
            lo_element_3 = lo_document->create_simple_element( name   = lc_xml_node_filters
                                                               parent = lo_element_2 ).
            lv_column = ls_values-column.
          ENDIF.
          lo_element_4 = lo_document->create_simple_element( name   = lc_xml_node_filter
                                                             parent = lo_element_3 ).
          lo_element_4->set_attribute_ns( name  = lc_xml_attr_val
                                          value = ls_values-value ).
          lo_element_3->append_child( new_child = lo_element_4 ). " value node
        ENDLOOP.
        lo_element_2->append_child( new_child = lo_element_3 ).
        lo_element->append_child( new_child = lo_element_2 ).
      ENDIF.
      lo_element_root->append_child( new_child = lo_element ).
    ENDIF.

*< Comment for Issue #572 - Protect sheet with filter caused Excel error
*  IF io_worksheet->zif_excel_sheet_protection~protected EQ abap_true.
*   " sheetProtection node
*    lo_element = lo_document->create_simple_element( name   = lc_xml_node_sheetprotection
*                                                     parent = lo_document ).
*    MOVE io_worksheet->zif_excel_sheet_protection~password TO lv_value.
*    IF lv_value IS NOT INITIAL.
*      lo_element->set_attribute_ns( name  = lc_xml_attr_password
*                                    value = lv_value ).
*    ENDIF.
*    lv_value = io_worksheet->zif_excel_sheet_protection~auto_filter.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_autofilter
*                                  value = lv_value ).
*    lv_value = io_worksheet->zif_excel_sheet_protection~delete_columns.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_deletecolumns
*                                  value = lv_value ).
*    lv_value = io_worksheet->zif_excel_sheet_protection~delete_rows.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_deleterows
*                                  value = lv_value ).
*    lv_value = io_worksheet->zif_excel_sheet_protection~format_cells.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_formatcells
*                                  value = lv_value ).
*    lv_value = io_worksheet->zif_excel_sheet_protection~format_columns.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_formatcolumns
*                                  value = lv_value ).
*    lv_value = io_worksheet->zif_excel_sheet_protection~format_rows.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_formatrows
*                                  value = lv_value ).
*    lv_value = io_worksheet->zif_excel_sheet_protection~insert_columns.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_insertcolumns
*                                  value = lv_value ).
*    lv_value = io_worksheet->zif_excel_sheet_protection~insert_hyperlinks.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_inserthyperlinks
*                                  value = lv_value ).
*    lv_value = io_worksheet->zif_excel_sheet_protection~insert_rows.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_insertrows
*                                  value = lv_value ).
*    lv_value = io_worksheet->zif_excel_sheet_protection~objects.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_objects
*                                  value = lv_value ).
*   lv_value = io_worksheet->zif_excel_sheet_protection~pivot_tables.
*   CONDENSE lv_value NO-GAPS.
*   lo_element->set_attribute_ns( name  = lc_xml_attr_pivottables
*                                  value = lv_value ).
*    lv_value = io_worksheet->zif_excel_sheet_protection~scenarios.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_scenarios
*                                  value = lv_value ).
*    lv_value = io_worksheet->zif_excel_sheet_protection~select_locked_cells.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_selectlockedcells
*                                  value = lv_value ).
*    lv_value = io_worksheet->zif_excel_sheet_protection~select_unlocked_cells.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_selectunlockedcell
*                                  value = lv_value ).
*    lv_value = io_worksheet->zif_excel_sheet_protection~sheet.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_sheet
*                                  value = lv_value ).
*    lv_value = io_worksheet->zif_excel_sheet_protection~sort.
*    CONDENSE lv_value NO-GAPS.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_sort
*                                  value = lv_value ).
*
*    lo_element_root->append_child( new_child = lo_element ).
*  ENDIF.
*> End of Comment for Issue #572 - Protect sheet with filter caused Excel error
    " Merged cells
    lt_range_merge = io_worksheet->get_merge( ).
    IF lt_range_merge IS NOT INITIAL.
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_mergecells
                                                       parent = lo_document ).
      DESCRIBE TABLE lt_range_merge LINES merge_count.
      lv_value = merge_count.
      CONDENSE lv_value.
      lo_element->set_attribute_ns( name  = lc_xml_attr_count
                                    value = lv_value ).
      LOOP AT lt_range_merge ASSIGNING <fs_range_merge>.
        lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_mergecell
                                                           parent = lo_document ).

        lo_element_2->set_attribute_ns( name  = lc_xml_attr_ref
                                        value = <fs_range_merge> ).
        lo_element->append_child( new_child = lo_element_2 ).
        lo_element_root->append_child( new_child = lo_element ).
        io_worksheet->delete_merge( ).
      ENDLOOP.
    ENDIF.

    " Conditional formatting node
    lo_iterator = io_worksheet->get_style_cond_iterator( ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_style_cond ?= lo_iterator->if_object_collection_iterator~get_next( ).
      IF lo_style_cond->rule IS INITIAL.
        CONTINUE.
      ENDIF.
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_condformatting
                                                       parent = lo_document ).
      lv_value = lo_style_cond->get_dimension_range( ) .
      lo_element->set_attribute_ns( name  = lc_xml_attr_sqref
                                    value = lv_value ).

      " cfRule node
      lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_cfrule
                                                       parent = lo_document ).
      lv_value = lo_style_cond->rule.
      lo_element_2->set_attribute_ns( name  = lc_xml_attr_type
                                      value = lv_value ).
      lv_value = lo_style_cond->priority.
      SHIFT lv_value RIGHT DELETING TRAILING space.
      SHIFT lv_value LEFT DELETING LEADING space.
      lo_element_2->set_attribute_ns( name  = lc_xml_attr_priority
                                      value = lv_value ).

      CASE lo_style_cond->rule.
          " Start >> Databar by Albert Lladanosa
        WHEN zcl_excel_style_cond=>c_rule_databar.

          ls_databar = lo_style_cond->mode_databar.

          CLEAR lt_cfvo.
          lo_element_3 = lo_document->create_simple_element( name = lc_xml_node_databar
                                                             parent = lo_document ).

          MOVE ls_databar-cfvo1_value TO ls_cfvo-value.
          MOVE ls_databar-cfvo1_type  TO ls_cfvo-type.
          APPEND ls_cfvo TO lt_cfvo.

          MOVE ls_databar-cfvo2_value TO ls_cfvo-value.
          MOVE ls_databar-cfvo2_type  TO ls_cfvo-type.
          APPEND ls_cfvo TO lt_cfvo.

          LOOP AT lt_cfvo INTO ls_cfvo.
            " cfvo node
            lo_element_4 = lo_document->create_simple_element( name = lc_xml_node_cfvo
                                                               parent = lo_document ).
            lv_value = ls_cfvo-type.
            lo_element_4->set_attribute_ns( name = lc_xml_attr_type
                                            value = lv_value ).
            lv_value = ls_cfvo-value.
            lo_element_4->set_attribute_ns( name = lc_xml_attr_val
                                            value = lv_value ).
            lo_element_3->append_child( new_child = lo_element_4 ). " cfvo node
          ENDLOOP.

          lo_element_4 = lo_document->create_simple_element( name = lc_xml_node_color
                                                             parent = lo_document ).
          lv_value = ls_databar-colorrgb.
          lo_element_4->set_attribute_ns( name = lc_xml_attr_tabcolor_rgb
                                          value = lv_value ).

          lo_element_3->append_child( new_child = lo_element_4 ). " color node

          lo_element_2->append_child( new_child = lo_element_3 ). " databar node
          " End << Databar by Albert Lladanosa

        WHEN zcl_excel_style_cond=>c_rule_colorscale.

          ls_colorscale = lo_style_cond->mode_colorscale.

          CLEAR: lt_cfvo, lt_colors.
          lo_element_3 = lo_document->create_simple_element( name = lc_xml_node_colorscale
                                                             parent = lo_document ).

          MOVE ls_colorscale-cfvo1_value TO ls_cfvo-value.
          MOVE ls_colorscale-cfvo1_type  TO ls_cfvo-type.
          APPEND ls_cfvo TO lt_cfvo.

          MOVE ls_colorscale-cfvo2_value TO ls_cfvo-value.
          MOVE ls_colorscale-cfvo2_type  TO ls_cfvo-type.
          APPEND ls_cfvo TO lt_cfvo.

          MOVE ls_colorscale-cfvo3_value TO ls_cfvo-value.
          MOVE ls_colorscale-cfvo3_type  TO ls_cfvo-type.
          APPEND ls_cfvo TO lt_cfvo.

          APPEND ls_colorscale-colorrgb1 TO lt_colors.
          APPEND ls_colorscale-colorrgb2 TO lt_colors.
          APPEND ls_colorscale-colorrgb3 TO lt_colors.

          LOOP AT lt_cfvo INTO ls_cfvo.

            IF ls_cfvo IS INITIAL.
              CONTINUE.
            ENDIF.

            " cfvo node
            lo_element_4 = lo_document->create_simple_element( name = lc_xml_node_cfvo
                                                               parent = lo_document ).
            lv_value = ls_cfvo-type.
            lo_element_4->set_attribute_ns( name = lc_xml_attr_type
                                            value = lv_value ).
            lv_value = ls_cfvo-value.
            lo_element_4->set_attribute_ns( name = lc_xml_attr_val
                                            value = lv_value ).
            lo_element_3->append_child( new_child = lo_element_4 ). " cfvo node
          ENDLOOP.
          LOOP AT lt_colors INTO ls_colors.

            IF ls_colors IS INITIAL.
              CONTINUE.
            ENDIF.

            lo_element_4 = lo_document->create_simple_element( name = lc_xml_node_color
                                                               parent = lo_document ).
            lv_value = ls_colors-colorrgb.
            lo_element_4->set_attribute_ns( name = lc_xml_attr_tabcolor_rgb
                                            value = lv_value ).

            lo_element_3->append_child( new_child = lo_element_4 ). " color node
          ENDLOOP.

          lo_element_2->append_child( new_child = lo_element_3 ). " databar node

        WHEN zcl_excel_style_cond=>c_rule_iconset.

          ls_iconset = lo_style_cond->mode_iconset.

          CLEAR lt_cfvo.
          " iconset node
          lo_element_3 = lo_document->create_simple_element( name   = lc_xml_node_iconset
                                                             parent = lo_document ).
          IF ls_iconset-iconset NE zcl_excel_style_cond=>c_iconset_3trafficlights.
            lv_value = ls_iconset-iconset.
            lo_element_3->set_attribute_ns( name  = lc_xml_attr_iconset
                                            value = lv_value ).
          ENDIF.

          " Set the showValue attribute
          lv_value = ls_iconset-showvalue.
          lo_element_3->set_attribute_ns( name  = lc_xml_attr_showvalue
                                          value = lv_value ).

          CASE ls_iconset-iconset.
            WHEN zcl_excel_style_cond=>c_iconset_3trafficlights2 OR
                 zcl_excel_style_cond=>c_iconset_3arrows OR
                 zcl_excel_style_cond=>c_iconset_3arrowsgray OR
                 zcl_excel_style_cond=>c_iconset_3flags OR
                 zcl_excel_style_cond=>c_iconset_3signs OR
                 zcl_excel_style_cond=>c_iconset_3symbols OR
                 zcl_excel_style_cond=>c_iconset_3symbols2 OR
                 zcl_excel_style_cond=>c_iconset_3trafficlights OR
                 zcl_excel_style_cond=>c_iconset_3trafficlights2.
              MOVE ls_iconset-cfvo1_value TO ls_cfvo-value.
              MOVE ls_iconset-cfvo1_type  TO ls_cfvo-type.
              APPEND ls_cfvo TO lt_cfvo.
              MOVE ls_iconset-cfvo2_value TO ls_cfvo-value.
              MOVE ls_iconset-cfvo2_type  TO ls_cfvo-type.
              APPEND ls_cfvo TO lt_cfvo.
              MOVE ls_iconset-cfvo3_value TO ls_cfvo-value.
              MOVE ls_iconset-cfvo3_type  TO ls_cfvo-type.
              APPEND ls_cfvo TO lt_cfvo.
            WHEN zcl_excel_style_cond=>c_iconset_4arrows OR
                 zcl_excel_style_cond=>c_iconset_4arrowsgray OR
                 zcl_excel_style_cond=>c_iconset_4rating OR
                 zcl_excel_style_cond=>c_iconset_4redtoblack OR
                 zcl_excel_style_cond=>c_iconset_4trafficlights.
              MOVE ls_iconset-cfvo1_value TO ls_cfvo-value.
              MOVE ls_iconset-cfvo1_type  TO ls_cfvo-type.
              APPEND ls_cfvo TO lt_cfvo.
              MOVE ls_iconset-cfvo2_value TO ls_cfvo-value.
              MOVE ls_iconset-cfvo2_type  TO ls_cfvo-type.
              APPEND ls_cfvo TO lt_cfvo.
              MOVE ls_iconset-cfvo3_value TO ls_cfvo-value.
              MOVE ls_iconset-cfvo3_type  TO ls_cfvo-type.
              APPEND ls_cfvo TO lt_cfvo.
              MOVE ls_iconset-cfvo4_value TO ls_cfvo-value.
              MOVE ls_iconset-cfvo4_type  TO ls_cfvo-type.
              APPEND ls_cfvo TO lt_cfvo.
            WHEN zcl_excel_style_cond=>c_iconset_5arrows OR
                 zcl_excel_style_cond=>c_iconset_5arrowsgray OR
                 zcl_excel_style_cond=>c_iconset_5quarters OR
                 zcl_excel_style_cond=>c_iconset_5rating.
              MOVE ls_iconset-cfvo1_value TO ls_cfvo-value.
              MOVE ls_iconset-cfvo1_type  TO ls_cfvo-type.
              APPEND ls_cfvo TO lt_cfvo.
              MOVE ls_iconset-cfvo2_value TO ls_cfvo-value.
              MOVE ls_iconset-cfvo2_type  TO ls_cfvo-type.
              APPEND ls_cfvo TO lt_cfvo.
              MOVE ls_iconset-cfvo3_value TO ls_cfvo-value.
              MOVE ls_iconset-cfvo3_type  TO ls_cfvo-type.
              APPEND ls_cfvo TO lt_cfvo.
              MOVE ls_iconset-cfvo4_value TO ls_cfvo-value.
              MOVE ls_iconset-cfvo4_type  TO ls_cfvo-type.
              APPEND ls_cfvo TO lt_cfvo.
              MOVE ls_iconset-cfvo5_value TO ls_cfvo-value.
              MOVE ls_iconset-cfvo5_type  TO ls_cfvo-type.
              APPEND ls_cfvo TO lt_cfvo.
            WHEN OTHERS.
              CLEAR lt_cfvo.
          ENDCASE.

          LOOP AT lt_cfvo INTO ls_cfvo.
            " cfvo node
            lo_element_4 = lo_document->create_simple_element( name   = lc_xml_node_cfvo
                                                               parent = lo_document ).
            lv_value = ls_cfvo-type.
            lo_element_4->set_attribute_ns( name  = lc_xml_attr_type
                                            value = lv_value ).
            lv_value = ls_cfvo-value.
            lo_element_4->set_attribute_ns( name  = lc_xml_attr_val
                                            value = lv_value ).
            lo_element_3->append_child( new_child = lo_element_4 ). " cfvo node
          ENDLOOP.


          lo_element_2->append_child( new_child = lo_element_3 ). " iconset node

        WHEN zcl_excel_style_cond=>c_rule_cellis.
          ls_cellis = lo_style_cond->mode_cellis.
          READ TABLE me->styles_cond_mapping INTO ls_style_cond_mapping WITH KEY guid = ls_cellis-cell_style.
          lv_value = ls_style_cond_mapping-dxf.
          CONDENSE lv_value.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_dxfid
                                          value = lv_value ).
          lv_value = ls_cellis-operator.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_operator
                                          value = lv_value ).
          " formula node
          lo_element_3 = lo_document->create_simple_element( name   = lc_xml_node_formula
                                                             parent = lo_document ).
          lv_value = ls_cellis-formula.
          lo_element_3->set_value( value = lv_value ).
          lo_element_2->append_child( new_child = lo_element_3 ). " formula node
          IF ls_cellis-formula2 IS NOT INITIAL.
            lv_value = ls_cellis-formula2.
            lo_element_3 = lo_document->create_simple_element( name   = lc_xml_node_formula
                                                               parent = lo_document ).
            lo_element_3->set_value( value = lv_value ).
            lo_element_2->append_child( new_child = lo_element_3 ). " 2nd formula node
          ENDIF.

        WHEN zcl_excel_style_cond=>c_rule_expression.
          ls_expression = lo_style_cond->mode_expression.
          READ TABLE me->styles_cond_mapping INTO ls_style_cond_mapping WITH KEY guid = ls_expression-cell_style.
          lv_value = ls_style_cond_mapping-dxf.
          CONDENSE lv_value.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_dxfid
                                          value = lv_value ).
          " formula node
          lo_element_3 = lo_document->create_simple_element( name   = lc_xml_node_formula
                                                             parent = lo_document ).
          lv_value = ls_expression-formula.
          lo_element_3->set_value( value = lv_value ).
          lo_element_2->append_child( new_child = lo_element_3 ). " formula node

* begin of ins issue #366 - missing conditional rules: top10
        WHEN zcl_excel_style_cond=>c_rule_top10.
          ls_conditional_top10 = lo_style_cond->mode_top10.
          READ TABLE me->styles_cond_mapping INTO ls_style_cond_mapping WITH KEY guid = ls_conditional_top10-cell_style.
          lv_value = ls_style_cond_mapping-dxf.
          CONDENSE lv_value.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_dxfid
                                          value = lv_value ).
          lv_value = ls_conditional_top10-topxx_count.
          CONDENSE lv_value.
          lo_element_2->set_attribute_ns( name  = 'rank'
                                          value = lv_value ).
          IF ls_conditional_top10-bottom = 'X'.
            lo_element_2->set_attribute_ns( name  = 'bottom'
                                            value = '1' ).
          ENDIF.
          IF ls_conditional_top10-percent = 'X'.
            lo_element_2->set_attribute_ns( name  = 'percent'
                                            value ='1' ).
          ENDIF.

        WHEN zcl_excel_style_cond=>c_rule_above_average.
          ls_conditional_above_avg = lo_style_cond->mode_above_average.
          READ TABLE me->styles_cond_mapping INTO ls_style_cond_mapping WITH KEY guid = ls_conditional_above_avg-cell_style.
          lv_value = ls_style_cond_mapping-dxf.
          CONDENSE lv_value.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_dxfid
                                          value = lv_value ).

          IF ls_conditional_above_avg-above_average IS INITIAL. " = below average
            lo_element_2->set_attribute_ns( name  = 'aboveAverage'
                                            value = '0' ).
          ENDIF.
          IF ls_conditional_above_avg-equal_average = 'X'. " = equal average also
            lo_element_2->set_attribute_ns( name  = 'equalAverage'
                                            value = '1' ).
          ENDIF.
          IF ls_conditional_above_avg-standard_deviation <> 0. " standard deviation instead of value
            lv_value = ls_conditional_above_avg-standard_deviation.
            lo_element_2->set_attribute_ns( name  = 'stdDev'
                                            value = lv_value ).
          ENDIF.

* end of ins issue #366 - missing conditional rules: top10

      ENDCASE.

      lo_element->append_child( new_child = lo_element_2 ). " cfRule node

      lo_element_root->append_child( new_child = lo_element ). " Conditional formatting node
    ENDWHILE.

    IF io_worksheet->get_data_validations_size( ) GT 0.
      " dataValidations node
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_datavalidations
                                                       parent = lo_document ).
      " Conditional formatting node
      lo_iterator = io_worksheet->get_data_validations_iterator( ).
      WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
        lo_data_validation ?= lo_iterator->if_object_collection_iterator~get_next( ).
        " dataValidation node
        lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_datavalidation
                                                           parent = lo_document ).
        lv_value = lo_data_validation->type.
        lo_element_2->set_attribute_ns( name  = lc_xml_attr_type
                                        value = lv_value ).
        IF NOT lo_data_validation->operator IS INITIAL.
          lv_value = lo_data_validation->operator.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_operator
                                          value = lv_value ).
        ENDIF.
        IF lo_data_validation->allowblank EQ abap_true.
          lv_value = '1'.
        ELSE.
          lv_value = '0'.
        ENDIF.
        lo_element_2->set_attribute_ns( name  = lc_xml_attr_allowblank
                                        value = lv_value ).
        IF lo_data_validation->showinputmessage EQ abap_true.
          lv_value = '1'.
        ELSE.
          lv_value = '0'.
        ENDIF.
        lo_element_2->set_attribute_ns( name  = lc_xml_attr_showinputmessage
                                        value = lv_value ).
        IF lo_data_validation->showerrormessage EQ abap_true.
          lv_value = '1'.
        ELSE.
          lv_value = '0'.
        ENDIF.
        lo_element_2->set_attribute_ns( name  = lc_xml_attr_showerrormessage
                                        value = lv_value ).
        IF lo_data_validation->showdropdown EQ abap_true.
          lv_value = '1'.
        ELSE.
          lv_value = '0'.
        ENDIF.
        lo_element_2->set_attribute_ns( name  = lc_xml_attr_showdropdown
                                        value = lv_value ).
        IF NOT lo_data_validation->errortitle IS INITIAL.
          lv_value = lo_data_validation->errortitle.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_errortitle
                                          value = lv_value ).
        ENDIF.
        IF NOT lo_data_validation->error IS INITIAL.
          lv_value = lo_data_validation->error.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_error
                                          value = lv_value ).
        ENDIF.
        IF NOT lo_data_validation->prompttitle IS INITIAL.
          lv_value = lo_data_validation->prompttitle.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_prompttitle
                                          value = lv_value ).
        ENDIF.
        IF NOT lo_data_validation->prompt IS INITIAL.
          lv_value = lo_data_validation->prompt.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_prompt
                                          value = lv_value ).
        ENDIF.
        lv_cell_row_s = lo_data_validation->cell_row.
        CONDENSE lv_cell_row_s.
        CONCATENATE lo_data_validation->cell_column lv_cell_row_s INTO lv_value.
        IF lo_data_validation->cell_row_to IS NOT INITIAL.
          lv_cell_row_s = lo_data_validation->cell_row_to.
          CONDENSE lv_cell_row_s.
          CONCATENATE lv_value ':' lo_data_validation->cell_column_to lv_cell_row_s INTO lv_value.
        ENDIF.
        lo_element_2->set_attribute_ns( name  = lc_xml_attr_sqref
                                        value = lv_value ).
        " formula1 node
        lo_element_3 = lo_document->create_simple_element( name   = lc_xml_node_formula1
                                                           parent = lo_document ).
        lv_value = lo_data_validation->formula1.
        lo_element_3->set_value( value = lv_value ).

        lo_element_2->append_child( new_child = lo_element_3 ). " formula1 node
        " formula2 node
        IF NOT lo_data_validation->formula2 IS INITIAL.
          lo_element_3 = lo_document->create_simple_element( name   = lc_xml_node_formula2
                                                             parent = lo_document ).
          lv_value = lo_data_validation->formula2.
          lo_element_3->set_value( value = lv_value ).

          lo_element_2->append_child( new_child = lo_element_3 ). " formula2 node
        ENDIF.

        lo_element->append_child( new_child = lo_element_2 ). " dataValidation node
      ENDWHILE.
      lo_element_root->append_child( new_child = lo_element ). " dataValidations node
    ENDIF.

    " Hyperlinks
    DATA: lv_hyperlinks_count TYPE i,
          lo_link             TYPE REF TO zcl_excel_hyperlink.

    lv_hyperlinks_count = io_worksheet->get_hyperlinks_size( ).
    IF lv_hyperlinks_count > 0.
      lo_element = lo_document->create_simple_element( name   = 'hyperlinks'
                                                        parent = lo_document ).

      lo_iterator = io_worksheet->get_hyperlinks_iterator( ).
      WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
        lo_link ?= lo_iterator->if_object_collection_iterator~get_next( ).

        lo_element_2 = lo_document->create_simple_element( name   = 'hyperlink'
                                                      parent = lo_element ).

        lv_value = lo_link->get_ref( ).
        lo_element_2->set_attribute_ns( name  = 'ref'
                                       value = lv_value ).

        IF lo_link->is_internal( ) = abap_true.
          lv_value = lo_link->get_url( ).
          lo_element_2->set_attribute_ns( name  = 'location'
                                       value = lv_value ).
        ELSE.
          ADD 1 TO lv_relation_id.

          lv_value = lv_relation_id.
          CONDENSE lv_value.
          CONCATENATE 'rId' lv_value INTO lv_value.

          lo_element_2->set_attribute_ns( name  = 'r:id'
                                        value = lv_value ).

        ENDIF.

        lo_element->append_child( new_child = lo_element_2 ).
      ENDWHILE.

      lo_element_root->append_child( new_child = lo_element ).
    ENDIF.


    " PrintOptions
    IF io_worksheet->print_gridlines                  = abap_true OR
       io_worksheet->sheet_setup->vertical_centered   = abap_true OR
       io_worksheet->sheet_setup->horizontal_centered = abap_true.
      lo_element = lo_document->create_simple_element( name   = 'printOptions'
                                                       parent = lo_document ).

      IF io_worksheet->print_gridlines = abap_true.
        lo_element->set_attribute_ns( name  = lc_xml_attr_gridlines
                                      value = 'true' ).
      ENDIF.

      IF io_worksheet->sheet_setup->horizontal_centered = abap_true.
        lo_element->set_attribute_ns( name  = 'horizontalCentered'
                                      value = 'true' ).
      ENDIF.

      IF io_worksheet->sheet_setup->vertical_centered = abap_true.
        lo_element->set_attribute_ns( name  = 'verticalCentered'
                                      value = 'true' ).
      ENDIF.

      lo_element_root->append_child( new_child = lo_element ).
    ENDIF.
    " pageMargins node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_pagemargins
                                                     parent = lo_document ).

    lv_value = io_worksheet->sheet_setup->margin_left.
    CONDENSE lv_value NO-GAPS.
    lo_element->set_attribute_ns( name  = lc_xml_attr_left
                                  value = lv_value ).
    lv_value = io_worksheet->sheet_setup->margin_right.
    CONDENSE lv_value NO-GAPS.
    lo_element->set_attribute_ns( name  = lc_xml_attr_right
                                  value = lv_value ).
    lv_value = io_worksheet->sheet_setup->margin_top.
    CONDENSE lv_value NO-GAPS.
    lo_element->set_attribute_ns( name  = lc_xml_attr_top
                                  value = lv_value ).
    lv_value = io_worksheet->sheet_setup->margin_bottom.
    CONDENSE lv_value NO-GAPS.
    lo_element->set_attribute_ns( name  = lc_xml_attr_bottom
                                  value = lv_value ).
    lv_value = io_worksheet->sheet_setup->margin_header.
    CONDENSE lv_value NO-GAPS.
    lo_element->set_attribute_ns( name  = lc_xml_attr_header
                                  value = lv_value ).
    lv_value = io_worksheet->sheet_setup->margin_footer.
    CONDENSE lv_value NO-GAPS.
    lo_element->set_attribute_ns( name  = lc_xml_attr_footer
                                  value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ). " pageMargins node

* pageSetup node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_pagesetup
                                                     parent = lo_document ).

    IF io_worksheet->sheet_setup->black_and_white IS NOT INITIAL.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_blackandwhite
                                    value = `1` ).
    ENDIF.

    IF io_worksheet->sheet_setup->cell_comments IS NOT INITIAL.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_cellcomments
                                    value = io_worksheet->sheet_setup->cell_comments ).
    ENDIF.

    IF io_worksheet->sheet_setup->copies IS NOT INITIAL.
      lv_value = io_worksheet->sheet_setup->copies.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_copies
                                    value = lv_value ).
    ENDIF.

    IF io_worksheet->sheet_setup->draft IS NOT INITIAL.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_draft
                                    value = `1` ).
    ENDIF.

    IF io_worksheet->sheet_setup->errors IS NOT INITIAL.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_errors
                                    value = io_worksheet->sheet_setup->errors ).
    ENDIF.

    IF io_worksheet->sheet_setup->first_page_number IS NOT INITIAL.
      lv_value = io_worksheet->sheet_setup->first_page_number.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_firstpagenumber
                                    value = lv_value ).
    ENDIF.

    IF io_worksheet->sheet_setup->fit_to_page IS NOT INITIAL.
      lv_value = io_worksheet->sheet_setup->fit_to_height.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_fittoheight
                                    value = lv_value ).
      lv_value = io_worksheet->sheet_setup->fit_to_width.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_fittowidth
                                    value = lv_value ).
    ENDIF.

    IF io_worksheet->sheet_setup->horizontal_dpi IS NOT INITIAL.
      lv_value = io_worksheet->sheet_setup->horizontal_dpi.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_horizontaldpi
                                    value = lv_value ).
    ENDIF.

    IF io_worksheet->sheet_setup->orientation IS NOT INITIAL.
      lv_value = io_worksheet->sheet_setup->orientation.
      lo_element->set_attribute_ns( name  = lc_xml_attr_orientation
                                    value = lv_value ).
    ENDIF.

    IF io_worksheet->sheet_setup->page_order IS NOT INITIAL.
      lo_element->set_attribute_ns( name  = lc_xml_attr_pageorder
                                    value = io_worksheet->sheet_setup->page_order ).
    ENDIF.

    IF io_worksheet->sheet_setup->paper_height IS NOT INITIAL.
      lv_value = io_worksheet->sheet_setup->paper_height.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_paperheight
                                    value = lv_value ).
    ENDIF.

    IF io_worksheet->sheet_setup->paper_size IS NOT INITIAL.
      lv_value = io_worksheet->sheet_setup->paper_size.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_papersize
                                    value = lv_value ).
    ENDIF.

    IF io_worksheet->sheet_setup->paper_width IS NOT INITIAL.
      lv_value = io_worksheet->sheet_setup->paper_width.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_paperwidth
                                    value = lv_value ).
    ENDIF.

    IF io_worksheet->sheet_setup->scale IS NOT INITIAL.
      lv_value = io_worksheet->sheet_setup->scale.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_scale
                                    value = lv_value ).
    ENDIF.

    IF io_worksheet->sheet_setup->use_first_page_num IS NOT INITIAL.
      lo_element->set_attribute_ns( name  = lc_xml_attr_usefirstpagenumber
                                    value = `1` ).
    ENDIF.

    IF io_worksheet->sheet_setup->use_printer_defaults IS NOT INITIAL.
      lo_element->set_attribute_ns( name  = lc_xml_attr_useprinterdefaults
                                    value = `1` ).
    ENDIF.

    IF io_worksheet->sheet_setup->vertical_dpi IS NOT INITIAL.
      lv_value = io_worksheet->sheet_setup->vertical_dpi.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_verticaldpi
                                    value = lv_value ).
    ENDIF.

    lo_element_root->append_child( new_child = lo_element ). " pageSetup node

* { headerFooter necessary?   >
    IF    io_worksheet->sheet_setup->odd_header IS NOT INITIAL
       OR io_worksheet->sheet_setup->odd_footer IS NOT INITIAL
       OR io_worksheet->sheet_setup->diff_oddeven_headerfooter = abap_true.

      lo_element = lo_document->create_simple_element( name   = lc_xml_node_headerfooter
                                                       parent = lo_document ).

      " Different header/footer for odd/even pages?
      IF io_worksheet->sheet_setup->diff_oddeven_headerfooter = abap_true.
        lo_element->set_attribute_ns( name  = lc_xml_attr_differentoddeven
                                      value = '1' ).
      ENDIF.

      " OddHeader
      CLEAR: lv_value.
      io_worksheet->sheet_setup->get_header_footer_string( IMPORTING ep_odd_header = lv_value ) .
      IF lv_value IS NOT INITIAL.
        lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_oddheader
                                                           parent = lo_document ).
        lo_element_2->set_value( value = lv_value ).
        lo_element->append_child( new_child = lo_element_2 ).
      ENDIF.

      " OddFooter
      CLEAR: lv_value.
      io_worksheet->sheet_setup->get_header_footer_string( IMPORTING ep_odd_footer = lv_value ) .
      IF lv_value IS NOT INITIAL.
        lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_oddfooter
                                                           parent = lo_document ).
        lo_element_2->set_value( value = lv_value ).
        lo_element->append_child( new_child = lo_element_2 ).
      ENDIF.

      " evenHeader
      CLEAR: lv_value.
      io_worksheet->sheet_setup->get_header_footer_string( IMPORTING ep_even_header = lv_value ) .
      IF lv_value IS NOT INITIAL.
        lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_evenheader
                                                           parent = lo_document ).
        lo_element_2->set_value( value = lv_value ).
        lo_element->append_child( new_child = lo_element_2 ).
      ENDIF.

      " evenFooter
      CLEAR: lv_value.
      io_worksheet->sheet_setup->get_header_footer_string( IMPORTING ep_even_footer = lv_value ) .
      IF lv_value IS NOT INITIAL.
        lo_element_2 = lo_document->create_simple_element( name   = lc_xml_node_evenfooter
                                                           parent = lo_document ).
        lo_element_2->set_value( value = lv_value ).
        lo_element->append_child( new_child = lo_element_2 ).
      ENDIF.


      lo_element_root->append_child( new_child = lo_element ). " headerFooter

    ENDIF.

* issue #377 pagebreaks
    TRY.
        create_xl_sheet_pagebreaks( io_document  = lo_document
                                    io_parent    = lo_element_root
                                    io_worksheet = io_worksheet     )  .
      CATCH zcx_excel. " Ignore Hyperlink reading errors - pass everything we were able to identify
    ENDTRY.

* drawing
    DATA: lo_drawings TYPE REF TO zcl_excel_drawings.

    lo_drawings = io_worksheet->get_drawings( ).
    IF lo_drawings->is_empty( ) = abap_false.
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_drawing
                                                       parent = lo_document ).
      ADD 1 TO lv_relation_id.

      lv_value = lv_relation_id.
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.
      lo_element->set_attribute( name = 'r:id'
                                 value = lv_value ).
      lo_element_root->append_child( new_child = lo_element ).
    ENDIF.

* Begin - Add - Issue #180
    " (Legacy) drawings for comments
    DATA: lo_drawing_for_comments  TYPE REF TO zcl_excel_comments.

    lo_drawing_for_comments = io_worksheet->get_comments( ).
    IF lo_drawing_for_comments->is_empty( ) = abap_false.
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_drawing_for_cmt
                                                       parent = lo_document ).
      ADD 1 TO lv_relation_id.  " +1 for legacyDrawings

      lv_value = lv_relation_id.
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.
      lo_element->set_attribute( name = 'r:id'
                                 value = lv_value ).
      lo_element_root->append_child( new_child = lo_element ).

      ADD 1 TO lv_relation_id.  " +1 for comments (not referenced in XL sheet but let's reserve the rId)
    ENDIF.
* End   - Add - Issue #180

* Header/Footer Image
    DATA: lt_drawings TYPE zexcel_t_drawings.
    lt_drawings = io_worksheet->get_header_footer_drawings( ).
    IF lines( lt_drawings ) > 0. "Header or footer image exist
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_drawing_for_hd_ft
                                                       parent = lo_document ).
      ADD 1 TO lv_relation_id.  " +1 for legacyDrawings
      lv_value = lv_relation_id.
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.
      lo_element->set_attribute( name = 'r:id'
                                 value = lv_value ).
      lo_element_root->append_child( new_child = lo_element ).
      ADD 1 TO lv_relation_id.  " +1 for comments (not referenced in XL sheet but let's reserve the rId)
    ENDIF.
*

* tables
    DATA lv_table_count TYPE i.

    lv_table_count = io_worksheet->get_tables_size( ).
    IF lv_table_count > 0.
      lo_element = lo_document->create_simple_element( name   = 'tableParts'
                                                        parent = lo_document ).
      lv_value = lv_table_count.
      CONDENSE lv_value.
      lo_element->set_attribute_ns( name  = 'count'
                                     value = lv_value ).

      lo_iterator = io_worksheet->get_tables_iterator( ).
      WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
        lo_table ?= lo_iterator->if_object_collection_iterator~get_next( ).
        ADD 1 TO lv_relation_id.

        lv_value = lv_relation_id.
        CONDENSE lv_value.
        CONCATENATE 'rId' lv_value INTO lv_value.
        lo_element_2 = lo_document->create_simple_element( name   = 'tablePart'
                                                        parent = lo_element ).
        lo_element_2->set_attribute_ns( name  = 'r:id'
                                       value = lv_value ).
        lo_element->append_child( new_child = lo_element_2 ).

      ENDWHILE.

      lo_element_root->append_child( new_child = lo_element ).

    ENDIF.

**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_SHEET_PAGEBREAKS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_DOCUMENT                    TYPE REF TO IF_IXML_DOCUMENT
* | [--->] IO_PARENT                      TYPE REF TO IF_IXML_ELEMENT
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [!CX!] ZCX_EXCEL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_sheet_pagebreaks.
    DATA: lo_pagebreaks     TYPE REF TO zcl_excel_worksheet_pagebreaks,
          lt_pagebreaks     TYPE zcl_excel_worksheet_pagebreaks=>tt_pagebreak_at,
          lt_rows           TYPE HASHED TABLE OF int4 WITH UNIQUE KEY table_line,
          lt_columns        TYPE HASHED TABLE OF int4 WITH UNIQUE KEY table_line,

          lo_node_rowbreaks TYPE REF TO if_ixml_element,
          lo_node_colbreaks TYPE REF TO if_ixml_element,
          lo_node_break     TYPE REF TO if_ixml_element,

          lv_value          TYPE string.


    FIELD-SYMBOLS: <ls_pagebreak> LIKE LINE OF lt_pagebreaks.

    lo_pagebreaks = io_worksheet->get_pagebreaks( ).
    CHECK lo_pagebreaks IS BOUND.

    lt_pagebreaks = lo_pagebreaks->get_all_pagebreaks( ).
    CHECK lt_pagebreaks IS NOT INITIAL.  " No need to proceed if don't have any pagebreaks.

    lo_node_rowbreaks = io_document->create_simple_element( name   = 'rowBreaks'
                                                            parent = io_document ).

    lo_node_colbreaks = io_document->create_simple_element( name   = 'colBreaks'
                                                            parent = io_document ).


    LOOP AT lt_pagebreaks ASSIGNING <ls_pagebreak>.

* Count how many rows and columns need to be broken
      INSERT <ls_pagebreak>-cell_row    INTO TABLE lt_rows.
      IF sy-subrc = 0. " New
        lv_value = <ls_pagebreak>-cell_row.
        CONDENSE lv_value.

        lo_node_break = io_document->create_simple_element( name   = 'brk'
                                                            parent = io_document ).
        lo_node_break->set_attribute( name = 'id'  value = lv_value ).
        lo_node_break->set_attribute( name = 'man' value = '1' ).      " Manual break
        lo_node_break->set_attribute( name = 'max' value = '16383' ).  " Max columns

        lo_node_rowbreaks->append_child( new_child = lo_node_break ).
      ENDIF.

      INSERT <ls_pagebreak>-cell_column INTO TABLE lt_columns.
      IF sy-subrc = 0. " New
        lv_value = <ls_pagebreak>-cell_column.
        CONDENSE lv_value.

        lo_node_break = io_document->create_simple_element( name   = 'brk'
                                                            parent = io_document ).
        lo_node_break->set_attribute( name = 'id'  value = lv_value ).
        lo_node_break->set_attribute( name = 'man' value = '1' ).        " Manual break
        lo_node_break->set_attribute( name = 'max' value = '1048575' ).  " Max rows

        lo_node_colbreaks->append_child( new_child = lo_node_break ).
      ENDIF.


    ENDLOOP.

    lv_value = lines( lt_rows ).
    CONDENSE lv_value.
    lo_node_rowbreaks->set_attribute( name = 'count'             value = lv_value ).
    lo_node_rowbreaks->set_attribute( name = 'manualBreakCount'  value = lv_value ).

    lv_value = lines( lt_rows ).
    CONDENSE lv_value.
    lo_node_colbreaks->set_attribute( name = 'count'             value = lv_value ).
    lo_node_colbreaks->set_attribute( name = 'manualBreakCount'  value = lv_value ).




    io_parent->append_child( new_child = lo_node_rowbreaks ).
    io_parent->append_child( new_child = lo_node_colbreaks ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_SHEET_RELS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [--->] IV_DRAWING_INDEX               TYPE        I
* | [--->] IV_COMMENT_INDEX               TYPE        I
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_sheet_rels.


** Constant node name
    DATA: lc_xml_node_relationships      TYPE string VALUE 'Relationships',
          lc_xml_node_relationship       TYPE string VALUE 'Relationship',
          " Node attributes
          lc_xml_attr_id                 TYPE string VALUE 'Id',
          lc_xml_attr_type               TYPE string VALUE 'Type',
          lc_xml_attr_target             TYPE string VALUE 'Target',
          lc_xml_attr_target_mode        TYPE string VALUE 'TargetMode',
          lc_xml_val_external            TYPE string VALUE 'External',
          " Node namespace
          lc_xml_node_rels_ns            TYPE string VALUE 'http://schemas.openxmlformats.org/package/2006/relationships',
          lc_xml_node_rid_table_tp       TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/table',
          lc_xml_node_rid_printer_tp     TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/printerSettings',
          lc_xml_node_rid_drawing_tp     TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',
          lc_xml_node_rid_comment_tp     TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments',        " (+) Issue #180
          lc_xml_node_rid_drawing_cmt_tp TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing',      " (+) Issue #180
          lc_xml_node_rid_link_tp        TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink'.

    DATA: lo_document     TYPE REF TO if_ixml_document,
          lo_element_root TYPE REF TO if_ixml_element,
          lo_element      TYPE REF TO if_ixml_element,
          lo_iterator     TYPE REF TO cl_object_collection_iterator,
          lo_table        TYPE REF TO zcl_excel_table,
          lo_link         TYPE REF TO zcl_excel_hyperlink.

    DATA: lv_value         TYPE string,
          lv_relation_id   TYPE i,
          lv_index_str     TYPE string,
          lv_comment_index TYPE i.

**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

**********************************************************************
* STEP 3: Create main node relationships
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_relationships
                                                           parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns'
                                       value = lc_xml_node_rels_ns ).

**********************************************************************
* STEP 4: Create subnodes

    " Add sheet Relationship nodes here
    lv_relation_id = 0.
    lo_iterator = io_worksheet->get_hyperlinks_iterator( ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_link ?= lo_iterator->if_object_collection_iterator~get_next( ).
      CHECK lo_link->is_internal( ) = abap_false.  " issue #340 - don't put internal links here
      ADD 1 TO lv_relation_id.

      lv_value = lv_relation_id.
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.

      lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
                                                       parent = lo_document ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_id
                                    value = lv_value ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                    value = lc_xml_node_rid_link_tp ).

      lv_value = lo_link->get_url( ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_target
                                    value = lv_value ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_target_mode
                                    value = lc_xml_val_external ).
      lo_element_root->append_child( new_child = lo_element ).
    ENDWHILE.

* drawing
    DATA: lo_drawings TYPE REF TO zcl_excel_drawings.

    lo_drawings = io_worksheet->get_drawings( ).
    IF lo_drawings->is_empty( ) = abap_false.
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
                                                       parent = lo_document ).
      ADD 1 TO lv_relation_id.

      lv_value = lv_relation_id.
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.
      lo_element->set_attribute_ns( name  = lc_xml_attr_id
                                    value = lv_value ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                    value = lc_xml_node_rid_drawing_tp ).

      lv_index_str = iv_drawing_index.
      CONDENSE lv_index_str NO-GAPS.
      MOVE me->c_xl_drawings TO lv_value.
      REPLACE 'xl' WITH '..' INTO lv_value.
      REPLACE '#' WITH lv_index_str INTO lv_value.
      lo_element->set_attribute_ns( name  = lc_xml_attr_target
                                value = lv_value ).
      lo_element_root->append_child( new_child = lo_element ).
    ENDIF.

* Begin - Add - Issue #180
    DATA: lo_comments  TYPE REF TO zcl_excel_comments.

    lv_comment_index = iv_comment_index.

    lo_comments = io_worksheet->get_comments( ).
    IF lo_comments->is_empty( ) = abap_false.
      " Drawing for comment
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
                                                       parent = lo_document ).

      ADD 1 TO lv_relation_id.
      ADD 1 TO lv_comment_index.

      lv_value = lv_relation_id.
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.
      lo_element->set_attribute_ns( name  = lc_xml_attr_id
                                    value = lv_value ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                    value = lc_xml_node_rid_drawing_cmt_tp ).

      lv_index_str = iv_comment_index.
      CONDENSE lv_index_str NO-GAPS.
      MOVE me->cl_xl_drawing_for_comments TO lv_value.
      REPLACE 'xl' WITH '..' INTO lv_value.
      REPLACE '#' WITH lv_index_str INTO lv_value.
      lo_element->set_attribute_ns( name  = lc_xml_attr_target
                                    value = lv_value ).
      lo_element_root->append_child( new_child = lo_element ).

      " Comment
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
                                                       parent = lo_document ).
      ADD 1 TO lv_relation_id.

      lv_value = lv_relation_id.
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.
      lo_element->set_attribute_ns( name  = lc_xml_attr_id
                                    value = lv_value ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                    value = lc_xml_node_rid_comment_tp ).

      lv_index_str = iv_comment_index.
      CONDENSE lv_index_str NO-GAPS.
      MOVE me->c_xl_comments TO lv_value.
      REPLACE 'xl' WITH '..' INTO lv_value.
      REPLACE '#' WITH lv_index_str INTO lv_value.
      lo_element->set_attribute_ns( name  = lc_xml_attr_target
                                value = lv_value ).
      lo_element_root->append_child( new_child = lo_element ).
    ENDIF.
* End   - Add - Issue #180

**********************************************************************
* header footer image
    DATA: lt_drawings TYPE zexcel_t_drawings.
    lt_drawings = io_worksheet->get_header_footer_drawings( ).
    IF lines( lt_drawings ) > 0. "Header or footer image exist
      ADD 1 TO lv_relation_id.
      " Drawing for comment/header/footer
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
                                                       parent = lo_document ).
      lv_value = lv_relation_id.
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.
      lo_element->set_attribute_ns( name  = lc_xml_attr_id
                                    value = lv_value ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                    value = lc_xml_node_rid_drawing_cmt_tp ).

      lv_index_str = lv_comment_index.
      CONDENSE lv_index_str NO-GAPS.
      MOVE me->cl_xl_drawing_for_comments TO lv_value.
      REPLACE 'xl' WITH '..' INTO lv_value.
      REPLACE '#' WITH lv_index_str INTO lv_value.
      lo_element->set_attribute_ns( name  = lc_xml_attr_target
                                    value = lv_value ).
      lo_element_root->append_child( new_child = lo_element ).
    ENDIF.
*** End Header Footer
**********************************************************************


    lo_iterator = io_worksheet->get_tables_iterator( ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_table ?= lo_iterator->if_object_collection_iterator~get_next( ).
      ADD 1 TO lv_relation_id.

      lv_value = lv_relation_id.
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.

      lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
                                                       parent = lo_document ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_id
                                    value = lv_value ).
      lo_element->set_attribute_ns( name  = lc_xml_attr_type
                                    value = lc_xml_node_rid_table_tp ).

      lv_value = lo_table->get_name( ).
      CONCATENATE '../tables/' lv_value '.xml' INTO lv_value.
      lo_element->set_attribute_ns( name  = lc_xml_attr_target
                                value = lv_value ).
      lo_element_root->append_child( new_child = lo_element ).
    ENDWHILE.

*  IF io_worksheet->get_print_settings( )->is_empty( ) = abap_false.
*    ADD 1 TO lv_relation_id.
*    lv_value = lv_relation_id.
*    CONDENSE lv_value.
*    CONCATENATE 'rId' lv_value INTO lv_value.
*
*    lo_element = lo_document->create_simple_element( name   = lc_xml_node_relationship
*                                                     parent = lo_document ).
*    lo_element->set_attribute_ns( name  = lc_xml_attr_id
*                                  value = lv_value ).
*    lo_element->set_attribute_ns( name  = lc_xml_attr_type
*                                  value = lc_xml_node_rid_printer_tp ).
*
*    lv_index_str = iv_printer_index.
*    CONDENSE lv_index_str NO-GAPS.
*    MOVE me->c_xl_printersettings TO lv_value.
*    REPLACE 'xl' WITH '..' INTO lv_value.
*    REPLACE '#' WITH lv_index_str INTO lv_value.
*    lo_element->set_attribute_ns( name  = lc_xml_attr_target
*                                  value = lv_value ).
*
*    lo_element_root->append_child( new_child = lo_element ).
*  ENDIF.

**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_SHEET_SHEET_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_DOCUMENT                    TYPE REF TO IF_IXML_DOCUMENT
* | [--->] IO_WORKSHEET                   TYPE REF TO ZCL_EXCEL_WORKSHEET
* | [<-()] RV_IXML_SHEET_DATA_ROOT        TYPE REF TO IF_IXML_ELEMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_sheet_sheet_data.

    TYPES: BEGIN OF lty_table_area,
             left   TYPE i,
             right  TYPE i,
             top    TYPE i,
             bottom TYPE i,
           END OF lty_table_area.

    CONSTANTS: lc_dummy_cell_content       TYPE zexcel_s_cell_data-cell_value VALUE '})~~~ This is a dummy value for ABAP2XLSX and you should never find this in a real excelsheet Ihope'.

    CONSTANTS: lc_xml_node_sheetdata TYPE string VALUE 'sheetData',   " SheetData tag
               lc_xml_node_row       TYPE string VALUE 'row',         " Row tag
               lc_xml_attr_r         TYPE string VALUE 'r',           " Cell:  row-attribute
               lc_xml_attr_spans     TYPE string VALUE 'spans',       " Cell: spans-attribute
               lc_xml_node_c         TYPE string VALUE 'c',           " Cell tag
               lc_xml_node_v         TYPE string VALUE 'v',           " Cell: value
               lc_xml_node_f         TYPE string VALUE 'f',           " Cell: formula
               lc_xml_attr_s         TYPE string VALUE 's',           " Cell: style
               lc_xml_attr_t         TYPE string VALUE 't'.           " Cell: type

    DATA: col_count              TYPE int4,
          lo_autofilters         TYPE REF TO zcl_excel_autofilters,
          lo_autofilter          TYPE REF TO zcl_excel_autofilter,
          l_autofilter_hidden    TYPE flag,
          lt_values              TYPE zexcel_t_autofilter_values,
          ls_values              TYPE zexcel_s_autofilter_values,
          ls_area                TYPE zexcel_s_autofilter_area,

          lo_iterator            TYPE REF TO cl_object_collection_iterator,
          lo_table               TYPE REF TO zcl_excel_table,
          lt_table_areas         TYPE SORTED TABLE OF lty_table_area WITH NON-UNIQUE KEY left right top bottom,
          ls_table_area          LIKE LINE OF lt_table_areas,
          lo_column              TYPE REF TO zcl_excel_column,

          ls_sheet_content       LIKE LINE OF io_worksheet->sheet_content,
          ls_sheet_content_empty LIKE LINE OF io_worksheet->sheet_content,
          lv_current_row         TYPE i,
          lv_next_row            TYPE i,
          lv_last_row            TYPE i,

*        lts_row_dimensions     TYPE zexcel_t_worksheet_rowdimensio,
          lo_row_iterator        TYPE REF TO cl_object_collection_iterator,
          lo_row                 TYPE REF TO zcl_excel_row,
          lo_row_empty           TYPE REF TO zcl_excel_row,
          lts_row_outlines       TYPE zcl_excel_worksheet=>mty_ts_outlines_row,

          ls_last_row            TYPE zexcel_s_cell_data,
          ls_style_mapping       TYPE zexcel_s_styles_mapping,

          lo_element_2           TYPE REF TO if_ixml_element,
          lo_element_3           TYPE REF TO if_ixml_element,
          lo_element_4           TYPE REF TO if_ixml_element,

          lv_value               TYPE string,
          lv_style_guid          TYPE zexcel_cell_style.

    FIELD-SYMBOLS: <ls_sheet_content> TYPE zexcel_s_cell_data,
                   <ls_row_outline>   LIKE LINE OF lts_row_outlines.


    " sheetData node
    rv_ixml_sheet_data_root = io_document->create_simple_element( name   = lc_xml_node_sheetdata
                                                                  parent = io_document ).

    " Get column count
    col_count      = io_worksheet->get_highest_column( ).
    " Get autofilter
*lv_guid        = io_worksheet->get_guid( ) .
    lo_autofilters = excel->get_autofilters_reference( ).
    lo_autofilter  = lo_autofilters->get( io_worksheet = io_worksheet ) .
    IF lo_autofilter IS BOUND.
      lt_values           = lo_autofilter->get_values( ) .
      ls_area             = lo_autofilter->get_filter_area( ) .
      l_autofilter_hidden = abap_true. " First defautl is not showing
    ENDIF.
*--------------------------------------------------------------------*
*issue #220 - If cell in tables-area don't use default from row or column or sheet - Coding 1 - start
*--------------------------------------------------------------------*
*Build table to hold all table-areas attached to this sheet
    lo_iterator = io_worksheet->get_tables_iterator( ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_table ?= lo_iterator->if_object_collection_iterator~get_next( ).
      ls_table_area-left   = zcl_excel_common=>convert_column2int( lo_table->settings-top_left_column ).
      ls_table_area-right  = lo_table->get_right_column_integer( ).
      ls_table_area-top    = lo_table->settings-top_left_row.
      ls_table_area-bottom = lo_table->get_bottom_row_integer( ).
      INSERT ls_table_area INTO TABLE lt_table_areas.
    ENDWHILE.
*--------------------------------------------------------------------*
*issue #220 - If cell in tables-area don't use default from row or column or sheet - Coding 1 - end
*--------------------------------------------------------------------*
*We have problems when the first rows or trailing rows are not set but we have rowinformation
*to solve this we add dummycontent into first and last line that will not be set
*Set first line if necessary
    READ TABLE io_worksheet->sheet_content TRANSPORTING NO FIELDS WITH KEY cell_row = 1.
    IF sy-subrc <> 0.
      ls_sheet_content_empty-cell_row      = 1.
      ls_sheet_content_empty-cell_column   = 1.
      ls_sheet_content_empty-cell_value    = lc_dummy_cell_content.
      INSERT ls_sheet_content_empty INTO TABLE io_worksheet->sheet_content.
    ENDIF.
*Set last line if necessary
*Last row with cell content
    lv_last_row = io_worksheet->get_highest_row( ).
*Last line with row-information set directly ( like line height, hidden-status ... )

    lo_row_iterator = io_worksheet->get_rows_iterator( ).
    WHILE lo_row_iterator->has_next( ) = abap_true.
      lo_row ?= lo_row_iterator->get_next( ).
      IF lo_row->get_row_index( ) > lv_last_row.
        lv_last_row = lo_row->get_row_index( ).
      ENDIF.
    ENDWHILE.

*Last line with row-information set indirectly by row outline
    lts_row_outlines = io_worksheet->get_row_outlines( ).
    LOOP AT lts_row_outlines ASSIGNING <ls_row_outline>.
      IF <ls_row_outline>-collapsed = 'X'.
        lv_current_row = <ls_row_outline>-row_to + 1.  " collapsed-status may be set on following row
      ELSE.
        lv_current_row = <ls_row_outline>-row_to.  " collapsed-status may be set on following row
      ENDIF.
      IF lv_current_row > lv_last_row.
        lv_last_row = lv_current_row.
      ENDIF.
    ENDLOOP.
    READ TABLE io_worksheet->sheet_content TRANSPORTING NO FIELDS WITH KEY cell_row = lv_last_row.
    IF sy-subrc <> 0.
      ls_sheet_content_empty-cell_row      = lv_last_row.
      ls_sheet_content_empty-cell_column   = 1.
      ls_sheet_content_empty-cell_value    = lc_dummy_cell_content.
      INSERT ls_sheet_content_empty INTO TABLE io_worksheet->sheet_content.
    ENDIF.

    CLEAR ls_sheet_content.
    LOOP AT io_worksheet->sheet_content INTO ls_sheet_content.
      IF lt_values IS INITIAL. " no values attached to autofilter  " issue #368 autofilter filtering too much
        CLEAR l_autofilter_hidden.
      ELSE.
        READ TABLE lt_values INTO ls_values WITH KEY column = ls_last_row-cell_column.
        IF sy-subrc = 0 AND ls_values-value = ls_last_row-cell_value.
          CLEAR l_autofilter_hidden.
        ENDIF.
      ENDIF.
      CLEAR ls_style_mapping.
*Create row element
*issues #346,#154, #195  - problems when we have information in row_dimension but no cell content in that row
*Get next line that may have to be added.  If we have empty lines this is the next line after previous cell content
*Otherwise it is the line of the current cell content
      lv_current_row = ls_last_row-cell_row + 1.
      IF lv_current_row > ls_sheet_content-cell_row.
        lv_current_row = ls_sheet_content-cell_row.
      ENDIF.
*Fill in empty lines if necessary - assign an emtpy sheet content
      lv_next_row = lv_current_row.
      WHILE lv_next_row <= ls_sheet_content-cell_row.
        lv_current_row = lv_next_row.
        lv_next_row = lv_current_row + 1.
        IF lv_current_row = ls_sheet_content-cell_row. " cell value found in this row
          ASSIGN ls_sheet_content TO <ls_sheet_content>.
        ELSE.
*Check if empty row is really necessary - this is basically the case when we have information in row_dimension
          lo_row_empty = io_worksheet->get_row( lv_current_row ).
          CHECK lo_row_empty->get_row_height( )                 >= 0          OR
                lo_row_empty->get_collapsed( io_worksheet )      = abap_true  OR
                lo_row_empty->get_outline_level( io_worksheet )  > 0          OR
                lo_row_empty->get_xf_index( )                   <> 0.
          " Dummyentry A1
          ls_sheet_content_empty-cell_row      = lv_current_row.
          ls_sheet_content_empty-cell_column   = 1.
          ASSIGN ls_sheet_content_empty TO <ls_sheet_content>.
        ENDIF.

        IF ls_last_row-cell_row NE <ls_sheet_content>-cell_row.
          IF lo_autofilter IS BOUND.
            IF ls_area-row_start >=  ls_last_row-cell_row OR " One less for header
              ls_area-row_end   < ls_last_row-cell_row .
              CLEAR l_autofilter_hidden.
            ENDIF.
          ELSE.
            CLEAR l_autofilter_hidden.
          ENDIF.
          IF ls_last_row-cell_row IS NOT INITIAL.
            " Row visibility of previos row.
            IF lo_row->get_visible( io_worksheet ) = abap_false OR
               l_autofilter_hidden = abap_true.
              lo_element_2->set_attribute_ns( name  = 'hidden' value = 'true' ).
            ENDIF.
*          lv_xstring_partial = render_ixml_element_no_header( lo_element_2 ).
*          CONCATENATE lv_xstring lv_xstring_partial
*              INTO lv_xstring IN BYTE MODE.
            rv_ixml_sheet_data_root->append_child( new_child = lo_element_2 ). " row node
          ENDIF.
          " Add new row
          lo_element_2 = io_document->create_simple_element( name   = lc_xml_node_row
                                                             parent = io_document ).
          " r
          lv_value = <ls_sheet_content>-cell_row.
          SHIFT lv_value RIGHT DELETING TRAILING space.
          SHIFT lv_value LEFT DELETING LEADING space.

          lo_element_2->set_attribute_ns( name  = lc_xml_attr_r
                                          value = lv_value ).
          " Spans
          lv_value = col_count.
          CONCATENATE '1:' lv_value INTO lv_value.
          SHIFT lv_value RIGHT DELETING TRAILING space.
          SHIFT lv_value LEFT DELETING LEADING space.
          lo_element_2->set_attribute_ns( name  = lc_xml_attr_spans
                                          value = lv_value ).
          lo_row = io_worksheet->get_row( <ls_sheet_content>-cell_row ).
          " Do we need the row dimension attributes?
          IF lo_row->get_row_height( )   >= 0 OR
             lo_row->get_collapsed( io_worksheet )     = abap_true OR
             lo_row->get_outline_level( io_worksheet ) > 0 OR
             lo_row->get_xf_index( )     <> 0 OR
             l_autofilter_hidden = abap_true.
            " Row dimensions
            IF lo_row->get_row_height( ) >= 0.
              lo_element_2->set_attribute_ns( name  = 'customHeight' value = '1' ).
              lv_value = lo_row->get_row_height( ).
              lo_element_2->set_attribute_ns( name  = 'ht' value = lv_value ).
            ENDIF.
            " Collapsed
            IF lo_row->get_collapsed( io_worksheet ) = abap_true.
              lo_element_2->set_attribute_ns( name  = 'collapsed' value = 'true' ).
            ENDIF.
            " Outline level
            IF lo_row->get_outline_level( io_worksheet ) > 0.
              lv_value = lo_row->get_outline_level( io_worksheet ).
              SHIFT lv_value RIGHT DELETING TRAILING space.
              SHIFT lv_value LEFT DELETING LEADING space.
              lo_element_2->set_attribute_ns( name  = 'outlineLevel' value = lv_value ).
            ENDIF.
            " Style
            IF lo_row->get_xf_index( ) <> 0.
              lv_value = lo_row->get_xf_index( ).
              lo_element_2->set_attribute_ns( name  = 's' value = lv_value ).
              lo_element_2->set_attribute_ns( name  = 'customFormat'  value = '1' ).
            ENDIF.
          ENDIF.
          IF lt_values IS INITIAL. " no values attached to autofilter  " issue #368 autofilter filtering too much
            CLEAR l_autofilter_hidden.
          ELSE.
            l_autofilter_hidden = abap_true. " First default is not showing
          ENDIF.
        ELSE.

        ENDIF.
      ENDWHILE.

      lo_element_3 = io_document->create_simple_element( name   = lc_xml_node_c
                                                         parent = io_document ).

      lo_element_3->set_attribute_ns( name  = lc_xml_attr_r
                                      value = <ls_sheet_content>-cell_coords ).

*begin of change issue #157 - allow column cellstyle
*if no cellstyle is set, look into column, then into sheet
      IF <ls_sheet_content>-cell_style IS NOT INITIAL.
        lv_style_guid = <ls_sheet_content>-cell_style.
      ELSE.
*--------------------------------------------------------------------*
*issue #220 - If cell in tables-area don't use default from row or column or sheet - Coding 2 - start
*--------------------------------------------------------------------*
*Check if cell in any of the table areas
        LOOP AT lt_table_areas TRANSPORTING NO FIELDS WHERE top    <= <ls_sheet_content>-cell_row
                                                        AND bottom >= <ls_sheet_content>-cell_row
                                                        AND left   <= <ls_sheet_content>-cell_column
                                                        AND right  >= <ls_sheet_content>-cell_column.
          EXIT.
        ENDLOOP.
        IF sy-subrc = 0.
          CLEAR lv_style_guid.     " No style --> EXCEL will use built-in-styles as declared in the tables-section
        ELSE.
*--------------------------------------------------------------------*
*issue #220 - If cell in tables-area don't use default from row or column or sheet - Coding 2 - end
*--------------------------------------------------------------------*
          lv_style_guid = io_worksheet->zif_excel_sheet_properties~get_style( ).
          lo_column ?= io_worksheet->get_column( <ls_sheet_content>-cell_column ).
          IF lo_column->get_column_index( ) = <ls_sheet_content>-cell_column.
            lv_style_guid = lo_column->get_column_style_guid( ).
            IF lv_style_guid IS INITIAL.
              lv_style_guid = io_worksheet->zif_excel_sheet_properties~get_style( ).
            ENDIF.
          ENDIF.

*--------------------------------------------------------------------*
*issue #220 - If cell in tables-area don't use default from row or column or sheet - Coding 3 - start
*--------------------------------------------------------------------*
        ENDIF.
*--------------------------------------------------------------------*
*issue #220 - If cell in tables-area don't use default from row or column or sheet - Coding 3 - end
*--------------------------------------------------------------------*
      ENDIF.
*  IF <ls_sheet_content>-cell_style IS NOT INITIAL.
*    READ TABLE styles_mapping INTO ls_style_mapping WITH KEY guid = <ls_sheet_content>-cell_style.
      IF lv_style_guid IS NOT INITIAL.
        READ TABLE styles_mapping INTO ls_style_mapping WITH KEY guid = lv_style_guid.
*end of change issue #157 - allow column cellstyles
        lv_value = ls_style_mapping-style.
        SHIFT lv_value RIGHT DELETING TRAILING space.
        SHIFT lv_value LEFT DELETING LEADING space.
        lo_element_3->set_attribute_ns( name  = lc_xml_attr_s
                                        value = lv_value ).
      ENDIF.

      " For cells with formula ignore the value - Excel will calculate it
      IF <ls_sheet_content>-cell_formula IS NOT INITIAL.
        " fomula node
        lo_element_4 = io_document->create_simple_element( name   = lc_xml_node_f
                                                           parent = io_document ).
        lv_value = <ls_sheet_content>-cell_formula.
        CONDENSE lv_value.
        lo_element_4->set_value( value = lv_value ).
        lo_element_3->append_child( new_child = lo_element_4 ). " fomula node
      ELSEIF <ls_sheet_content>-cell_value IS NOT INITIAL           "cell can have just style or formula
         AND <ls_sheet_content>-cell_value <> lc_dummy_cell_content.
        IF <ls_sheet_content>-data_type IS NOT INITIAL.
          IF <ls_sheet_content>-data_type EQ 's_leading_blanks'.
            lo_element_3->set_attribute_ns( name  = lc_xml_attr_t
                                            value = 's' ).
          ELSE.
            lo_element_3->set_attribute_ns( name  = lc_xml_attr_t
                                            value = <ls_sheet_content>-data_type ).
          ENDIF.
        ENDIF.

        " value node
        lo_element_4 = io_document->create_simple_element( name   = lc_xml_node_v
                                                           parent = io_document ).

        IF <ls_sheet_content>-data_type EQ 's' OR <ls_sheet_content>-data_type EQ 's_leading_blanks'.
          lv_value = me->get_shared_string_index( <ls_sheet_content>-cell_value ).
          CONDENSE lv_value.
          lo_element_4->set_value( value = lv_value ).
        ELSE.
          lv_value = <ls_sheet_content>-cell_value.
          CONDENSE lv_value.
          lo_element_4->set_value( value = lv_value ).
        ENDIF.

        lo_element_3->append_child( new_child = lo_element_4 ). " value node
      ENDIF.

      lo_element_2->append_child( new_child = lo_element_3 ). " column node
      ls_last_row = <ls_sheet_content>.
    ENDLOOP.
    IF sy-subrc = 0.
      READ TABLE lt_values INTO ls_values WITH KEY column = ls_last_row-cell_column.
      IF sy-subrc = 0 AND ls_values-value = ls_last_row-cell_value.
        CLEAR l_autofilter_hidden.
      ENDIF.
      IF lo_autofilter IS BOUND.
        IF ls_area-row_start >=  ls_last_row-cell_row OR " One less for header
          ls_area-row_end   < ls_last_row-cell_row .
          CLEAR l_autofilter_hidden.
        ENDIF.
      ELSE.
        CLEAR l_autofilter_hidden.
      ENDIF.
      " Row visibility of previos row.
      IF lo_row->get_visible( ) = abap_false OR
         l_autofilter_hidden = abap_true.
        lo_element_2->set_attribute_ns( name  = 'hidden' value = 'true' ).
      ENDIF.
*    lv_xstring_partial = render_ixml_element_no_header( lo_element_2 ).
*    CONCATENATE lv_xstring lv_xstring_partial
*        INTO lv_xstring IN BYTE MODE.
      rv_ixml_sheet_data_root->append_child( new_child = lo_element_2 ). " row node
    ENDIF.
    DELETE io_worksheet->sheet_content WHERE cell_value = lc_dummy_cell_content.  " Get rid of dummyentries

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_STYLES
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_styles.
*--------------------------------------------------------------------*
* ToDos:
*        2do§1   dxfs-cellstyles are used in conditional formats:
*                CellIs, Expression, top10 ( forthcoming above average as well )
*                create own method to write dsfx-cellstyle to be reuseable by all these
*--------------------------------------------------------------------*


** Constant node name
    CONSTANTS:  lc_xml_node_stylesheet        TYPE string VALUE 'styleSheet',
                " font
                lc_xml_node_fonts             TYPE string VALUE 'fonts',
                lc_xml_node_font              TYPE string VALUE 'font',
                lc_xml_node_b                 TYPE string VALUE 'b',            "bold
                lc_xml_node_i                 TYPE string VALUE 'i',            "italic
                lc_xml_node_u                 TYPE string VALUE 'u',            "underline
                lc_xml_node_strike            TYPE string VALUE 'strike',       "strikethrough
                lc_xml_node_sz                TYPE string VALUE 'sz',
                lc_xml_node_color             TYPE string VALUE 'color',
                lc_xml_node_name              TYPE string VALUE 'name',
                lc_xml_node_family            TYPE string VALUE 'family',
                lc_xml_node_scheme            TYPE string VALUE 'scheme',
                " fill
                lc_xml_node_fills             TYPE string VALUE 'fills',
                lc_xml_node_fill              TYPE string VALUE 'fill',
                lc_xml_node_patternfill       TYPE string VALUE 'patternFill',
                lc_xml_node_fgcolor           TYPE string VALUE 'fgColor',
                lc_xml_node_bgcolor           TYPE string VALUE 'bgColor',
                lc_xml_node_gradientfill      TYPE string VALUE 'gradientFill',
                lc_xml_node_stop              TYPE string VALUE 'stop',
                " borders
                lc_xml_node_borders           TYPE string VALUE 'borders',
                lc_xml_node_border            TYPE string VALUE 'border',
                lc_xml_node_left              TYPE string VALUE 'left',
                lc_xml_node_right             TYPE string VALUE 'right',
                lc_xml_node_top               TYPE string VALUE 'top',
                lc_xml_node_bottom            TYPE string VALUE 'bottom',
                lc_xml_node_diagonal          TYPE string VALUE 'diagonal',
                " numfmt
                lc_xml_node_numfmts           TYPE string VALUE 'numFmts',
                lc_xml_node_numfmt            TYPE string VALUE 'numFmt',
                " Styles
                lc_xml_node_cellstylexfs      TYPE string VALUE 'cellStyleXfs',
                lc_xml_node_xf                TYPE string VALUE 'xf',
                lc_xml_node_cellxfs           TYPE string VALUE 'cellXfs',
                lc_xml_node_cellstyles        TYPE string VALUE 'cellStyles',
                lc_xml_node_cellstyle         TYPE string VALUE 'cellStyle',
                lc_xml_node_dxfs              TYPE string VALUE 'dxfs',
                lc_xml_node_tablestyles       TYPE string VALUE 'tableStyles',
                " Colors
                lc_xml_node_colors            TYPE string VALUE 'colors',
                lc_xml_node_indexedcolors     TYPE string VALUE 'indexedColors',
                lc_xml_node_rgbcolor          TYPE string VALUE 'rgbColor',
                lc_xml_node_mrucolors         TYPE string VALUE 'mruColors',
                " Alignment
                lc_xml_node_alignment         TYPE string VALUE 'alignment',
                " Protection
                lc_xml_node_protection        TYPE string VALUE 'protection',
                " Node attributes
                lc_xml_attr_count             TYPE string VALUE 'count',
                lc_xml_attr_val               TYPE string VALUE 'val',
                lc_xml_attr_theme             TYPE string VALUE 'theme',
                lc_xml_attr_rgb               TYPE string VALUE 'rgb',
                lc_xml_attr_indexed           TYPE string VALUE 'indexed',
                lc_xml_attr_tint              TYPE string VALUE 'tint',
                lc_xml_attr_style             TYPE string VALUE 'style',
                lc_xml_attr_position          TYPE string VALUE 'position',
                lc_xml_attr_degree            TYPE string VALUE 'degree',
                lc_xml_attr_patterntype       TYPE string VALUE 'patternType',
                lc_xml_attr_numfmtid          TYPE string VALUE 'numFmtId',
                lc_xml_attr_fontid            TYPE string VALUE 'fontId',
                lc_xml_attr_fillid            TYPE string VALUE 'fillId',
                lc_xml_attr_borderid          TYPE string VALUE 'borderId',
                lc_xml_attr_xfid              TYPE string VALUE 'xfId',
                lc_xml_attr_applynumberformat TYPE string VALUE 'applyNumberFormat',
                lc_xml_attr_applyprotection   TYPE string VALUE 'applyProtection',
                lc_xml_attr_applyfont         TYPE string VALUE 'applyFont',
                lc_xml_attr_applyfill         TYPE string VALUE 'applyFill',
                lc_xml_attr_applyborder       TYPE string VALUE 'applyBorder',
                lc_xml_attr_name              TYPE string VALUE 'name',
                lc_xml_attr_builtinid         TYPE string VALUE 'builtinId',
                lc_xml_attr_defaulttablestyle TYPE string VALUE 'defaultTableStyle',
                lc_xml_attr_defaultpivotstyle TYPE string VALUE 'defaultPivotStyle',
                lc_xml_attr_applyalignment    TYPE string VALUE 'applyAlignment',
                lc_xml_attr_horizontal        TYPE string VALUE 'horizontal',
                lc_xml_attr_formatcode        TYPE string VALUE 'formatCode',
                lc_xml_attr_vertical          TYPE string VALUE 'vertical',
                lc_xml_attr_wraptext          TYPE string VALUE 'wrapText',
                lc_xml_attr_textrotation      TYPE string VALUE 'textRotation',
                lc_xml_attr_shrinktofit       TYPE string VALUE 'shrinkToFit',
                lc_xml_attr_indent            TYPE string VALUE 'indent',
                lc_xml_attr_locked            TYPE string VALUE 'locked',
                lc_xml_attr_hidden            TYPE string VALUE 'hidden',
                lc_xml_attr_diagonalup        TYPE string VALUE 'diagonalUp',
                lc_xml_attr_diagonaldown      TYPE string VALUE 'diagonalDown',
                " Node namespace
                lc_xml_node_ns                TYPE string VALUE 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
                lc_xml_attr_type              TYPE string VALUE 'type',
                lc_xml_attr_bottom            TYPE string VALUE 'bottom',
                lc_xml_attr_top               TYPE string VALUE 'top',
                lc_xml_attr_right             TYPE string VALUE 'right',
                lc_xml_attr_left              TYPE string VALUE 'left'.

    DATA: lo_document        TYPE REF TO if_ixml_document,
          lo_element_root    TYPE REF TO if_ixml_element,
          lo_element_fonts   TYPE REF TO if_ixml_element,
          lo_element_font    TYPE REF TO if_ixml_element,
          lo_element_fills   TYPE REF TO if_ixml_element,
          lo_element_fill    TYPE REF TO if_ixml_element,
          lo_element_borders TYPE REF TO if_ixml_element,
          lo_element_border  TYPE REF TO if_ixml_element,
          lo_element_numfmts TYPE REF TO if_ixml_element,
          lo_element_numfmt  TYPE REF TO if_ixml_element,
          lo_element_cellxfs TYPE REF TO if_ixml_element,
          lo_element         TYPE REF TO if_ixml_element,
          lo_sub_element     TYPE REF TO if_ixml_element,
          lo_sub_element_2   TYPE REF TO if_ixml_element,
          lo_iterator        TYPE REF TO cl_object_collection_iterator,
          lo_iterator2       TYPE REF TO cl_object_collection_iterator,
          lo_worksheet       TYPE REF TO zcl_excel_worksheet,
          lo_style_cond      TYPE REF TO zcl_excel_style_cond,
          lo_style           TYPE REF TO zcl_excel_style.


    DATA: lt_fonts          TYPE zexcel_t_style_font,
          ls_font           TYPE zexcel_s_style_font,
          lt_fills          TYPE zexcel_t_style_fill,
          ls_fill           TYPE zexcel_s_style_fill,
          lt_borders        TYPE zexcel_t_style_border,
          ls_border         TYPE zexcel_s_style_border,
          lt_numfmts        TYPE zexcel_t_style_numfmt,
          ls_numfmt         TYPE zexcel_s_style_numfmt,
          lt_protections    TYPE zexcel_t_style_protection,
          ls_protection     TYPE zexcel_s_style_protection,
          lt_alignments     TYPE zexcel_t_style_alignment,
          ls_alignment      TYPE zexcel_s_style_alignment,
          lt_cellxfs        TYPE zexcel_t_cellxfs,
          ls_cellxfs        TYPE zexcel_s_cellxfs,
          ls_styles_mapping TYPE zexcel_s_styles_mapping,
          lt_colors         TYPE zexcel_t_style_color_argb,
          ls_color          LIKE LINE OF lt_colors.

    DATA: lv_value         TYPE string,
          lv_dfx_count     TYPE i,
          lv_fonts_count   TYPE i,
          lv_fills_count   TYPE i,
          lv_borders_count TYPE i,
          lv_cellxfs_count TYPE i.

    TYPES: BEGIN OF ts_built_in_format,
             num_format TYPE zexcel_number_format,
             id         TYPE sytabix,
           END OF ts_built_in_format.

    DATA: lt_built_in_num_formats TYPE HASHED TABLE OF ts_built_in_format WITH UNIQUE KEY num_format,
          ls_built_in_num_format  LIKE LINE OF lt_built_in_num_formats.
    FIELD-SYMBOLS: <ls_built_in_format> LIKE LINE OF lt_built_in_num_formats,
                   <ls_reader_built_in> LIKE LINE OF zcl_excel_style_number_format=>mt_built_in_num_formats.

**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

***********************************************************************
* STEP 3: Create main node relationships
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_stylesheet
                                                           parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns'
                                       value = lc_xml_node_ns ).

**********************************************************************
* STEP 4: Create subnodes

    lo_element_fonts = lo_document->create_simple_element( name   = lc_xml_node_fonts
                                                           parent = lo_document ).

    lo_element_fills = lo_document->create_simple_element( name   = lc_xml_node_fills
                                                           parent = lo_document ).

    lo_element_borders = lo_document->create_simple_element( name   = lc_xml_node_borders
                                                             parent = lo_document ).

    lo_element_cellxfs = lo_document->create_simple_element( name   = lc_xml_node_cellxfs
                                                             parent = lo_document ).

    lo_element_numfmts = lo_document->create_simple_element( name   = lc_xml_node_numfmts
                                                             parent = lo_document ).

* Prepare built-in number formats.
    LOOP AT zcl_excel_style_number_format=>mt_built_in_num_formats ASSIGNING <ls_reader_built_in>.
      ls_built_in_num_format-id         = <ls_reader_built_in>-id.
      ls_built_in_num_format-num_format = <ls_reader_built_in>-format->format_code.
      INSERT ls_built_in_num_format INTO TABLE lt_built_in_num_formats.
    ENDLOOP.
* Compress styles
    lo_iterator = excel->get_styles_iterator( ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_style ?= lo_iterator->if_object_collection_iterator~get_next( ).
      ls_font       = lo_style->font->get_structure( ).
      ls_fill       = lo_style->fill->get_structure( ).
      ls_border     = lo_style->borders->get_structure( ).
      ls_alignment  = lo_style->alignment->get_structure( ).
      ls_protection = lo_style->protection->get_structure( ).
      ls_numfmt     = lo_style->number_format->get_structure( ).

      CLEAR ls_cellxfs.


* Compress fonts
      READ TABLE lt_fonts FROM ls_font TRANSPORTING NO FIELDS.
      IF sy-subrc EQ 0.
        ls_cellxfs-fontid = sy-tabix.
      ELSE.
        APPEND ls_font TO lt_fonts.
        DESCRIBE TABLE lt_fonts LINES ls_cellxfs-fontid.
      ENDIF.
      SUBTRACT 1 FROM ls_cellxfs-fontid.

* Compress alignment
      READ TABLE lt_alignments FROM ls_alignment TRANSPORTING NO FIELDS.
      IF sy-subrc EQ 0.
        ls_cellxfs-alignmentid = sy-tabix.
      ELSE.
        APPEND ls_alignment TO lt_alignments.
        DESCRIBE TABLE lt_alignments LINES ls_cellxfs-alignmentid.
      ENDIF.
      SUBTRACT 1 FROM ls_cellxfs-alignmentid.

* Compress fills
      READ TABLE lt_fills FROM ls_fill TRANSPORTING NO FIELDS.
      IF sy-subrc EQ 0.
        ls_cellxfs-fillid = sy-tabix.
      ELSE.
        APPEND ls_fill TO lt_fills.
        DESCRIBE TABLE lt_fills LINES ls_cellxfs-fillid.
      ENDIF.
      SUBTRACT 1 FROM ls_cellxfs-fillid.

* Compress borders
      READ TABLE lt_borders FROM ls_border TRANSPORTING NO FIELDS.
      IF sy-subrc EQ 0.
        ls_cellxfs-borderid = sy-tabix.
      ELSE.
        APPEND ls_border TO lt_borders.
        DESCRIBE TABLE lt_borders LINES ls_cellxfs-borderid.
      ENDIF.
      SUBTRACT 1 FROM ls_cellxfs-borderid.

* Compress protection
      IF ls_protection-locked EQ c_on AND ls_protection-hidden EQ c_off.
        ls_cellxfs-applyprotection    = 0.
      ELSE.
        READ TABLE lt_protections FROM ls_protection TRANSPORTING NO FIELDS.
        IF sy-subrc EQ 0.
          ls_cellxfs-protectionid = sy-tabix.
        ELSE.
          APPEND ls_protection TO lt_protections.
          DESCRIBE TABLE lt_protections LINES ls_cellxfs-protectionid.
        ENDIF.
        ls_cellxfs-applyprotection    = 1.
      ENDIF.
      SUBTRACT 1 FROM ls_cellxfs-protectionid.

* Compress number formats

      "-----------
      IF ls_numfmt-numfmt NE zcl_excel_style_number_format=>c_format_date_std." and ls_numfmt-NUMFMT ne 'STD_NDEC'. " ALE Changes on going
        "---
        IF ls_numfmt IS NOT INITIAL.
* issue  #389 - Problem with built-in format ( those are not being taken account of )
* There are some internal number formats built-in into EXCEL
* Use these instead of duplicating the entries here, since they seem to be language-dependant and adjust to user settings in excel
          READ TABLE lt_built_in_num_formats ASSIGNING <ls_built_in_format> WITH TABLE KEY num_format = ls_numfmt-numfmt.
          IF sy-subrc = 0.
            ls_cellxfs-numfmtid = <ls_built_in_format>-id.
          ELSE.
            READ TABLE lt_numfmts FROM ls_numfmt TRANSPORTING NO FIELDS.
            IF sy-subrc EQ 0.
              ls_cellxfs-numfmtid = sy-tabix.
            ELSE.
              APPEND ls_numfmt TO lt_numfmts.
              DESCRIBE TABLE lt_numfmts LINES ls_cellxfs-numfmtid.
            ENDIF.
            ADD zcl_excel_common=>c_excel_numfmt_offset TO ls_cellxfs-numfmtid. " Add OXML offset for custom styles
          ENDIF.
          ls_cellxfs-applynumberformat    = 1.
        ELSE.
          ls_cellxfs-applynumberformat    = 0.
        ENDIF.
        "----------- " ALE changes on going
      ELSE.
        ls_cellxfs-applynumberformat    = 1.
        IF ls_numfmt-numfmt EQ zcl_excel_style_number_format=>c_format_date_std.
          ls_cellxfs-numfmtid = 14.
*      elseif ls_numfmt-NUMFMT eq 'STD_NDEC'.
*        ls_cellxfs-numfmtid = 2.
        ENDIF.
      ENDIF.
      "---

      IF ls_cellxfs-fontid NE 0.
        ls_cellxfs-applyfont    = 1.
      ELSE.
        ls_cellxfs-applyfont    = 0.
      ENDIF.
      IF ls_cellxfs-alignmentid NE 0.
        ls_cellxfs-applyalignment = 1.
      ELSE.
        ls_cellxfs-applyalignment = 0.
      ENDIF.
      IF ls_cellxfs-fillid NE 0.
        ls_cellxfs-applyfill    = 1.
      ELSE.
        ls_cellxfs-applyfill    = 0.
      ENDIF.
      IF ls_cellxfs-borderid NE 0.
        ls_cellxfs-applyborder    = 1.
      ELSE.
        ls_cellxfs-applyborder    = 0.
      ENDIF.

* Remap styles
      READ TABLE lt_cellxfs FROM ls_cellxfs TRANSPORTING NO FIELDS.
      IF sy-subrc EQ 0.
        ls_styles_mapping-style = sy-tabix.
      ELSE.
        APPEND ls_cellxfs TO lt_cellxfs.
        DESCRIBE TABLE lt_cellxfs LINES ls_styles_mapping-style.
      ENDIF.
      SUBTRACT 1 FROM ls_styles_mapping-style.
      ls_styles_mapping-guid = lo_style->get_guid( ).
      APPEND ls_styles_mapping TO me->styles_mapping.
    ENDWHILE.

    " create numfmt elements
    LOOP AT lt_numfmts INTO ls_numfmt.
      lo_element_numfmt = lo_document->create_simple_element( name   = lc_xml_node_numfmt
                                                              parent = lo_document ).
      lv_value = sy-tabix + zcl_excel_common=>c_excel_numfmt_offset.
      CONDENSE lv_value.
      lo_element_numfmt->set_attribute_ns( name  = lc_xml_attr_numfmtid
                                        value = lv_value ).
      lv_value = ls_numfmt-numfmt.
*    REPLACE ALL OCCURRENCES OF '.' IN lv_value WITH '\.'.
      lo_element_numfmt->set_attribute_ns( name  = lc_xml_attr_formatcode
                                           value = lv_value ).
      lo_element_numfmts->append_child( new_child = lo_element_numfmt ).
    ENDLOOP.

    " create font elements
    LOOP AT lt_fonts INTO ls_font.
      lo_element_font = lo_document->create_simple_element( name   = lc_xml_node_font
                                                            parent = lo_document ).
      IF ls_font-bold EQ abap_true.
        lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_b
                                                             parent = lo_document ).
        lo_element_font->append_child( new_child = lo_sub_element ).
      ENDIF.
      IF ls_font-italic EQ abap_true.
        lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_i
                                                             parent = lo_document ).
        lo_element_font->append_child( new_child = lo_sub_element ).
      ENDIF.
      IF ls_font-underline EQ abap_true.
        lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_u
                                                             parent = lo_document ).
        lv_value = ls_font-underline_mode.
        lo_sub_element->set_attribute_ns( name  = lc_xml_attr_val
                                          value = lv_value ).
        lo_element_font->append_child( new_child = lo_sub_element ).
      ENDIF.
      IF ls_font-strikethrough EQ abap_true.
        lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_strike
                                                             parent = lo_document ).
        lo_element_font->append_child( new_child = lo_sub_element ).
      ENDIF.
      "size
      lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_sz
                                                           parent = lo_document ).
      lv_value = ls_font-size.
      SHIFT lv_value RIGHT DELETING TRAILING space.
      SHIFT lv_value LEFT DELETING LEADING space.
      lo_sub_element->set_attribute_ns( name  = lc_xml_attr_val
                                        value = lv_value ).
      lo_element_font->append_child( new_child = lo_sub_element ).
      "color
      create_xl_styles_color_node(
          io_document        = lo_document
          io_parent          = lo_element_font
          is_color           = ls_font-color ).

      "name
      lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_name
                                                           parent = lo_document ).
      lv_value = ls_font-name.
      lo_sub_element->set_attribute_ns( name  = lc_xml_attr_val
                                        value = lv_value ).
      lo_element_font->append_child( new_child = lo_sub_element ).
      "family
      lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_family
                                                           parent = lo_document ).
      lv_value = ls_font-family.
      SHIFT lv_value RIGHT DELETING TRAILING space.
      SHIFT lv_value LEFT DELETING LEADING space.
      lo_sub_element->set_attribute_ns( name  = lc_xml_attr_val
                                        value = lv_value ).
      lo_element_font->append_child( new_child = lo_sub_element ).
      "scheme
      IF ls_font-scheme IS NOT INITIAL.
        lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_scheme
                                                             parent = lo_document ).
        lv_value = ls_font-scheme.
        lo_sub_element->set_attribute_ns( name  = lc_xml_attr_val
                                          value = lv_value ).
        lo_element_font->append_child( new_child = lo_sub_element ).
      ENDIF.
      lo_element_fonts->append_child( new_child = lo_element_font ).
    ENDLOOP.

    " create fill elements
    LOOP AT lt_fills INTO ls_fill.
      lo_element_fill = lo_document->create_simple_element( name   = lc_xml_node_fill
                                                            parent = lo_document ).

      IF ls_fill-gradtype IS NOT INITIAL.
        "gradient

        lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_gradientfill
                                                            parent = lo_document ).
        IF ls_fill-gradtype-degree IS NOT INITIAL.
          lv_value = ls_fill-gradtype-degree.
          lo_sub_element->set_attribute_ns( name  = lc_xml_attr_degree  value = lv_value ).
        ENDIF.
        IF ls_fill-gradtype-type IS NOT INITIAL.
          lv_value = ls_fill-gradtype-type.
          lo_sub_element->set_attribute_ns( name  = lc_xml_attr_type  value = lv_value ).
        ENDIF.
        IF ls_fill-gradtype-bottom IS NOT INITIAL.
          lv_value = ls_fill-gradtype-bottom.
          lo_sub_element->set_attribute_ns( name  = lc_xml_attr_bottom  value = lv_value ).
        ENDIF.
        IF ls_fill-gradtype-top IS NOT INITIAL.
          lv_value = ls_fill-gradtype-top.
          lo_sub_element->set_attribute_ns( name  = lc_xml_attr_top  value = lv_value ).
        ENDIF.
        IF ls_fill-gradtype-right IS NOT INITIAL.
          lv_value = ls_fill-gradtype-right.
          lo_sub_element->set_attribute_ns( name  = lc_xml_attr_right  value = lv_value ).
        ENDIF.
        IF ls_fill-gradtype-left IS NOT INITIAL.
          lv_value = ls_fill-gradtype-left.
          lo_sub_element->set_attribute_ns( name  = lc_xml_attr_left  value = lv_value ).
        ENDIF.

        IF ls_fill-gradtype-position3 IS NOT INITIAL.
          "create <stop> elements for gradients, we can have 2 or 3 stops in each gradient
          lo_sub_element_2 =  lo_document->create_simple_element( name   = lc_xml_node_stop
                                                                  parent = lo_sub_element ).
          lv_value = ls_fill-gradtype-position1.
          lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_position value = lv_value ).

          create_xl_styles_color_node(
              io_document        = lo_document
              io_parent          = lo_sub_element_2
              is_color           = ls_fill-bgcolor
              iv_color_elem_name = lc_xml_node_color ).
          lo_sub_element->append_child( new_child = lo_sub_element_2 ).

          lo_sub_element_2 = lo_document->create_simple_element( name   = lc_xml_node_stop
                                                                 parent = lo_sub_element ).

          lv_value = ls_fill-gradtype-position2.

          lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_position
                                              value = lv_value ).

          create_xl_styles_color_node(
              io_document        = lo_document
              io_parent          = lo_sub_element_2
              is_color           = ls_fill-fgcolor
              iv_color_elem_name = lc_xml_node_color ).
          lo_sub_element->append_child( new_child = lo_sub_element_2 ).

          lo_sub_element_2 = lo_document->create_simple_element( name   = lc_xml_node_stop
                                                                 parent = lo_sub_element ).

          lv_value = ls_fill-gradtype-position3.
          lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_position
                                              value = lv_value ).

          create_xl_styles_color_node(
              io_document        = lo_document
              io_parent          = lo_sub_element_2
              is_color           = ls_fill-bgcolor
              iv_color_elem_name = lc_xml_node_color ).
          lo_sub_element->append_child( new_child = lo_sub_element_2 ).

        ELSE.
          "create <stop> elements for gradients, we can have 2 or 3 stops in each gradient
          lo_sub_element_2 =  lo_document->create_simple_element( name   = lc_xml_node_stop
                                                                  parent = lo_sub_element ).
          lv_value = ls_fill-gradtype-position1.
          lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_position value = lv_value ).

          create_xl_styles_color_node(
              io_document        = lo_document
              io_parent          = lo_sub_element_2
              is_color           = ls_fill-bgcolor
              iv_color_elem_name = lc_xml_node_color ).
          lo_sub_element->append_child( new_child = lo_sub_element_2 ).

          lo_sub_element_2 = lo_document->create_simple_element( name   = lc_xml_node_stop
                                                                 parent = lo_sub_element ).

          lv_value = ls_fill-gradtype-position2.
          lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_position
                                              value = lv_value ).

          create_xl_styles_color_node(
              io_document        = lo_document
              io_parent          = lo_sub_element_2
              is_color           = ls_fill-fgcolor
              iv_color_elem_name = lc_xml_node_color ).
          lo_sub_element->append_child( new_child = lo_sub_element_2 ).
        ENDIF.




      ELSE.
        "pattern
        lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_patternfill
                                                             parent = lo_document ).
        lv_value = ls_fill-filltype.
        lo_sub_element->set_attribute_ns( name  = lc_xml_attr_patterntype
                                          value = lv_value ).
        " fgcolor
        create_xl_styles_color_node(
            io_document        = lo_document
            io_parent          = lo_sub_element
            is_color           = ls_fill-fgcolor
            iv_color_elem_name = lc_xml_node_fgcolor ).

        IF  ls_fill-fgcolor-rgb IS INITIAL AND
            ls_fill-fgcolor-indexed EQ zcl_excel_style_color=>c_indexed_not_set AND
            ls_fill-fgcolor-theme EQ zcl_excel_style_color=>c_theme_not_set AND
            ls_fill-fgcolor-tint IS INITIAL AND ls_fill-bgcolor-indexed EQ zcl_excel_style_color=>c_indexed_sys_foreground.

          " bgcolor
          create_xl_styles_color_node(
              io_document        = lo_document
              io_parent          = lo_sub_element
              is_color           = ls_fill-bgcolor
              iv_color_elem_name = lc_xml_node_bgcolor ).

        ENDIF.
      ENDIF.

      lo_element_fill->append_child( new_child = lo_sub_element )."pattern
      lo_element_fills->append_child( new_child = lo_element_fill ).
    ENDLOOP.

    " create border elements
    LOOP AT lt_borders INTO ls_border.
      lo_element_border = lo_document->create_simple_element( name   = lc_xml_node_border
                                                              parent = lo_document ).

      IF ls_border-diagonalup IS NOT INITIAL.
        lv_value = ls_border-diagonalup.
        CONDENSE lv_value.
        lo_element_border->set_attribute_ns( name  = lc_xml_attr_diagonalup
                                          value = lv_value ).
      ENDIF.

      IF ls_border-diagonaldown IS NOT INITIAL.
        lv_value = ls_border-diagonaldown.
        CONDENSE lv_value.
        lo_element_border->set_attribute_ns( name  = lc_xml_attr_diagonaldown
                                          value = lv_value ).
      ENDIF.

      "left
      lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_left
                                                           parent = lo_document ).
      IF ls_border-left_style IS NOT INITIAL.
        lv_value = ls_border-left_style.
        lo_sub_element->set_attribute_ns( name  = lc_xml_attr_style
                                          value = lv_value ).
      ENDIF.

      create_xl_styles_color_node(
          io_document        = lo_document
          io_parent          = lo_sub_element
          is_color           = ls_border-left_color ).

      lo_element_border->append_child( new_child = lo_sub_element ).

      "right
      lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_right
                                                           parent = lo_document ).
      IF ls_border-right_style IS NOT INITIAL.
        lv_value = ls_border-right_style.
        lo_sub_element->set_attribute_ns( name  = lc_xml_attr_style
                                          value = lv_value ).
      ENDIF.

      create_xl_styles_color_node(
          io_document        = lo_document
          io_parent          = lo_sub_element
          is_color           = ls_border-right_color ).

      lo_element_border->append_child( new_child = lo_sub_element ).

      "top
      lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_top
                                                           parent = lo_document ).
      IF ls_border-top_style IS NOT INITIAL.
        lv_value = ls_border-top_style.
        lo_sub_element->set_attribute_ns( name  = lc_xml_attr_style
                                          value = lv_value ).
      ENDIF.

      create_xl_styles_color_node(
          io_document        = lo_document
          io_parent          = lo_sub_element
          is_color           = ls_border-top_color ).

      lo_element_border->append_child( new_child = lo_sub_element ).

      "bottom
      lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_bottom
                                                           parent = lo_document ).
      IF ls_border-bottom_style IS NOT INITIAL.
        lv_value = ls_border-bottom_style.
        lo_sub_element->set_attribute_ns( name  = lc_xml_attr_style
                                          value = lv_value ).
      ENDIF.

      create_xl_styles_color_node(
          io_document        = lo_document
          io_parent          = lo_sub_element
          is_color           = ls_border-bottom_color ).

      lo_element_border->append_child( new_child = lo_sub_element ).

      "diagonal
      lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_diagonal
                                                           parent = lo_document ).
      IF ls_border-diagonal_style IS NOT INITIAL.
        lv_value = ls_border-diagonal_style.
        lo_sub_element->set_attribute_ns( name  = lc_xml_attr_style
                                          value = lv_value ).
      ENDIF.

      create_xl_styles_color_node(
          io_document        = lo_document
          io_parent          = lo_sub_element
          is_color           = ls_border-diagonal_color ).

      lo_element_border->append_child( new_child = lo_sub_element ).
      lo_element_borders->append_child( new_child = lo_element_border ).
    ENDLOOP.

    " update attribute "count"
    DESCRIBE TABLE lt_fonts LINES lv_fonts_count.
    MOVE lv_fonts_count TO lv_value.
    SHIFT lv_value RIGHT DELETING TRAILING space.
    SHIFT lv_value LEFT DELETING LEADING space.
    lo_element_fonts->set_attribute_ns( name  = lc_xml_attr_count
                                        value = lv_value ).
    DESCRIBE TABLE lt_fills LINES lv_fills_count.
    MOVE lv_fills_count TO lv_value.
    SHIFT lv_value RIGHT DELETING TRAILING space.
    SHIFT lv_value LEFT DELETING LEADING space.
    lo_element_fills->set_attribute_ns( name  = lc_xml_attr_count
                                        value = lv_value ).
    DESCRIBE TABLE lt_borders LINES lv_borders_count.
    MOVE lv_borders_count TO lv_value.
    SHIFT lv_value RIGHT DELETING TRAILING space.
    SHIFT lv_value LEFT DELETING LEADING space.
    lo_element_borders->set_attribute_ns( name  = lc_xml_attr_count
                                          value = lv_value ).
    DESCRIBE TABLE lt_cellxfs LINES lv_cellxfs_count.
    MOVE lv_cellxfs_count TO lv_value.
    SHIFT lv_value RIGHT DELETING TRAILING space.
    SHIFT lv_value LEFT DELETING LEADING space.
    lo_element_cellxfs->set_attribute_ns( name  = lc_xml_attr_count
                                          value = lv_value ).

    " Append to root node
    lo_element_root->append_child( new_child = lo_element_numfmts ).
    lo_element_root->append_child( new_child = lo_element_fonts ).
    lo_element_root->append_child( new_child = lo_element_fills ).
    lo_element_root->append_child( new_child = lo_element_borders ).

    " cellstylexfs node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_cellstylexfs
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_count
                                  value = '1' ).
    lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_xf
                                                         parent = lo_document ).

    lo_sub_element->set_attribute_ns( name  = lc_xml_attr_numfmtid
                                      value = c_off ).
    lo_sub_element->set_attribute_ns( name  = lc_xml_attr_fontid
                                      value = c_off ).
    lo_sub_element->set_attribute_ns( name  = lc_xml_attr_fillid
                                      value = c_off ).
    lo_sub_element->set_attribute_ns( name  = lc_xml_attr_borderid
                                      value = c_off ).

    lo_element->append_child( new_child = lo_sub_element ).
    lo_element_root->append_child( new_child = lo_element ).

    LOOP AT lt_cellxfs INTO ls_cellxfs.
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_xf
                                                          parent = lo_document ).
      MOVE ls_cellxfs-numfmtid TO lv_value.
      SHIFT lv_value RIGHT DELETING TRAILING space.
      SHIFT lv_value LEFT DELETING LEADING space.
      lo_element->set_attribute_ns( name  = lc_xml_attr_numfmtid
                                    value = lv_value ).
      MOVE ls_cellxfs-fontid TO lv_value.
      SHIFT lv_value RIGHT DELETING TRAILING space.
      SHIFT lv_value LEFT DELETING LEADING space.
      lo_element->set_attribute_ns( name  = lc_xml_attr_fontid
                                    value = lv_value ).
      MOVE ls_cellxfs-fillid TO lv_value.
      SHIFT lv_value RIGHT DELETING TRAILING space.
      SHIFT lv_value LEFT DELETING LEADING space.
      lo_element->set_attribute_ns( name  = lc_xml_attr_fillid
                                    value = lv_value ).
      MOVE ls_cellxfs-borderid TO lv_value.
      SHIFT lv_value RIGHT DELETING TRAILING space.
      SHIFT lv_value LEFT DELETING LEADING space.
      lo_element->set_attribute_ns( name  = lc_xml_attr_borderid
                                    value = lv_value ).
      MOVE ls_cellxfs-xfid TO lv_value.
      SHIFT lv_value RIGHT DELETING TRAILING space.
      SHIFT lv_value LEFT DELETING LEADING space.
      lo_element->set_attribute_ns( name  = lc_xml_attr_xfid
                                    value = lv_value ).
      IF ls_cellxfs-applynumberformat EQ 1.
        MOVE ls_cellxfs-applynumberformat TO lv_value.
        SHIFT lv_value RIGHT DELETING TRAILING space.
        SHIFT lv_value LEFT DELETING LEADING space.
        lo_element->set_attribute_ns( name  = lc_xml_attr_applynumberformat
                                      value = lv_value ).
      ENDIF.
      IF ls_cellxfs-applyfont EQ 1.
        MOVE ls_cellxfs-applyfont TO lv_value.
        SHIFT lv_value RIGHT DELETING TRAILING space.
        SHIFT lv_value LEFT DELETING LEADING space.
        lo_element->set_attribute_ns( name  = lc_xml_attr_applyfont
                                      value = lv_value ).
      ENDIF.
      IF ls_cellxfs-applyfill EQ 1.
        MOVE ls_cellxfs-applyfill TO lv_value.
        SHIFT lv_value RIGHT DELETING TRAILING space.
        SHIFT lv_value LEFT DELETING LEADING space.
        lo_element->set_attribute_ns( name  = lc_xml_attr_applyfill
                                      value = lv_value ).
      ENDIF.
      IF ls_cellxfs-applyborder EQ 1.
        MOVE ls_cellxfs-applyborder TO lv_value.
        SHIFT lv_value RIGHT DELETING TRAILING space.
        SHIFT lv_value LEFT DELETING LEADING space.
        lo_element->set_attribute_ns( name  = lc_xml_attr_applyborder
                                      value = lv_value ).
      ENDIF.
      IF ls_cellxfs-applyalignment EQ 1. " depends on each style not for all the sheet
        MOVE ls_cellxfs-applyalignment TO lv_value.
        SHIFT lv_value RIGHT DELETING TRAILING space.
        SHIFT lv_value LEFT DELETING LEADING space.
        lo_element->set_attribute_ns( name  = lc_xml_attr_applyalignment
                                      value = lv_value ).
        lo_sub_element_2 = lo_document->create_simple_element( name   = lc_xml_node_alignment
                                                               parent = lo_document ).
        ADD 1 TO ls_cellxfs-alignmentid. "Table index starts from 1
        READ TABLE lt_alignments INTO ls_alignment INDEX ls_cellxfs-alignmentid.
        SUBTRACT 1 FROM ls_cellxfs-alignmentid.
        IF ls_alignment-horizontal IS NOT INITIAL.
          MOVE ls_alignment-horizontal TO lv_value.
          lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_horizontal
                                              value = lv_value ).
        ENDIF.
        IF ls_alignment-vertical IS NOT INITIAL.
          MOVE ls_alignment-vertical TO lv_value.
          lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_vertical
                                              value = lv_value ).
        ENDIF.
        IF ls_alignment-wraptext EQ abap_true.
          lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_wraptext
                                              value = c_on ).
        ENDIF.
        IF ls_alignment-textrotation IS NOT INITIAL.
          MOVE ls_alignment-textrotation TO lv_value.
          SHIFT lv_value RIGHT DELETING TRAILING space.
          SHIFT lv_value LEFT DELETING LEADING space.
          lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_textrotation
                                              value = lv_value ).
        ENDIF.
        IF ls_alignment-shrinktofit EQ abap_true.
          lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_shrinktofit
                                              value = c_on ).
        ENDIF.
        IF ls_alignment-indent IS NOT INITIAL.
          MOVE ls_alignment-indent TO lv_value.
          SHIFT lv_value RIGHT DELETING TRAILING space.
          SHIFT lv_value LEFT DELETING LEADING space.
          lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_indent
                                              value = lv_value ).
        ENDIF.

        lo_element->append_child( new_child = lo_sub_element_2 ).
      ENDIF.
      IF ls_cellxfs-applyprotection EQ 1.
        MOVE ls_cellxfs-applyprotection TO lv_value.
        CONDENSE lv_value NO-GAPS.
        lo_element->set_attribute_ns( name  = lc_xml_attr_applyprotection
                                      value = lv_value ).
        lo_sub_element_2 = lo_document->create_simple_element( name   = lc_xml_node_protection
                                                               parent = lo_document ).
        ADD 1 TO ls_cellxfs-protectionid. "Table index starts from 1
        READ TABLE lt_protections INTO ls_protection INDEX ls_cellxfs-protectionid.
        SUBTRACT 1 FROM ls_cellxfs-protectionid.
        IF ls_protection-locked IS NOT INITIAL.
          MOVE ls_protection-locked TO lv_value.
          CONDENSE lv_value.
          lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_locked
                                              value = lv_value ).
        ENDIF.
        IF ls_protection-hidden IS NOT INITIAL.
          MOVE ls_protection-hidden TO lv_value.
          CONDENSE lv_value.
          lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_hidden
                                              value = lv_value ).
        ENDIF.
        lo_element->append_child( new_child = lo_sub_element_2 ).
      ENDIF.
      lo_element_cellxfs->append_child( new_child = lo_element ).
    ENDLOOP.

    lo_element_root->append_child( new_child = lo_element_cellxfs ).

    " cellStyles node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_cellstyles
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_count
                                  value = '1' ).
    lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_cellstyle
                                                         parent = lo_document ).

    lo_sub_element->set_attribute_ns( name  = lc_xml_attr_name
                                      value = 'Normal' ).
    lo_sub_element->set_attribute_ns( name  = lc_xml_attr_xfid
                                      value = c_off ).
    lo_sub_element->set_attribute_ns( name  = lc_xml_attr_builtinid
                                      value = c_off ).

    lo_element->append_child( new_child = lo_sub_element ).
    lo_element_root->append_child( new_child = lo_element ).

    " dxfs node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_dxfs
                                                     parent = lo_document ).

    lo_iterator = me->excel->get_worksheets_iterator( ).
    " get sheets
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_worksheet ?= lo_iterator->if_object_collection_iterator~get_next( ).
      " Conditional formatting styles into exch sheet
      lo_iterator2 = lo_worksheet->get_style_cond_iterator( ).
      WHILE lo_iterator2->if_object_collection_iterator~has_next( ) EQ abap_true.
        lo_style_cond ?= lo_iterator2->if_object_collection_iterator~get_next( ).
        CASE lo_style_cond->rule.
* begin of change issue #366 - missing conditional rules: top10, move dfx-styles to own method
          WHEN zcl_excel_style_cond=>c_rule_cellis.
            me->create_dxf_style( EXPORTING
                                    iv_cell_style    = lo_style_cond->mode_cellis-cell_style
                                    io_dxf_element   = lo_element
                                    io_ixml_document = lo_document
                                    it_cellxfs       = lt_cellxfs
                                    it_fonts         = lt_fonts
                                    it_fills         = lt_fills
                                  CHANGING
                                    cv_dfx_count     = lv_dfx_count ).

          WHEN zcl_excel_style_cond=>c_rule_expression.
            me->create_dxf_style( EXPORTING
                          iv_cell_style    = lo_style_cond->mode_expression-cell_style
                          io_dxf_element   = lo_element
                          io_ixml_document = lo_document
                          it_cellxfs       = lt_cellxfs
                          it_fonts         = lt_fonts
                          it_fills         = lt_fills
                        CHANGING
                          cv_dfx_count     = lv_dfx_count ).



          WHEN zcl_excel_style_cond=>c_rule_top10.
            me->create_dxf_style( EXPORTING
                                    iv_cell_style    = lo_style_cond->mode_top10-cell_style
                                    io_dxf_element   = lo_element
                                    io_ixml_document = lo_document
                                    it_cellxfs       = lt_cellxfs
                                    it_fonts         = lt_fonts
                                    it_fills         = lt_fills
                                  CHANGING
                                    cv_dfx_count     = lv_dfx_count ).

          WHEN zcl_excel_style_cond=>c_rule_above_average.
            me->create_dxf_style( EXPORTING
                                    iv_cell_style    = lo_style_cond->mode_above_average-cell_style
                                    io_dxf_element   = lo_element
                                    io_ixml_document = lo_document
                                    it_cellxfs       = lt_cellxfs
                                    it_fonts         = lt_fonts
                                    it_fills         = lt_fills
                                  CHANGING
                                    cv_dfx_count     = lv_dfx_count ).
* begin of change issue #366 - missing conditional rules: top10, move dfx-styles to own method

          WHEN OTHERS.
            CONTINUE.
        ENDCASE.
      ENDWHILE.
    ENDWHILE.

    lv_value = lv_dfx_count.
    CONDENSE lv_value.
    lo_element->set_attribute_ns( name  = lc_xml_attr_count
                                  value = lv_value ).
    lo_element_root->append_child( new_child = lo_element ).

    " tableStyles node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_tablestyles
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_count
                                  value = '0' ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_defaulttablestyle
                                  value = zcl_excel_table=>builtinstyle_medium9 ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_defaultpivotstyle
                                  value = zcl_excel_table=>builtinstyle_pivot_light16 ).
    lo_element_root->append_child( new_child = lo_element ).

    "write legacy color palette in case any indexed color was changed
    IF excel->legacy_palette->is_modified( ) = abap_true.
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_colors
                                                     parent   = lo_document ).
      lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_indexedcolors
                                                         parent   = lo_document ).
      lo_element->append_child( new_child = lo_sub_element ).

      lt_colors = excel->legacy_palette->get_colors( ).
      LOOP AT lt_colors INTO ls_color.
        lo_sub_element_2 = lo_document->create_simple_element( name   = lc_xml_node_rgbcolor
                                                               parent = lo_document ).
        lv_value = ls_color.
        lo_sub_element_2->set_attribute_ns( name  = lc_xml_attr_rgb
                                            value = lv_value ).
        lo_sub_element->append_child( new_child = lo_sub_element_2 ).
      ENDLOOP.

      lo_element_root->append_child( new_child = lo_element ).
    ENDIF.

**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_STYLES_COLOR_NODE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_DOCUMENT                    TYPE REF TO IF_IXML_DOCUMENT
* | [--->] IO_PARENT                      TYPE REF TO IF_IXML_ELEMENT
* | [--->] IV_COLOR_ELEM_NAME             TYPE        STRING (default ='color')
* | [--->] IS_COLOR                       TYPE        ZEXCEL_S_STYLE_COLOR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_styles_color_node.
    DATA: lo_sub_element TYPE REF TO if_ixml_element,
          lv_value       TYPE string.

    CONSTANTS: lc_xml_attr_theme   TYPE string VALUE 'theme',
               lc_xml_attr_rgb     TYPE string VALUE 'rgb',
               lc_xml_attr_indexed TYPE string VALUE 'indexed',
               lc_xml_attr_tint    TYPE string VALUE 'tint'.

    "add node only if at least one attribute is set
    CHECK is_color-rgb IS NOT INITIAL OR
          is_color-indexed <> zcl_excel_style_color=>c_indexed_not_set OR
          is_color-theme <> zcl_excel_style_color=>c_theme_not_set OR
          is_color-tint IS NOT INITIAL.

    lo_sub_element = io_document->create_simple_element(
        name      = iv_color_elem_name
        parent    = io_parent ).

    IF is_color-rgb IS NOT INITIAL.
      lv_value = is_color-rgb.
      lo_sub_element->set_attribute_ns( name  = lc_xml_attr_rgb
                                        value = lv_value ).
    ENDIF.

    IF is_color-indexed <> zcl_excel_style_color=>c_indexed_not_set.
      lv_value = zcl_excel_common=>number_to_excel_string( is_color-indexed ).
      lo_sub_element->set_attribute_ns( name  = lc_xml_attr_indexed
                                        value = lv_value ).
    ENDIF.

    IF is_color-theme <> zcl_excel_style_color=>c_theme_not_set.
      lv_value = zcl_excel_common=>number_to_excel_string( is_color-theme ).
      lo_sub_element->set_attribute_ns( name  = lc_xml_attr_theme
                                        value = lv_value ).
    ENDIF.

    IF is_color-tint IS NOT INITIAL.
      lv_value = zcl_excel_common=>number_to_excel_string( is_color-tint ).
      lo_sub_element->set_attribute_ns( name  = lc_xml_attr_tint
                                        value = lv_value ).
    ENDIF.

    io_parent->append_child( new_child = lo_sub_element ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_TABLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_TABLE                       TYPE REF TO ZCL_EXCEL_TABLE
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_table.

    DATA: lc_xml_node_table        TYPE string VALUE 'table',
          lc_xml_node_relationship TYPE string VALUE 'Relationship',
          " Node attributes
          lc_xml_attr_id           TYPE string VALUE 'id',
          lc_xml_attr_name         TYPE string VALUE 'name',
          lc_xml_attr_display_name TYPE string VALUE 'displayName',
          lc_xml_attr_ref          TYPE string VALUE 'ref',
          lc_xml_attr_totals       TYPE string VALUE 'totalsRowShown',
          " Node namespace
          lc_xml_node_table_ns     TYPE string VALUE 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
          " Node id
          lc_xml_node_ridx_id      TYPE string VALUE 'rId#'.

    DATA: lo_document     TYPE REF TO if_ixml_document,
          lo_element_root TYPE REF TO if_ixml_element,
          lo_element      TYPE REF TO if_ixml_element,
          lo_element2     TYPE REF TO if_ixml_element,
          lv_table_name   TYPE string,
          lv_id           TYPE i,
          lv_match        TYPE i,
          lv_ref          TYPE string,
          lv_value        TYPE string,
          lv_num_columns  TYPE i,
          ls_fieldcat     TYPE zexcel_s_fieldcatalog.


**********************************************************************
* STEP 1: Create xml
    lo_document = create_xml_document( ).

**********************************************************************
* STEP 3: Create main node table
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_table
                                                           parent = lo_document ).

    lo_element_root->set_attribute_ns( name  = 'xmlns'
                                       value = lc_xml_node_table_ns  ).

    lv_id = io_table->get_id( ).
    lv_value = zcl_excel_common=>number_to_excel_string( ip_value = lv_id ).
    lo_element_root->set_attribute_ns( name  = lc_xml_attr_id
                                       value = lv_value ).

    FIND ALL OCCURRENCES OF REGEX '[^_a-zA-Z0-9]' IN io_table->settings-table_name IGNORING CASE MATCH COUNT lv_match.
    IF io_table->settings-table_name IS NOT INITIAL AND lv_match EQ 0.
      lv_table_name = io_table->settings-table_name.
    ELSE.
      lv_table_name = io_table->get_name( ).
    ENDIF.
    lo_element_root->set_attribute_ns( name  = lc_xml_attr_name
                                       value = lv_table_name ).

    lo_element_root->set_attribute_ns( name  = lc_xml_attr_display_name
                                       value = lv_table_name ).

    lv_ref = io_table->get_reference( ).
    lo_element_root->set_attribute_ns( name  = lc_xml_attr_ref
                                       value = lv_ref ).
    IF io_table->has_totals( ) = abap_true.
      lo_element_root->set_attribute_ns( name  = 'totalsRowCount'
                                             value = '1' ).
    ELSE.
      lo_element_root->set_attribute_ns( name  = lc_xml_attr_totals
                                           value = '0' ).
    ENDIF.

**********************************************************************
* STEP 4: Create subnodes

    " autoFilter
    IF io_table->settings-nofilters EQ abap_false.
      lo_element = lo_document->create_simple_element( name   = 'autoFilter'
                                                       parent = lo_document ).

      lv_ref = io_table->get_reference( ip_include_totals_row = abap_false ).
      lo_element->set_attribute_ns( name  = 'ref'
                                    value = lv_ref ).

      lo_element_root->append_child( new_child = lo_element ).
    ENDIF.

    "columns
    lo_element = lo_document->create_simple_element( name   = 'tableColumns'
                                                     parent = lo_document ).

*  lo_columns = io_table->get_columns( ).
    LOOP AT io_table->fieldcat INTO ls_fieldcat WHERE dynpfld = abap_true.
      ADD 1 TO lv_num_columns.
    ENDLOOP.

    lv_value = lv_num_columns.
    CONDENSE lv_value.
    lo_element->set_attribute_ns( name  = 'count'
                                  value = lv_value ).

    lo_element_root->append_child( new_child = lo_element ).

    LOOP AT io_table->fieldcat INTO ls_fieldcat WHERE dynpfld = abap_true.
      lo_element2 = lo_document->create_simple_element_ns( name   = 'tableColumn'
                                                                  parent = lo_element ).

      lv_value = ls_fieldcat-position.
      SHIFT lv_value LEFT DELETING LEADING '0'.
      lo_element2->set_attribute_ns( name  = 'id'
                                    value = lv_value ).
      lv_value = ls_fieldcat-scrtext_l.
      lo_element2->set_attribute_ns( name  = 'name'
                                    value = lv_value ).

      IF ls_fieldcat-totals_function IS NOT INITIAL.
        lo_element2->set_attribute_ns( name  = 'totalsRowFunction'
                                          value = ls_fieldcat-totals_function ).
      ENDIF.

      lo_element->append_child( new_child = lo_element2 ).
    ENDLOOP.


    lo_element  = lo_document->create_simple_element( name   = 'tableStyleInfo'
                                                           parent = lo_element_root ).

    lo_element->set_attribute_ns( name  = 'name'
                                       value = io_table->settings-table_style  ).

    lo_element->set_attribute_ns( name  = 'showFirstColumn'
                                       value = '0' ).

    lo_element->set_attribute_ns( name  = 'showLastColumn'
                                       value = '0' ).

    IF io_table->settings-show_row_stripes = abap_true.
      lv_value = '1'.
    ELSE.
      lv_value = '0'.
    ENDIF.

    lo_element->set_attribute_ns( name  = 'showRowStripes'
                                       value = lv_value ).

    IF io_table->settings-show_column_stripes = abap_true.
      lv_value = '1'.
    ELSE.
      lv_value = '0'.
    ENDIF.

    lo_element->set_attribute_ns( name  = 'showColumnStripes'
                                       value = lv_value ).

    lo_element_root->append_child( new_child = lo_element ).
**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_THEME
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_theme.
    DATA: lo_theme TYPE REF TO zcl_excel_theme.

    excel->get_theme(
    IMPORTING
      eo_theme = lo_theme
      ).
    IF lo_theme IS INITIAL.
      CREATE OBJECT lo_theme.
    ENDIF.
    ep_content = lo_theme->write_theme( ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XL_WORKBOOK
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xl_workbook.
*--------------------------------------------------------------------*
* issue #230   - Pimp my Code
*              - Stefan Schmoecker,      (done)              2012-11-07
*              - ...
* changes: aligning code
*          adding comments to explain what we are trying to achieve
*--------------------------------------------------------------------*
* issue#235 - repeat rows/columns
*           - Stefan Schmoecker,                             2012-12-01
* changes:  correction of pointer to localSheetId
*--------------------------------------------------------------------*

** Constant node name
    DATA:       lc_xml_node_workbook           TYPE string VALUE 'workbook',
                lc_xml_node_fileversion        TYPE string VALUE 'fileVersion',
                lc_xml_node_workbookpr         TYPE string VALUE 'workbookPr',
                lc_xml_node_bookviews          TYPE string VALUE 'bookViews',
                lc_xml_node_workbookview       TYPE string VALUE 'workbookView',
                lc_xml_node_sheets             TYPE string VALUE 'sheets',
                lc_xml_node_sheet              TYPE string VALUE 'sheet',
                lc_xml_node_calcpr             TYPE string VALUE 'calcPr',
                lc_xml_node_workbookprotection TYPE string VALUE 'workbookProtection',
                lc_xml_node_definednames       TYPE string VALUE 'definedNames',
                lc_xml_node_definedname        TYPE string VALUE 'definedName',
                " Node attributes
                lc_xml_attr_appname            TYPE string VALUE 'appName',
                lc_xml_attr_lastedited         TYPE string VALUE 'lastEdited',
                lc_xml_attr_lowestedited       TYPE string VALUE 'lowestEdited',
                lc_xml_attr_rupbuild           TYPE string VALUE 'rupBuild',
                lc_xml_attr_xwindow            TYPE string VALUE 'xWindow',
                lc_xml_attr_ywindow            TYPE string VALUE 'yWindow',
                lc_xml_attr_windowwidth        TYPE string VALUE 'windowWidth',
                lc_xml_attr_windowheight       TYPE string VALUE 'windowHeight',
                lc_xml_attr_activetab          TYPE string VALUE 'activeTab',
                lc_xml_attr_name               TYPE string VALUE 'name',
                lc_xml_attr_sheetid            TYPE string VALUE 'sheetId',
                lc_xml_attr_state              TYPE string VALUE 'state',
                lc_xml_attr_id                 TYPE string VALUE 'id',
                lc_xml_attr_calcid             TYPE string VALUE 'calcId',
                lc_xml_attr_lockrevision       TYPE string VALUE 'lockRevision',
                lc_xml_attr_lockstructure      TYPE string VALUE 'lockStructure',
                lc_xml_attr_lockwindows        TYPE string VALUE 'lockWindows',
                lc_xml_attr_revisionspassword  TYPE string VALUE 'revisionsPassword',
                lc_xml_attr_workbookpassword   TYPE string VALUE 'workbookPassword',
                lc_xml_attr_hidden             TYPE string VALUE 'hidden',
                lc_xml_attr_localsheetid       TYPE string VALUE 'localSheetId',
                " Node namespace
                lc_r_ns                        TYPE string VALUE 'r',
                lc_xml_node_ns                 TYPE string VALUE 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
                lc_xml_node_r_ns               TYPE string VALUE 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',
                " Node id
                lc_xml_node_ridx_id            TYPE string VALUE 'rId#'.

    DATA:       lo_document       TYPE REF TO if_ixml_document,
                lo_element_root   TYPE REF TO if_ixml_element,
                lo_element        TYPE REF TO if_ixml_element,
                lo_element_range  TYPE REF TO if_ixml_element,
                lo_sub_element    TYPE REF TO if_ixml_element,
                lo_iterator       TYPE REF TO cl_object_collection_iterator,
                lo_iterator_range TYPE REF TO cl_object_collection_iterator,
                lo_worksheet      TYPE REF TO zcl_excel_worksheet,
                lo_range          TYPE REF TO zcl_excel_range,
                lo_autofilters    TYPE REF TO zcl_excel_autofilters,
                lo_autofilter     TYPE REF TO zcl_excel_autofilter.

    DATA:       lv_xml_node_ridx_id TYPE string,
                lv_value            TYPE string,
                lv_syindex          TYPE string,
                l_guid              TYPE uuid,
                lv_active_sheet     TYPE zexcel_active_worksheet.

**********************************************************************
* STEP 1: Create [Content_Types].xml into the root of the ZIP
    lo_document = create_xml_document( ).

**********************************************************************
* STEP 3: Create main node
    lo_element_root  = lo_document->create_simple_element( name   = lc_xml_node_workbook
                                                           parent = lo_document ).
    lo_element_root->set_attribute_ns( name  = 'xmlns'
                                       value = lc_xml_node_ns ).
    lo_element_root->set_attribute_ns( name  = 'xmlns:r'
                                       value = lc_xml_node_r_ns ).

**********************************************************************
* STEP 4: Create subnode
    " fileVersion node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_fileversion
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_appname
                                  value = 'xl' ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_lastedited
                                  value = '4' ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_lowestedited
                                  value = '4' ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_rupbuild
                                  value = '4506' ).
    lo_element_root->append_child( new_child = lo_element ).

    " fileVersion node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_workbookpr
                                                     parent = lo_document ).
*  lo_element->set_attribute_ns( name  = lc_xml_attr_themeversion
*                                value = '124226' ).
    lo_element_root->append_child( new_child = lo_element ).

    " workbookProtection node
    IF me->excel->zif_excel_book_protection~protected EQ abap_true.
      lo_element = lo_document->create_simple_element( name   = lc_xml_node_workbookprotection
                                                       parent = lo_document ).
      MOVE me->excel->zif_excel_book_protection~workbookpassword TO lv_value.
      IF lv_value IS NOT INITIAL.
        lo_element->set_attribute_ns( name  = lc_xml_attr_workbookpassword
                                      value = lv_value ).
      ENDIF.
      MOVE me->excel->zif_excel_book_protection~revisionspassword TO lv_value.
      IF lv_value IS NOT INITIAL.
        lo_element->set_attribute_ns( name  = lc_xml_attr_revisionspassword
                                      value = lv_value ).
      ENDIF.
      MOVE me->excel->zif_excel_book_protection~lockrevision TO lv_value.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_lockrevision
                                    value = lv_value ).
      MOVE me->excel->zif_excel_book_protection~lockstructure TO lv_value.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_lockstructure
                                    value = lv_value ).
      MOVE me->excel->zif_excel_book_protection~lockwindows TO lv_value.
      CONDENSE lv_value NO-GAPS.
      lo_element->set_attribute_ns( name  = lc_xml_attr_lockwindows
                                    value = lv_value ).
      lo_element_root->append_child( new_child = lo_element ).
    ENDIF.

    " bookviews node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_bookviews
                                                     parent = lo_document ).
    " bookview node
    lo_sub_element = lo_document->create_simple_element( name   = lc_xml_node_workbookview
                                                         parent = lo_document ).
    lo_sub_element->set_attribute_ns( name  = lc_xml_attr_xwindow
                                      value = '120' ).
    lo_sub_element->set_attribute_ns( name  = lc_xml_attr_ywindow
                                      value = '120' ).
    lo_sub_element->set_attribute_ns( name  = lc_xml_attr_windowwidth
                                      value = '19035' ).
    lo_sub_element->set_attribute_ns( name  = lc_xml_attr_windowheight
                                      value = '8445' ).
    " Set Active Sheet
    lv_active_sheet = excel->get_active_sheet_index( ).
* issue #365 - test if sheet exists - otherwise set active worksheet to 1
    lo_worksheet = excel->get_worksheet_by_index( lv_active_sheet ).
    IF lo_worksheet IS NOT BOUND.
      lv_active_sheet = 1.
      excel->set_active_sheet_index( lv_active_sheet ).
    ENDIF.
    IF lv_active_sheet > 1.
      lv_active_sheet = lv_active_sheet - 1.
      lv_value = lv_active_sheet.
      CONDENSE lv_value.
      lo_sub_element->set_attribute_ns( name  = lc_xml_attr_activetab
                                        value = lv_value ).
    ENDIF.
    lo_element->append_child( new_child = lo_sub_element )." bookview node
    lo_element_root->append_child( new_child = lo_element )." bookviews node

    " sheets node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_sheets
                                                     parent = lo_document ).
    lo_iterator = excel->get_worksheets_iterator( ).

    " ranges node
    lo_element_range = lo_document->create_simple_element( name   = lc_xml_node_definednames " issue 163 +
                                                           parent = lo_document ).           " issue 163 +

    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      " sheet node
      lo_sub_element = lo_document->create_simple_element_ns( name   = lc_xml_node_sheet
                                                              parent = lo_document ).
      lo_worksheet ?= lo_iterator->if_object_collection_iterator~get_next( ).
      lv_syindex = sy-index.                                                                  " question by Stefan SchmÃ¶cker 2012-12-02:  sy-index seems to do the job - but is it proven to work or purely coincedence
      lv_value = lo_worksheet->get_title( ).
      SHIFT lv_syindex RIGHT DELETING TRAILING space.
      SHIFT lv_syindex LEFT DELETING LEADING space.
      lv_xml_node_ridx_id = lc_xml_node_ridx_id.
      REPLACE ALL OCCURRENCES OF '#' IN lv_xml_node_ridx_id WITH lv_syindex.
      lo_sub_element->set_attribute_ns( name  = lc_xml_attr_name
                                        value = lv_value ).
      lo_sub_element->set_attribute_ns( name  = lc_xml_attr_sheetid
                                        value = lv_syindex ).
      IF lo_worksheet->zif_excel_sheet_properties~hidden EQ zif_excel_sheet_properties=>c_hidden.
        lo_sub_element->set_attribute_ns( name  = lc_xml_attr_state
                                          value = 'hidden' ).
      ELSEIF lo_worksheet->zif_excel_sheet_properties~hidden EQ zif_excel_sheet_properties=>c_veryhidden.
        lo_sub_element->set_attribute_ns( name  = lc_xml_attr_state
                                          value = 'veryHidden' ).
      ENDIF.
      lo_sub_element->set_attribute_ns( name    = lc_xml_attr_id
                                        prefix  = lc_r_ns
                                        value   = lv_xml_node_ridx_id ).
      lo_element->append_child( new_child = lo_sub_element ). " sheet node

      " issue 163 >>>
      lo_iterator_range = lo_worksheet->get_ranges_iterator( ).

*--------------------------------------------------------------------*
* Defined names sheetlocal:  Ranges, Repeat rows and columns
*--------------------------------------------------------------------*
      WHILE lo_iterator_range->if_object_collection_iterator~has_next( ) EQ abap_true.
        " range node
        lo_sub_element = lo_document->create_simple_element_ns( name   = lc_xml_node_definedname
                                                                parent = lo_document ).
        lo_range ?= lo_iterator_range->if_object_collection_iterator~get_next( ).
        lv_value = lo_range->name.

        lo_sub_element->set_attribute_ns( name  = lc_xml_attr_name
                                          value = lv_value ).

*      lo_sub_element->set_attribute_ns( name  = lc_xml_attr_localsheetid           "del #235 Repeat rows/cols - EXCEL starts couting from zero
*                                        value = lv_xml_node_ridx_id ).             "del #235 Repeat rows/cols - and needs absolute referencing to localSheetId
        lv_value   = lv_syindex - 1.                                                  "ins #235 Repeat rows/cols
        CONDENSE lv_value NO-GAPS.                                                    "ins #235 Repeat rows/cols
        lo_sub_element->set_attribute_ns( name  = lc_xml_attr_localsheetid
                                          value = lv_value ).

        lv_value = lo_range->get_value( ).
        lo_sub_element->set_value( value = lv_value ).
        lo_element_range->append_child( new_child = lo_sub_element ). " range node

      ENDWHILE.
      " issue 163 <<<

    ENDWHILE.
    lo_element_root->append_child( new_child = lo_element )." sheets node


*--------------------------------------------------------------------*
* Defined names workbookgolbal:  Ranges
*--------------------------------------------------------------------*
*  " ranges node
*  lo_element = lo_document->create_simple_element( name   = lc_xml_node_definednames " issue 163 -
*                                                   parent = lo_document ).           " issue 163 -
    lo_iterator = excel->get_ranges_iterator( ).

    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      " range node
      lo_sub_element = lo_document->create_simple_element_ns( name   = lc_xml_node_definedname
                                                              parent = lo_document ).
      lo_range ?= lo_iterator->if_object_collection_iterator~get_next( ).
      lv_value = lo_range->name.
      lo_sub_element->set_attribute_ns( name  = lc_xml_attr_name
                                        value = lv_value ).
      lv_value = lo_range->get_value( ).
      lo_sub_element->set_value( value = lv_value ).
      lo_element_range->append_child( new_child = lo_sub_element ). " range node

    ENDWHILE.

*--------------------------------------------------------------------*
* Defined names - Autofilters ( also sheetlocal )
*--------------------------------------------------------------------*
    lo_autofilters = excel->get_autofilters_reference( ).
    IF lo_autofilters->is_empty( ) = abap_false.
      lo_iterator = excel->get_worksheets_iterator( ).
      WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.

        lo_worksheet ?= lo_iterator->if_object_collection_iterator~get_next( ).
        lv_syindex = sy-index - 1 .
        l_guid = lo_worksheet->get_guid( ).
        lo_autofilter = lo_autofilters->get( i_sheet_guid = l_guid ) .
        IF lo_autofilter IS BOUND.
          lo_sub_element = lo_document->create_simple_element_ns( name   = lc_xml_node_definedname
                                                                  parent = lo_document ).
          lv_value = lo_autofilters->c_autofilter.
          lo_sub_element->set_attribute_ns( name  = lc_xml_attr_name
                                            value = lv_value ).
          lv_value = lv_syindex.
          CONDENSE lv_value NO-GAPS.
          lo_sub_element->set_attribute_ns( name  = lc_xml_attr_localsheetid
                                            value = lv_value ).
          lv_value = '1'. " Always hidden
          lo_sub_element->set_attribute_ns( name  = lc_xml_attr_hidden
                                            value = lv_value ).
          lv_value = lo_autofilter->get_filter_reference( ).
          lo_sub_element->set_value( value = lv_value ).
          lo_element_range->append_child( new_child = lo_sub_element ). " range node
        ENDIF.

      ENDWHILE.
    ENDIF.
    lo_element_root->append_child( new_child = lo_element_range ).                      " ranges node


    " calcPr node
    lo_element = lo_document->create_simple_element( name   = lc_xml_node_calcpr
                                                     parent = lo_document ).
    lo_element->set_attribute_ns( name  = lc_xml_attr_calcid
                                  value = '125725' ).
    lo_element_root->append_child( new_child = lo_element ).

**********************************************************************
* STEP 5: Create xstring stream
    ep_content = render_xml_document( lo_document ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->CREATE_XML_DOCUMENT
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RO_DOCUMENT                    TYPE REF TO IF_IXML_DOCUMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_xml_document.
    DATA lo_encoding TYPE REF TO if_ixml_encoding.
    lo_encoding = me->ixml->create_encoding( byte_order = if_ixml_encoding=>co_platform_endian
                                             character_set = 'utf-8' ).
    ro_document = me->ixml->create_document( ).
    ro_document->set_encoding( lo_encoding ).
    ro_document->set_standalone( abap_true ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_EXCEL_WRITER_2007->FLAG2BOOL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_FLAG                        TYPE        FLAG
* | [<-()] EP_BOOLEAN                     TYPE        CHAR5
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD flag2bool.


    IF ip_flag EQ abap_true.
      ep_boolean = 'true'.
    ELSE.
      ep_boolean = 'false'.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->GET_SHARED_STRING_INDEX
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_CELL_VALUE                  TYPE        ZEXCEL_CELL_VALUE
* | [<-()] EP_INDEX                       TYPE        INT4
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_shared_string_index.


    DATA ls_shared_string TYPE zexcel_s_shared_string.

*  READ TABLE shared_strings INTO ls_shared_string WITH KEY string_value = ip_cell_value BINARY SEARCH.
    READ TABLE shared_strings INTO ls_shared_string WITH TABLE KEY string_value = ip_cell_value.
    ep_index = ls_shared_string-string_no.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->RENDER_XML_DOCUMENT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_DOCUMENT                    TYPE REF TO IF_IXML_DOCUMENT
* | [<-()] EP_CONTENT                     TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD render_xml_document.
    DATA lo_streamfactory TYPE REF TO if_ixml_stream_factory.
    DATA lo_ostream       TYPE REF TO if_ixml_ostream.
    DATA lo_renderer      TYPE REF TO if_ixml_renderer.

    lo_streamfactory = me->ixml->create_stream_factory( ).
    lo_ostream = lo_streamfactory->create_ostream_xstring( string = ep_content ).
    lo_renderer = me->ixml->create_renderer( ostream  = lo_ostream document = io_document ).
    lo_renderer->render( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->SET_VML_SHAPE_FOOTER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_FOOTER                      TYPE        ZEXCEL_S_WORKSHEET_HEAD_FOOT
* | [<-()] EP_CONTENT                     TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_vml_shape_footer.

    CONSTANTS: lc_shape               TYPE string VALUE '<v:shape id="{ID}" o:spid="_x0000_s1025" type="#_x0000_t75" style=''position:absolute;margin-left:0;margin-top:0;width:{WIDTH}pt;height:{HEIGHT}pt; z-index:1''>',
               lc_shape_image         TYPE string VALUE '<v:imagedata o:relid="{RID}" o:title="Logo Title"/><o:lock v:ext="edit" rotation="t"/></v:shape>',
               lc_shape_header_center TYPE string VALUE 'CH',
               lc_shape_header_left   TYPE string VALUE 'LH',
               lc_shape_header_right  TYPE string VALUE 'RH',
               lc_shape_footer_center TYPE string VALUE 'CF',
               lc_shape_footer_left   TYPE string VALUE 'LF',
               lc_shape_footer_right  TYPE string VALUE 'RF'.

    DATA: lv_content_left         TYPE string,
          lv_content_center       TYPE string,
          lv_content_right        TYPE string,
          lv_content_image_left   TYPE string,
          lv_content_image_center TYPE string,
          lv_content_image_right  TYPE string,
          lv_value                TYPE string,
          ls_drawing_position     TYPE zexcel_drawing_position.

    IF is_footer-left_image IS NOT INITIAL.
      lv_content_left = lc_shape.
      REPLACE '{ID}' IN lv_content_left WITH lc_shape_footer_left.
      ls_drawing_position = is_footer-left_image->get_position( ).
      IF ls_drawing_position-size-height IS NOT INITIAL.
        lv_value = ls_drawing_position-size-height.
      ELSE.
        lv_value = '100'.
      ENDIF.
      CONDENSE lv_value.
      REPLACE '{HEIGHT}' IN lv_content_left WITH lv_value.
      IF ls_drawing_position-size-width IS NOT INITIAL.
        lv_value = ls_drawing_position-size-width.
      ELSE.
        lv_value = '100'.
      ENDIF.
      CONDENSE lv_value.
      REPLACE '{WIDTH}' IN lv_content_left WITH lv_value.
      lv_content_image_left = lc_shape_image.
      lv_value = is_footer-left_image->get_index( ).
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.
      REPLACE '{RID}' IN lv_content_image_left WITH lv_value.
    ENDIF.
    IF is_footer-center_image IS NOT INITIAL.
      lv_content_center = lc_shape.
      REPLACE '{ID}' IN lv_content_center WITH lc_shape_footer_center.
      ls_drawing_position = is_footer-left_image->get_position( ).
      IF ls_drawing_position-size-height IS NOT INITIAL.
        lv_value = ls_drawing_position-size-height.
      ELSE.
        lv_value = '100'.
      ENDIF.
      CONDENSE lv_value.
      REPLACE '{HEIGHT}' IN lv_content_center WITH lv_value.
      IF ls_drawing_position-size-width IS NOT INITIAL.
        lv_value = ls_drawing_position-size-width.
      ELSE.
        lv_value = '100'.
      ENDIF.
      CONDENSE lv_value.
      REPLACE '{WIDTH}' IN lv_content_center WITH lv_value.
      lv_content_image_center = lc_shape_image.
      lv_value = is_footer-center_image->get_index( ).
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.
      REPLACE '{RID}' IN lv_content_image_center WITH lv_value.
    ENDIF.
    IF is_footer-right_image IS NOT INITIAL.
      lv_content_right = lc_shape.
      REPLACE '{ID}' IN lv_content_right WITH lc_shape_footer_right.
      ls_drawing_position = is_footer-left_image->get_position( ).
      IF ls_drawing_position-size-height IS NOT INITIAL.
        lv_value = ls_drawing_position-size-height.
      ELSE.
        lv_value = '100'.
      ENDIF.
      CONDENSE lv_value.
      REPLACE '{HEIGHT}' IN lv_content_right WITH lv_value.
      IF ls_drawing_position-size-width IS NOT INITIAL.
        lv_value = ls_drawing_position-size-width.
      ELSE.
        lv_value = '100'.
      ENDIF.
      CONDENSE lv_value.
      REPLACE '{WIDTH}' IN lv_content_right WITH lv_value.
      lv_content_image_right = lc_shape_image.
      lv_value = is_footer-right_image->get_index( ).
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.
      REPLACE '{RID}' IN lv_content_image_right WITH lv_value.
    ENDIF.

    CONCATENATE lv_content_left
                lv_content_image_left
                lv_content_center
                lv_content_image_center
                lv_content_right
                lv_content_image_right
           INTO ep_content.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->SET_VML_SHAPE_HEADER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_HEADER                      TYPE        ZEXCEL_S_WORKSHEET_HEAD_FOOT
* | [<-()] EP_CONTENT                     TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_vml_shape_header.

*  CONSTANTS: lc_shape TYPE string VALUE '<v:shape id="{ID}" o:spid="_x0000_s1025" type="#_x0000_t75" style=''position:absolute;margin-left:0;margin-top:0;width:198.75pt;height:48.75pt; z-index:1''>',
    CONSTANTS: lc_shape               TYPE string VALUE '<v:shape id="{ID}" o:spid="_x0000_s1025" type="#_x0000_t75" style=''position:absolute;margin-left:0;margin-top:0;width:{WIDTH}pt;height:{HEIGHT}pt; z-index:1''>',
               lc_shape_image         TYPE string VALUE '<v:imagedata o:relid="{RID}" o:title="Logo Title"/><o:lock v:ext="edit" rotation="t"/></v:shape>',
               lc_shape_header_center TYPE string VALUE 'CH',
               lc_shape_header_left   TYPE string VALUE 'LH',
               lc_shape_header_right  TYPE string VALUE 'RH',
               lc_shape_footer_center TYPE string VALUE 'CF',
               lc_shape_footer_left   TYPE string VALUE 'LF',
               lc_shape_footer_right  TYPE string VALUE 'RF'.

    DATA: lv_content_left         TYPE string,
          lv_content_center       TYPE string,
          lv_content_right        TYPE string,
          lv_content_image_left   TYPE string,
          lv_content_image_center TYPE string,
          lv_content_image_right  TYPE string,
          lv_value                TYPE string,
          ls_drawing_position     TYPE zexcel_drawing_position.

    CLEAR ep_content.

    IF is_header-left_image IS NOT INITIAL.
      lv_content_left = lc_shape.
      REPLACE '{ID}' IN lv_content_left WITH lc_shape_header_left.
      ls_drawing_position = is_header-left_image->get_position( ).
      IF ls_drawing_position-size-height IS NOT INITIAL.
        lv_value = ls_drawing_position-size-height.
      ELSE.
        lv_value = '100'.
      ENDIF.
      CONDENSE lv_value.
      REPLACE '{HEIGHT}' IN lv_content_left WITH lv_value.
      IF ls_drawing_position-size-width IS NOT INITIAL.
        lv_value = ls_drawing_position-size-width.
      ELSE.
        lv_value = '100'.
      ENDIF.
      CONDENSE lv_value.
      REPLACE '{WIDTH}' IN lv_content_left WITH lv_value.
      lv_content_image_left = lc_shape_image.
      lv_value = is_header-left_image->get_index( ).
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.
      REPLACE '{RID}' IN lv_content_image_left WITH lv_value.
    ENDIF.
    IF is_header-center_image IS NOT INITIAL.
      lv_content_center = lc_shape.
      REPLACE '{ID}' IN lv_content_center WITH lc_shape_header_center.
      ls_drawing_position = is_header-center_image->get_position( ).
      IF ls_drawing_position-size-height IS NOT INITIAL.
        lv_value = ls_drawing_position-size-height.
      ELSE.
        lv_value = '100'.
      ENDIF.
      CONDENSE lv_value.
      REPLACE '{HEIGHT}' IN lv_content_center WITH lv_value.
      IF ls_drawing_position-size-width IS NOT INITIAL.
        lv_value = ls_drawing_position-size-width.
      ELSE.
        lv_value = '100'.
      ENDIF.
      CONDENSE lv_value.
      REPLACE '{WIDTH}' IN lv_content_center WITH lv_value.
      lv_content_image_center = lc_shape_image.
      lv_value = is_header-center_image->get_index( ).
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.
      REPLACE '{RID}' IN lv_content_image_center WITH lv_value.
    ENDIF.
    IF is_header-right_image IS NOT INITIAL.
      lv_content_right = lc_shape.
      REPLACE '{ID}' IN lv_content_right WITH lc_shape_header_right.
      ls_drawing_position = is_header-right_image->get_position( ).
      IF ls_drawing_position-size-height IS NOT INITIAL.
        lv_value = ls_drawing_position-size-height.
      ELSE.
        lv_value = '100'.
      ENDIF.
      CONDENSE lv_value.
      REPLACE '{HEIGHT}' IN lv_content_right WITH lv_value.
      IF ls_drawing_position-size-width IS NOT INITIAL.
        lv_value = ls_drawing_position-size-width.
      ELSE.
        lv_value = '100'.
      ENDIF.
      CONDENSE lv_value.
      REPLACE '{WIDTH}' IN lv_content_right WITH lv_value.
      lv_content_image_right = lc_shape_image.
      lv_value = is_header-right_image->get_index( ).
      CONDENSE lv_value.
      CONCATENATE 'rId' lv_value INTO lv_value.
      REPLACE '{RID}' IN lv_content_image_right WITH lv_value.
    ENDIF.

    CONCATENATE lv_content_left
                lv_content_image_left
                lv_content_center
                lv_content_image_center
                lv_content_right
                lv_content_image_right
           INTO ep_content.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_EXCEL_WRITER_2007->SET_VML_STRING
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EP_CONTENT                     TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_vml_string.

    DATA:
      ld_1           TYPE string,
      ld_2           TYPE string,
      ld_3           TYPE string,
      ld_4           TYPE string,
      ld_5           TYPE string,
      ld_6           TYPE string,
      ld_7           TYPE string,

      lv_value       TYPE string,
      lv_relation_id TYPE i,
      lo_iterator    TYPE REF TO cl_object_collection_iterator,
      lo_drawing     TYPE REF TO zcl_excel_drawing,
      lo_worksheet   TYPE REF TO zcl_excel_worksheet,
      ls_odd_header  TYPE zexcel_s_worksheet_head_foot,
      ls_odd_footer  TYPE zexcel_s_worksheet_head_foot,
      ls_even_header TYPE zexcel_s_worksheet_head_foot,
      ls_even_footer TYPE zexcel_s_worksheet_head_foot.


* INIT_RESULT
    CLEAR ep_content.


* BODY
    ld_1 = '<xml xmlns:v="urn:schemas-microsoft-com:vml"  xmlns:o="urn:schemas-microsoft-com:office:office"  xmlns:x="urn:schemas-microsoft-com:office:excel"><o:shapelayout v:ext="edit"><o:idmap v:ext="edit" data="1"/></o:shapelayout>'.
    ld_2 = '<v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"/><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"/>'.
    ld_3 = '<v:f eqn="sum @0 1 0"/><v:f eqn="sum 0 0 @1"/><v:f eqn="prod @2 1 2"/><v:f eqn="prod @3 21600 pixelWidth"/><v:f eqn="prod @3 21600 pixelHeight"/><v:f eqn="sum @0 0 1"/><v:f eqn="prod @6 1 2"/><v:f eqn="prod @7 21600 pixelWidth"/>'.
    ld_4 = '<v:f eqn="sum @8 21600 0"/><v:f eqn="prod @7 21600 pixelHeight"/><v:f eqn="sum @10 21600 0"/></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/><o:lock v:ext="edit" aspectratio="t"/></v:shapetype>'.


    CONCATENATE ld_1
                ld_2
                ld_3
                ld_4
         INTO ep_content.

    lv_relation_id = 0.
    lo_iterator = me->excel->get_worksheets_iterator( ).
    WHILE lo_iterator->if_object_collection_iterator~has_next( ) EQ abap_true.
      lo_worksheet ?= lo_iterator->if_object_collection_iterator~get_next( ).

      lo_worksheet->sheet_setup->get_header_footer( IMPORTING ep_odd_header = ls_odd_header
                                                              ep_odd_footer = ls_odd_footer
                                                              ep_even_header = ls_even_header
                                                              ep_even_footer = ls_even_footer ).

      ld_5 = me->set_vml_shape_header( ls_odd_header ).
      CONCATENATE ep_content
                  ld_5
             INTO ep_content.
      ld_5 = me->set_vml_shape_header( ls_even_header ).
      CONCATENATE ep_content
                  ld_5
             INTO ep_content.
      ld_5 = me->set_vml_shape_footer( ls_odd_footer ).
      CONCATENATE ep_content
                  ld_5
             INTO ep_content.
      ld_5 = me->set_vml_shape_footer( ls_even_footer ).
      CONCATENATE ep_content
                  ld_5
             INTO ep_content.
    ENDWHILE.

    ld_7 = '</xml>'.

    CONCATENATE ep_content
                ld_7
           INTO ep_content.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_EXCEL_WRITER_2007->ZIF_EXCEL_WRITER~WRITE_FILE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_EXCEL                       TYPE REF TO ZCL_EXCEL
* | [<-()] EP_FILE                        TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_excel_writer~write_file.
    me->excel = io_excel.

    ep_file = me->create( ).
  ENDMETHOD.
ENDCLASS.
